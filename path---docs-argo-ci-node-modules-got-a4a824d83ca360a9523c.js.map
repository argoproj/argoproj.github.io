{"version":3,"sources":["webpack:///path---docs-argo-ci-node-modules-got-a4a824d83ca360a9523c.js","webpack:///./.cache/json/docs-argo-ci-node-modules-got.json"],"names":["webpackJsonp","2664","module","exports","pathContext","docHtml","docPath","proj"],"mappings":"AAAAA,cAAc,iBAERC,KACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,aAAeC,QAAA,uhYAAgtXC,QAAA,kCAAAC,KAAA","file":"path---docs-argo-ci-node-modules-got-a4a824d83ca360a9523c.js","sourcesContent":["webpackJsonp([173367396702272],{\n\n/***/ 2664:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"pathContext\":{\"docHtml\":\"<h1 align=\\\"center\\\">\\n\\t<br>\\n\\t<img width=\\\"360\\\" src=\\\"https://rawgit.com/sindresorhus/got/master/media/logo.svg\\\" alt=\\\"got\\\">\\n\\t<br>\\n\\t<br>\\n\\t<br>\\n</h1>\\n<blockquote>\\n<p>Simplified HTTP requests</p>\\n</blockquote>\\n<p><a href=\\\"https://travis-ci.org/sindresorhus/got\\\"><img src=\\\"https://travis-ci.org/sindresorhus/got.svg?branch=master\\\" alt=\\\"Build Status\\\"></a> <a href=\\\"https://coveralls.io/github/sindresorhus/got?branch=master\\\"><img src=\\\"https://coveralls.io/repos/github/sindresorhus/got/badge.svg?branch=master\\\" alt=\\\"Coverage Status\\\"></a> <a href=\\\"https://npmjs.com/got\\\"><img src=\\\"https://img.shields.io/npm/dm/got.svg\\\" alt=\\\"Downloads\\\"></a></p>\\n<p>A nicer interface to the built-in <a href=\\\"http://nodejs.org/api/http.html\\\"><code>http</code></a> module.</p>\\n<p>It supports following redirects, promises, streams, retries, automagically handling gzip/deflate and some convenience options.</p>\\n<p>Created because <a href=\\\"https://github.com/request/request\\\"><code>request</code></a> is bloated <em>(several megabytes!)</em>.</p>\\n<h2>Install</h2>\\n<p><strong>WARNING: Node.js 4 or higher is required for got@6 and above.</strong> For older Node.js versions use <a href=\\\"https://github.com/sindresorhus/got/tree/v5.x\\\">got@5</a>.</p>\\n<pre><code>$ npm install --save got\\n</code></pre>\\n<h2>Usage</h2>\\n<pre><code class=\\\"language-js\\\">const fs = require('fs');\\nconst got = require('got');\\n\\ngot('todomvc.com')\\n    .then(response => {\\n        console.log(response.body);\\n        //=> '&#x3C;!doctype html> ...'\\n    })\\n    .catch(error => {\\n        console.log(error.response.body);\\n        //=> 'Internal server error ...'\\n    });\\n\\n// Streams\\ngot.stream('todomvc.com').pipe(fs.createWriteStream('index.html'));\\n\\n// For POST, PUT and PATCH methods got.stream returns a WritableStream\\nfs.createReadStream('index.html').pipe(got.stream.post('todomvc.com'));\\n</code></pre>\\n<h3>API</h3>\\n<p>It's a <code>GET</code> request by default, but can be changed in <code>options</code>.</p>\\n<h4>got(url, [options])</h4>\\n<p>Returns a Promise for a <code>response</code> object with a <code>body</code> property, a <code>url</code> property with the request URL or the final URL after redirects, and a <code>requestUrl</code> property with the original request URL.</p>\\n<h5>url</h5>\\n<p>Type: <code>string</code>, <code>object</code></p>\\n<p>The URL to request or a <a href=\\\"https://nodejs.org/api/http.html#http_http_request_options_callback\\\"><code>http.request</code> options</a> object.</p>\\n<p>Properties from <code>options</code> will override properties in the parsed <code>url</code>.</p>\\n<h5>options</h5>\\n<p>Type: <code>object</code></p>\\n<p>Any of the <a href=\\\"http://nodejs.org/api/http.html#http_http_request_options_callback\\\"><code>http.request</code></a> options.</p>\\n<h6>body</h6>\\n<p>Type: <code>string</code>, <code>buffer</code>, <code>readableStream</code>, <code>object</code></p>\\n<p><em>This is mutually exclusive with stream mode.</em></p>\\n<p>Body that will be sent with a <code>POST</code> request.</p>\\n<p>If present in <code>options</code> and <code>options.method</code> is not set, <code>options.method</code> will be set to <code>POST</code>.</p>\\n<p>If <code>content-length</code> or <code>transfer-encoding</code> is not set in <code>options.headers</code> and <code>body</code> is a string or buffer, <code>content-length</code> will be set to the body length.</p>\\n<p>If <code>body</code> is a plain object, it will be stringified with <a href=\\\"https://nodejs.org/api/querystring.html#querystring_querystring_stringify_obj_sep_eq_options\\\"><code>querystring.stringify</code></a> and sent as <code>application/x-www-form-urlencoded</code>.</p>\\n<h6>encoding</h6>\\n<p>Type: <code>string</code>, <code>null</code><br>\\nDefault: <code>'utf8'</code></p>\\n<p>Encoding to be used on <code>setEncoding</code> of the response data. If <code>null</code>, the body is returned as a Buffer.</p>\\n<h6>json</h6>\\n<p>Type: <code>boolean</code><br>\\nDefault: <code>false</code></p>\\n<p><em>This is mutually exclusive with stream mode.</em></p>\\n<p>Parse response body with <code>JSON.parse</code> and set <code>accept</code> header to <code>application/json</code>.</p>\\n<h6>query</h6>\\n<p>Type: <code>string</code>, <code>object</code><br></p>\\n<p>Query string object that will be added to the request URL. This will override the query string in <code>url</code>.</p>\\n<h6>timeout</h6>\\n<p>Type: <code>number</code>, <code>object</code></p>\\n<p>Milliseconds to wait for a server to send response headers before aborting request with <code>ETIMEDOUT</code> error.</p>\\n<p>Option accepts <code>object</code> with separate <code>connect</code> and <code>socket</code> fields for connection and socket inactivity timeouts.</p>\\n<h6>retries</h6>\\n<p>Type: <code>number</code>, <code>function</code><br>\\nDefault: <code>5</code></p>\\n<p>Number of request retries when network errors happens. Delays between retries counts with function <code>1000 * Math.pow(2, retry) + Math.random() * 100</code>, where <code>retry</code> is attempt number (starts from 0).</p>\\n<p>Option accepts <code>function</code> with <code>retry</code> and <code>error</code> arguments. Function must return delay in milliseconds (<code>0</code> return value cancels retry).</p>\\n<p><strong>Note:</strong> if <code>retries</code> is <code>number</code>, <code>ENOTFOUND</code> and <code>ENETUNREACH</code> error will not be retried (see full list in <a href=\\\"https://github.com/floatdrop/is-retry-allowed/blob/master/index.js#L12\\\"><code>is-retry-allowed</code></a> module).</p>\\n<h6>followRedirect</h6>\\n<p>Type: <code>boolean</code><br>\\nDefault: <code>true</code></p>\\n<p>Defines if redirect responses should be followed automatically.</p>\\n<h4>Streams</h4>\\n<h4>got.stream(url, [options])</h4>\\n<p><code>stream</code> method will return Duplex stream with additional events:</p>\\n<h5>.on('request', request)</h5>\\n<p><code>request</code> event to get the request object of the request.</p>\\n<p><strong>Tip</strong>: You can use <code>request</code> event to abort request:</p>\\n<pre><code class=\\\"language-js\\\">got.stream('github.com')\\n    .on('request', req => setTimeout(() => req.abort(), 50));\\n</code></pre>\\n<h5>.on('response', response)</h5>\\n<p><code>response</code> event to get the response object of the final request.</p>\\n<h5>.on('redirect', response, nextOptions)</h5>\\n<p><code>redirect</code> event to get the response object of a redirect. The second argument is options for the next request to the redirect location.</p>\\n<h5>.on('error', error, body, response)</h5>\\n<p><code>error</code> event emitted in case of protocol error (like <code>ENOTFOUND</code> etc.) or status error (4xx or 5xx). The second argument is the body of the server response in case of status error. The third argument is response object.</p>\\n<h4>got.get(url, [options])</h4>\\n<h4>got.post(url, [options])</h4>\\n<h4>got.put(url, [options])</h4>\\n<h4>got.patch(url, [options])</h4>\\n<h4>got.head(url, [options])</h4>\\n<h4>got.delete(url, [options])</h4>\\n<p>Sets <code>options.method</code> to the method name and makes a request.</p>\\n<h2>Errors</h2>\\n<p>Each error contains (if available) <code>statusCode</code>, <code>statusMessage</code>, <code>host</code>, <code>hostname</code>, <code>method</code> and <code>path</code> properties to make debugging easier.</p>\\n<p>In Promise mode, the <code>response</code> is attached to the error.</p>\\n<h4>got.RequestError</h4>\\n<p>When a request fails. Contains a <code>code</code> property with error class code, like <code>ECONNREFUSED</code>.</p>\\n<h4>got.ReadError</h4>\\n<p>When reading from response stream fails.</p>\\n<h4>got.ParseError</h4>\\n<p>When <code>json</code> option is enabled and <code>JSON.parse</code> fails.</p>\\n<h4>got.HTTPError</h4>\\n<p>When server response code is not 2xx. Contains <code>statusCode</code> and <code>statusMessage</code>.</p>\\n<h4>got.MaxRedirectsError</h4>\\n<p>When server redirects you more than 10 times.</p>\\n<h2>Proxies</h2>\\n<p>You can use the <a href=\\\"https://github.com/koichik/node-tunnel\\\"><code>tunnel</code></a> module with the <code>agent</code> option to work with proxies:</p>\\n<pre><code class=\\\"language-js\\\">const got = require('got');\\nconst tunnel = require('tunnel');\\n\\ngot('todomvc.com', {\\n    agent: tunnel.httpOverHttp({\\n        proxy: {\\n            host: 'localhost'\\n        }\\n    })\\n});\\n</code></pre>\\n<h2>Cookies</h2>\\n<p>You can use the <a href=\\\"https://github.com/jshttp/cookie\\\"><code>cookie</code></a> module to include cookies in a request:</p>\\n<pre><code class=\\\"language-js\\\">const got = require('got');\\nconst cookie = require('cookie');\\n\\ngot('google.com', {\\n    headers: {\\n        cookie: cookie.serialize('foo', 'bar')\\n    }\\n});\\n</code></pre>\\n<h2>Form data</h2>\\n<p>You can use the <a href=\\\"https://github.com/form-data/form-data\\\"><code>form-data</code></a> module to create POST request with form data:</p>\\n<pre><code class=\\\"language-js\\\">const fs = require('fs');\\nconst got = require('got');\\nconst FormData = require('form-data');\\nconst form = new FormData();\\n\\nform.append('my_file', fs.createReadStream('/foo/bar.jpg'));\\n\\ngot.post('google.com', {\\n    body: form\\n});\\n</code></pre>\\n<h2>OAuth</h2>\\n<p>You can use the <a href=\\\"https://github.com/ddo/oauth-1.0a\\\"><code>oauth-1.0a</code></a> module to create a signed OAuth request:</p>\\n<pre><code class=\\\"language-js\\\">const got = require('got');\\nconst crypto  = require('crypto');\\nconst OAuth = require('oauth-1.0a');\\n\\nconst oauth = OAuth({\\n    consumer: {\\n        key: process.env.CONSUMER_KEY,\\n        secret: process.env.CONSUMER_SECRET\\n    },\\n    signature_method: 'HMAC-SHA1',\\n    hash_function: (baseString, key) => crypto.createHmac('sha1', key).update(baseString).digest('base64')\\n});\\n\\nconst token = {\\n    key: process.env.ACCESS_TOKEN,\\n    secret: process.env.ACCESS_TOKEN_SECRET\\n};\\n\\nconst url = 'https://api.twitter.com/1.1/statuses/home_timeline.json';\\n\\ngot(url, {\\n    headers: oauth.toHeader(oauth.authorize({url, method: 'GET'}, token)),\\n    json: true\\n});\\n</code></pre>\\n<h2>Unix Domain Sockets</h2>\\n<p>Requests can also be sent via <a href=\\\"http://serverfault.com/questions/124517/whats-the-difference-between-unix-socket-and-tcp-ip-socket\\\">unix domain sockets</a>. Use the following URL scheme: <code>PROTOCOL://unix:SOCKET:PATH</code>.</p>\\n<ul>\\n<li><code>PROTOCOL</code> - <code>http</code> or <code>https</code> <em>(optional)</em></li>\\n<li><code>SOCKET</code> - absolute path to a unix domain socket, e.g. <code>/var/run/docker.sock</code></li>\\n<li><code>PATH</code> - request path, e.g. <code>/v2/keys</code></li>\\n</ul>\\n<pre><code class=\\\"language-js\\\">got('http://unix:/var/run/docker.sock:/containers/json');\\n\\n// or without protocol (http by default)\\ngot('unix:/var/run/docker.sock:/containers/json');\\n</code></pre>\\n<h2>Tip</h2>\\n<p>It's a good idea to set the <code>'user-agent'</code> header so the provider can more easily see how their resource is used. By default, it's the URL to this repo.</p>\\n<pre><code class=\\\"language-js\\\">const got = require('got');\\nconst pkg = require('./package.json');\\n\\ngot('todomvc.com', {\\n    headers: {\\n        'user-agent': `my-module/${pkg.version} (https://github.com/username/my-module)`\\n    }\\n});\\n</code></pre>\\n<h2>Related</h2>\\n<ul>\\n<li><a href=\\\"https://github.com/sindresorhus/gh-got\\\">gh-got</a> - Convenience wrapper for interacting with the GitHub API</li>\\n<li><a href=\\\"https://github.com/samverschueren/travis-got\\\">travis-got</a> - Convenience wrapper for interacting with the Travis API</li>\\n</ul>\\n<h2>Created by</h2>\\n<table>\\n<thead>\\n<tr>\\n<th><a href=\\\"https://sindresorhus.com\\\"><img src=\\\"https://avatars.githubusercontent.com/u/170270?v=3&#x26;s=100\\\" alt=\\\"Sindre Sorhus\\\"></a></th>\\n<th><a href=\\\"https://github.com/floatdrop\\\"><img src=\\\"https://avatars.githubusercontent.com/u/365089?v=3&#x26;s=100\\\" alt=\\\"Vsevolod Strukchinsky\\\"></a></th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><a href=\\\"https://sindresorhus.com\\\">Sindre Sorhus</a></td>\\n<td><a href=\\\"https://github.com/floatdrop\\\">Vsevolod Strukchinsky</a></td>\\n</tr>\\n</tbody>\\n</table>\\n<h2>License</h2>\\n<p>MIT © <a href=\\\"https://sindresorhus.com\\\">Sindre Sorhus</a></p>\",\"docPath\":\"argo-ci/node_modules/got/readme\",\"proj\":\"argo-ci\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---docs-argo-ci-node-modules-got-a4a824d83ca360a9523c.js","module.exports = {\"pathContext\":{\"docHtml\":\"<h1 align=\\\"center\\\">\\n\\t<br>\\n\\t<img width=\\\"360\\\" src=\\\"https://rawgit.com/sindresorhus/got/master/media/logo.svg\\\" alt=\\\"got\\\">\\n\\t<br>\\n\\t<br>\\n\\t<br>\\n</h1>\\n<blockquote>\\n<p>Simplified HTTP requests</p>\\n</blockquote>\\n<p><a href=\\\"https://travis-ci.org/sindresorhus/got\\\"><img src=\\\"https://travis-ci.org/sindresorhus/got.svg?branch=master\\\" alt=\\\"Build Status\\\"></a> <a href=\\\"https://coveralls.io/github/sindresorhus/got?branch=master\\\"><img src=\\\"https://coveralls.io/repos/github/sindresorhus/got/badge.svg?branch=master\\\" alt=\\\"Coverage Status\\\"></a> <a href=\\\"https://npmjs.com/got\\\"><img src=\\\"https://img.shields.io/npm/dm/got.svg\\\" alt=\\\"Downloads\\\"></a></p>\\n<p>A nicer interface to the built-in <a href=\\\"http://nodejs.org/api/http.html\\\"><code>http</code></a> module.</p>\\n<p>It supports following redirects, promises, streams, retries, automagically handling gzip/deflate and some convenience options.</p>\\n<p>Created because <a href=\\\"https://github.com/request/request\\\"><code>request</code></a> is bloated <em>(several megabytes!)</em>.</p>\\n<h2>Install</h2>\\n<p><strong>WARNING: Node.js 4 or higher is required for got@6 and above.</strong> For older Node.js versions use <a href=\\\"https://github.com/sindresorhus/got/tree/v5.x\\\">got@5</a>.</p>\\n<pre><code>$ npm install --save got\\n</code></pre>\\n<h2>Usage</h2>\\n<pre><code class=\\\"language-js\\\">const fs = require('fs');\\nconst got = require('got');\\n\\ngot('todomvc.com')\\n    .then(response => {\\n        console.log(response.body);\\n        //=> '&#x3C;!doctype html> ...'\\n    })\\n    .catch(error => {\\n        console.log(error.response.body);\\n        //=> 'Internal server error ...'\\n    });\\n\\n// Streams\\ngot.stream('todomvc.com').pipe(fs.createWriteStream('index.html'));\\n\\n// For POST, PUT and PATCH methods got.stream returns a WritableStream\\nfs.createReadStream('index.html').pipe(got.stream.post('todomvc.com'));\\n</code></pre>\\n<h3>API</h3>\\n<p>It's a <code>GET</code> request by default, but can be changed in <code>options</code>.</p>\\n<h4>got(url, [options])</h4>\\n<p>Returns a Promise for a <code>response</code> object with a <code>body</code> property, a <code>url</code> property with the request URL or the final URL after redirects, and a <code>requestUrl</code> property with the original request URL.</p>\\n<h5>url</h5>\\n<p>Type: <code>string</code>, <code>object</code></p>\\n<p>The URL to request or a <a href=\\\"https://nodejs.org/api/http.html#http_http_request_options_callback\\\"><code>http.request</code> options</a> object.</p>\\n<p>Properties from <code>options</code> will override properties in the parsed <code>url</code>.</p>\\n<h5>options</h5>\\n<p>Type: <code>object</code></p>\\n<p>Any of the <a href=\\\"http://nodejs.org/api/http.html#http_http_request_options_callback\\\"><code>http.request</code></a> options.</p>\\n<h6>body</h6>\\n<p>Type: <code>string</code>, <code>buffer</code>, <code>readableStream</code>, <code>object</code></p>\\n<p><em>This is mutually exclusive with stream mode.</em></p>\\n<p>Body that will be sent with a <code>POST</code> request.</p>\\n<p>If present in <code>options</code> and <code>options.method</code> is not set, <code>options.method</code> will be set to <code>POST</code>.</p>\\n<p>If <code>content-length</code> or <code>transfer-encoding</code> is not set in <code>options.headers</code> and <code>body</code> is a string or buffer, <code>content-length</code> will be set to the body length.</p>\\n<p>If <code>body</code> is a plain object, it will be stringified with <a href=\\\"https://nodejs.org/api/querystring.html#querystring_querystring_stringify_obj_sep_eq_options\\\"><code>querystring.stringify</code></a> and sent as <code>application/x-www-form-urlencoded</code>.</p>\\n<h6>encoding</h6>\\n<p>Type: <code>string</code>, <code>null</code><br>\\nDefault: <code>'utf8'</code></p>\\n<p>Encoding to be used on <code>setEncoding</code> of the response data. If <code>null</code>, the body is returned as a Buffer.</p>\\n<h6>json</h6>\\n<p>Type: <code>boolean</code><br>\\nDefault: <code>false</code></p>\\n<p><em>This is mutually exclusive with stream mode.</em></p>\\n<p>Parse response body with <code>JSON.parse</code> and set <code>accept</code> header to <code>application/json</code>.</p>\\n<h6>query</h6>\\n<p>Type: <code>string</code>, <code>object</code><br></p>\\n<p>Query string object that will be added to the request URL. This will override the query string in <code>url</code>.</p>\\n<h6>timeout</h6>\\n<p>Type: <code>number</code>, <code>object</code></p>\\n<p>Milliseconds to wait for a server to send response headers before aborting request with <code>ETIMEDOUT</code> error.</p>\\n<p>Option accepts <code>object</code> with separate <code>connect</code> and <code>socket</code> fields for connection and socket inactivity timeouts.</p>\\n<h6>retries</h6>\\n<p>Type: <code>number</code>, <code>function</code><br>\\nDefault: <code>5</code></p>\\n<p>Number of request retries when network errors happens. Delays between retries counts with function <code>1000 * Math.pow(2, retry) + Math.random() * 100</code>, where <code>retry</code> is attempt number (starts from 0).</p>\\n<p>Option accepts <code>function</code> with <code>retry</code> and <code>error</code> arguments. Function must return delay in milliseconds (<code>0</code> return value cancels retry).</p>\\n<p><strong>Note:</strong> if <code>retries</code> is <code>number</code>, <code>ENOTFOUND</code> and <code>ENETUNREACH</code> error will not be retried (see full list in <a href=\\\"https://github.com/floatdrop/is-retry-allowed/blob/master/index.js#L12\\\"><code>is-retry-allowed</code></a> module).</p>\\n<h6>followRedirect</h6>\\n<p>Type: <code>boolean</code><br>\\nDefault: <code>true</code></p>\\n<p>Defines if redirect responses should be followed automatically.</p>\\n<h4>Streams</h4>\\n<h4>got.stream(url, [options])</h4>\\n<p><code>stream</code> method will return Duplex stream with additional events:</p>\\n<h5>.on('request', request)</h5>\\n<p><code>request</code> event to get the request object of the request.</p>\\n<p><strong>Tip</strong>: You can use <code>request</code> event to abort request:</p>\\n<pre><code class=\\\"language-js\\\">got.stream('github.com')\\n    .on('request', req => setTimeout(() => req.abort(), 50));\\n</code></pre>\\n<h5>.on('response', response)</h5>\\n<p><code>response</code> event to get the response object of the final request.</p>\\n<h5>.on('redirect', response, nextOptions)</h5>\\n<p><code>redirect</code> event to get the response object of a redirect. The second argument is options for the next request to the redirect location.</p>\\n<h5>.on('error', error, body, response)</h5>\\n<p><code>error</code> event emitted in case of protocol error (like <code>ENOTFOUND</code> etc.) or status error (4xx or 5xx). The second argument is the body of the server response in case of status error. The third argument is response object.</p>\\n<h4>got.get(url, [options])</h4>\\n<h4>got.post(url, [options])</h4>\\n<h4>got.put(url, [options])</h4>\\n<h4>got.patch(url, [options])</h4>\\n<h4>got.head(url, [options])</h4>\\n<h4>got.delete(url, [options])</h4>\\n<p>Sets <code>options.method</code> to the method name and makes a request.</p>\\n<h2>Errors</h2>\\n<p>Each error contains (if available) <code>statusCode</code>, <code>statusMessage</code>, <code>host</code>, <code>hostname</code>, <code>method</code> and <code>path</code> properties to make debugging easier.</p>\\n<p>In Promise mode, the <code>response</code> is attached to the error.</p>\\n<h4>got.RequestError</h4>\\n<p>When a request fails. Contains a <code>code</code> property with error class code, like <code>ECONNREFUSED</code>.</p>\\n<h4>got.ReadError</h4>\\n<p>When reading from response stream fails.</p>\\n<h4>got.ParseError</h4>\\n<p>When <code>json</code> option is enabled and <code>JSON.parse</code> fails.</p>\\n<h4>got.HTTPError</h4>\\n<p>When server response code is not 2xx. Contains <code>statusCode</code> and <code>statusMessage</code>.</p>\\n<h4>got.MaxRedirectsError</h4>\\n<p>When server redirects you more than 10 times.</p>\\n<h2>Proxies</h2>\\n<p>You can use the <a href=\\\"https://github.com/koichik/node-tunnel\\\"><code>tunnel</code></a> module with the <code>agent</code> option to work with proxies:</p>\\n<pre><code class=\\\"language-js\\\">const got = require('got');\\nconst tunnel = require('tunnel');\\n\\ngot('todomvc.com', {\\n    agent: tunnel.httpOverHttp({\\n        proxy: {\\n            host: 'localhost'\\n        }\\n    })\\n});\\n</code></pre>\\n<h2>Cookies</h2>\\n<p>You can use the <a href=\\\"https://github.com/jshttp/cookie\\\"><code>cookie</code></a> module to include cookies in a request:</p>\\n<pre><code class=\\\"language-js\\\">const got = require('got');\\nconst cookie = require('cookie');\\n\\ngot('google.com', {\\n    headers: {\\n        cookie: cookie.serialize('foo', 'bar')\\n    }\\n});\\n</code></pre>\\n<h2>Form data</h2>\\n<p>You can use the <a href=\\\"https://github.com/form-data/form-data\\\"><code>form-data</code></a> module to create POST request with form data:</p>\\n<pre><code class=\\\"language-js\\\">const fs = require('fs');\\nconst got = require('got');\\nconst FormData = require('form-data');\\nconst form = new FormData();\\n\\nform.append('my_file', fs.createReadStream('/foo/bar.jpg'));\\n\\ngot.post('google.com', {\\n    body: form\\n});\\n</code></pre>\\n<h2>OAuth</h2>\\n<p>You can use the <a href=\\\"https://github.com/ddo/oauth-1.0a\\\"><code>oauth-1.0a</code></a> module to create a signed OAuth request:</p>\\n<pre><code class=\\\"language-js\\\">const got = require('got');\\nconst crypto  = require('crypto');\\nconst OAuth = require('oauth-1.0a');\\n\\nconst oauth = OAuth({\\n    consumer: {\\n        key: process.env.CONSUMER_KEY,\\n        secret: process.env.CONSUMER_SECRET\\n    },\\n    signature_method: 'HMAC-SHA1',\\n    hash_function: (baseString, key) => crypto.createHmac('sha1', key).update(baseString).digest('base64')\\n});\\n\\nconst token = {\\n    key: process.env.ACCESS_TOKEN,\\n    secret: process.env.ACCESS_TOKEN_SECRET\\n};\\n\\nconst url = 'https://api.twitter.com/1.1/statuses/home_timeline.json';\\n\\ngot(url, {\\n    headers: oauth.toHeader(oauth.authorize({url, method: 'GET'}, token)),\\n    json: true\\n});\\n</code></pre>\\n<h2>Unix Domain Sockets</h2>\\n<p>Requests can also be sent via <a href=\\\"http://serverfault.com/questions/124517/whats-the-difference-between-unix-socket-and-tcp-ip-socket\\\">unix domain sockets</a>. Use the following URL scheme: <code>PROTOCOL://unix:SOCKET:PATH</code>.</p>\\n<ul>\\n<li><code>PROTOCOL</code> - <code>http</code> or <code>https</code> <em>(optional)</em></li>\\n<li><code>SOCKET</code> - absolute path to a unix domain socket, e.g. <code>/var/run/docker.sock</code></li>\\n<li><code>PATH</code> - request path, e.g. <code>/v2/keys</code></li>\\n</ul>\\n<pre><code class=\\\"language-js\\\">got('http://unix:/var/run/docker.sock:/containers/json');\\n\\n// or without protocol (http by default)\\ngot('unix:/var/run/docker.sock:/containers/json');\\n</code></pre>\\n<h2>Tip</h2>\\n<p>It's a good idea to set the <code>'user-agent'</code> header so the provider can more easily see how their resource is used. By default, it's the URL to this repo.</p>\\n<pre><code class=\\\"language-js\\\">const got = require('got');\\nconst pkg = require('./package.json');\\n\\ngot('todomvc.com', {\\n    headers: {\\n        'user-agent': `my-module/${pkg.version} (https://github.com/username/my-module)`\\n    }\\n});\\n</code></pre>\\n<h2>Related</h2>\\n<ul>\\n<li><a href=\\\"https://github.com/sindresorhus/gh-got\\\">gh-got</a> - Convenience wrapper for interacting with the GitHub API</li>\\n<li><a href=\\\"https://github.com/samverschueren/travis-got\\\">travis-got</a> - Convenience wrapper for interacting with the Travis API</li>\\n</ul>\\n<h2>Created by</h2>\\n<table>\\n<thead>\\n<tr>\\n<th><a href=\\\"https://sindresorhus.com\\\"><img src=\\\"https://avatars.githubusercontent.com/u/170270?v=3&#x26;s=100\\\" alt=\\\"Sindre Sorhus\\\"></a></th>\\n<th><a href=\\\"https://github.com/floatdrop\\\"><img src=\\\"https://avatars.githubusercontent.com/u/365089?v=3&#x26;s=100\\\" alt=\\\"Vsevolod Strukchinsky\\\"></a></th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><a href=\\\"https://sindresorhus.com\\\">Sindre Sorhus</a></td>\\n<td><a href=\\\"https://github.com/floatdrop\\\">Vsevolod Strukchinsky</a></td>\\n</tr>\\n</tbody>\\n</table>\\n<h2>License</h2>\\n<p>MIT © <a href=\\\"https://sindresorhus.com\\\">Sindre Sorhus</a></p>\",\"docPath\":\"argo-ci/node_modules/got/readme\",\"proj\":\"argo-ci\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/docs-argo-ci-node-modules-got.json\n// module id = 2664\n// module chunks = 173367396702272"],"sourceRoot":""}