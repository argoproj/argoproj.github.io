{"version":3,"sources":["webpack:///path---docs-argo-ci-node-modules-fill-range-readme-html-1116e8c20408c458480d.js","webpack:///./.cache/json/docs-argo-ci-node-modules-fill-range-readme-html.json"],"names":["webpackJsonp","2332","module","exports","pathContext","docHtml","docPath","proj"],"mappings":"AAAAA,cAAc,iBAERC,KACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,aAAeC,QAAA,wxRAAonQC,QAAA,yCAAAC,KAAA","file":"path---docs-argo-ci-node-modules-fill-range-readme-html-1116e8c20408c458480d.js","sourcesContent":["webpackJsonp([71156435990262],{\n\n/***/ 2332:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"pathContext\":{\"docHtml\":\"<h1>fill-range <a href=\\\"http://badge.fury.io/js/fill-range\\\"><img src=\\\"https://badge.fury.io/js/fill-range.svg\\\" alt=\\\"NPM version\\\"></a>  <a href=\\\"https://travis-ci.org/jonschlinkert/fill-range\\\"><img src=\\\"https://travis-ci.org/jonschlinkert/fill-range.svg\\\" alt=\\\"Build Status\\\"></a></h1>\\n<blockquote>\\n<p>Fill in a range of numbers or letters, optionally passing an increment or multiplier to use.</p>\\n</blockquote>\\n<h2>Install with <a href=\\\"npmjs.org\\\">npm</a></h2>\\n<pre><code class=\\\"language-bash\\\">npm i fill-range --save\\n</code></pre>\\n<!-- toc -->\\n<ul>\\n<li>\\n<p><a href=\\\"#usage\\\">Usage</a></p>\\n<ul>\\n<li><a href=\\\"#invalid-ranges\\\">Invalid ranges</a></li>\\n<li><a href=\\\"#custom-function\\\">Custom function</a></li>\\n<li><a href=\\\"#special-characters\\\">Special characters</a></li>\\n<li><a href=\\\"#plus\\\">plus</a></li>\\n<li><a href=\\\"#pipe-and-tilde\\\">pipe and tilde</a></li>\\n<li><a href=\\\"#angle-bracket\\\">angle bracket</a></li>\\n<li><a href=\\\"#question-mark\\\">question mark</a></li>\\n</ul>\\n</li>\\n<li><a href=\\\"#other-useful-libs\\\">Other useful libs</a></li>\\n<li><a href=\\\"#running-tests\\\">Running tests</a></li>\\n<li><a href=\\\"#contributing\\\">Contributing</a></li>\\n<li><a href=\\\"#author\\\">Author</a></li>\\n<li><a href=\\\"#license\\\">License</a></li>\\n</ul>\\n<p><em>(Table of contents generated by [verb])</em></p>\\n<!-- tocstop -->\\n<h2>Usage</h2>\\n<pre><code class=\\\"language-js\\\">var range = require('fill-range');\\n\\nrange('a', 'e');\\n//=> ['a', 'b', 'c', 'd', 'e']\\n</code></pre>\\n<p><strong>Params</strong></p>\\n<pre><code class=\\\"language-js\\\">range(start, stop, step, options, fn);\\n</code></pre>\\n<ul>\\n<li><code>start</code>: <strong>{String|Number}</strong> the number or letter to start with</li>\\n<li><code>end</code>: <strong>{String|Number}</strong> the number or letter to end with</li>\\n<li><code>step</code>: <strong>{String|Number}</strong> optionally pass the step to use. works for letters or numbers.</li>\\n<li>\\n<p><code>options</code>: <strong>{Object}</strong>:</p>\\n<ul>\\n<li><code>makeRe</code>: return a regex-compatible string (still returned as an array for consistency)</li>\\n<li><code>step</code>: pass the step on the options as an alternative to passing it as an argument</li>\\n<li><code>silent</code>: <code>true</code> by default, set to false to throw errors for invalid ranges. </li>\\n</ul>\\n</li>\\n<li><code>fn</code>: <strong>{Function}</strong> optionally <a href=\\\"#custom-function\\\">pass a function</a> to modify each character </li>\\n</ul>\\n<p><strong>Examples</strong></p>\\n<pre><code class=\\\"language-js\\\">range(1, 3)\\n//=> ['1', '2', '3']\\n\\nrange('1', '3')\\n//=> ['1', '2', '3']\\n\\nrange('0', '-5')\\n//=> [ '0', '-1', '-2', '-3', '-4', '-5' ]\\n\\nrange(-9, 9, 3)\\n//=> [ '-9', '-6', '-3', '0', '3', '6', '9' ])\\n\\nrange('-1', '-10', '-2')\\n//=> [ '-1', '-3', '-5', '-7', '-9' ]\\n\\nrange('1', '10', '2')\\n//=> [ '1', '3', '5', '7', '9' ]\\n\\nrange('a', 'e')\\n//=> ['a', 'b', 'c', 'd', 'e']\\n\\nrange('a', 'e', 2)\\n//=> ['a', 'c', 'e']\\n\\nrange('A', 'E', 2)\\n//=> ['A', 'C', 'E']\\n</code></pre>\\n<h3>Invalid ranges</h3>\\n<p>When an invalid range is passed, <code>null</code> is returned. </p>\\n<pre><code class=\\\"language-js\\\">range('1.1', '2');\\n//=> null\\n\\nrange('a', '2');\\n//=> null\\n\\nrange(1, 10, 'foo');\\n//=> null\\n</code></pre>\\n<p>If you want errors to be throw, pass <code>silent: false</code> on the options:</p>\\n<h3>Custom function</h3>\\n<p>Optionally pass a custom function as the third or fourth argument:</p>\\n<pre><code class=\\\"language-js\\\">range('a', 'e', function (val, isNumber, pad, i) {\\n  if (!isNumber) {\\n    return String.fromCharCode(val) + i;\\n  }\\n  return val;\\n});\\n//=> ['a0', 'b1', 'c2', 'd3', 'e4']\\n</code></pre>\\n<h3>Special characters</h3>\\n<p>A special character may be passed as the third arg instead of a step increment. These characters can be pretty useful for brace expansion, creating file paths, test fixtures and similar use case.</p>\\n<pre><code class=\\\"language-js\\\">range('a', 'z', SPECIAL_CHARACTER_HERE);\\n</code></pre>\\n<p><strong>Supported characters</strong></p>\\n<ul>\\n<li><code>+</code>: repeat the given string <code>n</code> times</li>\\n<li><code>|</code>: create a regex-ready string, instead of an array</li>\\n<li><code>></code>: join values to single array element</li>\\n<li><code>?</code>: randomize the given pattern using <a href=\\\"https://github.com/jonschlinkert/randomatic\\\">randomatic</a></li>\\n</ul>\\n<h4>plus</h4>\\n<p>Character: <em>(<code>+</code>)</em></p>\\n<p>Repeat the first argument the number of times passed on the second argument.</p>\\n<p><strong>Examples:</strong></p>\\n<pre><code class=\\\"language-js\\\">range('a', 3, '+');\\n//=> ['a', 'a', 'a']\\n\\nrange('abc', 2, '+');\\n//=> ['abc', 'abc']\\n</code></pre>\\n<h4>pipe and tilde</h4>\\n<p>Characters: <em>(<code>|</code> and <code>~</code>)</em></p>\\n<p>Creates a regex-capable string (either a logical <code>or</code> or a character class) from the expanded arguments.</p>\\n<p><strong>Examples:</strong></p>\\n<pre><code class=\\\"language-js\\\">range('a', 'c', '|');\\n//=> ['(a|b|c)'\\n\\nrange('a', 'c', '~');\\n//=> ['[a-c]'\\n\\nrange('a', 'z', '|5');\\n//=> ['(a|f|k|p|u|z)'\\n</code></pre>\\n<p><strong>Automatic separator correction</strong></p>\\n<p>To avoid this error:</p>\\n<blockquote>\\n<p><code>Range out of order in character class</code></p>\\n</blockquote>\\n<p>Fill-range detects invalid sequences and uses the correct syntax. For example:</p>\\n<p><strong>invalid</strong> (regex)</p>\\n<p>If you pass these:</p>\\n<pre><code class=\\\"language-js\\\">range('a', 'z', '~5');\\n// which would result in this\\n//=> ['[a-f-k-p-u-z]']\\n\\nrange('10', '20', '~');\\n// which would result in this\\n//=> ['[10-20]']\\n</code></pre>\\n<p><strong>valid</strong> (regex)</p>\\n<p>fill-range corrects them to this:</p>\\n<pre><code class=\\\"language-js\\\">range('a', 'z', '~5');\\n//=> ['(a|f|k|p|u|z)'\\n\\nrange('10', '20', '~');\\n//=> ['(10-20)'\\n</code></pre>\\n<h4>angle bracket</h4>\\n<p>Character: <em>(<code>></code>)</em></p>\\n<p>Joins all values in the returned array to a single value.</p>\\n<p><strong>Examples:</strong></p>\\n<pre><code class=\\\"language-js\\\">range('a', 'e', '>');\\n//=> ['abcde']\\n\\nrange('5', '8', '>');\\n//=> ['5678']\\n\\nrange('2', '20', '2>');\\n//=> ['2468101214161820']\\n</code></pre>\\n<h4>question mark</h4>\\n<p>Character: <em>(<code>?</code>)</em></p>\\n<p>Uses <a href=\\\"https://github.com/jonschlinkert/randomatic\\\">randomatic</a> to generate randomized alpha, numeric, or alpha-numeric patterns based on the provided arguments.</p>\\n<p><strong>Examples:</strong></p>\\n<p><em>(actual results would obviously be randomized)</em></p>\\n<p>Generate a 5-character, uppercase, alphabetical string:</p>\\n<pre><code class=\\\"language-js\\\">range('A', 5, '?');\\n//=> ['NSHAK']\\n</code></pre>\\n<p>Generate a 5-digit random number:</p>\\n<pre><code class=\\\"language-js\\\">range('0', 5, '?');\\n//=> ['36583']\\n</code></pre>\\n<p>Generate a 10-character alpha-numeric string:</p>\\n<pre><code class=\\\"language-js\\\">range('A0', 10, '?');\\n//=> ['5YJD60VQNN']\\n</code></pre>\\n<p>See the <a href=\\\"https://github.com/jonschlinkert/randomatic\\\">randomatic</a> repo for all available options and or to create issues or feature requests related to randomization.</p>\\n<h2>Other useful libs</h2>\\n<ul>\\n<li><a href=\\\"https://github.com/jonschlinkert/micromatch\\\">micromatch</a>: Glob matching for javascript/node.js. A drop-in replacement and faster alternative to minimatch and multimatch. Just use <code>micromatch.isMatch()</code> instead of <code>minimatch()</code>, or use <code>micromatch()</code> instead of <code>multimatch()</code>.</li>\\n<li><a href=\\\"https://github.com/jonschlinkert/expand-range\\\">expand-range</a>: Fast, bash-like range expansion. Expand a range of numbers or letters, uppercase or lowercase. See the benchmarks. Used by micromatch.</li>\\n<li><a href=\\\"https://github.com/jonschlinkert/braces\\\">braces</a>: Fastest brace expansion for node.js, with the most complete support for the Bash 4.3 braces specification.</li>\\n<li><a href=\\\"https://github.com/jonschlinkert/is-glob\\\">is-glob</a>: Returns <code>true</code> if the given string looks like a glob pattern.</li>\\n</ul>\\n<h2>Running tests</h2>\\n<p>Install dev dependencies:</p>\\n<pre><code class=\\\"language-bash\\\">npm i -d &#x26;&#x26; npm test\\n</code></pre>\\n<h2>Contributing</h2>\\n<p>Pull requests and stars are always welcome. For bugs and feature requests, <a href=\\\"https://github.com/jonschlinkert/fill-range/issues\\\">please create an issue</a></p>\\n<h2>Author</h2>\\n<p><strong>Jon Schlinkert</strong></p>\\n<ul>\\n<li><a href=\\\"https://github.com/jonschlinkert\\\">github/jonschlinkert</a></li>\\n<li><a href=\\\"http://twitter.com/jonschlinkert\\\">twitter/jonschlinkert</a> </li>\\n</ul>\\n<h2>License</h2>\\n<p>Copyright (c) 2014-2015 Jon Schlinkert<br>\\nReleased under the MIT license</p>\\n<hr>\\n<p><em>This file was generated by <a href=\\\"https://github.com/assemble/verb-cli\\\">verb-cli</a> on April 07, 2015.</em></p>\",\"docPath\":\"argo-ci/node_modules/fill-range/readme\",\"proj\":\"argo-ci\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---docs-argo-ci-node-modules-fill-range-readme-html-1116e8c20408c458480d.js","module.exports = {\"pathContext\":{\"docHtml\":\"<h1>fill-range <a href=\\\"http://badge.fury.io/js/fill-range\\\"><img src=\\\"https://badge.fury.io/js/fill-range.svg\\\" alt=\\\"NPM version\\\"></a>  <a href=\\\"https://travis-ci.org/jonschlinkert/fill-range\\\"><img src=\\\"https://travis-ci.org/jonschlinkert/fill-range.svg\\\" alt=\\\"Build Status\\\"></a></h1>\\n<blockquote>\\n<p>Fill in a range of numbers or letters, optionally passing an increment or multiplier to use.</p>\\n</blockquote>\\n<h2>Install with <a href=\\\"npmjs.org\\\">npm</a></h2>\\n<pre><code class=\\\"language-bash\\\">npm i fill-range --save\\n</code></pre>\\n<!-- toc -->\\n<ul>\\n<li>\\n<p><a href=\\\"#usage\\\">Usage</a></p>\\n<ul>\\n<li><a href=\\\"#invalid-ranges\\\">Invalid ranges</a></li>\\n<li><a href=\\\"#custom-function\\\">Custom function</a></li>\\n<li><a href=\\\"#special-characters\\\">Special characters</a></li>\\n<li><a href=\\\"#plus\\\">plus</a></li>\\n<li><a href=\\\"#pipe-and-tilde\\\">pipe and tilde</a></li>\\n<li><a href=\\\"#angle-bracket\\\">angle bracket</a></li>\\n<li><a href=\\\"#question-mark\\\">question mark</a></li>\\n</ul>\\n</li>\\n<li><a href=\\\"#other-useful-libs\\\">Other useful libs</a></li>\\n<li><a href=\\\"#running-tests\\\">Running tests</a></li>\\n<li><a href=\\\"#contributing\\\">Contributing</a></li>\\n<li><a href=\\\"#author\\\">Author</a></li>\\n<li><a href=\\\"#license\\\">License</a></li>\\n</ul>\\n<p><em>(Table of contents generated by [verb])</em></p>\\n<!-- tocstop -->\\n<h2>Usage</h2>\\n<pre><code class=\\\"language-js\\\">var range = require('fill-range');\\n\\nrange('a', 'e');\\n//=> ['a', 'b', 'c', 'd', 'e']\\n</code></pre>\\n<p><strong>Params</strong></p>\\n<pre><code class=\\\"language-js\\\">range(start, stop, step, options, fn);\\n</code></pre>\\n<ul>\\n<li><code>start</code>: <strong>{String|Number}</strong> the number or letter to start with</li>\\n<li><code>end</code>: <strong>{String|Number}</strong> the number or letter to end with</li>\\n<li><code>step</code>: <strong>{String|Number}</strong> optionally pass the step to use. works for letters or numbers.</li>\\n<li>\\n<p><code>options</code>: <strong>{Object}</strong>:</p>\\n<ul>\\n<li><code>makeRe</code>: return a regex-compatible string (still returned as an array for consistency)</li>\\n<li><code>step</code>: pass the step on the options as an alternative to passing it as an argument</li>\\n<li><code>silent</code>: <code>true</code> by default, set to false to throw errors for invalid ranges. </li>\\n</ul>\\n</li>\\n<li><code>fn</code>: <strong>{Function}</strong> optionally <a href=\\\"#custom-function\\\">pass a function</a> to modify each character </li>\\n</ul>\\n<p><strong>Examples</strong></p>\\n<pre><code class=\\\"language-js\\\">range(1, 3)\\n//=> ['1', '2', '3']\\n\\nrange('1', '3')\\n//=> ['1', '2', '3']\\n\\nrange('0', '-5')\\n//=> [ '0', '-1', '-2', '-3', '-4', '-5' ]\\n\\nrange(-9, 9, 3)\\n//=> [ '-9', '-6', '-3', '0', '3', '6', '9' ])\\n\\nrange('-1', '-10', '-2')\\n//=> [ '-1', '-3', '-5', '-7', '-9' ]\\n\\nrange('1', '10', '2')\\n//=> [ '1', '3', '5', '7', '9' ]\\n\\nrange('a', 'e')\\n//=> ['a', 'b', 'c', 'd', 'e']\\n\\nrange('a', 'e', 2)\\n//=> ['a', 'c', 'e']\\n\\nrange('A', 'E', 2)\\n//=> ['A', 'C', 'E']\\n</code></pre>\\n<h3>Invalid ranges</h3>\\n<p>When an invalid range is passed, <code>null</code> is returned. </p>\\n<pre><code class=\\\"language-js\\\">range('1.1', '2');\\n//=> null\\n\\nrange('a', '2');\\n//=> null\\n\\nrange(1, 10, 'foo');\\n//=> null\\n</code></pre>\\n<p>If you want errors to be throw, pass <code>silent: false</code> on the options:</p>\\n<h3>Custom function</h3>\\n<p>Optionally pass a custom function as the third or fourth argument:</p>\\n<pre><code class=\\\"language-js\\\">range('a', 'e', function (val, isNumber, pad, i) {\\n  if (!isNumber) {\\n    return String.fromCharCode(val) + i;\\n  }\\n  return val;\\n});\\n//=> ['a0', 'b1', 'c2', 'd3', 'e4']\\n</code></pre>\\n<h3>Special characters</h3>\\n<p>A special character may be passed as the third arg instead of a step increment. These characters can be pretty useful for brace expansion, creating file paths, test fixtures and similar use case.</p>\\n<pre><code class=\\\"language-js\\\">range('a', 'z', SPECIAL_CHARACTER_HERE);\\n</code></pre>\\n<p><strong>Supported characters</strong></p>\\n<ul>\\n<li><code>+</code>: repeat the given string <code>n</code> times</li>\\n<li><code>|</code>: create a regex-ready string, instead of an array</li>\\n<li><code>></code>: join values to single array element</li>\\n<li><code>?</code>: randomize the given pattern using <a href=\\\"https://github.com/jonschlinkert/randomatic\\\">randomatic</a></li>\\n</ul>\\n<h4>plus</h4>\\n<p>Character: <em>(<code>+</code>)</em></p>\\n<p>Repeat the first argument the number of times passed on the second argument.</p>\\n<p><strong>Examples:</strong></p>\\n<pre><code class=\\\"language-js\\\">range('a', 3, '+');\\n//=> ['a', 'a', 'a']\\n\\nrange('abc', 2, '+');\\n//=> ['abc', 'abc']\\n</code></pre>\\n<h4>pipe and tilde</h4>\\n<p>Characters: <em>(<code>|</code> and <code>~</code>)</em></p>\\n<p>Creates a regex-capable string (either a logical <code>or</code> or a character class) from the expanded arguments.</p>\\n<p><strong>Examples:</strong></p>\\n<pre><code class=\\\"language-js\\\">range('a', 'c', '|');\\n//=> ['(a|b|c)'\\n\\nrange('a', 'c', '~');\\n//=> ['[a-c]'\\n\\nrange('a', 'z', '|5');\\n//=> ['(a|f|k|p|u|z)'\\n</code></pre>\\n<p><strong>Automatic separator correction</strong></p>\\n<p>To avoid this error:</p>\\n<blockquote>\\n<p><code>Range out of order in character class</code></p>\\n</blockquote>\\n<p>Fill-range detects invalid sequences and uses the correct syntax. For example:</p>\\n<p><strong>invalid</strong> (regex)</p>\\n<p>If you pass these:</p>\\n<pre><code class=\\\"language-js\\\">range('a', 'z', '~5');\\n// which would result in this\\n//=> ['[a-f-k-p-u-z]']\\n\\nrange('10', '20', '~');\\n// which would result in this\\n//=> ['[10-20]']\\n</code></pre>\\n<p><strong>valid</strong> (regex)</p>\\n<p>fill-range corrects them to this:</p>\\n<pre><code class=\\\"language-js\\\">range('a', 'z', '~5');\\n//=> ['(a|f|k|p|u|z)'\\n\\nrange('10', '20', '~');\\n//=> ['(10-20)'\\n</code></pre>\\n<h4>angle bracket</h4>\\n<p>Character: <em>(<code>></code>)</em></p>\\n<p>Joins all values in the returned array to a single value.</p>\\n<p><strong>Examples:</strong></p>\\n<pre><code class=\\\"language-js\\\">range('a', 'e', '>');\\n//=> ['abcde']\\n\\nrange('5', '8', '>');\\n//=> ['5678']\\n\\nrange('2', '20', '2>');\\n//=> ['2468101214161820']\\n</code></pre>\\n<h4>question mark</h4>\\n<p>Character: <em>(<code>?</code>)</em></p>\\n<p>Uses <a href=\\\"https://github.com/jonschlinkert/randomatic\\\">randomatic</a> to generate randomized alpha, numeric, or alpha-numeric patterns based on the provided arguments.</p>\\n<p><strong>Examples:</strong></p>\\n<p><em>(actual results would obviously be randomized)</em></p>\\n<p>Generate a 5-character, uppercase, alphabetical string:</p>\\n<pre><code class=\\\"language-js\\\">range('A', 5, '?');\\n//=> ['NSHAK']\\n</code></pre>\\n<p>Generate a 5-digit random number:</p>\\n<pre><code class=\\\"language-js\\\">range('0', 5, '?');\\n//=> ['36583']\\n</code></pre>\\n<p>Generate a 10-character alpha-numeric string:</p>\\n<pre><code class=\\\"language-js\\\">range('A0', 10, '?');\\n//=> ['5YJD60VQNN']\\n</code></pre>\\n<p>See the <a href=\\\"https://github.com/jonschlinkert/randomatic\\\">randomatic</a> repo for all available options and or to create issues or feature requests related to randomization.</p>\\n<h2>Other useful libs</h2>\\n<ul>\\n<li><a href=\\\"https://github.com/jonschlinkert/micromatch\\\">micromatch</a>: Glob matching for javascript/node.js. A drop-in replacement and faster alternative to minimatch and multimatch. Just use <code>micromatch.isMatch()</code> instead of <code>minimatch()</code>, or use <code>micromatch()</code> instead of <code>multimatch()</code>.</li>\\n<li><a href=\\\"https://github.com/jonschlinkert/expand-range\\\">expand-range</a>: Fast, bash-like range expansion. Expand a range of numbers or letters, uppercase or lowercase. See the benchmarks. Used by micromatch.</li>\\n<li><a href=\\\"https://github.com/jonschlinkert/braces\\\">braces</a>: Fastest brace expansion for node.js, with the most complete support for the Bash 4.3 braces specification.</li>\\n<li><a href=\\\"https://github.com/jonschlinkert/is-glob\\\">is-glob</a>: Returns <code>true</code> if the given string looks like a glob pattern.</li>\\n</ul>\\n<h2>Running tests</h2>\\n<p>Install dev dependencies:</p>\\n<pre><code class=\\\"language-bash\\\">npm i -d &#x26;&#x26; npm test\\n</code></pre>\\n<h2>Contributing</h2>\\n<p>Pull requests and stars are always welcome. For bugs and feature requests, <a href=\\\"https://github.com/jonschlinkert/fill-range/issues\\\">please create an issue</a></p>\\n<h2>Author</h2>\\n<p><strong>Jon Schlinkert</strong></p>\\n<ul>\\n<li><a href=\\\"https://github.com/jonschlinkert\\\">github/jonschlinkert</a></li>\\n<li><a href=\\\"http://twitter.com/jonschlinkert\\\">twitter/jonschlinkert</a> </li>\\n</ul>\\n<h2>License</h2>\\n<p>Copyright (c) 2014-2015 Jon Schlinkert<br>\\nReleased under the MIT license</p>\\n<hr>\\n<p><em>This file was generated by <a href=\\\"https://github.com/assemble/verb-cli\\\">verb-cli</a> on April 07, 2015.</em></p>\",\"docPath\":\"argo-ci/node_modules/fill-range/readme\",\"proj\":\"argo-ci\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/docs-argo-ci-node-modules-fill-range-readme-html.json\n// module id = 2332\n// module chunks = 71156435990262"],"sourceRoot":""}