webpackJsonp([0x93468c38cfe1],{2853:function(e,n){e.exports={pathContext:{docHtml:'<h1>ms</h1>\n<p><a href="https://travis-ci.org/zeit/ms"><img src="https://travis-ci.org/zeit/ms.svg?branch=master" alt="Build Status"></a>\n<a href="https://zeit.chat/"><img src="http://zeit-slackin.now.sh/badge.svg" alt="Slack Channel"></a></p>\n<p>Use this package to easily convert various time formats to milliseconds.</p>\n<h2>Examples</h2>\n<pre><code class="language-js">ms(\'2 days\')  // 172800000\nms(\'1d\')      // 86400000\nms(\'10h\')     // 36000000\nms(\'2.5 hrs\') // 9000000\nms(\'2h\')      // 7200000\nms(\'1m\')      // 60000\nms(\'5s\')      // 5000\nms(\'1y\')      // 31557600000\nms(\'100\')     // 100\nms(\'-3 days\') // -259200000\nms(\'-1h\')     // -3600000\nms(\'-200\')    // -200\n</code></pre>\n<h3>Convert from Milliseconds</h3>\n<pre><code class="language-js">ms(60000)             // "1m"\nms(2 * 60000)         // "2m"\nms(-3 * 60000)        // "-3m"\nms(ms(\'10 hours\'))    // "10h"\n</code></pre>\n<h3>Time Format Written-Out</h3>\n<pre><code class="language-js">ms(60000, { long: true })             // "1 minute"\nms(2 * 60000, { long: true })         // "2 minutes"\nms(-3 * 60000, { long: true })        // "-3 minutes"\nms(ms(\'10 hours\'), { long: true })    // "10 hours"\n</code></pre>\n<h2>Features</h2>\n<ul>\n<li>Works both in <a href="https://nodejs.org">Node.js</a> and in the browser</li>\n<li>If a number is supplied to <code>ms</code>, a string with a unit is returned</li>\n<li>If a string that contains the number is supplied, it returns it as a number (e.g.: it returns <code>100</code> for <code>\'100\'</code>)</li>\n<li>If you pass a string with a number and a valid unit, the number of equivalent milliseconds is returned</li>\n</ul>\n<h2>Related Packages</h2>\n<ul>\n<li><a href="https://github.com/knpwrs/ms.macro">ms.macro</a> - Run <code>ms</code> as a macro at build-time.</li>\n</ul>\n<h2>Caught a Bug?</h2>\n<ol>\n<li><a href="https://help.github.com/articles/fork-a-repo/">Fork</a> this repository to your own GitHub account and then <a href="https://help.github.com/articles/cloning-a-repository/">clone</a> it to your local device</li>\n<li>Link the package to the global module directory: <code>npm link</code></li>\n<li>Within the module you want to test your local development instance of ms, just link it to the dependencies: <code>npm link ms</code>. Instead of the default one from npm, Node.js will now use your clone of ms!</li>\n</ol>\n<p>As always, you can run the tests using: <code>npm test</code></p>',docPath:"argo-ci/node_modules/logform/node_modules/ms/readme",proj:"argo-ci"}}}});
//# sourceMappingURL=path---docs-argo-ci-node-modules-logform-node-modules-ms-3f950d9edad953f1bdf6.js.map