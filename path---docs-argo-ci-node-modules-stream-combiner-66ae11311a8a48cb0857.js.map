{"version":3,"sources":["webpack:///path---docs-argo-ci-node-modules-stream-combiner-66ae11311a8a48cb0857.js","webpack:///./.cache/json/docs-argo-ci-node-modules-stream-combiner.json"],"names":["webpackJsonp","3194","module","exports","pathContext","docHtml","docPath","proj"],"mappings":"AAAAA,cAAc,iBAERC,KACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,aAAeC,QAAA,0kCAA89BC,QAAA,8CAAAC,KAAA","file":"path---docs-argo-ci-node-modules-stream-combiner-66ae11311a8a48cb0857.js","sourcesContent":["webpackJsonp([31895912244545],{\n\n/***/ 3194:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"pathContext\":{\"docHtml\":\"<h1>stream-combiner</h1>\\n<p>&#x3C;img src=<a href=\\\"https://secure.travis-ci.org/dominictarr/stream-combiner.png?branch=master%3E\\\">https://secure.travis-ci.org/dominictarr/stream-combiner.png?branch=master></a></p>\\n<h2>Combine (stream1,...,streamN)</h2>\\n<p>Turn a pipeline into a single stream. <code>pipeline</code> returns a stream that writes to the first stream\\nand reads from the last stream. </p>\\n<p>Listening for 'error' will recieve errors from all streams inside the pipe.</p>\\n<pre><code class=\\\"language-js\\\">  var Combine = require('stream-combiner')\\n  var es      = require('event-stream')\\n\\n  Combine(                         //connect streams together with `pipe`\\n    process.openStdin(),              //open stdin\\n    es.split(),                       //split stream to break on newlines\\n    es.map(function (data, callback) {//turn this async function into a stream\\n      callback(null\\n        , inspect(JSON.parse(data)))  //render it nicely\\n    }),\\n    process.stdout                    // pipe it to stdout !\\n    )\\n</code></pre>\\n<h2>License</h2>\\n<p>MIT</p>\",\"docPath\":\"argo-ci/node_modules/stream-combiner/readme\",\"proj\":\"argo-ci\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---docs-argo-ci-node-modules-stream-combiner-66ae11311a8a48cb0857.js","module.exports = {\"pathContext\":{\"docHtml\":\"<h1>stream-combiner</h1>\\n<p>&#x3C;img src=<a href=\\\"https://secure.travis-ci.org/dominictarr/stream-combiner.png?branch=master%3E\\\">https://secure.travis-ci.org/dominictarr/stream-combiner.png?branch=master></a></p>\\n<h2>Combine (stream1,...,streamN)</h2>\\n<p>Turn a pipeline into a single stream. <code>pipeline</code> returns a stream that writes to the first stream\\nand reads from the last stream. </p>\\n<p>Listening for 'error' will recieve errors from all streams inside the pipe.</p>\\n<pre><code class=\\\"language-js\\\">  var Combine = require('stream-combiner')\\n  var es      = require('event-stream')\\n\\n  Combine(                         //connect streams together with `pipe`\\n    process.openStdin(),              //open stdin\\n    es.split(),                       //split stream to break on newlines\\n    es.map(function (data, callback) {//turn this async function into a stream\\n      callback(null\\n        , inspect(JSON.parse(data)))  //render it nicely\\n    }),\\n    process.stdout                    // pipe it to stdout !\\n    )\\n</code></pre>\\n<h2>License</h2>\\n<p>MIT</p>\",\"docPath\":\"argo-ci/node_modules/stream-combiner/readme\",\"proj\":\"argo-ci\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/docs-argo-ci-node-modules-stream-combiner.json\n// module id = 3194\n// module chunks = 31895912244545"],"sourceRoot":""}