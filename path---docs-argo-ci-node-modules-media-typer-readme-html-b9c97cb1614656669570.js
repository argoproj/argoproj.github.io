webpackJsonp([0xf749bc919ad6],{2865:function(e,t){e.exports={pathContext:{docHtml:'<h1>media-typer</h1>\n<p><a href="https://npmjs.org/package/media-typer"><img src="https://img.shields.io/npm/v/media-typer.svg?style=flat" alt="NPM Version"></a>\n<a href="https://npmjs.org/package/media-typer"><img src="https://img.shields.io/npm/dm/media-typer.svg?style=flat" alt="NPM Downloads"></a>\n<a href="http://nodejs.org/download/"><img src="https://img.shields.io/badge/node.js-%3E%3D_0.6-brightgreen.svg?style=flat" alt="Node.js Version"></a>\n<a href="https://travis-ci.org/jshttp/media-typer"><img src="https://img.shields.io/travis/jshttp/media-typer.svg?style=flat" alt="Build Status"></a>\n<a href="https://coveralls.io/r/jshttp/media-typer"><img src="https://img.shields.io/coveralls/jshttp/media-typer.svg?style=flat" alt="Test Coverage"></a></p>\n<p>Simple RFC 6838 media type parser</p>\n<h2>Installation</h2>\n<pre><code class="language-sh">$ npm install media-typer\n</code></pre>\n<h2>API</h2>\n<pre><code class="language-js">var typer = require(\'media-typer\')\n</code></pre>\n<h3>typer.parse(string)</h3>\n<pre><code class="language-js">var obj = typer.parse(\'image/svg+xml; charset=utf-8\')\n</code></pre>\n<p>Parse a media type string. This will return an object with the following\nproperties (examples are shown for the string <code>\'image/svg+xml; charset=utf-8\'</code>):</p>\n<ul>\n<li>\n<p><code>type</code>: The type of the media type (always lower case). Example: <code>\'image\'</code></p>\n</li>\n<li>\n<p><code>subtype</code>: The subtype of the media type (always lower case). Example: <code>\'svg\'</code></p>\n</li>\n<li>\n<p><code>suffix</code>: The suffix of the media type (always lower case). Example: <code>\'xml\'</code></p>\n</li>\n<li>\n<p><code>parameters</code>: An object of the parameters in the media type (name of parameter always lower case). Example: <code>{charset: \'utf-8\'}</code></p>\n</li>\n</ul>\n<h3>typer.parse(req)</h3>\n<pre><code class="language-js">var obj = typer.parse(req)\n</code></pre>\n<p>Parse the <code>content-type</code> header from the given <code>req</code>. Short-cut for\n<code>typer.parse(req.headers[\'content-type\'])</code>.</p>\n<h3>typer.parse(res)</h3>\n<pre><code class="language-js">var obj = typer.parse(res)\n</code></pre>\n<p>Parse the <code>content-type</code> header set on the given <code>res</code>. Short-cut for\n<code>typer.parse(res.getHeader(\'content-type\'))</code>.</p>\n<h3>typer.format(obj)</h3>\n<pre><code class="language-js">var obj = typer.format({type: \'image\', subtype: \'svg\', suffix: \'xml\'})\n</code></pre>\n<p>Format an object into a media type string. This will return a string of the\nmime type for the given object. For the properties of the object, see the\ndocumentation for <code>typer.parse(string)</code>.</p>\n<h2>License</h2>\n<p><a href="LICENSE">MIT</a></p>',docPath:"argo-ci/node_modules/media-typer/readme",proj:"argo-ci"}}}});
//# sourceMappingURL=path---docs-argo-ci-node-modules-media-typer-readme-html-b9c97cb1614656669570.js.map