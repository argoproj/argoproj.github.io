webpackJsonp([0x74fc3f905254],{3126:function(e,a){e.exports={pathContext:{docHtml:'<h1>require-main-filename</h1>\n<p><a href="https://travis-ci.org/yargs/require-main-filename"><img src="https://travis-ci.org/yargs/require-main-filename.png" alt="Build Status"></a>\n<a href="https://coveralls.io/r/yargs/require-main-filename?branch=master"><img src="https://coveralls.io/repos/yargs/require-main-filename/badge.svg?branch=master" alt="Coverage Status"></a>\n<a href="https://www.npmjs.com/package/require-main-filename"><img src="https://img.shields.io/npm/v/require-main-filename.svg" alt="NPM version"></a></p>\n<p><code>require.main.filename</code> is great for figuring out the entry\npoint for the current application. This can be combined with a module like\n<a href="https://www.npmjs.com/package/pkg-conf">pkg-conf</a> to, <em>as if by magic</em>, load\ntop-level configuration.</p>\n<p>Unfortunately, <code>require.main.filename</code> sometimes fails when an application is\nexecuted with an alternative process manager, e.g., <a href="https://github.com/tjanczuk/iisnode">iisnode</a>.</p>\n<p><code>require-main-filename</code> is a shim that addresses this problem.</p>\n<h2>Usage</h2>\n<pre><code class="language-js">var main = require(\'require-main-filename\')()\n// use main as an alternative to require.main.filename.\n</code></pre>\n<h2>License</h2>\n<p>ISC</p>',docPath:"argo-ci/node_modules/require-main-filename/readme",proj:"argo-ci"}}}});
//# sourceMappingURL=path---docs-argo-ci-node-modules-require-main-filename-readme-html-76464b9314ce69849227.js.map