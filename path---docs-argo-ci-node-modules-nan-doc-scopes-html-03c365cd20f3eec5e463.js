webpackJsonp([0x94e381e5d008],{2915:function(e,a){e.exports={pathContext:{docHtml:'<h2>Scopes</h2>\n<p>A <em>local handle</em> is a pointer to an object. All V8 objects are accessed using handles, they are necessary because of the way the V8 garbage collector works.</p>\n<p>A handle scope can be thought of as a container for any number of handles. When you\'ve finished with your handles, instead of deleting each one individually you can simply delete their scope.</p>\n<p>The creation of <code>HandleScope</code> objects is different across the supported versions of V8. Therefore, NAN provides its own implementations that can be used safely across these.</p>\n<ul>\n<li><a href="#api_nan_handle_scope"><b><code>Nan::HandleScope</code></b></a></li>\n<li><a href="#api_nan_escapable_handle_scope"><b><code>Nan::EscapableHandleScope</code></b></a></li>\n</ul>\n<p>Also see the V8 Embedders Guide section on <a href="https://github.com/v8/v8/wiki/Embedder%27s%20Guide#handles-and-garbage-collection">Handles and Garbage Collection</a>.</p>\n<p><a name="api_nan_handle_scope"></a></p>\n<h3>Nan::HandleScope</h3>\n<p>A simple wrapper around <a href="https://v8docs.nodesource.com/io.js-3.3/d3/d95/classv8_1_1_handle_scope.html"><code>v8::HandleScope</code></a>.</p>\n<p>Definition:</p>\n<pre><code class="language-c++">class Nan::HandleScope {\n public:\n  Nan::HandleScope();\n  static int NumberOfHandles();\n};\n</code></pre>\n<p>Allocate a new <code>Nan::HandleScope</code> whenever you are creating new V8 JavaScript objects. Note that an implicit <code>HandleScope</code> is created for you on JavaScript-accessible methods so you do not need to insert one yourself.</p>\n<p>Example:</p>\n<pre><code class="language-c++">// new object is created, it needs a new scope:\nvoid Pointless() {\n  Nan::HandleScope scope;\n  v8::Local&#x3C;v8::Object> obj = Nan::New&#x3C;v8::Object>();\n}\n\n// JavaScript-accessible method already has a HandleScope\nNAN_METHOD(Pointless2) {\n  v8::Local&#x3C;v8::Object> obj = Nan::New&#x3C;v8::Object>();\n}\n</code></pre>\n<p><a name="api_nan_escapable_handle_scope"></a></p>\n<h3>Nan::EscapableHandleScope</h3>\n<p>Similar to <a href="#api_nan_handle_scope"><code>Nan::HandleScope</code></a> but should be used in cases where a function needs to return a V8 JavaScript type that has been created within it.</p>\n<p>Definition:</p>\n<pre><code class="language-c++">class Nan::EscapableHandleScope {\n public:\n  Nan::EscapableHandleScope();\n  static int NumberOfHandles();\n  template&#x3C;typename T> v8::Local&#x3C;T> Escape(v8::Local&#x3C;T> value);\n}\n</code></pre>\n<p>Use <code>Escape(value)</code> to return the object.</p>\n<p>Example:</p>\n<pre><code class="language-c++">v8::Local&#x3C;v8::Object> EmptyObj() {\n  Nan::EscapableHandleScope scope;\n  v8::Local&#x3C;v8::Object> obj = Nan::New&#x3C;v8::Object>();\n  return scope.Escape(obj);\n}\n</code></pre>',docPath:"argo-ci/node_modules/nan/doc/scopes",proj:"argo-ci"}}}});
//# sourceMappingURL=path---docs-argo-ci-node-modules-nan-doc-scopes-html-03c365cd20f3eec5e463.js.map