{"version":3,"sources":["webpack:///path---docs-argo-cd-docs-user-guide-parameters-html-c66f0f33d6078ffb06a0.js","webpack:///./.cache/json/docs-argo-cd-docs-user-guide-parameters-html.json"],"names":["webpackJsonp","581","module","exports","pathContext","docHtml","docPath","proj"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,aAAeC,QAAA,s9FAAAC,QAAA,qCAAAC,KAAA","file":"path---docs-argo-cd-docs-user-guide-parameters-html-c66f0f33d6078ffb06a0.js","sourcesContent":["webpackJsonp([164919283439242],{\n\n/***/ 581:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"pathContext\":{\"docHtml\":\"<h1>Parameter Overrides</h1>\\n<p>Argo CD provides a mechanism to override the parameters of a ksonnet/helm app. This provides flexibility\\nin having most of the application manifests defined in Git, while leaving room for <em>some</em> parts of the\\nk8s manifests determined dynamically, or outside of Git. It also serves as an alternative way of\\nredeploying an application by changing application parameters via Argo CD, instead of making the\\nchanges to the manifests in Git.</p>\\n<p>!!! tip\\nMany consider this mode of operation as an anti-pattern to GitOps, since the source of\\ntruth becomes a union of the Git repository, and the application overrides. The Argo CD parameter\\noverrides feature is provided mainly as a convenience to developers and is intended to be used in\\ndev/test environments, vs. production environments.</p>\\n<p>To use parameter overrides, run the <code>argocd app set -p (COMPONENT=)PARAM=VALUE</code> command:</p>\\n<pre><code class=\\\"language-bash\\\">argocd app set guestbook -p guestbook=image=example/guestbook:abcd123\\nargocd app sync guestbook\\n</code></pre>\\n<p>The <code>PARAM</code> is expected to be a normal YAML path</p>\\n<pre><code class=\\\"language-bash\\\">argocd app set guestbook -p guestbook=ingress.enabled=true\\nargocd app set guestbook -p guestbook=ingress.hosts[0]=guestbook.myclusterurl\\n</code></pre>\\n<p>The following are situations where parameter overrides would be useful:</p>\\n<ol>\\n<li>\\n<p>A team maintains a \\\"dev\\\" environment, which needs to be continually updated with the latest\\nversion of their guestbook application after every build in the tip of master. To address this use\\ncase, the application would expose a parameter named <code>image</code>, whose value used in the <code>dev</code>\\nenvironment contains a placeholder value (e.g. <code>example/guestbook:replaceme</code>). The placeholder value\\nwould be determined externally (outside of Git) such as a build system. Then, as part of the build\\npipeline, the parameter value of the <code>image</code> would be continually updated to the freshly built image\\n(e.g. <code>argocd app set guestbook -p guestbook=image=example/guestbook:abcd123</code>). A sync operation\\nwould result in the application being redeployed with the new image.</p>\\n</li>\\n<li>\\n<p>A repository of Helm manifests is already publicly available (e.g. <a href=\\\"https://github.com/helm/charts\\\">https://github.com/helm/charts</a>).\\nSince commit access to the repository is unavailable, it is useful to be able to install charts from\\nthe public repository and customize the deployment with different parameters, without resorting to\\nforking the repository to make the changes. For example, to install Redis from the Helm chart\\nrepository and customize the the database password, you would run:</p>\\n</li>\\n</ol>\\n<pre><code class=\\\"language-bash\\\">argocd app create redis --repo https://github.com/helm/charts.git --path stable/redis --dest-server https://kubernetes.default.svc --dest-namespace default -p password=abc123\\n</code></pre>\",\"docPath\":\"argo-cd/docs/user-guide/parameters\",\"proj\":\"argo-cd\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---docs-argo-cd-docs-user-guide-parameters-html-c66f0f33d6078ffb06a0.js","module.exports = {\"pathContext\":{\"docHtml\":\"<h1>Parameter Overrides</h1>\\n<p>Argo CD provides a mechanism to override the parameters of a ksonnet/helm app. This provides flexibility\\nin having most of the application manifests defined in Git, while leaving room for <em>some</em> parts of the\\nk8s manifests determined dynamically, or outside of Git. It also serves as an alternative way of\\nredeploying an application by changing application parameters via Argo CD, instead of making the\\nchanges to the manifests in Git.</p>\\n<p>!!! tip\\nMany consider this mode of operation as an anti-pattern to GitOps, since the source of\\ntruth becomes a union of the Git repository, and the application overrides. The Argo CD parameter\\noverrides feature is provided mainly as a convenience to developers and is intended to be used in\\ndev/test environments, vs. production environments.</p>\\n<p>To use parameter overrides, run the <code>argocd app set -p (COMPONENT=)PARAM=VALUE</code> command:</p>\\n<pre><code class=\\\"language-bash\\\">argocd app set guestbook -p guestbook=image=example/guestbook:abcd123\\nargocd app sync guestbook\\n</code></pre>\\n<p>The <code>PARAM</code> is expected to be a normal YAML path</p>\\n<pre><code class=\\\"language-bash\\\">argocd app set guestbook -p guestbook=ingress.enabled=true\\nargocd app set guestbook -p guestbook=ingress.hosts[0]=guestbook.myclusterurl\\n</code></pre>\\n<p>The following are situations where parameter overrides would be useful:</p>\\n<ol>\\n<li>\\n<p>A team maintains a \\\"dev\\\" environment, which needs to be continually updated with the latest\\nversion of their guestbook application after every build in the tip of master. To address this use\\ncase, the application would expose a parameter named <code>image</code>, whose value used in the <code>dev</code>\\nenvironment contains a placeholder value (e.g. <code>example/guestbook:replaceme</code>). The placeholder value\\nwould be determined externally (outside of Git) such as a build system. Then, as part of the build\\npipeline, the parameter value of the <code>image</code> would be continually updated to the freshly built image\\n(e.g. <code>argocd app set guestbook -p guestbook=image=example/guestbook:abcd123</code>). A sync operation\\nwould result in the application being redeployed with the new image.</p>\\n</li>\\n<li>\\n<p>A repository of Helm manifests is already publicly available (e.g. <a href=\\\"https://github.com/helm/charts\\\">https://github.com/helm/charts</a>).\\nSince commit access to the repository is unavailable, it is useful to be able to install charts from\\nthe public repository and customize the deployment with different parameters, without resorting to\\nforking the repository to make the changes. For example, to install Redis from the Helm chart\\nrepository and customize the the database password, you would run:</p>\\n</li>\\n</ol>\\n<pre><code class=\\\"language-bash\\\">argocd app create redis --repo https://github.com/helm/charts.git --path stable/redis --dest-server https://kubernetes.default.svc --dest-namespace default -p password=abc123\\n</code></pre>\",\"docPath\":\"argo-cd/docs/user-guide/parameters\",\"proj\":\"argo-cd\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/docs-argo-cd-docs-user-guide-parameters-html.json\n// module id = 581\n// module chunks = 164919283439242"],"sourceRoot":""}