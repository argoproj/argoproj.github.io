webpackJsonp([1178043471050],{529:function(e,o){e.exports={pathContext:{docHtml:'<h1>Custom Tooling</h1>\n<p>Argo CD bundles preferred versions of its supported templating tools (helm, kustomize, ks, jsonnet)\nas part of its container images. Sometimes, it may be desired to use a specific version of a tool\nother than what Argo CD bundles. Some reasons to do this might be:</p>\n<ul>\n<li>To upgrade/downgrade to a specific version of a tool due to bugs or bug fixes.</li>\n<li>To install additional dependencies which to be used by kustomize\'s configmap/secret generators\n(e.g. curl, vault)</li>\n</ul>\n<p>As the Argo CD repo-server is the single service responsible for generating Kubernetes manifests, it\ncan be customized to use alternative toolchain required by your environment.</p>\n<p>The following example describes how the repo-server manifest can be customized to use a different\nversion of helm than what is bundled in Argo CD:</p>\n<pre><code class="language-yaml">    spec:\n      # 1. Define an emptyDir volume which will hold the custom binaries\n      volumes:\n      - name: custom-tools\n        emptyDir: {}\n      # 2. Use an init container to download and/or copy the custom binaries into the emptyDir\n      initContainers:\n      - name: download-tools\n        image: lachlanevenson/k8s-helm:v2.10.0\n        command: [cp, /usr/local/bin/helm, /custom-tools]\n        volumeMounts:\n        - mountPath: /custom-tools\n          name: custom-tools\n      # 3. Volume mount the custom binary to the bin directory (overriding the existing version)\n      containers:\n      - name: argocd-repo-server\n        volumeMounts:\n        - mountPath: /usr/local/bin/helm\n          name: custom-tools\n          subPath: helm\n</code></pre>',docPath:"argo-cd/docs/custom_tools",proj:"argo-cd"}}}});
//# sourceMappingURL=path---docs-argo-cd-docs-custom-tools-html-262a7515151272bb7c5a.js.map