webpackJsonp([0x8594b78bc447],{2906:function(e,a){e.exports={pathContext:{docHtml:'<h2>Converters</h2>\n<p>NAN contains functions that convert <code>v8::Value</code>s to other <code>v8::Value</code> types and native types. Since type conversion is not guaranteed to succeed, they return <code>Nan::Maybe</code> types. These converters can be used in place of <code>value->ToX()</code> and <code>value->XValue()</code> (where <code>X</code> is one of the types, e.g. <code>Boolean</code>) in a way that provides a consistent interface across V8 versions. Newer versions of V8 use the new <code>v8::Maybe</code> and <code>v8::MaybeLocal</code> types for these conversions, older versions don\'t have this functionality so it is provided by NAN.</p>\n<ul>\n<li><a href="#api_nan_to"><b><code>Nan::To()</code></b></a></li>\n</ul>\n<p><a name="api_nan_to"></a></p>\n<h3>Nan::To()</h3>\n<p>Converts a <code>v8::Local&#x3C;v8::Value></code> to a different subtype of <code>v8::Value</code> or to a native data type. Returns a <code>Nan::MaybeLocal&#x3C;></code> or a <code>Nan::Maybe&#x3C;></code> accordingly.</p>\n<p>See <a href="./maybe_types.html">maybe_types.md</a> for more information on <code>Nan::Maybe</code> types.</p>\n<p>Signatures:</p>\n<pre><code class="language-c++">// V8 types\nNan::MaybeLocal&#x3C;v8::Boolean> Nan::To&#x3C;v8::Boolean>(v8::Local&#x3C;v8::Value> val);\nNan::MaybeLocal&#x3C;v8::Int32> Nan::To&#x3C;v8::Int32>(v8::Local&#x3C;v8::Value> val);\nNan::MaybeLocal&#x3C;v8::Integer> Nan::To&#x3C;v8::Integer>(v8::Local&#x3C;v8::Value> val);\nNan::MaybeLocal&#x3C;v8::Object> Nan::To&#x3C;v8::Object>(v8::Local&#x3C;v8::Value> val);\nNan::MaybeLocal&#x3C;v8::Number> Nan::To&#x3C;v8::Number>(v8::Local&#x3C;v8::Value> val);\nNan::MaybeLocal&#x3C;v8::String> Nan::To&#x3C;v8::String>(v8::Local&#x3C;v8::Value> val);\nNan::MaybeLocal&#x3C;v8::Uint32> Nan::To&#x3C;v8::Uint32>(v8::Local&#x3C;v8::Value> val);\n\n// Native types\nNan::Maybe&#x3C;bool> Nan::To&#x3C;bool>(v8::Local&#x3C;v8::Value> val);\nNan::Maybe&#x3C;double> Nan::To&#x3C;double>(v8::Local&#x3C;v8::Value> val);\nNan::Maybe&#x3C;int32_t> Nan::To&#x3C;int32_t>(v8::Local&#x3C;v8::Value> val);\nNan::Maybe&#x3C;int64_t> Nan::To&#x3C;int64_t>(v8::Local&#x3C;v8::Value> val);\nNan::Maybe&#x3C;uint32_t> Nan::To&#x3C;uint32_t>(v8::Local&#x3C;v8::Value> val);\n</code></pre>\n<h3>Example</h3>\n<pre><code class="language-c++">v8::Local&#x3C;v8::Value> val;\nNan::MaybeLocal&#x3C;v8::String> str = Nan::To&#x3C;v8::String>(val);\nNan::Maybe&#x3C;double> d = Nan::To&#x3C;double>(val);\n</code></pre>',docPath:"argo-ci/node_modules/nan/doc/converters",proj:"argo-ci"}}}});
//# sourceMappingURL=path---docs-argo-ci-node-modules-nan-doc-converters-html-9aeb419db61e261f5016.js.map