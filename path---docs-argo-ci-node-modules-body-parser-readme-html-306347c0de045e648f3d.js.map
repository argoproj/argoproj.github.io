{"version":3,"sources":["webpack:///path---docs-argo-ci-node-modules-body-parser-readme-html-306347c0de045e648f3d.js","webpack:///./.cache/json/docs-argo-ci-node-modules-body-parser-readme-html.json"],"names":["webpackJsonp","2097","module","exports","pathContext","docHtml","docPath","proj"],"mappings":"AAAAA,cAAc,iBAERC,KACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,aAAeC,QAAA,o1nBAA8znBC,QAAA,0CAAAC,KAAA","file":"path---docs-argo-ci-node-modules-body-parser-readme-html-306347c0de045e648f3d.js","sourcesContent":["webpackJsonp([224284564105877],{\n\n/***/ 2097:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"pathContext\":{\"docHtml\":\"<h1>body-parser</h1>\\n<p><a href=\\\"https://npmjs.org/package/body-parser\\\"><img src=\\\"https://img.shields.io/npm/v/body-parser.svg\\\" alt=\\\"NPM Version\\\"></a>\\n<a href=\\\"https://npmjs.org/package/body-parser\\\"><img src=\\\"https://img.shields.io/npm/dm/body-parser.svg\\\" alt=\\\"NPM Downloads\\\"></a>\\n<a href=\\\"https://travis-ci.org/expressjs/body-parser\\\"><img src=\\\"https://img.shields.io/travis/expressjs/body-parser/master.svg\\\" alt=\\\"Build Status\\\"></a>\\n<a href=\\\"https://coveralls.io/r/expressjs/body-parser?branch=master\\\"><img src=\\\"https://img.shields.io/coveralls/expressjs/body-parser/master.svg\\\" alt=\\\"Test Coverage\\\"></a>\\n<a href=\\\"https://www.gratipay.com/dougwilson/\\\"><img src=\\\"https://img.shields.io/gratipay/dougwilson.svg\\\" alt=\\\"Gratipay\\\"></a></p>\\n<p>Node.js body parsing middleware.</p>\\n<p>Parse incoming request bodies in a middleware before your handlers, available\\nunder the <code>req.body</code> property.</p>\\n<p><a href=\\\"https://nodejs.org/en/docs/guides/anatomy-of-an-http-transaction/\\\">Learn about the anatomy of an HTTP transaction in Node.js</a>.</p>\\n<p><em>This does not handle multipart bodies</em>, due to their complex and typically\\nlarge nature. For multipart bodies, you may be interested in the following\\nmodules:</p>\\n<ul>\\n<li><a href=\\\"https://www.npmjs.org/package/busboy#readme\\\">busboy</a> and\\n<a href=\\\"https://www.npmjs.org/package/connect-busboy#readme\\\">connect-busboy</a></li>\\n<li><a href=\\\"https://www.npmjs.org/package/multiparty#readme\\\">multiparty</a> and\\n<a href=\\\"https://www.npmjs.org/package/connect-multiparty#readme\\\">connect-multiparty</a></li>\\n<li><a href=\\\"https://www.npmjs.org/package/formidable#readme\\\">formidable</a></li>\\n<li><a href=\\\"https://www.npmjs.org/package/multer#readme\\\">multer</a></li>\\n</ul>\\n<p>This module provides the following parsers:</p>\\n<ul>\\n<li><a href=\\\"#bodyparserjsonoptions\\\">JSON body parser</a></li>\\n<li><a href=\\\"#bodyparserrawoptions\\\">Raw body parser</a></li>\\n<li><a href=\\\"#bodyparsertextoptions\\\">Text body parser</a></li>\\n<li><a href=\\\"#bodyparserurlencodedoptions\\\">URL-encoded form body parser</a></li>\\n</ul>\\n<p>Other body parsers you might be interested in:</p>\\n<ul>\\n<li><a href=\\\"https://www.npmjs.org/package/body#readme\\\">body</a></li>\\n<li><a href=\\\"https://www.npmjs.org/package/co-body#readme\\\">co-body</a></li>\\n</ul>\\n<h2>Installation</h2>\\n<pre><code class=\\\"language-sh\\\">$ npm install body-parser\\n</code></pre>\\n<h2>API</h2>\\n<!-- eslint-disable no-unused-vars -->\\n<pre><code class=\\\"language-js\\\">var bodyParser = require('body-parser')\\n</code></pre>\\n<p>The <code>bodyParser</code> object exposes various factories to create middlewares. All\\nmiddlewares will populate the <code>req.body</code> property with the parsed body when\\nthe <code>Content-Type</code> request header matches the <code>type</code> option, or an empty\\nobject (<code>{}</code>) if there was no body to parse, the <code>Content-Type</code> was not matched,\\nor an error occurred.</p>\\n<p>The various errors returned by this module are described in the\\n<a href=\\\"#errors\\\">errors section</a>.</p>\\n<h3>bodyParser.json([options])</h3>\\n<p>Returns middleware that only parses <code>json</code> and only looks at requests where\\nthe <code>Content-Type</code> header matches the <code>type</code> option. This parser accepts any\\nUnicode encoding of the body and supports automatic inflation of <code>gzip</code> and\\n<code>deflate</code> encodings.</p>\\n<p>A new <code>body</code> object containing the parsed data is populated on the <code>request</code>\\nobject after the middleware (i.e. <code>req.body</code>).</p>\\n<h4>Options</h4>\\n<p>The <code>json</code> function takes an optional <code>options</code> object that may contain any of\\nthe following keys:</p>\\n<h5>inflate</h5>\\n<p>When set to <code>true</code>, then deflated (compressed) bodies will be inflated; when\\n<code>false</code>, deflated bodies are rejected. Defaults to <code>true</code>.</p>\\n<h5>limit</h5>\\n<p>Controls the maximum request body size. If this is a number, then the value\\nspecifies the number of bytes; if it is a string, the value is passed to the\\n<a href=\\\"https://www.npmjs.com/package/bytes\\\">bytes</a> library for parsing. Defaults\\nto <code>'100kb'</code>.</p>\\n<h5>reviver</h5>\\n<p>The <code>reviver</code> option is passed directly to <code>JSON.parse</code> as the second\\nargument. You can find more information on this argument\\n<a href=\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse#Example.3A_Using_the_reviver_parameter\\\">in the MDN documentation about JSON.parse</a>.</p>\\n<h5>strict</h5>\\n<p>When set to <code>true</code>, will only accept arrays and objects; when <code>false</code> will\\naccept anything <code>JSON.parse</code> accepts. Defaults to <code>true</code>.</p>\\n<h5>type</h5>\\n<p>The <code>type</code> option is used to determine what media type the middleware will\\nparse. This option can be a function or a string. If a string, <code>type</code> option\\nis passed directly to the <a href=\\\"https://www.npmjs.org/package/type-is#readme\\\">type-is</a>\\nlibrary and this can be an extension name (like <code>json</code>), a mime type (like\\n<code>application/json</code>), or a mime type with a wildcard (like <code>*/*</code> or <code>*/json</code>).\\nIf a function, the <code>type</code> option is called as <code>fn(req)</code> and the request is\\nparsed if it returns a truthy value. Defaults to <code>application/json</code>.</p>\\n<h5>verify</h5>\\n<p>The <code>verify</code> option, if supplied, is called as <code>verify(req, res, buf, encoding)</code>,\\nwhere <code>buf</code> is a <code>Buffer</code> of the raw request body and <code>encoding</code> is the\\nencoding of the request. The parsing can be aborted by throwing an error.</p>\\n<h3>bodyParser.raw([options])</h3>\\n<p>Returns middleware that parses all bodies as a <code>Buffer</code> and only looks at\\nrequests where the <code>Content-Type</code> header matches the <code>type</code> option. This\\nparser supports automatic inflation of <code>gzip</code> and <code>deflate</code> encodings.</p>\\n<p>A new <code>body</code> object containing the parsed data is populated on the <code>request</code>\\nobject after the middleware (i.e. <code>req.body</code>). This will be a <code>Buffer</code> object\\nof the body.</p>\\n<h4>Options</h4>\\n<p>The <code>raw</code> function takes an optional <code>options</code> object that may contain any of\\nthe following keys:</p>\\n<h5>inflate</h5>\\n<p>When set to <code>true</code>, then deflated (compressed) bodies will be inflated; when\\n<code>false</code>, deflated bodies are rejected. Defaults to <code>true</code>.</p>\\n<h5>limit</h5>\\n<p>Controls the maximum request body size. If this is a number, then the value\\nspecifies the number of bytes; if it is a string, the value is passed to the\\n<a href=\\\"https://www.npmjs.com/package/bytes\\\">bytes</a> library for parsing. Defaults\\nto <code>'100kb'</code>.</p>\\n<h5>type</h5>\\n<p>The <code>type</code> option is used to determine what media type the middleware will\\nparse. This option can be a function or a string. If a string, <code>type</code> option\\nis passed directly to the <a href=\\\"https://www.npmjs.org/package/type-is#readme\\\">type-is</a>\\nlibrary and this can be an extension name (like <code>bin</code>), a mime type (like\\n<code>application/octet-stream</code>), or a mime type with a wildcard (like <code>*/*</code> or\\n<code>application/*</code>). If a function, the <code>type</code> option is called as <code>fn(req)</code>\\nand the request is parsed if it returns a truthy value. Defaults to\\n<code>application/octet-stream</code>.</p>\\n<h5>verify</h5>\\n<p>The <code>verify</code> option, if supplied, is called as <code>verify(req, res, buf, encoding)</code>,\\nwhere <code>buf</code> is a <code>Buffer</code> of the raw request body and <code>encoding</code> is the\\nencoding of the request. The parsing can be aborted by throwing an error.</p>\\n<h3>bodyParser.text([options])</h3>\\n<p>Returns middleware that parses all bodies as a string and only looks at\\nrequests where the <code>Content-Type</code> header matches the <code>type</code> option. This\\nparser supports automatic inflation of <code>gzip</code> and <code>deflate</code> encodings.</p>\\n<p>A new <code>body</code> string containing the parsed data is populated on the <code>request</code>\\nobject after the middleware (i.e. <code>req.body</code>). This will be a string of the\\nbody.</p>\\n<h4>Options</h4>\\n<p>The <code>text</code> function takes an optional <code>options</code> object that may contain any of\\nthe following keys:</p>\\n<h5>defaultCharset</h5>\\n<p>Specify the default character set for the text content if the charset is not\\nspecified in the <code>Content-Type</code> header of the request. Defaults to <code>utf-8</code>.</p>\\n<h5>inflate</h5>\\n<p>When set to <code>true</code>, then deflated (compressed) bodies will be inflated; when\\n<code>false</code>, deflated bodies are rejected. Defaults to <code>true</code>.</p>\\n<h5>limit</h5>\\n<p>Controls the maximum request body size. If this is a number, then the value\\nspecifies the number of bytes; if it is a string, the value is passed to the\\n<a href=\\\"https://www.npmjs.com/package/bytes\\\">bytes</a> library for parsing. Defaults\\nto <code>'100kb'</code>.</p>\\n<h5>type</h5>\\n<p>The <code>type</code> option is used to determine what media type the middleware will\\nparse. This option can be a function or a string. If a string, <code>type</code> option\\nis passed directly to the <a href=\\\"https://www.npmjs.org/package/type-is#readme\\\">type-is</a>\\nlibrary and this can be an extension name (like <code>txt</code>), a mime type (like\\n<code>text/plain</code>), or a mime type with a wildcard (like <code>*/*</code> or <code>text/*</code>).\\nIf a function, the <code>type</code> option is called as <code>fn(req)</code> and the request is\\nparsed if it returns a truthy value. Defaults to <code>text/plain</code>.</p>\\n<h5>verify</h5>\\n<p>The <code>verify</code> option, if supplied, is called as <code>verify(req, res, buf, encoding)</code>,\\nwhere <code>buf</code> is a <code>Buffer</code> of the raw request body and <code>encoding</code> is the\\nencoding of the request. The parsing can be aborted by throwing an error.</p>\\n<h3>bodyParser.urlencoded([options])</h3>\\n<p>Returns middleware that only parses <code>urlencoded</code> bodies and only looks at\\nrequests where the <code>Content-Type</code> header matches the <code>type</code> option. This\\nparser accepts only UTF-8 encoding of the body and supports automatic\\ninflation of <code>gzip</code> and <code>deflate</code> encodings.</p>\\n<p>A new <code>body</code> object containing the parsed data is populated on the <code>request</code>\\nobject after the middleware (i.e. <code>req.body</code>). This object will contain\\nkey-value pairs, where the value can be a string or array (when <code>extended</code> is\\n<code>false</code>), or any type (when <code>extended</code> is <code>true</code>).</p>\\n<h4>Options</h4>\\n<p>The <code>urlencoded</code> function takes an optional <code>options</code> object that may contain\\nany of the following keys:</p>\\n<h5>extended</h5>\\n<p>The <code>extended</code> option allows to choose between parsing the URL-encoded data\\nwith the <code>querystring</code> library (when <code>false</code>) or the <code>qs</code> library (when\\n<code>true</code>). The \\\"extended\\\" syntax allows for rich objects and arrays to be\\nencoded into the URL-encoded format, allowing for a JSON-like experience\\nwith URL-encoded. For more information, please\\n<a href=\\\"https://www.npmjs.org/package/qs#readme\\\">see the qs library</a>.</p>\\n<p>Defaults to <code>true</code>, but using the default has been deprecated. Please\\nresearch into the difference between <code>qs</code> and <code>querystring</code> and choose the\\nappropriate setting.</p>\\n<h5>inflate</h5>\\n<p>When set to <code>true</code>, then deflated (compressed) bodies will be inflated; when\\n<code>false</code>, deflated bodies are rejected. Defaults to <code>true</code>.</p>\\n<h5>limit</h5>\\n<p>Controls the maximum request body size. If this is a number, then the value\\nspecifies the number of bytes; if it is a string, the value is passed to the\\n<a href=\\\"https://www.npmjs.com/package/bytes\\\">bytes</a> library for parsing. Defaults\\nto <code>'100kb'</code>.</p>\\n<h5>parameterLimit</h5>\\n<p>The <code>parameterLimit</code> option controls the maximum number of parameters that\\nare allowed in the URL-encoded data. If a request contains more parameters\\nthan this value, a 413 will be returned to the client. Defaults to <code>1000</code>.</p>\\n<h5>type</h5>\\n<p>The <code>type</code> option is used to determine what media type the middleware will\\nparse. This option can be a function or a string. If a string, <code>type</code> option\\nis passed directly to the <a href=\\\"https://www.npmjs.org/package/type-is#readme\\\">type-is</a>\\nlibrary and this can be an extension name (like <code>urlencoded</code>), a mime type (like\\n<code>application/x-www-form-urlencoded</code>), or a mime type with a wildcard (like\\n<code>*/x-www-form-urlencoded</code>). If a function, the <code>type</code> option is called as\\n<code>fn(req)</code> and the request is parsed if it returns a truthy value. Defaults\\nto <code>application/x-www-form-urlencoded</code>.</p>\\n<h5>verify</h5>\\n<p>The <code>verify</code> option, if supplied, is called as <code>verify(req, res, buf, encoding)</code>,\\nwhere <code>buf</code> is a <code>Buffer</code> of the raw request body and <code>encoding</code> is the\\nencoding of the request. The parsing can be aborted by throwing an error.</p>\\n<h2>Errors</h2>\\n<p>The middlewares provided by this module create errors depending on the error\\ncondition during parsing. The errors will typically have a <code>status</code>/<code>statusCode</code>\\nproperty that contains the suggested HTTP response code, an <code>expose</code> property\\nto determine if the <code>message</code> property should be displayed to the client, a\\n<code>type</code> property to determine the type of error without matching against the\\n<code>message</code>, and a <code>body</code> property containing the read body, if available.</p>\\n<p>The following are the common errors emitted, though any error can come through\\nfor various reasons.</p>\\n<h3>content encoding unsupported</h3>\\n<p>This error will occur when the request had a <code>Content-Encoding</code> header that\\ncontained an encoding but the \\\"inflation\\\" option was set to <code>false</code>. The\\n<code>status</code> property is set to <code>415</code>, the <code>type</code> property is set to\\n<code>'encoding.unsupported'</code>, and the <code>charset</code> property will be set to the\\nencoding that is unsupported.</p>\\n<h3>request aborted</h3>\\n<p>This error will occur when the request is aborted by the client before reading\\nthe body has finished. The <code>received</code> property will be set to the number of\\nbytes received before the request was aborted and the <code>expected</code> property is\\nset to the number of expected bytes. The <code>status</code> property is set to <code>400</code>\\nand <code>type</code> property is set to <code>'request.aborted'</code>.</p>\\n<h3>request entity too large</h3>\\n<p>This error will occur when the request body's size is larger than the \\\"limit\\\"\\noption. The <code>limit</code> property will be set to the byte limit and the <code>length</code>\\nproperty will be set to the request body's length. The <code>status</code> property is\\nset to <code>413</code> and the <code>type</code> property is set to <code>'entity.too.large'</code>.</p>\\n<h3>request size did not match content length</h3>\\n<p>This error will occur when the request's length did not match the length from\\nthe <code>Content-Length</code> header. This typically occurs when the request is malformed,\\ntypically when the <code>Content-Length</code> header was calculated based on characters\\ninstead of bytes. The <code>status</code> property is set to <code>400</code> and the <code>type</code> property\\nis set to <code>'request.size.invalid'</code>.</p>\\n<h3>stream encoding should not be set</h3>\\n<p>This error will occur when something called the <code>req.setEncoding</code> method prior\\nto this middleware. This module operates directly on bytes only and you cannot\\ncall <code>req.setEncoding</code> when using this module. The <code>status</code> property is set to\\n<code>500</code> and the <code>type</code> property is set to <code>'stream.encoding.set'</code>.</p>\\n<h3>too many parameters</h3>\\n<p>This error will occur when the content of the request exceeds the configured\\n<code>parameterLimit</code> for the <code>urlencoded</code> parser. The <code>status</code> property is set to\\n<code>413</code> and the <code>type</code> property is set to <code>'parameters.too.many'</code>.</p>\\n<h3>unsupported charset \\\"BOGUS\\\"</h3>\\n<p>This error will occur when the request had a charset parameter in the\\n<code>Content-Type</code> header, but the <code>iconv-lite</code> module does not support it OR the\\nparser does not support it. The charset is contained in the message as well\\nas in the <code>charset</code> property. The <code>status</code> property is set to <code>415</code>, the\\n<code>type</code> property is set to <code>'charset.unsupported'</code>, and the <code>charset</code> property\\nis set to the charset that is unsupported.</p>\\n<h3>unsupported content encoding \\\"bogus\\\"</h3>\\n<p>This error will occur when the request had a <code>Content-Encoding</code> header that\\ncontained an unsupported encoding. The encoding is contained in the message\\nas well as in the <code>encoding</code> property. The <code>status</code> property is set to <code>415</code>,\\nthe <code>type</code> property is set to <code>'encoding.unsupported'</code>, and the <code>encoding</code>\\nproperty is set to the encoding that is unsupported.</p>\\n<h2>Examples</h2>\\n<h3>Express/Connect top-level generic</h3>\\n<p>This example demonstrates adding a generic JSON and URL-encoded parser as a\\ntop-level middleware, which will parse the bodies of all incoming requests.\\nThis is the simplest setup.</p>\\n<pre><code class=\\\"language-js\\\">var express = require('express')\\nvar bodyParser = require('body-parser')\\n\\nvar app = express()\\n\\n// parse application/x-www-form-urlencoded\\napp.use(bodyParser.urlencoded({ extended: false }))\\n\\n// parse application/json\\napp.use(bodyParser.json())\\n\\napp.use(function (req, res) {\\n  res.setHeader('Content-Type', 'text/plain')\\n  res.write('you posted:\\\\n')\\n  res.end(JSON.stringify(req.body, null, 2))\\n})\\n</code></pre>\\n<h3>Express route-specific</h3>\\n<p>This example demonstrates adding body parsers specifically to the routes that\\nneed them. In general, this is the most recommended way to use body-parser with\\nExpress.</p>\\n<pre><code class=\\\"language-js\\\">var express = require('express')\\nvar bodyParser = require('body-parser')\\n\\nvar app = express()\\n\\n// create application/json parser\\nvar jsonParser = bodyParser.json()\\n\\n// create application/x-www-form-urlencoded parser\\nvar urlencodedParser = bodyParser.urlencoded({ extended: false })\\n\\n// POST /login gets urlencoded bodies\\napp.post('/login', urlencodedParser, function (req, res) {\\n  if (!req.body) return res.sendStatus(400)\\n  res.send('welcome, ' + req.body.username)\\n})\\n\\n// POST /api/users gets JSON bodies\\napp.post('/api/users', jsonParser, function (req, res) {\\n  if (!req.body) return res.sendStatus(400)\\n  // create user in req.body\\n})\\n</code></pre>\\n<h3>Change accepted type for parsers</h3>\\n<p>All the parsers accept a <code>type</code> option which allows you to change the\\n<code>Content-Type</code> that the middleware will parse.</p>\\n<pre><code class=\\\"language-js\\\">var express = require('express')\\nvar bodyParser = require('body-parser')\\n\\nvar app = express()\\n\\n// parse various different custom JSON types as JSON\\napp.use(bodyParser.json({ type: 'application/*+json' }))\\n\\n// parse some custom thing into a Buffer\\napp.use(bodyParser.raw({ type: 'application/vnd.custom-type' }))\\n\\n// parse an HTML body into a string\\napp.use(bodyParser.text({ type: 'text/html' }))\\n</code></pre>\\n<h2>License</h2>\\n<p><a href=\\\"LICENSE\\\">MIT</a></p>\",\"docPath\":\"argo-ci/node_modules/body-parser/readme\",\"proj\":\"argo-ci\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---docs-argo-ci-node-modules-body-parser-readme-html-306347c0de045e648f3d.js","module.exports = {\"pathContext\":{\"docHtml\":\"<h1>body-parser</h1>\\n<p><a href=\\\"https://npmjs.org/package/body-parser\\\"><img src=\\\"https://img.shields.io/npm/v/body-parser.svg\\\" alt=\\\"NPM Version\\\"></a>\\n<a href=\\\"https://npmjs.org/package/body-parser\\\"><img src=\\\"https://img.shields.io/npm/dm/body-parser.svg\\\" alt=\\\"NPM Downloads\\\"></a>\\n<a href=\\\"https://travis-ci.org/expressjs/body-parser\\\"><img src=\\\"https://img.shields.io/travis/expressjs/body-parser/master.svg\\\" alt=\\\"Build Status\\\"></a>\\n<a href=\\\"https://coveralls.io/r/expressjs/body-parser?branch=master\\\"><img src=\\\"https://img.shields.io/coveralls/expressjs/body-parser/master.svg\\\" alt=\\\"Test Coverage\\\"></a>\\n<a href=\\\"https://www.gratipay.com/dougwilson/\\\"><img src=\\\"https://img.shields.io/gratipay/dougwilson.svg\\\" alt=\\\"Gratipay\\\"></a></p>\\n<p>Node.js body parsing middleware.</p>\\n<p>Parse incoming request bodies in a middleware before your handlers, available\\nunder the <code>req.body</code> property.</p>\\n<p><a href=\\\"https://nodejs.org/en/docs/guides/anatomy-of-an-http-transaction/\\\">Learn about the anatomy of an HTTP transaction in Node.js</a>.</p>\\n<p><em>This does not handle multipart bodies</em>, due to their complex and typically\\nlarge nature. For multipart bodies, you may be interested in the following\\nmodules:</p>\\n<ul>\\n<li><a href=\\\"https://www.npmjs.org/package/busboy#readme\\\">busboy</a> and\\n<a href=\\\"https://www.npmjs.org/package/connect-busboy#readme\\\">connect-busboy</a></li>\\n<li><a href=\\\"https://www.npmjs.org/package/multiparty#readme\\\">multiparty</a> and\\n<a href=\\\"https://www.npmjs.org/package/connect-multiparty#readme\\\">connect-multiparty</a></li>\\n<li><a href=\\\"https://www.npmjs.org/package/formidable#readme\\\">formidable</a></li>\\n<li><a href=\\\"https://www.npmjs.org/package/multer#readme\\\">multer</a></li>\\n</ul>\\n<p>This module provides the following parsers:</p>\\n<ul>\\n<li><a href=\\\"#bodyparserjsonoptions\\\">JSON body parser</a></li>\\n<li><a href=\\\"#bodyparserrawoptions\\\">Raw body parser</a></li>\\n<li><a href=\\\"#bodyparsertextoptions\\\">Text body parser</a></li>\\n<li><a href=\\\"#bodyparserurlencodedoptions\\\">URL-encoded form body parser</a></li>\\n</ul>\\n<p>Other body parsers you might be interested in:</p>\\n<ul>\\n<li><a href=\\\"https://www.npmjs.org/package/body#readme\\\">body</a></li>\\n<li><a href=\\\"https://www.npmjs.org/package/co-body#readme\\\">co-body</a></li>\\n</ul>\\n<h2>Installation</h2>\\n<pre><code class=\\\"language-sh\\\">$ npm install body-parser\\n</code></pre>\\n<h2>API</h2>\\n<!-- eslint-disable no-unused-vars -->\\n<pre><code class=\\\"language-js\\\">var bodyParser = require('body-parser')\\n</code></pre>\\n<p>The <code>bodyParser</code> object exposes various factories to create middlewares. All\\nmiddlewares will populate the <code>req.body</code> property with the parsed body when\\nthe <code>Content-Type</code> request header matches the <code>type</code> option, or an empty\\nobject (<code>{}</code>) if there was no body to parse, the <code>Content-Type</code> was not matched,\\nor an error occurred.</p>\\n<p>The various errors returned by this module are described in the\\n<a href=\\\"#errors\\\">errors section</a>.</p>\\n<h3>bodyParser.json([options])</h3>\\n<p>Returns middleware that only parses <code>json</code> and only looks at requests where\\nthe <code>Content-Type</code> header matches the <code>type</code> option. This parser accepts any\\nUnicode encoding of the body and supports automatic inflation of <code>gzip</code> and\\n<code>deflate</code> encodings.</p>\\n<p>A new <code>body</code> object containing the parsed data is populated on the <code>request</code>\\nobject after the middleware (i.e. <code>req.body</code>).</p>\\n<h4>Options</h4>\\n<p>The <code>json</code> function takes an optional <code>options</code> object that may contain any of\\nthe following keys:</p>\\n<h5>inflate</h5>\\n<p>When set to <code>true</code>, then deflated (compressed) bodies will be inflated; when\\n<code>false</code>, deflated bodies are rejected. Defaults to <code>true</code>.</p>\\n<h5>limit</h5>\\n<p>Controls the maximum request body size. If this is a number, then the value\\nspecifies the number of bytes; if it is a string, the value is passed to the\\n<a href=\\\"https://www.npmjs.com/package/bytes\\\">bytes</a> library for parsing. Defaults\\nto <code>'100kb'</code>.</p>\\n<h5>reviver</h5>\\n<p>The <code>reviver</code> option is passed directly to <code>JSON.parse</code> as the second\\nargument. You can find more information on this argument\\n<a href=\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse#Example.3A_Using_the_reviver_parameter\\\">in the MDN documentation about JSON.parse</a>.</p>\\n<h5>strict</h5>\\n<p>When set to <code>true</code>, will only accept arrays and objects; when <code>false</code> will\\naccept anything <code>JSON.parse</code> accepts. Defaults to <code>true</code>.</p>\\n<h5>type</h5>\\n<p>The <code>type</code> option is used to determine what media type the middleware will\\nparse. This option can be a function or a string. If a string, <code>type</code> option\\nis passed directly to the <a href=\\\"https://www.npmjs.org/package/type-is#readme\\\">type-is</a>\\nlibrary and this can be an extension name (like <code>json</code>), a mime type (like\\n<code>application/json</code>), or a mime type with a wildcard (like <code>*/*</code> or <code>*/json</code>).\\nIf a function, the <code>type</code> option is called as <code>fn(req)</code> and the request is\\nparsed if it returns a truthy value. Defaults to <code>application/json</code>.</p>\\n<h5>verify</h5>\\n<p>The <code>verify</code> option, if supplied, is called as <code>verify(req, res, buf, encoding)</code>,\\nwhere <code>buf</code> is a <code>Buffer</code> of the raw request body and <code>encoding</code> is the\\nencoding of the request. The parsing can be aborted by throwing an error.</p>\\n<h3>bodyParser.raw([options])</h3>\\n<p>Returns middleware that parses all bodies as a <code>Buffer</code> and only looks at\\nrequests where the <code>Content-Type</code> header matches the <code>type</code> option. This\\nparser supports automatic inflation of <code>gzip</code> and <code>deflate</code> encodings.</p>\\n<p>A new <code>body</code> object containing the parsed data is populated on the <code>request</code>\\nobject after the middleware (i.e. <code>req.body</code>). This will be a <code>Buffer</code> object\\nof the body.</p>\\n<h4>Options</h4>\\n<p>The <code>raw</code> function takes an optional <code>options</code> object that may contain any of\\nthe following keys:</p>\\n<h5>inflate</h5>\\n<p>When set to <code>true</code>, then deflated (compressed) bodies will be inflated; when\\n<code>false</code>, deflated bodies are rejected. Defaults to <code>true</code>.</p>\\n<h5>limit</h5>\\n<p>Controls the maximum request body size. If this is a number, then the value\\nspecifies the number of bytes; if it is a string, the value is passed to the\\n<a href=\\\"https://www.npmjs.com/package/bytes\\\">bytes</a> library for parsing. Defaults\\nto <code>'100kb'</code>.</p>\\n<h5>type</h5>\\n<p>The <code>type</code> option is used to determine what media type the middleware will\\nparse. This option can be a function or a string. If a string, <code>type</code> option\\nis passed directly to the <a href=\\\"https://www.npmjs.org/package/type-is#readme\\\">type-is</a>\\nlibrary and this can be an extension name (like <code>bin</code>), a mime type (like\\n<code>application/octet-stream</code>), or a mime type with a wildcard (like <code>*/*</code> or\\n<code>application/*</code>). If a function, the <code>type</code> option is called as <code>fn(req)</code>\\nand the request is parsed if it returns a truthy value. Defaults to\\n<code>application/octet-stream</code>.</p>\\n<h5>verify</h5>\\n<p>The <code>verify</code> option, if supplied, is called as <code>verify(req, res, buf, encoding)</code>,\\nwhere <code>buf</code> is a <code>Buffer</code> of the raw request body and <code>encoding</code> is the\\nencoding of the request. The parsing can be aborted by throwing an error.</p>\\n<h3>bodyParser.text([options])</h3>\\n<p>Returns middleware that parses all bodies as a string and only looks at\\nrequests where the <code>Content-Type</code> header matches the <code>type</code> option. This\\nparser supports automatic inflation of <code>gzip</code> and <code>deflate</code> encodings.</p>\\n<p>A new <code>body</code> string containing the parsed data is populated on the <code>request</code>\\nobject after the middleware (i.e. <code>req.body</code>). This will be a string of the\\nbody.</p>\\n<h4>Options</h4>\\n<p>The <code>text</code> function takes an optional <code>options</code> object that may contain any of\\nthe following keys:</p>\\n<h5>defaultCharset</h5>\\n<p>Specify the default character set for the text content if the charset is not\\nspecified in the <code>Content-Type</code> header of the request. Defaults to <code>utf-8</code>.</p>\\n<h5>inflate</h5>\\n<p>When set to <code>true</code>, then deflated (compressed) bodies will be inflated; when\\n<code>false</code>, deflated bodies are rejected. Defaults to <code>true</code>.</p>\\n<h5>limit</h5>\\n<p>Controls the maximum request body size. If this is a number, then the value\\nspecifies the number of bytes; if it is a string, the value is passed to the\\n<a href=\\\"https://www.npmjs.com/package/bytes\\\">bytes</a> library for parsing. Defaults\\nto <code>'100kb'</code>.</p>\\n<h5>type</h5>\\n<p>The <code>type</code> option is used to determine what media type the middleware will\\nparse. This option can be a function or a string. If a string, <code>type</code> option\\nis passed directly to the <a href=\\\"https://www.npmjs.org/package/type-is#readme\\\">type-is</a>\\nlibrary and this can be an extension name (like <code>txt</code>), a mime type (like\\n<code>text/plain</code>), or a mime type with a wildcard (like <code>*/*</code> or <code>text/*</code>).\\nIf a function, the <code>type</code> option is called as <code>fn(req)</code> and the request is\\nparsed if it returns a truthy value. Defaults to <code>text/plain</code>.</p>\\n<h5>verify</h5>\\n<p>The <code>verify</code> option, if supplied, is called as <code>verify(req, res, buf, encoding)</code>,\\nwhere <code>buf</code> is a <code>Buffer</code> of the raw request body and <code>encoding</code> is the\\nencoding of the request. The parsing can be aborted by throwing an error.</p>\\n<h3>bodyParser.urlencoded([options])</h3>\\n<p>Returns middleware that only parses <code>urlencoded</code> bodies and only looks at\\nrequests where the <code>Content-Type</code> header matches the <code>type</code> option. This\\nparser accepts only UTF-8 encoding of the body and supports automatic\\ninflation of <code>gzip</code> and <code>deflate</code> encodings.</p>\\n<p>A new <code>body</code> object containing the parsed data is populated on the <code>request</code>\\nobject after the middleware (i.e. <code>req.body</code>). This object will contain\\nkey-value pairs, where the value can be a string or array (when <code>extended</code> is\\n<code>false</code>), or any type (when <code>extended</code> is <code>true</code>).</p>\\n<h4>Options</h4>\\n<p>The <code>urlencoded</code> function takes an optional <code>options</code> object that may contain\\nany of the following keys:</p>\\n<h5>extended</h5>\\n<p>The <code>extended</code> option allows to choose between parsing the URL-encoded data\\nwith the <code>querystring</code> library (when <code>false</code>) or the <code>qs</code> library (when\\n<code>true</code>). The \\\"extended\\\" syntax allows for rich objects and arrays to be\\nencoded into the URL-encoded format, allowing for a JSON-like experience\\nwith URL-encoded. For more information, please\\n<a href=\\\"https://www.npmjs.org/package/qs#readme\\\">see the qs library</a>.</p>\\n<p>Defaults to <code>true</code>, but using the default has been deprecated. Please\\nresearch into the difference between <code>qs</code> and <code>querystring</code> and choose the\\nappropriate setting.</p>\\n<h5>inflate</h5>\\n<p>When set to <code>true</code>, then deflated (compressed) bodies will be inflated; when\\n<code>false</code>, deflated bodies are rejected. Defaults to <code>true</code>.</p>\\n<h5>limit</h5>\\n<p>Controls the maximum request body size. If this is a number, then the value\\nspecifies the number of bytes; if it is a string, the value is passed to the\\n<a href=\\\"https://www.npmjs.com/package/bytes\\\">bytes</a> library for parsing. Defaults\\nto <code>'100kb'</code>.</p>\\n<h5>parameterLimit</h5>\\n<p>The <code>parameterLimit</code> option controls the maximum number of parameters that\\nare allowed in the URL-encoded data. If a request contains more parameters\\nthan this value, a 413 will be returned to the client. Defaults to <code>1000</code>.</p>\\n<h5>type</h5>\\n<p>The <code>type</code> option is used to determine what media type the middleware will\\nparse. This option can be a function or a string. If a string, <code>type</code> option\\nis passed directly to the <a href=\\\"https://www.npmjs.org/package/type-is#readme\\\">type-is</a>\\nlibrary and this can be an extension name (like <code>urlencoded</code>), a mime type (like\\n<code>application/x-www-form-urlencoded</code>), or a mime type with a wildcard (like\\n<code>*/x-www-form-urlencoded</code>). If a function, the <code>type</code> option is called as\\n<code>fn(req)</code> and the request is parsed if it returns a truthy value. Defaults\\nto <code>application/x-www-form-urlencoded</code>.</p>\\n<h5>verify</h5>\\n<p>The <code>verify</code> option, if supplied, is called as <code>verify(req, res, buf, encoding)</code>,\\nwhere <code>buf</code> is a <code>Buffer</code> of the raw request body and <code>encoding</code> is the\\nencoding of the request. The parsing can be aborted by throwing an error.</p>\\n<h2>Errors</h2>\\n<p>The middlewares provided by this module create errors depending on the error\\ncondition during parsing. The errors will typically have a <code>status</code>/<code>statusCode</code>\\nproperty that contains the suggested HTTP response code, an <code>expose</code> property\\nto determine if the <code>message</code> property should be displayed to the client, a\\n<code>type</code> property to determine the type of error without matching against the\\n<code>message</code>, and a <code>body</code> property containing the read body, if available.</p>\\n<p>The following are the common errors emitted, though any error can come through\\nfor various reasons.</p>\\n<h3>content encoding unsupported</h3>\\n<p>This error will occur when the request had a <code>Content-Encoding</code> header that\\ncontained an encoding but the \\\"inflation\\\" option was set to <code>false</code>. The\\n<code>status</code> property is set to <code>415</code>, the <code>type</code> property is set to\\n<code>'encoding.unsupported'</code>, and the <code>charset</code> property will be set to the\\nencoding that is unsupported.</p>\\n<h3>request aborted</h3>\\n<p>This error will occur when the request is aborted by the client before reading\\nthe body has finished. The <code>received</code> property will be set to the number of\\nbytes received before the request was aborted and the <code>expected</code> property is\\nset to the number of expected bytes. The <code>status</code> property is set to <code>400</code>\\nand <code>type</code> property is set to <code>'request.aborted'</code>.</p>\\n<h3>request entity too large</h3>\\n<p>This error will occur when the request body's size is larger than the \\\"limit\\\"\\noption. The <code>limit</code> property will be set to the byte limit and the <code>length</code>\\nproperty will be set to the request body's length. The <code>status</code> property is\\nset to <code>413</code> and the <code>type</code> property is set to <code>'entity.too.large'</code>.</p>\\n<h3>request size did not match content length</h3>\\n<p>This error will occur when the request's length did not match the length from\\nthe <code>Content-Length</code> header. This typically occurs when the request is malformed,\\ntypically when the <code>Content-Length</code> header was calculated based on characters\\ninstead of bytes. The <code>status</code> property is set to <code>400</code> and the <code>type</code> property\\nis set to <code>'request.size.invalid'</code>.</p>\\n<h3>stream encoding should not be set</h3>\\n<p>This error will occur when something called the <code>req.setEncoding</code> method prior\\nto this middleware. This module operates directly on bytes only and you cannot\\ncall <code>req.setEncoding</code> when using this module. The <code>status</code> property is set to\\n<code>500</code> and the <code>type</code> property is set to <code>'stream.encoding.set'</code>.</p>\\n<h3>too many parameters</h3>\\n<p>This error will occur when the content of the request exceeds the configured\\n<code>parameterLimit</code> for the <code>urlencoded</code> parser. The <code>status</code> property is set to\\n<code>413</code> and the <code>type</code> property is set to <code>'parameters.too.many'</code>.</p>\\n<h3>unsupported charset \\\"BOGUS\\\"</h3>\\n<p>This error will occur when the request had a charset parameter in the\\n<code>Content-Type</code> header, but the <code>iconv-lite</code> module does not support it OR the\\nparser does not support it. The charset is contained in the message as well\\nas in the <code>charset</code> property. The <code>status</code> property is set to <code>415</code>, the\\n<code>type</code> property is set to <code>'charset.unsupported'</code>, and the <code>charset</code> property\\nis set to the charset that is unsupported.</p>\\n<h3>unsupported content encoding \\\"bogus\\\"</h3>\\n<p>This error will occur when the request had a <code>Content-Encoding</code> header that\\ncontained an unsupported encoding. The encoding is contained in the message\\nas well as in the <code>encoding</code> property. The <code>status</code> property is set to <code>415</code>,\\nthe <code>type</code> property is set to <code>'encoding.unsupported'</code>, and the <code>encoding</code>\\nproperty is set to the encoding that is unsupported.</p>\\n<h2>Examples</h2>\\n<h3>Express/Connect top-level generic</h3>\\n<p>This example demonstrates adding a generic JSON and URL-encoded parser as a\\ntop-level middleware, which will parse the bodies of all incoming requests.\\nThis is the simplest setup.</p>\\n<pre><code class=\\\"language-js\\\">var express = require('express')\\nvar bodyParser = require('body-parser')\\n\\nvar app = express()\\n\\n// parse application/x-www-form-urlencoded\\napp.use(bodyParser.urlencoded({ extended: false }))\\n\\n// parse application/json\\napp.use(bodyParser.json())\\n\\napp.use(function (req, res) {\\n  res.setHeader('Content-Type', 'text/plain')\\n  res.write('you posted:\\\\n')\\n  res.end(JSON.stringify(req.body, null, 2))\\n})\\n</code></pre>\\n<h3>Express route-specific</h3>\\n<p>This example demonstrates adding body parsers specifically to the routes that\\nneed them. In general, this is the most recommended way to use body-parser with\\nExpress.</p>\\n<pre><code class=\\\"language-js\\\">var express = require('express')\\nvar bodyParser = require('body-parser')\\n\\nvar app = express()\\n\\n// create application/json parser\\nvar jsonParser = bodyParser.json()\\n\\n// create application/x-www-form-urlencoded parser\\nvar urlencodedParser = bodyParser.urlencoded({ extended: false })\\n\\n// POST /login gets urlencoded bodies\\napp.post('/login', urlencodedParser, function (req, res) {\\n  if (!req.body) return res.sendStatus(400)\\n  res.send('welcome, ' + req.body.username)\\n})\\n\\n// POST /api/users gets JSON bodies\\napp.post('/api/users', jsonParser, function (req, res) {\\n  if (!req.body) return res.sendStatus(400)\\n  // create user in req.body\\n})\\n</code></pre>\\n<h3>Change accepted type for parsers</h3>\\n<p>All the parsers accept a <code>type</code> option which allows you to change the\\n<code>Content-Type</code> that the middleware will parse.</p>\\n<pre><code class=\\\"language-js\\\">var express = require('express')\\nvar bodyParser = require('body-parser')\\n\\nvar app = express()\\n\\n// parse various different custom JSON types as JSON\\napp.use(bodyParser.json({ type: 'application/*+json' }))\\n\\n// parse some custom thing into a Buffer\\napp.use(bodyParser.raw({ type: 'application/vnd.custom-type' }))\\n\\n// parse an HTML body into a string\\napp.use(bodyParser.text({ type: 'text/html' }))\\n</code></pre>\\n<h2>License</h2>\\n<p><a href=\\\"LICENSE\\\">MIT</a></p>\",\"docPath\":\"argo-ci/node_modules/body-parser/readme\",\"proj\":\"argo-ci\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/docs-argo-ci-node-modules-body-parser-readme-html.json\n// module id = 2097\n// module chunks = 224284564105877"],"sourceRoot":""}