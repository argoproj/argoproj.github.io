webpackJsonp([0x8703d6b34ddd],{497:function(e,c){e.exports={pathContext:{docHtml:'<h2 id="configure-the-service-account-to-run-workflows"><a href="#configure-the-service-account-to-run-workflows" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Configure the service account to run Workflows</h2>\n<h3 id="roles-rolebindings-and-serviceaccounts"><a href="#roles-rolebindings-and-serviceaccounts" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Roles, RoleBindings, and ServiceAccounts</h3>\n<p>In order for Argo to support features such as artifacts, outputs, access to secrets, etc. it needs to communicate with Kubernetes resources\nusing the Kubernetes API. To communicate with the Kubernetes API, Argo uses a <code>ServiceAccount</code> to authenticate itself to the Kubernetes API.\nYou can specify which <code>Role</code> (i.e. which permissions) the <code>ServiceAccount</code> that Argo uses by binding a <code>Role</code> to a <code>ServiceAccount</code> using a <code>RoleBinding</code></p>\n<p>Then, when submitting Workflows you can specify which <code>ServiceAccount</code> Argo uses using:</p>\n<pre><code class="language-sh">argo submit --serviceaccount &#x3C;name>\n</code></pre>\n<p>When no <code>ServiceAccount</code> is provided, Argo will use the <code>default</code> <code>ServiceAccount</code> from the namespace from which it is run, which will almost always have insufficient privileges by default.</p>\n<p>For more information about granting Argo the necessary permissions for your use case see <a href="workflow-rbac.html">Workflow RBAC</a>.</p>\n<h3 id="granting-admin-privileges"><a href="#granting-admin-privileges" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Granting admin privileges</h3>\n<p>For the purposes of this demo, we will grant the <code>default</code> <code>ServiceAccount</code> admin privileges (i.e., we will bind the <code>admin</code> <code>Role</code> to the <code>default</code> <code>ServiceAccount</code> of the current namespace):</p>\n<pre><code class="language-sh">kubectl create rolebinding default-admin --clusterrole=admin --serviceaccount=default:default\n</code></pre>',docPath:"argo/service-accounts",proj:"argo"}}}});
//# sourceMappingURL=path---docs-argo-service-accounts-html-178c8f20a25314fd5c8d.js.map