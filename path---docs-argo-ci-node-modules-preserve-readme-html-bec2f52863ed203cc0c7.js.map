{"version":3,"sources":["webpack:///path---docs-argo-ci-node-modules-preserve-readme-html-bec2f52863ed203cc0c7.js","webpack:///./.cache/json/docs-argo-ci-node-modules-preserve-readme-html.json"],"names":["webpackJsonp","3047","module","exports","pathContext","docHtml","docPath","proj"],"mappings":"AAAAA,cAAc,iBAERC,KACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,aAAeC,QAAA,+jGAAq8EC,QAAA,uCAAAC,KAAA","file":"path---docs-argo-ci-node-modules-preserve-readme-html-bec2f52863ed203cc0c7.js","sourcesContent":["webpackJsonp([225308878455765],{\n\n/***/ 3047:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"pathContext\":{\"docHtml\":\"<h1>preserve <a href=\\\"http://badge.fury.io/js/preserve\\\"><img src=\\\"https://badge.fury.io/js/preserve.svg\\\" alt=\\\"NPM version\\\"></a></h1>\\n<blockquote>\\n<p>Temporarily substitute tokens in the given <code>string</code> with placeholders, then put them back after transforming the string.</p>\\n</blockquote>\\n<p>Useful for protecting tokens, like templates in HTML, from being mutated when the string is transformed in some way, like from a formatter/beautifier.</p>\\n<p><strong>Example without <code>preserve</code></strong></p>\\n<p>Let's say you want to use <a href=\\\"https://github.com/beautify-web/js-beautify\\\">js-beautify</a> on a string of html with Lo-Dash/Underscore templates, such as: <code>&#x3C;ul>&#x3C;li>&#x3C;%= name %>&#x3C;/li>&#x3C;/ul></code>:</p>\\n<p>js-beautify will render the template unusable (and apply incorrect formatting because of the unfamiliar syntax from the Lo-Dash template):</p>\\n<pre><code class=\\\"language-html\\\">&#x3C;ul>\\n  &#x3C;li>\\n    &#x3C;%=n ame %>\\n  &#x3C;/li>\\n&#x3C;/ul>\\n</code></pre>\\n<p><strong>Example with <code>preserve</code></strong></p>\\n<p>Correct.</p>\\n<pre><code class=\\\"language-html\\\">&#x3C;ul>\\n  &#x3C;li>&#x3C;%= name %>&#x3C;/li>\\n&#x3C;/ul>\\n</code></pre>\\n<p>For the record, this is just a random example, I've had very few issues with js-beautify in general. But with or without js-beautify, this kind of token mangling does happen sometimes when you use formatters, beautifiers or similar tools.</p>\\n<h2>Install</h2>\\n<h2>Install with <a href=\\\"npmjs.org\\\">npm</a></h2>\\n<pre><code class=\\\"language-bash\\\">npm i preserve --save\\n</code></pre>\\n<h2>Run tests</h2>\\n<pre><code class=\\\"language-bash\\\">npm test\\n</code></pre>\\n<h2>API</h2>\\n<h3><a href=\\\"index.js#L23\\\">.before</a></h3>\\n<p>Replace tokens in <code>str</code> with a temporary, heuristic placeholder.</p>\\n<ul>\\n<li><code>str</code> <strong>{String}</strong>    </li>\\n<li><code>returns</code> <strong>{String}</strong>: String with placeholders.  </li>\\n</ul>\\n<pre><code class=\\\"language-js\\\">tokens.before('{a\\\\\\\\,b}');\\n//=> '{__ID1__}'\\n</code></pre>\\n<h3><a href=\\\"index.js#L44\\\">.after</a></h3>\\n<p>Replace placeholders in <code>str</code> with original tokens.</p>\\n<ul>\\n<li><code>str</code> <strong>{String}</strong>: String with placeholders    </li>\\n<li><code>returns</code> <strong>{String}</strong> <code>str</code>: String with original tokens.  </li>\\n</ul>\\n<pre><code class=\\\"language-js\\\">tokens.after('{__ID1__}');\\n//=> '{a\\\\\\\\,b}'\\n</code></pre>\\n<h2>Contributing</h2>\\n<p>Pull requests and stars are always welcome. For bugs and feature requests, <a href=\\\"https://github.com/jonschlinkert/preserve/issues\\\">please create an issue</a></p>\\n<h2>Author</h2>\\n<p><strong>Jon Schlinkert</strong></p>\\n<ul>\\n<li><a href=\\\"https://github.com/jonschlinkert\\\">github/jonschlinkert</a></li>\\n<li><a href=\\\"http://twitter.com/jonschlinkert\\\">twitter/jonschlinkert</a> </li>\\n</ul>\\n<h2>License</h2>\\n<p>Copyright (c) 2015-2015, Jon Schlinkert.\\nReleased under the MIT license</p>\\n<hr>\\n<p><em>This file was generated by <a href=\\\"https://github.com/assemble/verb\\\">verb</a> on January 10, 2015.</em></p>\",\"docPath\":\"argo-ci/node_modules/preserve/readme\",\"proj\":\"argo-ci\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---docs-argo-ci-node-modules-preserve-readme-html-bec2f52863ed203cc0c7.js","module.exports = {\"pathContext\":{\"docHtml\":\"<h1>preserve <a href=\\\"http://badge.fury.io/js/preserve\\\"><img src=\\\"https://badge.fury.io/js/preserve.svg\\\" alt=\\\"NPM version\\\"></a></h1>\\n<blockquote>\\n<p>Temporarily substitute tokens in the given <code>string</code> with placeholders, then put them back after transforming the string.</p>\\n</blockquote>\\n<p>Useful for protecting tokens, like templates in HTML, from being mutated when the string is transformed in some way, like from a formatter/beautifier.</p>\\n<p><strong>Example without <code>preserve</code></strong></p>\\n<p>Let's say you want to use <a href=\\\"https://github.com/beautify-web/js-beautify\\\">js-beautify</a> on a string of html with Lo-Dash/Underscore templates, such as: <code>&#x3C;ul>&#x3C;li>&#x3C;%= name %>&#x3C;/li>&#x3C;/ul></code>:</p>\\n<p>js-beautify will render the template unusable (and apply incorrect formatting because of the unfamiliar syntax from the Lo-Dash template):</p>\\n<pre><code class=\\\"language-html\\\">&#x3C;ul>\\n  &#x3C;li>\\n    &#x3C;%=n ame %>\\n  &#x3C;/li>\\n&#x3C;/ul>\\n</code></pre>\\n<p><strong>Example with <code>preserve</code></strong></p>\\n<p>Correct.</p>\\n<pre><code class=\\\"language-html\\\">&#x3C;ul>\\n  &#x3C;li>&#x3C;%= name %>&#x3C;/li>\\n&#x3C;/ul>\\n</code></pre>\\n<p>For the record, this is just a random example, I've had very few issues with js-beautify in general. But with or without js-beautify, this kind of token mangling does happen sometimes when you use formatters, beautifiers or similar tools.</p>\\n<h2>Install</h2>\\n<h2>Install with <a href=\\\"npmjs.org\\\">npm</a></h2>\\n<pre><code class=\\\"language-bash\\\">npm i preserve --save\\n</code></pre>\\n<h2>Run tests</h2>\\n<pre><code class=\\\"language-bash\\\">npm test\\n</code></pre>\\n<h2>API</h2>\\n<h3><a href=\\\"index.js#L23\\\">.before</a></h3>\\n<p>Replace tokens in <code>str</code> with a temporary, heuristic placeholder.</p>\\n<ul>\\n<li><code>str</code> <strong>{String}</strong>    </li>\\n<li><code>returns</code> <strong>{String}</strong>: String with placeholders.  </li>\\n</ul>\\n<pre><code class=\\\"language-js\\\">tokens.before('{a\\\\\\\\,b}');\\n//=> '{__ID1__}'\\n</code></pre>\\n<h3><a href=\\\"index.js#L44\\\">.after</a></h3>\\n<p>Replace placeholders in <code>str</code> with original tokens.</p>\\n<ul>\\n<li><code>str</code> <strong>{String}</strong>: String with placeholders    </li>\\n<li><code>returns</code> <strong>{String}</strong> <code>str</code>: String with original tokens.  </li>\\n</ul>\\n<pre><code class=\\\"language-js\\\">tokens.after('{__ID1__}');\\n//=> '{a\\\\\\\\,b}'\\n</code></pre>\\n<h2>Contributing</h2>\\n<p>Pull requests and stars are always welcome. For bugs and feature requests, <a href=\\\"https://github.com/jonschlinkert/preserve/issues\\\">please create an issue</a></p>\\n<h2>Author</h2>\\n<p><strong>Jon Schlinkert</strong></p>\\n<ul>\\n<li><a href=\\\"https://github.com/jonschlinkert\\\">github/jonschlinkert</a></li>\\n<li><a href=\\\"http://twitter.com/jonschlinkert\\\">twitter/jonschlinkert</a> </li>\\n</ul>\\n<h2>License</h2>\\n<p>Copyright (c) 2015-2015, Jon Schlinkert.\\nReleased under the MIT license</p>\\n<hr>\\n<p><em>This file was generated by <a href=\\\"https://github.com/assemble/verb\\\">verb</a> on January 10, 2015.</em></p>\",\"docPath\":\"argo-ci/node_modules/preserve/readme\",\"proj\":\"argo-ci\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/docs-argo-ci-node-modules-preserve-readme-html.json\n// module id = 3047\n// module chunks = 225308878455765"],"sourceRoot":""}