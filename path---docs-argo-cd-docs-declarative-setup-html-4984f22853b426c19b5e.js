webpackJsonp([0x72cc41d7e676],{532:function(e,n){e.exports={pathContext:{docHtml:'<h1>Declarative Setup</h1>\n<p>Argo CD settings might be defined declaratively using Kubernetes manifests.</p>\n<h2>Repositories</h2>\n<p>Repository credentials are stored in secret. Use following steps to configure a repo:</p>\n<ol>\n<li>\n<p>Create secret which contains repository credentials. Consider using <a href="https://github.com/bitnami-labs/sealed-secrets">bitnami-labs/sealed-secrets</a> to store encrypted secret\ndefinition as a Kubernetes manifest.</p>\n</li>\n<li>\n<p>Register repository in <code>argocd-cm</code> config map. Each repository must have <code>url</code> field and <code>usernameSecret</code>, <code>passwordSecret</code> or <code>sshPrivateKeySecret</code>.</p>\n</li>\n</ol>\n<p>Example:</p>\n<pre><code class="language-yaml">apiVersion: v1\ndata:\n  dex.config: |\n    connectors:\n    - type: github\n      id: github\n      name: GitHub\n      config:\n        clientID: e8f597564a82e99ba9aa\n        clientSecret: e551007c6c6dbc666bdade281ff095caec150159\n  repositories: |\n    - passwordSecret:\n        key: password\n        name: my-secret\n      url: https://github.com/argoproj/my-private-repository\n      usernameSecret:\n        key: username\n        name: my-secret\n  url: http://localhost:4000\nkind: ConfigMap\nmetadata:\n  name: argocd-cm\n</code></pre>\n<h2>Clusters</h2>\n<p>Cluster credentials are stored in secrets same as repository credentials but does not require entry in <code>argocd-cm</code> config map. Each secret must have label\n<code>argocd.argoproj.io/secret-type: cluster</code> and name which is following convention: <code>&#x3C;hostname>-&#x3C;port></code>.</p>\n<p>The secret data must include following fields:</p>\n<ul>\n<li><code>name</code> - cluster name</li>\n<li><code>server</code> - cluster api server url</li>\n<li><code>config</code> - JSON representation of following data structure:</li>\n</ul>\n<pre><code class="language-yaml"># Basic authentication settings\nusername: string\npassword: string\n# Bearer authentication settings\nbearerToken: string\n# IAM authentication configuration\nawsAuthConfig:\n    clusterName: string\n    roleARN: string\n# Transport layer security configuration settings\ntlsClientConfig:\n    # PEM-encoded bytes (typically read from a client certificate file).\n    caData: string\n    # PEM-encoded bytes (typically read from a client certificate file).\n    certData: string\n    # Server should be accessed without verifying the TLS certificate\n    insecure: boolean\n    # PEM-encoded bytes (typically read from a client certificate key file).\n    keyData: string\n    # ServerName is passed to the server for SNI and is used in the client to check server\n    # ceritificates against. If ServerName is empty, the hostname used to contact the\n    # server is used.\n    serverName: string\n</code></pre>\n<p>Cluster secret example:</p>\n<pre><code class="language-yaml">apiVersion: v1\nstringData:\n  config: |||\n    {\n        "bearerToken": "&#x3C;authentication token>",\n        "tlsClientConfig": {\n            "insecure": false,\n            "caData": "&#x3C;base64 encoded certificate>"\n        }\n    }\n  |||\n  name: mycluster.com\n  server: https://mycluster.com\nkind: Secret\nmetadata:\n  labels:\n    argocd.argoproj.io/secret-type: cluster\n  name: mycluster.com-443\ntype: Opaque\n</code></pre>\n<h2>Helm Chart repositories</h2>\n<p>Non standard Helm Chart repositories have to be registered using <code>helm.repositories</code> in <code>argocd-cm</code> config map. Each repository must have <code>url</code> and <code>name</code> fields.\nFor private Helm repos you might configure access credentials and HTTPS settings using <code>usernameSecret</code>, <code>passwordSecret</code>, <code>caSecret</code>, <code>certSecret</code> and <code>keySecret</code> fields.</p>\n<p>Example:</p>\n<pre><code class="language-yaml">apiVersion: v1\ndata:\n  helm.repositories: |\n    - url: https://storage.googleapis.com/istio-prerelease/daily-build/master-latest-daily/charts\n      name: istio.io\n    - url: https://argoproj.github.io/argo-helm\n      name: argo\n      caUsername:\n        name: my-secret\n        key: username\n      caPassword:\n        name: my-secret\n        key: password\n      caSecret:\n        name: my-secret\n        key: ca\n      certSecret:\n        name: my-secret\n        key: cert\n      keySecret:\n        name: my-secret\n        key: key\nmetadata:\n  name: argocd-cm\n</code></pre>\n<h2>SSO &#x26; RBAC</h2>\n<ul>\n<li>SSO configuration details: <a href="sso.html">SSO</a></li>\n<li>RBAC configuration details: <a href="rbac.html">RBAC</a></li>\n</ul>\n<h2>Manage Argo CD using Argo CD</h2>\n<p>Argo CD is able to manage itself since all settings are represented by Kubernetes manifests. The suggested way is to create <a href="https://github.com/kubernetes-sigs/kustomize">Kustomize</a>\nbased application which uses base Argo CD manifests from <a href="https://github.com/argoproj/argo-cd">https://github.com/argoproj/argo-cd</a> and apply required changes on top.</p>\n<p>Example of <code>kustomization.yaml</code>:</p>\n<pre><code class="language-yaml">bases:\n- github.com/argoproj/argo-cd//manifests/cluster-install?ref=v0.10.6\n\n# additional resources like ingress rules, cluster and repository secrets.\nresources:\n- clusters-secrets.yaml\n- repos-secrets.yaml\n\n# changes to config maps\npatchesStrategicMerge:\n- overlays/argo-cd-cm.yaml\n</code></pre>\n<p>The live example of self managed Argo CD config is available at <a href="https://cd.apps.argoproj.io">https://cd.apps.argoproj.io</a> and with configuration\nstored at <a href="https://github.com/argoproj/argoproj-deployments/tree/master/argocd">argoproj/argoproj-deployments</a>.</p>\n<blockquote>\n<p>NOTE: You will need to sign-in using your github account to get access to <a href="https://cd.apps.argoproj.io">https://cd.apps.argoproj.io</a></p>\n</blockquote>',docPath:"argo-cd/docs/declarative-setup",proj:"argo-cd"}}}});
//# sourceMappingURL=path---docs-argo-cd-docs-declarative-setup-html-4984f22853b426c19b5e.js.map