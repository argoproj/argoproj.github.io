webpackJsonp([0xb9abe75e6cfc],{3056:function(e,d){e.exports={pathContext:{docHtml:'<h1>proxy-addr</h1>\n<p><a href="https://npmjs.org/package/proxy-addr"><img src="https://img.shields.io/npm/v/proxy-addr.svg" alt="NPM Version"></a>\n<a href="https://npmjs.org/package/proxy-addr"><img src="https://img.shields.io/npm/dm/proxy-addr.svg" alt="NPM Downloads"></a>\n<a href="https://nodejs.org/en/download/"><img src="https://img.shields.io/node/v/proxy-addr.svg" alt="Node.js Version"></a>\n<a href="https://travis-ci.org/jshttp/proxy-addr"><img src="https://img.shields.io/travis/jshttp/proxy-addr/master.svg" alt="Build Status"></a>\n<a href="https://coveralls.io/r/jshttp/proxy-addr?branch=master"><img src="https://img.shields.io/coveralls/jshttp/proxy-addr/master.svg" alt="Test Coverage"></a></p>\n<p>Determine address of proxied request</p>\n<h2>Install</h2>\n<p>This is a <a href="https://nodejs.org/en/">Node.js</a> module available through the\n<a href="https://www.npmjs.com/">npm registry</a>. Installation is done using the\n<a href="https://docs.npmjs.com/getting-started/installing-npm-packages-locally"><code>npm install</code> command</a>:</p>\n<pre><code class="language-sh">$ npm install proxy-addr\n</code></pre>\n<h2>API</h2>\n<!-- eslint-disable no-unused-vars -->\n<pre><code class="language-js">var proxyaddr = require(\'proxy-addr\')\n</code></pre>\n<h3>proxyaddr(req, trust)</h3>\n<p>Return the address of the request, using the given <code>trust</code> parameter.</p>\n<p>The <code>trust</code> argument is a function that returns <code>true</code> if you trust\nthe address, <code>false</code> if you don\'t. The closest untrusted address is\nreturned.</p>\n<!-- eslint-disable no-undef -->\n<pre><code class="language-js">proxyaddr(req, function (addr) { return addr === \'127.0.0.1\' })\nproxyaddr(req, function (addr, i) { return i &#x3C; 1 })\n</code></pre>\n<p>The <code>trust</code> arugment may also be a single IP address string or an\narray of trusted addresses, as plain IP addresses, CIDR-formatted\nstrings, or IP/netmask strings.</p>\n<!-- eslint-disable no-undef -->\n<pre><code class="language-js">proxyaddr(req, \'127.0.0.1\')\nproxyaddr(req, [\'127.0.0.0/8\', \'10.0.0.0/8\'])\nproxyaddr(req, [\'127.0.0.0/255.0.0.0\', \'192.168.0.0/255.255.0.0\'])\n</code></pre>\n<p>This module also supports IPv6. Your IPv6 addresses will be normalized\nautomatically (i.e. <code>fe80::00ed:1</code> equals <code>fe80:0:0:0:0:0:ed:1</code>).</p>\n<!-- eslint-disable no-undef -->\n<pre><code class="language-js">proxyaddr(req, \'::1\')\nproxyaddr(req, [\'::1/128\', \'fe80::/10\'])\n</code></pre>\n<p>This module will automatically work with IPv4-mapped IPv6 addresses\nas well to support node.js in IPv6-only mode. This means that you do\nnot have to specify both <code>::ffff:a00:1</code> and <code>10.0.0.1</code>.</p>\n<p>As a convenience, this module also takes certain pre-defined names\nin addition to IP addresses, which expand into IP addresses:</p>\n<!-- eslint-disable no-undef -->\n<pre><code class="language-js">proxyaddr(req, \'loopback\')\nproxyaddr(req, [\'loopback\', \'fc00:ac:1ab5:fff::1/64\'])\n</code></pre>\n<ul>\n<li><code>loopback</code>: IPv4 and IPv6 loopback addresses (like <code>::1</code> and\n<code>127.0.0.1</code>).</li>\n<li><code>linklocal</code>: IPv4 and IPv6 link-local addresses (like\n<code>fe80::1:1:1:1</code> and <code>169.254.0.1</code>).</li>\n<li><code>uniquelocal</code>: IPv4 private addresses and IPv6 unique-local\naddresses (like <code>fc00:ac:1ab5:fff::1</code> and <code>192.168.0.1</code>).</li>\n</ul>\n<p>When <code>trust</code> is specified as a function, it will be called for each\naddress to determine if it is a trusted address. The function is\ngiven two arguments: <code>addr</code> and <code>i</code>, where <code>addr</code> is a string of\nthe address to check and <code>i</code> is a number that represents the distance\nfrom the socket address.</p>\n<h3>proxyaddr.all(req, [trust])</h3>\n<p>Return all the addresses of the request, optionally stopping at the\nfirst untrusted. This array is ordered from closest to furthest\n(i.e. <code>arr[0] === req.connection.remoteAddress</code>).</p>\n<!-- eslint-disable no-undef -->\n<pre><code class="language-js">proxyaddr.all(req)\n</code></pre>\n<p>The optional <code>trust</code> argument takes the same arguments as <code>trust</code>\ndoes in <code>proxyaddr(req, trust)</code>.</p>\n<!-- eslint-disable no-undef -->\n<pre><code class="language-js">proxyaddr.all(req, \'loopback\')\n</code></pre>\n<h3>proxyaddr.compile(val)</h3>\n<p>Compiles argument <code>val</code> into a <code>trust</code> function. This function takes\nthe same arguments as <code>trust</code> does in <code>proxyaddr(req, trust)</code> and\nreturns a function suitable for <code>proxyaddr(req, trust)</code>.</p>\n<!-- eslint-disable no-undef, no-unused-vars -->\n<pre><code class="language-js">var trust = proxyaddr.compile(\'localhost\')\nvar addr = proxyaddr(req, trust)\n</code></pre>\n<p>This function is meant to be optimized for use against every request.\nIt is recommend to compile a trust function up-front for the trusted\nconfiguration and pass that to <code>proxyaddr(req, trust)</code> for each request.</p>\n<h2>Testing</h2>\n<pre><code class="language-sh">$ npm test\n</code></pre>\n<h2>Benchmarks</h2>\n<pre><code class="language-sh">$ npm run-script bench\n</code></pre>\n<h2>License</h2>\n<p><a href="LICENSE">MIT</a></p>',docPath:"argo-ci/node_modules/proxy-addr/readme",proj:"argo-ci"}}}});
//# sourceMappingURL=path---docs-argo-ci-node-modules-proxy-addr-c0e4891e87aac7f008d3.js.map