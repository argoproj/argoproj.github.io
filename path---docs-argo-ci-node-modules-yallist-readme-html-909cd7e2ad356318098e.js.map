{"version":3,"sources":["webpack:///path---docs-argo-ci-node-modules-yallist-readme-html-909cd7e2ad356318098e.js","webpack:///./.cache/json/docs-argo-ci-node-modules-yallist-readme-html.json"],"names":["webpackJsonp","3429","module","exports","pathContext","docHtml","docPath","proj"],"mappings":"AAAAA,cAAc,iBAERC,KACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,aAAeC,QAAA,uvKAA60CC,QAAA,sCAAAC,KAAA","file":"path---docs-argo-ci-node-modules-yallist-readme-html-909cd7e2ad356318098e.js","sourcesContent":["webpackJsonp([269497632189106],{\n\n/***/ 3429:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"pathContext\":{\"docHtml\":\"<h1>yallist</h1>\\n<p>Yet Another Linked List</p>\\n<p>There are many doubly-linked list implementations like it, but this\\none is mine.</p>\\n<p>For when an array would be too big, and a Map can't be iterated in\\nreverse order.</p>\\n<p><a href=\\\"https://travis-ci.org/isaacs/yallist\\\"><img src=\\\"https://travis-ci.org/isaacs/yallist.svg?branch=master\\\" alt=\\\"Build Status\\\"></a> <a href=\\\"https://coveralls.io/github/isaacs/yallist\\\"><img src=\\\"https://coveralls.io/repos/isaacs/yallist/badge.svg?service=github\\\" alt=\\\"Coverage Status\\\"></a></p>\\n<h2>basic usage</h2>\\n<pre><code class=\\\"language-javascript\\\">var yallist = require('yallist')\\nvar myList = yallist.create([1, 2, 3])\\nmyList.push('foo')\\nmyList.unshift('bar')\\n// of course pop() and shift() are there, too\\nconsole.log(myList.toArray()) // ['bar', 1, 2, 3, 'foo']\\nmyList.forEach(function (k) {\\n  // walk the list head to tail\\n})\\nmyList.forEachReverse(function (k, index, list) {\\n  // walk the list tail to head\\n})\\nvar myDoubledList = myList.map(function (k) {\\n  return k + k\\n})\\n// now myDoubledList contains ['barbar', 2, 4, 6, 'foofoo']\\n// mapReverse is also a thing\\nvar myDoubledListReverse = myList.mapReverse(function (k) {\\n  return k + k\\n}) // ['foofoo', 6, 4, 2, 'barbar']\\n\\nvar reduced = myList.reduce(function (set, entry) {\\n  set += entry\\n  return set\\n}, 'start')\\nconsole.log(reduced) // 'startfoo123bar'\\n</code></pre>\\n<h2>api</h2>\\n<p>The whole API is considered \\\"public\\\".</p>\\n<p>Functions with the same name as an Array method work more or less the\\nsame way.</p>\\n<p>There's reverse versions of most things because that's the point.</p>\\n<h3>Yallist</h3>\\n<p>Default export, the class that holds and manages a list.</p>\\n<p>Call it with either a forEach-able (like an array) or a set of\\narguments, to initialize the list.</p>\\n<p>The Array-ish methods all act like you'd expect.  No magic length,\\nthough, so if you change that it won't automatically prune or add\\nempty spots.</p>\\n<h3>Yallist.create(..)</h3>\\n<p>Alias for Yallist function.  Some people like factories.</p>\\n<h4>yallist.head</h4>\\n<p>The first node in the list</p>\\n<h4>yallist.tail</h4>\\n<p>The last node in the list</p>\\n<h4>yallist.length</h4>\\n<p>The number of nodes in the list.  (Change this at your peril.  It is\\nnot magic like Array length.)</p>\\n<h4>yallist.toArray()</h4>\\n<p>Convert the list to an array.</p>\\n<h4>yallist.forEach(fn, [thisp])</h4>\\n<p>Call a function on each item in the list.</p>\\n<h4>yallist.forEachReverse(fn, [thisp])</h4>\\n<p>Call a function on each item in the list, in reverse order.</p>\\n<h4>yallist.get(n)</h4>\\n<p>Get the data at position <code>n</code> in the list.  If you use this a lot,\\nprobably better off just using an Array.</p>\\n<h4>yallist.getReverse(n)</h4>\\n<p>Get the data at position <code>n</code>, counting from the tail.</p>\\n<h4>yallist.map(fn, thisp)</h4>\\n<p>Create a new Yallist with the result of calling the function on each\\nitem.</p>\\n<h4>yallist.mapReverse(fn, thisp)</h4>\\n<p>Same as <code>map</code>, but in reverse.</p>\\n<h4>yallist.pop()</h4>\\n<p>Get the data from the list tail, and remove the tail from the list.</p>\\n<h4>yallist.push(item, ...)</h4>\\n<p>Insert one or more items to the tail of the list.</p>\\n<h4>yallist.reduce(fn, initialValue)</h4>\\n<p>Like Array.reduce.</p>\\n<h4>yallist.reduceReverse</h4>\\n<p>Like Array.reduce, but in reverse.</p>\\n<h4>yallist.reverse</h4>\\n<p>Reverse the list in place.</p>\\n<h4>yallist.shift()</h4>\\n<p>Get the data from the list head, and remove the head from the list.</p>\\n<h4>yallist.slice([from], [to])</h4>\\n<p>Just like Array.slice, but returns a new Yallist.</p>\\n<h4>yallist.sliceReverse([from], [to])</h4>\\n<p>Just like yallist.slice, but the result is returned in reverse.</p>\\n<h4>yallist.toArray()</h4>\\n<p>Create an array representation of the list.</p>\\n<h4>yallist.toArrayReverse()</h4>\\n<p>Create a reversed array representation of the list.</p>\\n<h4>yallist.unshift(item, ...)</h4>\\n<p>Insert one or more items to the head of the list.</p>\\n<h4>yallist.unshiftNode(node)</h4>\\n<p>Move a Node object to the front of the list.  (That is, pull it out of\\nwherever it lives, and make it the new head.)</p>\\n<p>If the node belongs to a different list, then that list will remove it\\nfirst.</p>\\n<h4>yallist.pushNode(node)</h4>\\n<p>Move a Node object to the end of the list.  (That is, pull it out of\\nwherever it lives, and make it the new tail.)</p>\\n<p>If the node belongs to a list already, then that list will remove it\\nfirst.</p>\\n<h4>yallist.removeNode(node)</h4>\\n<p>Remove a node from the list, preserving referential integrity of head\\nand tail and other nodes.</p>\\n<p>Will throw an error if you try to have a list remove a node that\\ndoesn't belong to it.</p>\\n<h3>Yallist.Node</h3>\\n<p>The class that holds the data and is actually the list.</p>\\n<p>Call with <code>var n = new Node(value, previousNode, nextNode)</code></p>\\n<p>Note that if you do direct operations on Nodes themselves, it's very\\neasy to get into weird states where the list is broken.  Be careful :)</p>\\n<h4>node.next</h4>\\n<p>The next node in the list.</p>\\n<h4>node.prev</h4>\\n<p>The previous node in the list.</p>\\n<h4>node.value</h4>\\n<p>The data the node contains.</p>\\n<h4>node.list</h4>\\n<p>The list to which this node belongs.  (Null if it does not belong to\\nany list.)</p>\",\"docPath\":\"argo-ci/node_modules/yallist/readme\",\"proj\":\"argo-ci\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---docs-argo-ci-node-modules-yallist-readme-html-909cd7e2ad356318098e.js","module.exports = {\"pathContext\":{\"docHtml\":\"<h1>yallist</h1>\\n<p>Yet Another Linked List</p>\\n<p>There are many doubly-linked list implementations like it, but this\\none is mine.</p>\\n<p>For when an array would be too big, and a Map can't be iterated in\\nreverse order.</p>\\n<p><a href=\\\"https://travis-ci.org/isaacs/yallist\\\"><img src=\\\"https://travis-ci.org/isaacs/yallist.svg?branch=master\\\" alt=\\\"Build Status\\\"></a> <a href=\\\"https://coveralls.io/github/isaacs/yallist\\\"><img src=\\\"https://coveralls.io/repos/isaacs/yallist/badge.svg?service=github\\\" alt=\\\"Coverage Status\\\"></a></p>\\n<h2>basic usage</h2>\\n<pre><code class=\\\"language-javascript\\\">var yallist = require('yallist')\\nvar myList = yallist.create([1, 2, 3])\\nmyList.push('foo')\\nmyList.unshift('bar')\\n// of course pop() and shift() are there, too\\nconsole.log(myList.toArray()) // ['bar', 1, 2, 3, 'foo']\\nmyList.forEach(function (k) {\\n  // walk the list head to tail\\n})\\nmyList.forEachReverse(function (k, index, list) {\\n  // walk the list tail to head\\n})\\nvar myDoubledList = myList.map(function (k) {\\n  return k + k\\n})\\n// now myDoubledList contains ['barbar', 2, 4, 6, 'foofoo']\\n// mapReverse is also a thing\\nvar myDoubledListReverse = myList.mapReverse(function (k) {\\n  return k + k\\n}) // ['foofoo', 6, 4, 2, 'barbar']\\n\\nvar reduced = myList.reduce(function (set, entry) {\\n  set += entry\\n  return set\\n}, 'start')\\nconsole.log(reduced) // 'startfoo123bar'\\n</code></pre>\\n<h2>api</h2>\\n<p>The whole API is considered \\\"public\\\".</p>\\n<p>Functions with the same name as an Array method work more or less the\\nsame way.</p>\\n<p>There's reverse versions of most things because that's the point.</p>\\n<h3>Yallist</h3>\\n<p>Default export, the class that holds and manages a list.</p>\\n<p>Call it with either a forEach-able (like an array) or a set of\\narguments, to initialize the list.</p>\\n<p>The Array-ish methods all act like you'd expect.  No magic length,\\nthough, so if you change that it won't automatically prune or add\\nempty spots.</p>\\n<h3>Yallist.create(..)</h3>\\n<p>Alias for Yallist function.  Some people like factories.</p>\\n<h4>yallist.head</h4>\\n<p>The first node in the list</p>\\n<h4>yallist.tail</h4>\\n<p>The last node in the list</p>\\n<h4>yallist.length</h4>\\n<p>The number of nodes in the list.  (Change this at your peril.  It is\\nnot magic like Array length.)</p>\\n<h4>yallist.toArray()</h4>\\n<p>Convert the list to an array.</p>\\n<h4>yallist.forEach(fn, [thisp])</h4>\\n<p>Call a function on each item in the list.</p>\\n<h4>yallist.forEachReverse(fn, [thisp])</h4>\\n<p>Call a function on each item in the list, in reverse order.</p>\\n<h4>yallist.get(n)</h4>\\n<p>Get the data at position <code>n</code> in the list.  If you use this a lot,\\nprobably better off just using an Array.</p>\\n<h4>yallist.getReverse(n)</h4>\\n<p>Get the data at position <code>n</code>, counting from the tail.</p>\\n<h4>yallist.map(fn, thisp)</h4>\\n<p>Create a new Yallist with the result of calling the function on each\\nitem.</p>\\n<h4>yallist.mapReverse(fn, thisp)</h4>\\n<p>Same as <code>map</code>, but in reverse.</p>\\n<h4>yallist.pop()</h4>\\n<p>Get the data from the list tail, and remove the tail from the list.</p>\\n<h4>yallist.push(item, ...)</h4>\\n<p>Insert one or more items to the tail of the list.</p>\\n<h4>yallist.reduce(fn, initialValue)</h4>\\n<p>Like Array.reduce.</p>\\n<h4>yallist.reduceReverse</h4>\\n<p>Like Array.reduce, but in reverse.</p>\\n<h4>yallist.reverse</h4>\\n<p>Reverse the list in place.</p>\\n<h4>yallist.shift()</h4>\\n<p>Get the data from the list head, and remove the head from the list.</p>\\n<h4>yallist.slice([from], [to])</h4>\\n<p>Just like Array.slice, but returns a new Yallist.</p>\\n<h4>yallist.sliceReverse([from], [to])</h4>\\n<p>Just like yallist.slice, but the result is returned in reverse.</p>\\n<h4>yallist.toArray()</h4>\\n<p>Create an array representation of the list.</p>\\n<h4>yallist.toArrayReverse()</h4>\\n<p>Create a reversed array representation of the list.</p>\\n<h4>yallist.unshift(item, ...)</h4>\\n<p>Insert one or more items to the head of the list.</p>\\n<h4>yallist.unshiftNode(node)</h4>\\n<p>Move a Node object to the front of the list.  (That is, pull it out of\\nwherever it lives, and make it the new head.)</p>\\n<p>If the node belongs to a different list, then that list will remove it\\nfirst.</p>\\n<h4>yallist.pushNode(node)</h4>\\n<p>Move a Node object to the end of the list.  (That is, pull it out of\\nwherever it lives, and make it the new tail.)</p>\\n<p>If the node belongs to a list already, then that list will remove it\\nfirst.</p>\\n<h4>yallist.removeNode(node)</h4>\\n<p>Remove a node from the list, preserving referential integrity of head\\nand tail and other nodes.</p>\\n<p>Will throw an error if you try to have a list remove a node that\\ndoesn't belong to it.</p>\\n<h3>Yallist.Node</h3>\\n<p>The class that holds the data and is actually the list.</p>\\n<p>Call with <code>var n = new Node(value, previousNode, nextNode)</code></p>\\n<p>Note that if you do direct operations on Nodes themselves, it's very\\neasy to get into weird states where the list is broken.  Be careful :)</p>\\n<h4>node.next</h4>\\n<p>The next node in the list.</p>\\n<h4>node.prev</h4>\\n<p>The previous node in the list.</p>\\n<h4>node.value</h4>\\n<p>The data the node contains.</p>\\n<h4>node.list</h4>\\n<p>The list to which this node belongs.  (Null if it does not belong to\\nany list.)</p>\",\"docPath\":\"argo-ci/node_modules/yallist/readme\",\"proj\":\"argo-ci\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/docs-argo-ci-node-modules-yallist-readme-html.json\n// module id = 3429\n// module chunks = 269497632189106"],"sourceRoot":""}