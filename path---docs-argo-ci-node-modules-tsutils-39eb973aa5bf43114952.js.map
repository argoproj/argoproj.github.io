{"version":3,"sources":["webpack:///path---docs-argo-ci-node-modules-tsutils-39eb973aa5bf43114952.js","webpack:///./.cache/json/docs-argo-ci-node-modules-tsutils.json"],"names":["webpackJsonp","3261","module","exports","pathContext","docHtml","docPath","proj"],"mappings":"AAAAA,cAAc,iBAERC,KACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,aAAeC,QAAA,07CAAwnCC,QAAA,sCAAAC,KAAA","file":"path---docs-argo-ci-node-modules-tsutils-39eb973aa5bf43114952.js","sourcesContent":["webpackJsonp([208992455740323],{\n\n/***/ 3261:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"pathContext\":{\"docHtml\":\"<h1>Utility functions for working with typescript's AST</h1>\\n<h2>Usage</h2>\\n<p>This package consists of two major parts: utilities and typeguard functions.\\nBy importing the project you will get both of them.</p>\\n<pre><code class=\\\"language-js\\\">import * as utils from \\\"tsutils\\\";\\nutils.isIdentifier(node); // typeguard\\nutils.getLineRanges(sourceFile); // utilities\\n</code></pre>\\n<p>If you don't need everything offered by this package, you can select what should be imported. The parts that are not imported are never read from disk and may save some startup time and reduce memory consumtion.</p>\\n<p>If you only need typeguards you can explicitly import them:</p>\\n<pre><code class=\\\"language-js\\\">import { isIdentifier } from \\\"tsutils/typeguard\\\";\\n// You can even distiguish between typeguards for nodes and types\\nimport { isUnionTypeNode } from \\\"tsutils/typeguard/node\\\";\\nimport { isUnionType } from \\\"tsutils/typeguard/type\\\";\\n</code></pre>\\n<p>If you only need the utilities you can also explicitly import them:</p>\\n<pre><code class=\\\"language-js\\\">import { forEachComment, forEachToken } from \\\"tsutils/util\\\";\\n</code></pre>\\n<h3>Typescript version dependency</h3>\\n<p>This package is backwards compatible with typescript 2.1.0 at runtime although compiling might need a newer version of typescript installed.</p>\\n<p>Using <code>typescript@next</code> might work, but it's not officially supported. If you encounter any bugs, please open an issue.</p>\",\"docPath\":\"argo-ci/node_modules/tsutils/readme\",\"proj\":\"argo-ci\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---docs-argo-ci-node-modules-tsutils-39eb973aa5bf43114952.js","module.exports = {\"pathContext\":{\"docHtml\":\"<h1>Utility functions for working with typescript's AST</h1>\\n<h2>Usage</h2>\\n<p>This package consists of two major parts: utilities and typeguard functions.\\nBy importing the project you will get both of them.</p>\\n<pre><code class=\\\"language-js\\\">import * as utils from \\\"tsutils\\\";\\nutils.isIdentifier(node); // typeguard\\nutils.getLineRanges(sourceFile); // utilities\\n</code></pre>\\n<p>If you don't need everything offered by this package, you can select what should be imported. The parts that are not imported are never read from disk and may save some startup time and reduce memory consumtion.</p>\\n<p>If you only need typeguards you can explicitly import them:</p>\\n<pre><code class=\\\"language-js\\\">import { isIdentifier } from \\\"tsutils/typeguard\\\";\\n// You can even distiguish between typeguards for nodes and types\\nimport { isUnionTypeNode } from \\\"tsutils/typeguard/node\\\";\\nimport { isUnionType } from \\\"tsutils/typeguard/type\\\";\\n</code></pre>\\n<p>If you only need the utilities you can also explicitly import them:</p>\\n<pre><code class=\\\"language-js\\\">import { forEachComment, forEachToken } from \\\"tsutils/util\\\";\\n</code></pre>\\n<h3>Typescript version dependency</h3>\\n<p>This package is backwards compatible with typescript 2.1.0 at runtime although compiling might need a newer version of typescript installed.</p>\\n<p>Using <code>typescript@next</code> might work, but it's not officially supported. If you encounter any bugs, please open an issue.</p>\",\"docPath\":\"argo-ci/node_modules/tsutils/readme\",\"proj\":\"argo-ci\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/docs-argo-ci-node-modules-tsutils.json\n// module id = 3261\n// module chunks = 208992455740323"],"sourceRoot":""}