webpackJsonp([0xe7e4703fe435],{3089:function(e,n){e.exports={pathContext:{docHtml:"<h1>readdirp <a href=\"http://travis-ci.org/thlorenz/readdirp\"><img src=\"https://secure.travis-ci.org/thlorenz/readdirp.png\" alt=\"Build Status\"></a></h1>\n<p><a href=\"https://nodei.co/npm/readdirp/\"><img src=\"https://nodei.co/npm/readdirp.png?downloads=true&#x26;stars=true\" alt=\"NPM\"></a></p>\n<p>Recursive version of <a href=\"http://nodejs.org/docs/latest/api/fs.html#fs_fs_readdir_path_callback\">fs.readdir</a>. Exposes a <strong>stream api</strong>.</p>\n<pre><code class=\"language-javascript\">var readdirp = require('readdirp')\n  , path = require('path')\n  , es = require('event-stream');\n\n// print out all JavaScript files along with their size\n\nvar stream = readdirp({ root: path.join(__dirname), fileFilter: '*.js' });\nstream\n  .on('warn', function (err) { \n    console.error('non-fatal error', err); \n    // optionally call stream.destroy() here in order to abort and cause 'close' to be emitted\n  })\n  .on('error', function (err) { console.error('fatal error', err); })\n  .pipe(es.mapSync(function (entry) { \n    return { path: entry.path, size: entry.stat.size };\n  }))\n  .pipe(es.stringify())\n  .pipe(process.stdout);\n</code></pre>\n<p>Meant to be one of the recursive versions of <a href=\"http://nodejs.org/docs/latest/api/fs.html\">fs</a> functions, e.g., like <a href=\"https://github.com/substack/node-mkdirp\">mkdirp</a>.</p>\n<p><strong>Table of Contents</strong>  <em>generated with <a href=\"http://doctoc.herokuapp.com/\">DocToc</a></em></p>\n<ul>\n<li><a href=\"#installation\">Installation</a></li>\n<li>\n<p><a href=\"#api\">API</a></p>\n<ul>\n<li><a href=\"#entry-stream\">entry stream</a></li>\n<li><a href=\"#options\">options</a></li>\n<li><a href=\"#entry-info\">entry info</a></li>\n<li><a href=\"#filters\">Filters</a></li>\n<li>\n<p><a href=\"#callback-api\">Callback API</a></p>\n<ul>\n<li><a href=\"#allprocessed\">allProcessed </a></li>\n<li><a href=\"#fileprocessed\">fileProcessed</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"#more-examples\">More Examples</a></p>\n<ul>\n<li><a href=\"#stream-api\">stream api</a></li>\n<li><a href=\"#stream-api-pipe\">stream api pipe</a></li>\n<li><a href=\"#grep\">grep</a></li>\n<li><a href=\"#using-callback-api\">using callback api</a></li>\n<li><a href=\"#tests\">tests</a></li>\n</ul>\n</li>\n</ul>\n<h1>Installation</h1>\n<pre><code>npm install readdirp\n</code></pre>\n<h1>API</h1>\n<p><strong><em>var entryStream = readdirp (options)</em></strong></p>\n<p>Reads given root recursively and returns a <code>stream</code> of <a href=\"#entry-info\">entry info</a>s.</p>\n<h2>entry stream</h2>\n<p>Behaves as follows:</p>\n<ul>\n<li>\n<p><code>emit('data')</code> passes an <a href=\"#entry-info\">entry info</a> whenever one is found</p>\n</li>\n<li>\n<p><code>emit('warn')</code> passes a non-fatal <code>Error</code> that prevents a file/directory from being processed (i.e., if it is\ninaccessible to the user)</p>\n</li>\n<li>\n<p><code>emit('error')</code> passes a fatal <code>Error</code> which also ends the stream (i.e., when illegal options where passed)</p>\n</li>\n<li>\n<p><code>emit('end')</code> called when all entries were found and no more will be emitted (i.e., we are done)</p>\n</li>\n<li>\n<p><code>emit('close')</code> called when the stream is destroyed via <code>stream.destroy()</code> (which could be useful if you want to\nmanually abort even on a non fatal error) - at that point the stream is no longer <code>readable</code> and no more entries,\nwarning or errors are emitted</p>\n</li>\n<li>\n<p>to learn more about streams, consult the very detailed\n<a href=\"http://nodejs.org/api/stream.html\">nodejs streams documentation</a> or the\n<a href=\"https://github.com/substack/stream-handbook\">stream-handbook</a></p>\n</li>\n</ul>\n<h2>options</h2>\n<ul>\n<li>\n<p><strong>root</strong>: path in which to start reading and recursing into subdirectories</p>\n</li>\n<li>\n<p><strong>fileFilter</strong>: filter to include/exclude files found (see <a href=\"#filters\">Filters</a> for more)</p>\n</li>\n<li>\n<p><strong>directoryFilter</strong>: filter to include/exclude directories found and to recurse into (see <a href=\"#filters\">Filters</a> for more)</p>\n</li>\n<li>\n<p><strong>depth</strong>: depth at which to stop recursing even if more subdirectories are found</p>\n</li>\n<li>\n<p><strong>entryType</strong>: determines if data events on the stream should be emitted for <code>'files'</code>, <code>'directories'</code>, <code>'both'</code>, or <code>'all'</code>. Setting to <code>'all'</code> will also include entries for other types of file descriptors like character devices, unix sockets and named pipes. Defaults to <code>'files'</code>.</p>\n</li>\n<li>\n<p><strong>lstat</strong>: if <code>true</code>, readdirp uses <code>fs.lstat</code> instead of <code>fs.stat</code> in order to stat files and includes symlink entries in the stream along with files.</p>\n</li>\n</ul>\n<h2>entry info</h2>\n<p>Has the following properties:</p>\n<ul>\n<li><strong>parentDir</strong>     :  directory in which entry was found (relative to given root)</li>\n<li><strong>fullParentDir</strong> :  full path to parent directory</li>\n<li><strong>name</strong>          :  name of the file/directory</li>\n<li><strong>path</strong>          :  path to the file/directory (relative to given root)</li>\n<li><strong>fullPath</strong>      :  full path to the file/directory found</li>\n<li><strong>stat</strong>          :  built in <a href=\"http://nodejs.org/docs/v0.4.9/api/fs.html#fs.Stats\">stat object</a></li>\n<li><strong>Example</strong>: (assuming root was <code>/User/dev/readdirp</code>)\n<br>\nparentDir     :  'test/bed/root<em>dir1',\nfullParentDir :  '/User/dev/readdirp/test/bed/root</em>dir1',\nname          :  'root<em>dir1</em>subdir1',\npath          :  'test/bed/root<em>dir1/root</em>dir1<em>subdir1',\nfullPath      :  '/User/dev/readdirp/test/bed/root</em>dir1/root<em>dir1</em>subdir1',\nstat          :  [ ... ]\n</li>\n</ul>\n<h2>Filters</h2>\n<p>There are three different ways to specify filters for files and directories respectively. </p>\n<ul>\n<li>\n<p><strong>function</strong>: a function that takes an entry info as a parameter and returns true to include or false to exclude the entry</p>\n</li>\n<li>\n<p><strong>glob string</strong>: a string (e.g., <code>*.js</code>) which is matched using <a href=\"https://github.com/isaacs/minimatch\">minimatch</a>, so go there for more\ninformation. </p>\n<p>Globstars (<code>**</code>) are not supported since specifiying a recursive pattern for an already recursive function doesn't make sense.</p>\n<p>Negated globs (as explained in the minimatch documentation) are allowed, e.g., <code>!*.txt</code> matches everything but text files.</p>\n</li>\n<li>\n<p><strong>array of glob strings</strong>: either need to be all inclusive or all exclusive (negated) patterns otherwise an error is thrown.</p>\n<p><code>[ '*.json', '*.js' ]</code> includes all JavaScript and Json files.</p>\n<p><code>[ '!.git', '!node_modules' ]</code> includes all directories except the '.git' and 'node_modules'.</p>\n</li>\n</ul>\n<p>Directories that do not pass a filter will not be recursed into.</p>\n<h2>Callback API</h2>\n<p>Although the stream api is recommended, readdirp also exposes a callback based api.</p>\n<p><strong><em>readdirp (options, callback1 [, callback2])</em></strong></p>\n<p>If callback2 is given, callback1 functions as the <strong>fileProcessed</strong> callback, and callback2 as the <strong>allProcessed</strong> callback.</p>\n<p>If only callback1 is given, it functions as the <strong>allProcessed</strong> callback.</p>\n<h3>allProcessed</h3>\n<ul>\n<li>function with err and res parameters, e.g., <code>function (err, res) { ... }</code></li>\n<li><strong>err</strong>: array of errors that occurred during the operation, <strong>res may still be present, even if errors occurred</strong></li>\n<li><strong>res</strong>: collection of file/directory <a href=\"#entry-info\">entry infos</a></li>\n</ul>\n<h3>fileProcessed</h3>\n<ul>\n<li>function with <a href=\"#entry-info\">entry info</a> parameter e.g., <code>function (entryInfo) { ... }</code></li>\n</ul>\n<h1>More Examples</h1>\n<p><code>on('error', ..)</code>, <code>on('warn', ..)</code> and <code>on('end', ..)</code> handling omitted for brevity</p>\n<pre><code class=\"language-javascript\">var readdirp = require('readdirp');\n\n// Glob file filter\nreaddirp({ root: './test/bed', fileFilter: '*.js' })\n  .on('data', function (entry) {\n    // do something with each JavaScript file entry\n  });\n\n// Combined glob file filters\nreaddirp({ root: './test/bed', fileFilter: [ '*.js', '*.json' ] })\n  .on('data', function (entry) {\n    // do something with each JavaScript and Json file entry \n  });\n\n// Combined negated directory filters\nreaddirp({ root: './test/bed', directoryFilter: [ '!.git', '!*modules' ] })\n  .on('data', function (entry) {\n    // do something with each file entry found outside '.git' or any modules directory \n  });\n\n// Function directory filter\nreaddirp({ root: './test/bed', directoryFilter: function (di) { return di.name.length === 9; } })\n  .on('data', function (entry) {\n    // do something with each file entry found inside directories whose name has length 9\n  });\n\n// Limiting depth\nreaddirp({ root: './test/bed', depth: 1 })\n  .on('data', function (entry) {\n    // do something with each file entry found up to 1 subdirectory deep\n  });\n\n// callback api\nreaddirp(\n    { root: '.' }\n  , function(fileInfo) { \n      // do something with file entry here\n    } \n  , function (err, res) {\n      // all done, move on or do final step for all file entries here\n    }\n);\n</code></pre>\n<p>Try more examples by following <a href=\"https://github.com/thlorenz/readdirp/blob/master/examples/Readme.md\">instructions</a>\non how to get going.</p>\n<h2>stream api</h2>\n<p><a href=\"https://github.com/thlorenz/readdirp/blob/master/examples/stream-api.js\">stream-api.js</a></p>\n<p>Demonstrates error and data handling by listening to events emitted from the readdirp stream.</p>\n<h2>stream api pipe</h2>\n<p><a href=\"https://github.com/thlorenz/readdirp/blob/master/examples/stream-api-pipe.js\">stream-api-pipe.js</a></p>\n<p>Demonstrates error handling by listening to events emitted from the readdirp stream and how to pipe the data stream into\nanother destination stream.</p>\n<h2>grep</h2>\n<p><a href=\"https://github.com/thlorenz/readdirp/blob/master/examples/grep.js\">grep.js</a></p>\n<p>Very naive implementation of grep, for demonstration purposes only.</p>\n<h2>using callback api</h2>\n<p><a href=\"https://github.com/thlorenz/readdirp/blob/master/examples/callback-api.js\">callback-api.js</a></p>\n<p>Shows how to pass callbacks in order to handle errors and/or data.</p>\n<h2>tests</h2>\n<p>The <a href=\"https://github.com/thlorenz/readdirp/blob/master/test/readdirp.js\">readdirp tests</a> also will give you a good idea on\nhow things work.</p>",docPath:"argo-ci/node_modules/readdirp/readme",proj:"argo-ci"}}}});
//# sourceMappingURL=path---docs-argo-ci-node-modules-readdirp-readme-html-075d80c64bac1c1dcd0c.js.map