{"version":3,"sources":["webpack:///path---docs-argo-events-f7eab16009a3386659be.js","webpack:///./.cache/json/docs-argo-events.json"],"names":["webpackJsonp","650","module","exports","pathContext","docHtml","docPath","proj"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,aAAeC,QAAA,0hQAAyoPC,QAAA,qBAAAC,KAAA","file":"path---docs-argo-events-f7eab16009a3386659be.js","sourcesContent":["webpackJsonp([47583996684567],{\n\n/***/ 650:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"pathContext\":{\"docHtml\":\"<h1>Argo Events - The Event-Based Dependency Manager for Kubernetes</h1>\\n<p><a href=\\\"https://goreportcard.com/report/github.com/argoproj/argo-events\\\"><img src=\\\"https://goreportcard.com/badge/github.com/argoproj/argo-events\\\" alt=\\\"Go Report Card\\\"></a>\\n<a href=\\\"https://argoproj.github.io/community/join-slack\\\"><img src=\\\"https://img.shields.io/badge/slack-argoproj-brightgreen.svg?logo=slack\\\" alt=\\\"slack\\\"></a>\\n<a href=\\\"https://travis-ci.org/argoproj/argo-events\\\"><img src=\\\"https://travis-ci.org/argoproj/argo-events.svg?branch=master\\\" alt=\\\"Build Status\\\"></a>\\n<a href=\\\"https://coveralls.io/github/argoproj/argo-events\\\"><img src=\\\"https://coveralls.io/repos/github/argoproj/argo-events/badge.svg\\\" alt=\\\"Coverage Status\\\"></a>\\n<a href=\\\"https://godoc.org/github.com/argoproj/argo-events/pkg/apis\\\"><img src=\\\"https://godoc.org/github.com/argoproj/argo-events?status.svg\\\" alt=\\\"GoDoc\\\"></a>\\n<a href=\\\"LICENSE\\\"><img src=\\\"https://img.shields.io/badge/License-Apache%202.0-blue.svg\\\" alt=\\\"License\\\"></a></p>\\n<p align=\\\"center\\\">\\n  <img src=\\\"https://github.com/argoproj/argo-events/blob/master/docs/assets/argo-events-logo.png?raw=true\\\" alt=\\\"Logo\\\">\\n</p>\\n<h2>What is Argo Events?</h2>\\n<p><strong>Argo Events</strong> is an event-based dependency manager for Kubernetes which helps you define multiple dependencies from a variety of event sources like webhook, s3, schedules, streams etc.\\nand trigger Kubernetes objects after successful event dependencies resolution.</p>\\n<br/>\\n<br/>\\n<p align=\\\"center\\\">\\n  <img src=\\\"https://github.com/argoproj/argo-events/blob/master/docs/assets/argo-events-top-level.png?raw=true\\\" alt=\\\"High Level Overview\\\">\\n</p>\\n<br/>\\n<h2>Features</h2>\\n<ul>\\n<li>Manage dependencies from a variety of event sources.</li>\\n<li>Ability to customize business-level constraint logic for event dependencies resolution.</li>\\n<li>Manage everything from simple, linear, real-time dependencies to complex, multi-source, batch job dependencies.</li>\\n<li>Ability to extends framework to add your own event source listener.</li>\\n<li>Define arbitrary boolean logic to resolve event dependencies.</li>\\n<li>CloudEvents compliant.</li>\\n<li>Ability to manage event sources at runtime.</li>\\n</ul>\\n<h2>Core Concepts</h2>\\n<p>The framework is made up of two components: </p>\\n<ol>\\n<li>\\n<p><strong><code>Gateway</code></strong> which is implemented as a Kubernetes-native Custom Resource Definition processes events from event source.</p>\\n</li>\\n<li>\\n<p><strong><code>Sensor</code></strong> which is implemented as a Kubernetes-native Custom Resource Definition defines a set of event dependencies and triggers K8s resources.</p>\\n</li>\\n</ol>\\n<h2>Install</h2>\\n<ul>\\n<li>\\n<h3>Requirements</h3>\\n<ul>\\n<li>Kubernetes cluster >v1.9</li>\\n<li>Installed the <a href=\\\"https://kubernetes.io/docs/tasks/tools/install-kubectl/\\\">kubectl</a> command-line tool >v1.9.0</li>\\n</ul>\\n</li>\\n<li>\\n<h3>Helm Chart</h3>\\n<p>Make sure you have helm client installed and Tiller server is running. To install helm, follow <a href=\\\"https://docs.helm.sh/using_helm/\\\">https://docs.helm.sh/using_helm/</a></p>\\n<ol>\\n<li>Add <code>argoproj</code> repository</li>\\n</ol>\\n<pre><code class=\\\"language-bash\\\">helm repo add argo https://argoproj.github.io/argo-helm\\n</code></pre>\\n<ol start=\\\"2\\\">\\n<li>Install <code>argo-events</code> chart</li>\\n</ol>\\n<pre><code class=\\\"language-bash\\\">helm install argo/argo-events\\n</code></pre>\\n</li>\\n<li>\\n<h3>Using kubectl</h3>\\n<ul>\\n<li>Deploy Argo Events SA, Roles, ConfigMap, Sensor Controller and Gateway Controller</li>\\n</ul>\\n<pre><code>kubectl create namespace argo-events\\nkubectl apply -n argo-events -f https://raw.githubusercontent.com/argoproj/argo-events/master/hack/k8s/manifests/argo-events-sa.yaml\\nkubectl apply -n argo-events -f https://raw.githubusercontent.com/argoproj/argo-events/master/hack/k8s/manifests/argo-events-cluster-roles.yaml\\nkubectl apply -n argo-events -f https://raw.githubusercontent.com/argoproj/argo-events/master/hack/k8s/manifests/sensor-crd.yaml\\nkubectl apply -n argo-events -f https://raw.githubusercontent.com/argoproj/argo-events/master/hack/k8s/manifests/gateway-crd.yaml\\nkubectl apply -n argo-events -f https://raw.githubusercontent.com/argoproj/argo-events/master/hack/k8s/manifests/sensor-controller-configmap.yaml\\nkubectl apply -n argo-events -f https://raw.githubusercontent.com/argoproj/argo-events/master/hack/k8s/manifests/sensor-controller-deployment.yaml\\nkubectl apply -n argo-events -f https://raw.githubusercontent.com/argoproj/argo-events/master/hack/k8s/manifests/gateway-controller-configmap.yaml\\nkubectl apply -n argo-events -f https://raw.githubusercontent.com/argoproj/argo-events/master/hack/k8s/manifests/gateway-controller-deployment.yaml\\n</code></pre>\\n</li>\\n</ul>\\n<p><strong>Note</strong>: If you have already deployed the argo workflow controller in another namespace\\nand the controller is namespace scoped, make sure to deploy a new controller in <code>argo-events</code> namespace.  </p>\\n<h2>Get Started</h2>\\n<p>Lets deploy a webhook gateway and sensor,</p>\\n<ul>\\n<li>\\n<p>First, we need to setup event sources for gateway to listen. The event sources for any gateway are managed using K8s configmap.</p>\\n<pre><code class=\\\"language-bash\\\">kubectl apply -n argo-events -f https://raw.githubusercontent.com/argoproj/argo-events/master/examples/gateways/webhook-gateway-configmap.yaml \\n</code></pre>\\n</li>\\n<li>\\n<p>Create webhook gateway, </p>\\n<pre><code class=\\\"language-bash\\\">kubectl apply -n argo-events -f https://raw.githubusercontent.com/argoproj/argo-events/master/examples/gateways/webhook-http.yaml\\n</code></pre>\\n<p>After running above command, gateway controller will create corresponding gateway pod and a LoadBalancing service.</p>\\n</li>\\n<li>\\n<p>Create webhook sensor,</p>\\n<pre><code class=\\\"language-bash\\\">kubectl apply -n argo-events -f https://raw.githubusercontent.com/argoproj/argo-events/master/examples/sensors/webhook-http.yaml\\n</code></pre>\\n<p>Once sensor resource is created, sensor controller will create corresponding sensor pod and a ClusterIP service. </p>\\n</li>\\n<li>\\n<p>Once the gateway and sensor pods are running, trigger the webhook via a http POST request to <code>/foo</code> endpoint.\\nNote: the <code>WEBHOOK_SERVICE_URL</code> will differ based on the Kubernetes cluster.</p>\\n<pre><code>export WEBHOOK_SERVICE_URL=$(minikube service -n argo-events --url &#x3C;gateway_service_name>)\\necho $WEBHOOK_SERVICE_URL\\ncurl -d '{\\\"message\\\":\\\"this is my first webhook\\\"}' -H \\\"Content-Type: application/json\\\" -X POST $WEBHOOK_SERVICE_URL/foo\\n</code></pre>\\n<p><b>Note</b>: </p>\\n<ul>\\n<li>If you are facing an issue getting service url by running <code>minikube service -n argo-events --url &#x3C;gateway_service_name></code>, you can use <code>kubectl port-forward</code></li>\\n<li>Open another terminal window and enter <code>kubectl port-forward -n argo-events &#x3C;name_of_the_webhook_gateway_pod> 9003:&#x3C;port_on_which_gateway_server_is_running></code></li>\\n<li>You can now use <code>localhost:9003</code> to query webhook gateway</li>\\n</ul>\\n<p>Verify that the Argo workflow was run when the trigger was executed.</p>\\n<pre><code>argo list -n argo-events\\n</code></pre>\\n</li>\\n<li>\\n<p>More examples can be found at <a href=\\\"./examples\\\">examples</a></p>\\n</li>\\n</ul>\\n<h2>Further Reading</h2>\\n<ol>\\n<li><a href=\\\"docs/gateway-guide.html\\\">Gateway</a></li>\\n<li><a href=\\\"docs/sensor-guide.html\\\">Sensor</a></li>\\n<li><a href=\\\"docs/trigger-guide.html\\\">Trigger</a></li>\\n<li><a href=\\\"docs/communication.html\\\">Communication between gateway and sensor</a></li>\\n<li><a href=\\\"docs/controllers-guide.html\\\">Controllers</a></li>\\n<li><a href=\\\"docs/setup.html\\\">Setup Gateways &#x26; Sensors</a></li>\\n</ol>\\n<h2>Contribute</h2>\\n<p>Read and abide by the <a href=\\\"https://github.com/argoproj/argo-events/blob/master/CODE_OF_CONDUCT.md\\\">Argo Events Code of Conduct</a></p>\\n<p><a href=\\\"https://github.com/argoproj/argo-events/issues\\\">Contributions</a> are more than welcome, if you are interested please take a look at our <a href=\\\"./CONTRIBUTING.html\\\">Contributing Guidelines</a>.</p>\\n<h2>License</h2>\\n<p>Apache License Version 2.0, see <a href=\\\"./LICENSE\\\">LICENSE</a></p>\",\"docPath\":\"argo-events/readme\",\"proj\":\"argo-events\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---docs-argo-events-f7eab16009a3386659be.js","module.exports = {\"pathContext\":{\"docHtml\":\"<h1>Argo Events - The Event-Based Dependency Manager for Kubernetes</h1>\\n<p><a href=\\\"https://goreportcard.com/report/github.com/argoproj/argo-events\\\"><img src=\\\"https://goreportcard.com/badge/github.com/argoproj/argo-events\\\" alt=\\\"Go Report Card\\\"></a>\\n<a href=\\\"https://argoproj.github.io/community/join-slack\\\"><img src=\\\"https://img.shields.io/badge/slack-argoproj-brightgreen.svg?logo=slack\\\" alt=\\\"slack\\\"></a>\\n<a href=\\\"https://travis-ci.org/argoproj/argo-events\\\"><img src=\\\"https://travis-ci.org/argoproj/argo-events.svg?branch=master\\\" alt=\\\"Build Status\\\"></a>\\n<a href=\\\"https://coveralls.io/github/argoproj/argo-events\\\"><img src=\\\"https://coveralls.io/repos/github/argoproj/argo-events/badge.svg\\\" alt=\\\"Coverage Status\\\"></a>\\n<a href=\\\"https://godoc.org/github.com/argoproj/argo-events/pkg/apis\\\"><img src=\\\"https://godoc.org/github.com/argoproj/argo-events?status.svg\\\" alt=\\\"GoDoc\\\"></a>\\n<a href=\\\"LICENSE\\\"><img src=\\\"https://img.shields.io/badge/License-Apache%202.0-blue.svg\\\" alt=\\\"License\\\"></a></p>\\n<p align=\\\"center\\\">\\n  <img src=\\\"https://github.com/argoproj/argo-events/blob/master/docs/assets/argo-events-logo.png?raw=true\\\" alt=\\\"Logo\\\">\\n</p>\\n<h2>What is Argo Events?</h2>\\n<p><strong>Argo Events</strong> is an event-based dependency manager for Kubernetes which helps you define multiple dependencies from a variety of event sources like webhook, s3, schedules, streams etc.\\nand trigger Kubernetes objects after successful event dependencies resolution.</p>\\n<br/>\\n<br/>\\n<p align=\\\"center\\\">\\n  <img src=\\\"https://github.com/argoproj/argo-events/blob/master/docs/assets/argo-events-top-level.png?raw=true\\\" alt=\\\"High Level Overview\\\">\\n</p>\\n<br/>\\n<h2>Features</h2>\\n<ul>\\n<li>Manage dependencies from a variety of event sources.</li>\\n<li>Ability to customize business-level constraint logic for event dependencies resolution.</li>\\n<li>Manage everything from simple, linear, real-time dependencies to complex, multi-source, batch job dependencies.</li>\\n<li>Ability to extends framework to add your own event source listener.</li>\\n<li>Define arbitrary boolean logic to resolve event dependencies.</li>\\n<li>CloudEvents compliant.</li>\\n<li>Ability to manage event sources at runtime.</li>\\n</ul>\\n<h2>Core Concepts</h2>\\n<p>The framework is made up of two components: </p>\\n<ol>\\n<li>\\n<p><strong><code>Gateway</code></strong> which is implemented as a Kubernetes-native Custom Resource Definition processes events from event source.</p>\\n</li>\\n<li>\\n<p><strong><code>Sensor</code></strong> which is implemented as a Kubernetes-native Custom Resource Definition defines a set of event dependencies and triggers K8s resources.</p>\\n</li>\\n</ol>\\n<h2>Install</h2>\\n<ul>\\n<li>\\n<h3>Requirements</h3>\\n<ul>\\n<li>Kubernetes cluster >v1.9</li>\\n<li>Installed the <a href=\\\"https://kubernetes.io/docs/tasks/tools/install-kubectl/\\\">kubectl</a> command-line tool >v1.9.0</li>\\n</ul>\\n</li>\\n<li>\\n<h3>Helm Chart</h3>\\n<p>Make sure you have helm client installed and Tiller server is running. To install helm, follow <a href=\\\"https://docs.helm.sh/using_helm/\\\">https://docs.helm.sh/using_helm/</a></p>\\n<ol>\\n<li>Add <code>argoproj</code> repository</li>\\n</ol>\\n<pre><code class=\\\"language-bash\\\">helm repo add argo https://argoproj.github.io/argo-helm\\n</code></pre>\\n<ol start=\\\"2\\\">\\n<li>Install <code>argo-events</code> chart</li>\\n</ol>\\n<pre><code class=\\\"language-bash\\\">helm install argo/argo-events\\n</code></pre>\\n</li>\\n<li>\\n<h3>Using kubectl</h3>\\n<ul>\\n<li>Deploy Argo Events SA, Roles, ConfigMap, Sensor Controller and Gateway Controller</li>\\n</ul>\\n<pre><code>kubectl create namespace argo-events\\nkubectl apply -n argo-events -f https://raw.githubusercontent.com/argoproj/argo-events/master/hack/k8s/manifests/argo-events-sa.yaml\\nkubectl apply -n argo-events -f https://raw.githubusercontent.com/argoproj/argo-events/master/hack/k8s/manifests/argo-events-cluster-roles.yaml\\nkubectl apply -n argo-events -f https://raw.githubusercontent.com/argoproj/argo-events/master/hack/k8s/manifests/sensor-crd.yaml\\nkubectl apply -n argo-events -f https://raw.githubusercontent.com/argoproj/argo-events/master/hack/k8s/manifests/gateway-crd.yaml\\nkubectl apply -n argo-events -f https://raw.githubusercontent.com/argoproj/argo-events/master/hack/k8s/manifests/sensor-controller-configmap.yaml\\nkubectl apply -n argo-events -f https://raw.githubusercontent.com/argoproj/argo-events/master/hack/k8s/manifests/sensor-controller-deployment.yaml\\nkubectl apply -n argo-events -f https://raw.githubusercontent.com/argoproj/argo-events/master/hack/k8s/manifests/gateway-controller-configmap.yaml\\nkubectl apply -n argo-events -f https://raw.githubusercontent.com/argoproj/argo-events/master/hack/k8s/manifests/gateway-controller-deployment.yaml\\n</code></pre>\\n</li>\\n</ul>\\n<p><strong>Note</strong>: If you have already deployed the argo workflow controller in another namespace\\nand the controller is namespace scoped, make sure to deploy a new controller in <code>argo-events</code> namespace.  </p>\\n<h2>Get Started</h2>\\n<p>Lets deploy a webhook gateway and sensor,</p>\\n<ul>\\n<li>\\n<p>First, we need to setup event sources for gateway to listen. The event sources for any gateway are managed using K8s configmap.</p>\\n<pre><code class=\\\"language-bash\\\">kubectl apply -n argo-events -f https://raw.githubusercontent.com/argoproj/argo-events/master/examples/gateways/webhook-gateway-configmap.yaml \\n</code></pre>\\n</li>\\n<li>\\n<p>Create webhook gateway, </p>\\n<pre><code class=\\\"language-bash\\\">kubectl apply -n argo-events -f https://raw.githubusercontent.com/argoproj/argo-events/master/examples/gateways/webhook-http.yaml\\n</code></pre>\\n<p>After running above command, gateway controller will create corresponding gateway pod and a LoadBalancing service.</p>\\n</li>\\n<li>\\n<p>Create webhook sensor,</p>\\n<pre><code class=\\\"language-bash\\\">kubectl apply -n argo-events -f https://raw.githubusercontent.com/argoproj/argo-events/master/examples/sensors/webhook-http.yaml\\n</code></pre>\\n<p>Once sensor resource is created, sensor controller will create corresponding sensor pod and a ClusterIP service. </p>\\n</li>\\n<li>\\n<p>Once the gateway and sensor pods are running, trigger the webhook via a http POST request to <code>/foo</code> endpoint.\\nNote: the <code>WEBHOOK_SERVICE_URL</code> will differ based on the Kubernetes cluster.</p>\\n<pre><code>export WEBHOOK_SERVICE_URL=$(minikube service -n argo-events --url &#x3C;gateway_service_name>)\\necho $WEBHOOK_SERVICE_URL\\ncurl -d '{\\\"message\\\":\\\"this is my first webhook\\\"}' -H \\\"Content-Type: application/json\\\" -X POST $WEBHOOK_SERVICE_URL/foo\\n</code></pre>\\n<p><b>Note</b>: </p>\\n<ul>\\n<li>If you are facing an issue getting service url by running <code>minikube service -n argo-events --url &#x3C;gateway_service_name></code>, you can use <code>kubectl port-forward</code></li>\\n<li>Open another terminal window and enter <code>kubectl port-forward -n argo-events &#x3C;name_of_the_webhook_gateway_pod> 9003:&#x3C;port_on_which_gateway_server_is_running></code></li>\\n<li>You can now use <code>localhost:9003</code> to query webhook gateway</li>\\n</ul>\\n<p>Verify that the Argo workflow was run when the trigger was executed.</p>\\n<pre><code>argo list -n argo-events\\n</code></pre>\\n</li>\\n<li>\\n<p>More examples can be found at <a href=\\\"./examples\\\">examples</a></p>\\n</li>\\n</ul>\\n<h2>Further Reading</h2>\\n<ol>\\n<li><a href=\\\"docs/gateway-guide.html\\\">Gateway</a></li>\\n<li><a href=\\\"docs/sensor-guide.html\\\">Sensor</a></li>\\n<li><a href=\\\"docs/trigger-guide.html\\\">Trigger</a></li>\\n<li><a href=\\\"docs/communication.html\\\">Communication between gateway and sensor</a></li>\\n<li><a href=\\\"docs/controllers-guide.html\\\">Controllers</a></li>\\n<li><a href=\\\"docs/setup.html\\\">Setup Gateways &#x26; Sensors</a></li>\\n</ol>\\n<h2>Contribute</h2>\\n<p>Read and abide by the <a href=\\\"https://github.com/argoproj/argo-events/blob/master/CODE_OF_CONDUCT.md\\\">Argo Events Code of Conduct</a></p>\\n<p><a href=\\\"https://github.com/argoproj/argo-events/issues\\\">Contributions</a> are more than welcome, if you are interested please take a look at our <a href=\\\"./CONTRIBUTING.html\\\">Contributing Guidelines</a>.</p>\\n<h2>License</h2>\\n<p>Apache License Version 2.0, see <a href=\\\"./LICENSE\\\">LICENSE</a></p>\",\"docPath\":\"argo-events/readme\",\"proj\":\"argo-events\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/docs-argo-events.json\n// module id = 650\n// module chunks = 47583996684567"],"sourceRoot":""}