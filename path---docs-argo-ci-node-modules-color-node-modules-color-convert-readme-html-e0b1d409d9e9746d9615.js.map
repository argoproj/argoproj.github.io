{"version":3,"sources":["webpack:///path---docs-argo-ci-node-modules-color-node-modules-color-convert-readme-html-e0b1d409d9e9746d9615.js","webpack:///./.cache/json/docs-argo-ci-node-modules-color-node-modules-color-convert-readme-html.json"],"names":["webpackJsonp","2166","module","exports","pathContext","docHtml","docPath","proj"],"mappings":"AAAAA,cAAc,iBAERC,KACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,aAAeC,QAAA,k5GAAgxEC,QAAA,+DAAAC,KAAA","file":"path---docs-argo-ci-node-modules-color-node-modules-color-convert-readme-html-e0b1d409d9e9746d9615.js","sourcesContent":["webpackJsonp([49488918540955],{\n\n/***/ 2166:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"pathContext\":{\"docHtml\":\"<h1>color-convert</h1>\\n<p><a href=\\\"https://travis-ci.org/Qix-/color-convert\\\"><img src=\\\"https://travis-ci.org/Qix-/color-convert.svg?branch=master\\\" alt=\\\"Build Status\\\"></a></p>\\n<p>Color-convert is a color conversion library for JavaScript and node.\\nIt converts all ways between <code>rgb</code>, <code>hsl</code>, <code>hsv</code>, <code>hwb</code>, <code>cmyk</code>, <code>ansi</code>, <code>ansi16</code>, <code>hex</code> strings, and CSS <code>keyword</code>s (will round to closest):</p>\\n<pre><code class=\\\"language-js\\\">var convert = require('color-convert');\\n\\nconvert.rgb.hsl(140, 200, 100);             // [96, 48, 59]\\nconvert.keyword.rgb('blue');                // [0, 0, 255]\\n\\nvar rgbChannels = convert.rgb.channels;     // 3\\nvar cmykChannels = convert.cmyk.channels;   // 4\\nvar ansiChannels = convert.ansi16.channels; // 1\\n</code></pre>\\n<h1>Install</h1>\\n<pre><code class=\\\"language-console\\\">$ npm install color-convert\\n</code></pre>\\n<h1>API</h1>\\n<p>Simply get the property of the <em>from</em> and <em>to</em> conversion that you're looking for.</p>\\n<p>All functions have a rounded and unrounded variant. By default, return values are rounded. To get the unrounded (raw) results, simply tack on <code>.raw</code> to the function.</p>\\n<p>All 'from' functions have a hidden property called <code>.channels</code> that indicates the number of channels the function expects (not including alpha).</p>\\n<pre><code class=\\\"language-js\\\">var convert = require('color-convert');\\n\\n// Hex to LAB\\nconvert.hex.lab('DEADBF');         // [ 76, 21, -2 ]\\nconvert.hex.lab.raw('DEADBF');     // [ 75.56213190997677, 20.653827952644754, -2.290532499330533 ]\\n\\n// RGB to CMYK\\nconvert.rgb.cmyk(167, 255, 4);     // [ 35, 0, 98, 0 ]\\nconvert.rgb.cmyk.raw(167, 255, 4); // [ 34.509803921568626, 0, 98.43137254901961, 0 ]\\n</code></pre>\\n<h3>Arrays</h3>\\n<p>All functions that accept multiple arguments also support passing an array.</p>\\n<p>Note that this does <strong>not</strong> apply to functions that convert from a color that only requires one value (e.g. <code>keyword</code>, <code>ansi256</code>, <code>hex</code>, etc.)</p>\\n<pre><code class=\\\"language-js\\\">var convert = require('color-convert');\\n\\nconvert.rgb.hex(123, 45, 67);      // '7B2D43'\\nconvert.rgb.hex([123, 45, 67]);    // '7B2D43'\\n</code></pre>\\n<h2>Routing</h2>\\n<p>Conversions that don't have an <em>explicitly</em> defined conversion (in <a href=\\\"conversions.js\\\">conversions.js</a>), but can be converted by means of sub-conversions (e.g. XYZ -> <strong>RGB</strong> -> CMYK), are automatically routed together. This allows just about any color model supported by <code>color-convert</code> to be converted to any other model, so long as a sub-conversion path exists. This is also true for conversions requiring more than one step in between (e.g. LCH -> <strong>LAB</strong> -> <strong>XYZ</strong> -> <strong>RGB</strong> -> Hex).</p>\\n<p>Keep in mind that extensive conversions <em>may</em> result in a loss of precision, and exist only to be complete. For a list of \\\"direct\\\" (single-step) conversions, see <a href=\\\"conversions.js\\\">conversions.js</a>.</p>\\n<h1>Contribute</h1>\\n<p>If there is a new model you would like to support, or want to add a direct conversion between two existing models, please send us a pull request.</p>\\n<h1>License</h1>\\n<p>Copyright © 2011-2016, Heather Arthur and Josh Junon. Licensed under the <a href=\\\"LICENSE\\\">MIT License</a>.</p>\",\"docPath\":\"argo-ci/node_modules/color/node_modules/color-convert/readme\",\"proj\":\"argo-ci\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---docs-argo-ci-node-modules-color-node-modules-color-convert-readme-html-e0b1d409d9e9746d9615.js","module.exports = {\"pathContext\":{\"docHtml\":\"<h1>color-convert</h1>\\n<p><a href=\\\"https://travis-ci.org/Qix-/color-convert\\\"><img src=\\\"https://travis-ci.org/Qix-/color-convert.svg?branch=master\\\" alt=\\\"Build Status\\\"></a></p>\\n<p>Color-convert is a color conversion library for JavaScript and node.\\nIt converts all ways between <code>rgb</code>, <code>hsl</code>, <code>hsv</code>, <code>hwb</code>, <code>cmyk</code>, <code>ansi</code>, <code>ansi16</code>, <code>hex</code> strings, and CSS <code>keyword</code>s (will round to closest):</p>\\n<pre><code class=\\\"language-js\\\">var convert = require('color-convert');\\n\\nconvert.rgb.hsl(140, 200, 100);             // [96, 48, 59]\\nconvert.keyword.rgb('blue');                // [0, 0, 255]\\n\\nvar rgbChannels = convert.rgb.channels;     // 3\\nvar cmykChannels = convert.cmyk.channels;   // 4\\nvar ansiChannels = convert.ansi16.channels; // 1\\n</code></pre>\\n<h1>Install</h1>\\n<pre><code class=\\\"language-console\\\">$ npm install color-convert\\n</code></pre>\\n<h1>API</h1>\\n<p>Simply get the property of the <em>from</em> and <em>to</em> conversion that you're looking for.</p>\\n<p>All functions have a rounded and unrounded variant. By default, return values are rounded. To get the unrounded (raw) results, simply tack on <code>.raw</code> to the function.</p>\\n<p>All 'from' functions have a hidden property called <code>.channels</code> that indicates the number of channels the function expects (not including alpha).</p>\\n<pre><code class=\\\"language-js\\\">var convert = require('color-convert');\\n\\n// Hex to LAB\\nconvert.hex.lab('DEADBF');         // [ 76, 21, -2 ]\\nconvert.hex.lab.raw('DEADBF');     // [ 75.56213190997677, 20.653827952644754, -2.290532499330533 ]\\n\\n// RGB to CMYK\\nconvert.rgb.cmyk(167, 255, 4);     // [ 35, 0, 98, 0 ]\\nconvert.rgb.cmyk.raw(167, 255, 4); // [ 34.509803921568626, 0, 98.43137254901961, 0 ]\\n</code></pre>\\n<h3>Arrays</h3>\\n<p>All functions that accept multiple arguments also support passing an array.</p>\\n<p>Note that this does <strong>not</strong> apply to functions that convert from a color that only requires one value (e.g. <code>keyword</code>, <code>ansi256</code>, <code>hex</code>, etc.)</p>\\n<pre><code class=\\\"language-js\\\">var convert = require('color-convert');\\n\\nconvert.rgb.hex(123, 45, 67);      // '7B2D43'\\nconvert.rgb.hex([123, 45, 67]);    // '7B2D43'\\n</code></pre>\\n<h2>Routing</h2>\\n<p>Conversions that don't have an <em>explicitly</em> defined conversion (in <a href=\\\"conversions.js\\\">conversions.js</a>), but can be converted by means of sub-conversions (e.g. XYZ -> <strong>RGB</strong> -> CMYK), are automatically routed together. This allows just about any color model supported by <code>color-convert</code> to be converted to any other model, so long as a sub-conversion path exists. This is also true for conversions requiring more than one step in between (e.g. LCH -> <strong>LAB</strong> -> <strong>XYZ</strong> -> <strong>RGB</strong> -> Hex).</p>\\n<p>Keep in mind that extensive conversions <em>may</em> result in a loss of precision, and exist only to be complete. For a list of \\\"direct\\\" (single-step) conversions, see <a href=\\\"conversions.js\\\">conversions.js</a>.</p>\\n<h1>Contribute</h1>\\n<p>If there is a new model you would like to support, or want to add a direct conversion between two existing models, please send us a pull request.</p>\\n<h1>License</h1>\\n<p>Copyright © 2011-2016, Heather Arthur and Josh Junon. Licensed under the <a href=\\\"LICENSE\\\">MIT License</a>.</p>\",\"docPath\":\"argo-ci/node_modules/color/node_modules/color-convert/readme\",\"proj\":\"argo-ci\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/docs-argo-ci-node-modules-color-node-modules-color-convert-readme-html.json\n// module id = 2166\n// module chunks = 49488918540955"],"sourceRoot":""}