{"version":3,"sources":["webpack:///path---docs-argo-ci-node-modules-fsevents-node-modules-once-readme-html-2d9dab4c798ec8ce308e.js","webpack:///./.cache/json/docs-argo-ci-node-modules-fsevents-node-modules-once-readme-html.json"],"names":["webpackJsonp","2537","module","exports","pathContext","docHtml","docPath","proj"],"mappings":"AAAAA,cAAc,iBAERC,KACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,aAAeC,QAAA,6iEAA+yDC,QAAA,yDAAAC,KAAA","file":"path---docs-argo-ci-node-modules-fsevents-node-modules-once-readme-html-2d9dab4c798ec8ce308e.js","sourcesContent":["webpackJsonp([107020538236713],{\n\n/***/ 2537:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"pathContext\":{\"docHtml\":\"<h1>once</h1>\\n<p>Only call a function once.</p>\\n<h2>usage</h2>\\n<pre><code class=\\\"language-javascript\\\">var once = require('once')\\n\\nfunction load (file, cb) {\\n  cb = once(cb)\\n  loader.load('file')\\n  loader.once('load', cb)\\n  loader.once('error', cb)\\n}\\n</code></pre>\\n<p>Or add to the Function.prototype in a responsible way:</p>\\n<pre><code class=\\\"language-javascript\\\">// only has to be done once\\nrequire('once').proto()\\n\\nfunction load (file, cb) {\\n  cb = cb.once()\\n  loader.load('file')\\n  loader.once('load', cb)\\n  loader.once('error', cb)\\n}\\n</code></pre>\\n<p>Ironically, the prototype feature makes this module twice as\\ncomplicated as necessary.</p>\\n<p>To check whether you function has been called, use <code>fn.called</code>. Once the\\nfunction is called for the first time the return value of the original\\nfunction is saved in <code>fn.value</code> and subsequent calls will continue to\\nreturn this value.</p>\\n<pre><code class=\\\"language-javascript\\\">var once = require('once')\\n\\nfunction load (cb) {\\n  cb = once(cb)\\n  var stream = createStream()\\n  stream.once('data', cb)\\n  stream.once('end', function () {\\n    if (!cb.called) cb(new Error('not found'))\\n  })\\n}\\n</code></pre>\\n<h2><code>once.strict(func)</code></h2>\\n<p>Throw an error if the function is called twice.</p>\\n<p>Some functions are expected to be called only once. Using <code>once</code> for them would\\npotentially hide logical errors.</p>\\n<p>In the example below, the <code>greet</code> function has to call the callback only once:</p>\\n<pre><code class=\\\"language-javascript\\\">function greet (name, cb) {\\n  // return is missing from the if statement\\n  // when no name is passed, the callback is called twice\\n  if (!name) cb('Hello anonymous')\\n  cb('Hello ' + name)\\n}\\n\\nfunction log (msg) {\\n  console.log(msg)\\n}\\n\\n// this will print 'Hello anonymous' but the logical error will be missed\\ngreet(null, once(msg))\\n\\n// once.strict will print 'Hello anonymous' and throw an error when the callback will be called the second time\\ngreet(null, once.strict(msg))\\n</code></pre>\",\"docPath\":\"argo-ci/node_modules/fsevents/node_modules/once/readme\",\"proj\":\"argo-ci\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---docs-argo-ci-node-modules-fsevents-node-modules-once-readme-html-2d9dab4c798ec8ce308e.js","module.exports = {\"pathContext\":{\"docHtml\":\"<h1>once</h1>\\n<p>Only call a function once.</p>\\n<h2>usage</h2>\\n<pre><code class=\\\"language-javascript\\\">var once = require('once')\\n\\nfunction load (file, cb) {\\n  cb = once(cb)\\n  loader.load('file')\\n  loader.once('load', cb)\\n  loader.once('error', cb)\\n}\\n</code></pre>\\n<p>Or add to the Function.prototype in a responsible way:</p>\\n<pre><code class=\\\"language-javascript\\\">// only has to be done once\\nrequire('once').proto()\\n\\nfunction load (file, cb) {\\n  cb = cb.once()\\n  loader.load('file')\\n  loader.once('load', cb)\\n  loader.once('error', cb)\\n}\\n</code></pre>\\n<p>Ironically, the prototype feature makes this module twice as\\ncomplicated as necessary.</p>\\n<p>To check whether you function has been called, use <code>fn.called</code>. Once the\\nfunction is called for the first time the return value of the original\\nfunction is saved in <code>fn.value</code> and subsequent calls will continue to\\nreturn this value.</p>\\n<pre><code class=\\\"language-javascript\\\">var once = require('once')\\n\\nfunction load (cb) {\\n  cb = once(cb)\\n  var stream = createStream()\\n  stream.once('data', cb)\\n  stream.once('end', function () {\\n    if (!cb.called) cb(new Error('not found'))\\n  })\\n}\\n</code></pre>\\n<h2><code>once.strict(func)</code></h2>\\n<p>Throw an error if the function is called twice.</p>\\n<p>Some functions are expected to be called only once. Using <code>once</code> for them would\\npotentially hide logical errors.</p>\\n<p>In the example below, the <code>greet</code> function has to call the callback only once:</p>\\n<pre><code class=\\\"language-javascript\\\">function greet (name, cb) {\\n  // return is missing from the if statement\\n  // when no name is passed, the callback is called twice\\n  if (!name) cb('Hello anonymous')\\n  cb('Hello ' + name)\\n}\\n\\nfunction log (msg) {\\n  console.log(msg)\\n}\\n\\n// this will print 'Hello anonymous' but the logical error will be missed\\ngreet(null, once(msg))\\n\\n// once.strict will print 'Hello anonymous' and throw an error when the callback will be called the second time\\ngreet(null, once.strict(msg))\\n</code></pre>\",\"docPath\":\"argo-ci/node_modules/fsevents/node_modules/once/readme\",\"proj\":\"argo-ci\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/docs-argo-ci-node-modules-fsevents-node-modules-once-readme-html.json\n// module id = 2537\n// module chunks = 107020538236713"],"sourceRoot":""}