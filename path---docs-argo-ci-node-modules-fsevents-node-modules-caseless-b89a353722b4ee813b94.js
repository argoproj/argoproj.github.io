webpackJsonp([0x8abbe5b354a0],{2400:function(e,a){e.exports={pathContext:{docHtml:"<h2>Caseless -- wrap an object to set and get property with caseless semantics but also preserve caseing.</h2>\n<p>This library is incredibly useful when working with HTTP headers. It allows you to get/set/check for headers in a caseless manner while also preserving the caseing of headers the first time they are set.</p>\n<h2>Usage</h2>\n<pre><code class=\"language-javascript\">var headers = {}\n  , c = caseless(headers)\n  ;\nc.set('a-Header', 'asdf')\nc.get('a-header') === 'asdf'\n</code></pre>\n<h2>has(key)</h2>\n<p>Has takes a name and if it finds a matching header will return that header name with the preserved caseing it was set with.</p>\n<pre><code class=\"language-javascript\">c.has('a-header') === 'a-Header'\n</code></pre>\n<h2>set(key, value[, clobber=true])</h2>\n<p>Set is fairly straight forward except that if the header exists and clobber is disabled it will add <code>','+value</code> to the existing header.</p>\n<pre><code class=\"language-javascript\">c.set('a-Header', 'fdas')\nc.set('a-HEADER', 'more', false)\nc.get('a-header') === 'fdsa,more'\n</code></pre>\n<h2>swap(key)</h2>\n<p>Swaps the casing of a header with the new one that is passed in.</p>\n<pre><code class=\"language-javascript\">var headers = {}\n  , c = caseless(headers)\n  ;\nc.set('a-Header', 'fdas')\nc.swap('a-HEADER')\nc.has('a-header') === 'a-HEADER'\nheaders === {'a-HEADER': 'fdas'}\n</code></pre>",docPath:"argo-ci/node_modules/fsevents/node_modules/caseless/readme",proj:"argo-ci"}}}});
//# sourceMappingURL=path---docs-argo-ci-node-modules-fsevents-node-modules-caseless-b89a353722b4ee813b94.js.map