{"version":3,"sources":["webpack:///path---docs-argo-ci-node-modules-ts-node-readme-html-3bfbc6bdf0b959c36555.js","webpack:///./.cache/json/docs-argo-ci-node-modules-ts-node-readme-html.json"],"names":["webpackJsonp","3246","module","exports","pathContext","docHtml","docPath","proj"],"mappings":"AAAAA,cAAc,iBAERC,KACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,aAAeC,QAAA,w1LAA+uKC,QAAA,sCAAAC,KAAA","file":"path---docs-argo-ci-node-modules-ts-node-readme-html-3bfbc6bdf0b959c36555.js","sourcesContent":["webpackJsonp([220838654217663],{\n\n/***/ 3246:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"pathContext\":{\"docHtml\":\"<h1>TypeScript Node</h1>\\n<p><a href=\\\"https://npmjs.org/package/ts-node\\\"><img src=\\\"https://img.shields.io/npm/v/ts-node.svg?style=flat\\\" alt=\\\"NPM version\\\"></a>\\n<a href=\\\"https://npmjs.org/package/ts-node\\\"><img src=\\\"https://img.shields.io/npm/dm/ts-node.svg?style=flat\\\" alt=\\\"NPM downloads\\\"></a>\\n<a href=\\\"https://travis-ci.org/TypeStrong/ts-node\\\"><img src=\\\"https://img.shields.io/travis/TypeStrong/ts-node.svg?style=flat\\\" alt=\\\"Build status\\\"></a>\\n<a href=\\\"https://coveralls.io/r/TypeStrong/ts-node?branch=master\\\"><img src=\\\"https://img.shields.io/coveralls/TypeStrong/ts-node.svg?style=flat\\\" alt=\\\"Test coverage\\\"></a>\\n<a href=\\\"https://greenkeeper.io/\\\"><img src=\\\"https://badges.greenkeeper.io/TypeStrong/ts-node.svg\\\" alt=\\\"Greenkeeper badge\\\"></a></p>\\n<blockquote>\\n<p>TypeScript execution environment and REPL for node. <strong>Works with <code>typescript@>=1.5</code></strong>.</p>\\n</blockquote>\\n<h2>Installation</h2>\\n<pre><code class=\\\"language-sh\\\">npm install -g ts-node\\n\\n# Install a TypeScript compiler (requires `typescript` by default).\\nnpm install -g typescript\\n</code></pre>\\n<h2>Features</h2>\\n<ul>\\n<li>Execute TypeScript files with node</li>\\n<li>Interactive REPL</li>\\n<li>Execute (and print) TypeScript through the CLI</li>\\n<li>Uses source maps</li>\\n<li>Loads compiler options and <code>.d.ts</code> files from <code>tsconfig.json</code></li>\\n</ul>\\n<h2>Usage</h2>\\n<pre><code class=\\\"language-sh\\\"># Execute a script as you would normally with `node`.\\nts-node script.ts\\n\\n# Starts the TypeScript REPL.\\nts-node\\n\\n# Execute code with TypeScript.\\nts-node -e 'console.log(\\\"Hello, world!\\\")'\\n\\n# Execute, and print, code with TypeScript.\\nts-node -p '\\\"Hello, world!\\\"'\\n\\n# Pipe scripts to execute with TypeScript.\\necho \\\"console.log('Hello, world!')\\\" | ts-node\\n</code></pre>\\n<p><img src=\\\"https://github.com/TypeStrong/ts-node/raw/master/screenshot.png\\\" alt=\\\"TypeScript REPL\\\"></p>\\n<h3>Programmatic</h3>\\n<p>You can require <code>ts-node</code> and register the loader for future requires by using <code>require('ts-node').register({ /* options */ })</code>. You can also use the shortcut files <code>node -r ts-node/register</code> or <code>node -r ts-node/register/type-check</code> depending on your preferences.</p>\\n<h3>Mocha</h3>\\n<pre><code class=\\\"language-sh\\\">mocha --require ts-node/register --watch-extensions ts,tsx \\\"test/**/*.{ts,tsx}\\\" [...args]\\n</code></pre>\\n<p><strong>Note:</strong> <code>--watch-extensions</code> is only used in <code>--watch</code> mode.</p>\\n<h3>Tape</h3>\\n<pre><code class=\\\"language-sh\\\">ts-node node_modules/tape/bin/tape [...args]\\n</code></pre>\\n<h3>Gulp</h3>\\n<pre><code class=\\\"language-sh\\\"># Just create a `gulpfile.ts` and run `gulp`.\\ngulp\\n</code></pre>\\n<h2>How It Works</h2>\\n<p><strong>TypeScript Node</strong> works by registering the TypeScript compiler for the <code>.ts</code>, <code>.tsx</code> and - when <code>allowJs</code> is enabled - <code>.js</code> extensions. When node.js has a file extension registered (the <code>require.extensions</code> object), it will use the extension internally with module resolution. By default, when an extension is unknown to node.js, it will fallback to handling the file as <code>.js</code> (JavaScript).</p>\\n<p><strong>P.S.</strong> This means that if you don't register an extension, it'll be compiled as JavaScript. When <code>ts-node</code> is used with <code>allowJs</code>, JavaScript files are transpiled using the TypeScript compiler.</p>\\n<h2>Loading <code>tsconfig.json</code></h2>\\n<p><strong>Typescript Node</strong> uses <code>tsconfig.json</code> automatically, use <code>--no-project</code> to skip loading <code>tsconfig.json</code>.</p>\\n<p><strong>NOTE</strong>: You can use <code>ts-node</code> together with <a href=\\\"https://www.npmjs.com/package/tsconfig-paths\\\">tsconfig-paths</a> to load modules according to the <code>paths</code> section in <code>tsconfig.json</code>.</p>\\n<h2>Configuration Options</h2>\\n<p>You can set options by passing them in before the script.</p>\\n<p><strong>Note:</strong> These are in addition to the <a href=\\\"https://nodejs.org/api/cli.html\\\">node.js CLI arguments</a>.</p>\\n<pre><code class=\\\"language-sh\\\">ts-node --compiler ntypescript --project src --ignoreWarnings 2304 hello-world.ts\\n</code></pre>\\n<ul>\\n<li><strong>--project, -P</strong> Path to load TypeScript configuration from (JSON file, a directory containing <code>tsconfig.json</code>, or <code>--no-project</code>/<code>false</code> to disable) (also <code>process.env.TS_NODE_PROJECT</code>)</li>\\n<li><strong>--compiler, -C</strong> Use a custom, require-able TypeScript compiler compatible with <code>typescript@>=1.5.0-alpha</code> (also <code>process.env.TS_NODE_COMPILER</code>)</li>\\n<li><strong>--ignore</strong> Specify an array of regular expression strings for <code>ts-node</code> to skip compiling as TypeScript (defaults to <code>/node_modules/</code>, <code>--no-ignore</code>/<code>false</code> to disable) (also <code>process.env.TS_NODE_IGNORE</code>)</li>\\n<li><strong>--ignoreWarnings, -I</strong> Set an array of TypeScript diagnostic codes to ignore (also <code>process.env.TS_NODE_IGNORE_WARNINGS</code>)</li>\\n<li><strong>--compilerOptions, -O</strong> Set compiler options using JSON (E.g. <code>--compilerOptions '{\\\"target\\\":\\\"es6\\\"}'</code>) (also <code>process.env.TS_NODE_COMPILER_OPTIONS</code>)</li>\\n<li><strong>--type-check</strong> Use TypeScript with type checking (also <code>process.env.TS_NODE_TYPE_CHECK</code>)</li>\\n<li><strong>--no-cache</strong> Skip hitting the compiled JavaScript cache (also <code>process.env.TS_NODE_CACHE</code>)</li>\\n<li><strong>--cache-directory</strong> Configure the TypeScript cache directory (also <code>process.env.TS_NODE_CACHE_DIRECTORY</code>)</li>\\n</ul>\\n<p>Additionally, the <code>transformers</code> option may be provided when programmatically registering <code>ts-node</code> to specify custom TypeScript transformers.</p>\\n<h2>License</h2>\\n<p>MIT</p>\",\"docPath\":\"argo-ci/node_modules/ts-node/readme\",\"proj\":\"argo-ci\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---docs-argo-ci-node-modules-ts-node-readme-html-3bfbc6bdf0b959c36555.js","module.exports = {\"pathContext\":{\"docHtml\":\"<h1>TypeScript Node</h1>\\n<p><a href=\\\"https://npmjs.org/package/ts-node\\\"><img src=\\\"https://img.shields.io/npm/v/ts-node.svg?style=flat\\\" alt=\\\"NPM version\\\"></a>\\n<a href=\\\"https://npmjs.org/package/ts-node\\\"><img src=\\\"https://img.shields.io/npm/dm/ts-node.svg?style=flat\\\" alt=\\\"NPM downloads\\\"></a>\\n<a href=\\\"https://travis-ci.org/TypeStrong/ts-node\\\"><img src=\\\"https://img.shields.io/travis/TypeStrong/ts-node.svg?style=flat\\\" alt=\\\"Build status\\\"></a>\\n<a href=\\\"https://coveralls.io/r/TypeStrong/ts-node?branch=master\\\"><img src=\\\"https://img.shields.io/coveralls/TypeStrong/ts-node.svg?style=flat\\\" alt=\\\"Test coverage\\\"></a>\\n<a href=\\\"https://greenkeeper.io/\\\"><img src=\\\"https://badges.greenkeeper.io/TypeStrong/ts-node.svg\\\" alt=\\\"Greenkeeper badge\\\"></a></p>\\n<blockquote>\\n<p>TypeScript execution environment and REPL for node. <strong>Works with <code>typescript@>=1.5</code></strong>.</p>\\n</blockquote>\\n<h2>Installation</h2>\\n<pre><code class=\\\"language-sh\\\">npm install -g ts-node\\n\\n# Install a TypeScript compiler (requires `typescript` by default).\\nnpm install -g typescript\\n</code></pre>\\n<h2>Features</h2>\\n<ul>\\n<li>Execute TypeScript files with node</li>\\n<li>Interactive REPL</li>\\n<li>Execute (and print) TypeScript through the CLI</li>\\n<li>Uses source maps</li>\\n<li>Loads compiler options and <code>.d.ts</code> files from <code>tsconfig.json</code></li>\\n</ul>\\n<h2>Usage</h2>\\n<pre><code class=\\\"language-sh\\\"># Execute a script as you would normally with `node`.\\nts-node script.ts\\n\\n# Starts the TypeScript REPL.\\nts-node\\n\\n# Execute code with TypeScript.\\nts-node -e 'console.log(\\\"Hello, world!\\\")'\\n\\n# Execute, and print, code with TypeScript.\\nts-node -p '\\\"Hello, world!\\\"'\\n\\n# Pipe scripts to execute with TypeScript.\\necho \\\"console.log('Hello, world!')\\\" | ts-node\\n</code></pre>\\n<p><img src=\\\"https://github.com/TypeStrong/ts-node/raw/master/screenshot.png\\\" alt=\\\"TypeScript REPL\\\"></p>\\n<h3>Programmatic</h3>\\n<p>You can require <code>ts-node</code> and register the loader for future requires by using <code>require('ts-node').register({ /* options */ })</code>. You can also use the shortcut files <code>node -r ts-node/register</code> or <code>node -r ts-node/register/type-check</code> depending on your preferences.</p>\\n<h3>Mocha</h3>\\n<pre><code class=\\\"language-sh\\\">mocha --require ts-node/register --watch-extensions ts,tsx \\\"test/**/*.{ts,tsx}\\\" [...args]\\n</code></pre>\\n<p><strong>Note:</strong> <code>--watch-extensions</code> is only used in <code>--watch</code> mode.</p>\\n<h3>Tape</h3>\\n<pre><code class=\\\"language-sh\\\">ts-node node_modules/tape/bin/tape [...args]\\n</code></pre>\\n<h3>Gulp</h3>\\n<pre><code class=\\\"language-sh\\\"># Just create a `gulpfile.ts` and run `gulp`.\\ngulp\\n</code></pre>\\n<h2>How It Works</h2>\\n<p><strong>TypeScript Node</strong> works by registering the TypeScript compiler for the <code>.ts</code>, <code>.tsx</code> and - when <code>allowJs</code> is enabled - <code>.js</code> extensions. When node.js has a file extension registered (the <code>require.extensions</code> object), it will use the extension internally with module resolution. By default, when an extension is unknown to node.js, it will fallback to handling the file as <code>.js</code> (JavaScript).</p>\\n<p><strong>P.S.</strong> This means that if you don't register an extension, it'll be compiled as JavaScript. When <code>ts-node</code> is used with <code>allowJs</code>, JavaScript files are transpiled using the TypeScript compiler.</p>\\n<h2>Loading <code>tsconfig.json</code></h2>\\n<p><strong>Typescript Node</strong> uses <code>tsconfig.json</code> automatically, use <code>--no-project</code> to skip loading <code>tsconfig.json</code>.</p>\\n<p><strong>NOTE</strong>: You can use <code>ts-node</code> together with <a href=\\\"https://www.npmjs.com/package/tsconfig-paths\\\">tsconfig-paths</a> to load modules according to the <code>paths</code> section in <code>tsconfig.json</code>.</p>\\n<h2>Configuration Options</h2>\\n<p>You can set options by passing them in before the script.</p>\\n<p><strong>Note:</strong> These are in addition to the <a href=\\\"https://nodejs.org/api/cli.html\\\">node.js CLI arguments</a>.</p>\\n<pre><code class=\\\"language-sh\\\">ts-node --compiler ntypescript --project src --ignoreWarnings 2304 hello-world.ts\\n</code></pre>\\n<ul>\\n<li><strong>--project, -P</strong> Path to load TypeScript configuration from (JSON file, a directory containing <code>tsconfig.json</code>, or <code>--no-project</code>/<code>false</code> to disable) (also <code>process.env.TS_NODE_PROJECT</code>)</li>\\n<li><strong>--compiler, -C</strong> Use a custom, require-able TypeScript compiler compatible with <code>typescript@>=1.5.0-alpha</code> (also <code>process.env.TS_NODE_COMPILER</code>)</li>\\n<li><strong>--ignore</strong> Specify an array of regular expression strings for <code>ts-node</code> to skip compiling as TypeScript (defaults to <code>/node_modules/</code>, <code>--no-ignore</code>/<code>false</code> to disable) (also <code>process.env.TS_NODE_IGNORE</code>)</li>\\n<li><strong>--ignoreWarnings, -I</strong> Set an array of TypeScript diagnostic codes to ignore (also <code>process.env.TS_NODE_IGNORE_WARNINGS</code>)</li>\\n<li><strong>--compilerOptions, -O</strong> Set compiler options using JSON (E.g. <code>--compilerOptions '{\\\"target\\\":\\\"es6\\\"}'</code>) (also <code>process.env.TS_NODE_COMPILER_OPTIONS</code>)</li>\\n<li><strong>--type-check</strong> Use TypeScript with type checking (also <code>process.env.TS_NODE_TYPE_CHECK</code>)</li>\\n<li><strong>--no-cache</strong> Skip hitting the compiled JavaScript cache (also <code>process.env.TS_NODE_CACHE</code>)</li>\\n<li><strong>--cache-directory</strong> Configure the TypeScript cache directory (also <code>process.env.TS_NODE_CACHE_DIRECTORY</code>)</li>\\n</ul>\\n<p>Additionally, the <code>transformers</code> option may be provided when programmatically registering <code>ts-node</code> to specify custom TypeScript transformers.</p>\\n<h2>License</h2>\\n<p>MIT</p>\",\"docPath\":\"argo-ci/node_modules/ts-node/readme\",\"proj\":\"argo-ci\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/docs-argo-ci-node-modules-ts-node-readme-html.json\n// module id = 3246\n// module chunks = 220838654217663"],"sourceRoot":""}