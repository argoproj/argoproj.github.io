webpackJsonp([0xbbec14d2a563],{473:function(e,a){e.exports={pathContext:{docHtml:'<h1 id="core-concepts"><a href="#core-concepts" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Core Concepts</h1>\n<p>This page serves as an introduction into the core concepts of Argo.</p>\n<h2 id="the-workflow"><a href="#the-workflow" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>The <code>Workflow</code></h2>\n<p>The <a href="fields.md#workflow"><code>Workflow</code></a> is the most important resource in Argo and serves two important functions:</p>\n<ol>\n<li>It defines the workflow to be executed.</li>\n<li>It stores the state of the workflow.</li>\n</ol>\n<p>Because of these dual responsibilities, a <code>Workflow</code> should be treated as a "live" object. It is not only a static definition, but is also an "instance" of said definition. (If it isn\'t clear what this means, it will be explained below).</p>\n<h3 id="workflow-spec"><a href="#workflow-spec" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Workflow Spec</h3>\n<p>The workflow to be executed is defined in the <a href="fields.md#workflowspec"><code>Workflow.spec</code></a> field. The core structure of a Workflow spec is a list of <a href="fields.md#template"><code>templates</code></a> and an <code>entrypoint</code>.</p>\n<p><a href="fields.md#template"><code>templates</code></a> can be loosely thought of as "functions": they define instructions to be executed.\nThe <code>entrypoint</code> field defines what the "main" function will be â€“ that is, the template that will be executed first.</p>\n<p>Here is an example of a simple <code>Workflow</code> spec with a single <code>template</code>:</p>\n<pre><code class="language-yaml">apiVersion: argoproj.io/v1alpha1\nkind: Workflow\nmetadata:\n  generateName: hello-world-  # Name of this Workflow\nspec:\n  entrypoint: whalesay        # Defines "whalesay" as the "main" template\n  templates:\n  - name: whalesay            # Defining the "whalesay" template\n    container:\n      image: docker/whalesay\n      command: [cowsay]\n      args: ["hello world"]   # This template runs "cowsay" in the "whalesay" image with arguments "hello world"\n</code></pre>\n<h3 id="template-types"><a href="#template-types" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a><code>template</code> Types</h3>\n<p>There are 6 types of templates, divided into two different categories.</p>\n<h4 id="template-definitions"><a href="#template-definitions" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Template Definitions</h4>\n<p>These templates <em>define</em> work to be done, usually in a Container.</p>\n<h5 id="container"><a href="#container" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a><a href="fields.md#container">Container</a></h5>\n<p>Perhaps the most common template type, it will schedule a Container. The spec of the template is the same as the <a href="https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.11/#container-v1-core">K8s container spec</a>, so you can define a container here the same way you do anywhere else in K8s.\n<br>\nExample:</p>\n<pre><code class="language-yaml">  - name: whalesay\n    container:\n      image: docker/whalesay\n      command: [cowsay]\n      args: ["hello world"]\n</code></pre>\n<h5 id="script"><a href="#script" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a><a href="fields.md#scripttemplate">Script</a></h5>\n<p>A convenience wrapper around a <code>container</code>. The spec is the same as a container, but adds the <code>source:</code> field which allows you to define a script in-place.\nThe script will be saved into a file and executed for you. The result of the script is automatically exported into an <a href="./variables.html">Argo variable</a> either <code>{{tasks.&#x3C;NAME>.outputs.result}}</code> or <code>{{steps.&#x3C;NAME>.outputs.result}}</code>, depending how it was called.\n<br>\nExample:</p>\n<pre><code class="language-yaml">  - name: gen-random-int\n    script:\n      image: python:alpine3.6\n      command: [python]\n      source: |\n        import random\n        i = random.randint(1, 100)\n        print(i)\n</code></pre>\n<h5 id="resource"><a href="#resource" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a><a href="fields.md#resourcetemplate">Resource</a></h5>\n<p>Performs operations on cluster Resources directly. It can be used to get, create, apply, delete, replace, or patch resources on your cluster.\n<br>\nThis example creates a <code>ConfigMap</code> resource on the cluster:</p>\n<pre><code class="language-yaml">  - name: k8s-owner-reference\n    resource:\n      action: create\n      manifest: |\n        apiVersion: v1\n        kind: ConfigMap\n        metadata:\n          generateName: owned-eg-\n        data:\n          some: value\n</code></pre>\n<h5 id="suspend"><a href="#suspend" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a><a href="fields.md#suspendtemplate">Suspend</a></h5>\n<p>A suspend template will suspend execution, either for a duration or until it is resumed manually. Suspend templates can be resumed from the CLI (with <code>argo resume</code>), the API endpoint<!-- TODO: LINK -->, or the UI.\n<br>\nExample:</p>\n<pre><code class="language-yaml">  - name: delay\n    suspend:\n      duration: "20s"\n</code></pre>\n<h4 id="template-invocators"><a href="#template-invocators" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Template Invocators</h4>\n<p>These templates are used to invoke/call other templates and provide execution control.</p>\n<h5 id="steps"><a href="#steps" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a><a href="fields.md#workflowstep">Steps</a></h5>\n<p>A steps template allows you to define your tasks in a series of steps. The structure of the template is a "list of lists". Outer lists will run sequentially and inner lists will run in parallel. You can set a wide array of options to control execution, such as <a href="../examples/coinflip.yaml"><code>when:</code> clauses to conditionally execute a step</a>.\n<br>\nIn this example <code>step1</code> runs first. Once it is completed, <code>step2a</code> and <code>step2b</code> will run in parallel:</p>\n<pre><code class="language-yaml">  - name: hello-hello-hello\n    steps:\n    - - name: step1\n        template: prepare-data\n    - - name: step2a\n        template: run-data-first-half\n      - name: step2b\n        template: run-data-second-half\n</code></pre>\n<h5 id="dag"><a href="#dag" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a><a href="fields.md#dagtemplate">DAG</a></h5>\n<p>A dag template allows you to define your tasks as a graph of dependencies. In a DAG, you list all your tasks and set which other tasks must complete before a particular task can begin. Tasks without any dependencies will be run immediately.\n<br>\nIn this example <code>A</code> runs first. Once it is completed, <code>B</code> and <code>C</code> will run in parallel and once they both complete, <code>D</code> will run:</p>\n<pre><code class="language-yaml">  - name: diamond\n    dag:\n      tasks:\n      - name: A\n        template: echo\n      - name: B\n        dependencies: [A]\n        template: echo\n      - name: C\n        dependencies: [A]\n        template: echo\n      - name: D\n        dependencies: [B, C]\n        template: echo\n</code></pre>',docPath:"argo/core-concepts",proj:"argo"}}}});
//# sourceMappingURL=path---docs-argo-core-concepts-html-8879d52665fe2cedeafe.js.map