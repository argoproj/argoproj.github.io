webpackJsonp([0x8f3e316245fd],{2378:function(e,t){e.exports={pathContext:{docHtml:'<h1>asynckit <a href="https://www.npmjs.com/package/asynckit"><img src="https://img.shields.io/npm/v/asynckit.svg?style=flat" alt="NPM Module"></a></h1>\n<p>Minimal async jobs utility library, with streams support.</p>\n<p><a href="https://travis-ci.org/alexindigo/asynckit"><img src="https://img.shields.io/travis/alexindigo/asynckit/v0.4.0.svg?label=browser&#x26;style=flat" alt="PhantomJS Build"></a>\n<a href="https://travis-ci.org/alexindigo/asynckit"><img src="https://img.shields.io/travis/alexindigo/asynckit/v0.4.0.svg?label=linux:0.12-6.x&#x26;style=flat" alt="Linux Build"></a>\n<a href="https://ci.appveyor.com/project/alexindigo/asynckit"><img src="https://img.shields.io/appveyor/ci/alexindigo/asynckit/v0.4.0.svg?label=windows:0.12-6.x&#x26;style=flat" alt="Windows Build"></a></p>\n<p><a href="https://coveralls.io/github/alexindigo/asynckit?branch=master"><img src="https://img.shields.io/coveralls/alexindigo/asynckit/v0.4.0.svg?label=code+coverage&#x26;style=flat" alt="Coverage Status"></a>\n<a href="https://david-dm.org/alexindigo/asynckit"><img src="https://img.shields.io/david/alexindigo/asynckit/v0.4.0.svg?style=flat" alt="Dependency Status"></a>\n<a href="https://www.bithound.io/github/alexindigo/asynckit"><img src="https://www.bithound.io/github/alexindigo/asynckit/badges/score.svg" alt="bitHound Overall Score"></a></p>\n<!-- [![Readme](https://img.shields.io/badge/readme-tested-brightgreen.svg?style=flat)](https://www.npmjs.com/package/reamde) -->\n<p>AsyncKit provides harness for <code>parallel</code> and <code>serial</code> iterators over list of items represented by arrays or objects.\nOptionally it accepts abort function (should be synchronously return by iterator for each item), and terminates left over jobs upon an error event. For specific iteration order built-in (<code>ascending</code> and <code>descending</code>) and custom sort helpers also supported, via <code>asynckit.serialOrdered</code> method.</p>\n<p>It ensures async operations to keep behavior more stable and prevent <code>Maximum call stack size exceeded</code> errors, from sync iterators.</p>\n<table>\n<thead>\n<tr>\n<th align="left">compression</th>\n<th align="right">size</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align="left">asynckit.js</td>\n<td align="right">12.34 kB</td>\n</tr>\n<tr>\n<td align="left">asynckit.min.js</td>\n<td align="right">4.11 kB</td>\n</tr>\n<tr>\n<td align="left">asynckit.min.js.gz</td>\n<td align="right">1.47 kB</td>\n</tr>\n</tbody>\n</table>\n<h2>Install</h2>\n<pre><code class="language-sh">$ npm install --save asynckit\n</code></pre>\n<h2>Examples</h2>\n<h3>Parallel Jobs</h3>\n<p>Runs iterator over provided array in parallel. Stores output in the <code>result</code> array,\non the matching positions. In unlikely event of an error from one of the jobs,\nwill terminate rest of the active jobs (if abort function is provided)\nand return error along with salvaged data to the main callback function.</p>\n<h4>Input Array</h4>\n<pre><code class="language-javascript">var parallel = require(\'asynckit\').parallel\n  , assert   = require(\'assert\')\n  ;\n\nvar source         = [ 1, 1, 4, 16, 64, 32, 8, 2 ]\n  , expectedResult = [ 2, 2, 8, 32, 128, 64, 16, 4 ]\n  , expectedTarget = [ 1, 1, 2, 4, 8, 16, 32, 64 ]\n  , target         = []\n  ;\n\nparallel(source, asyncJob, function(err, result)\n{\n  assert.deepEqual(result, expectedResult);\n  assert.deepEqual(target, expectedTarget);\n});\n\n// async job accepts one element from the array\n// and a callback function\nfunction asyncJob(item, cb)\n{\n  // different delays (in ms) per item\n  var delay = item * 25;\n\n  // pretend different jobs take different time to finish\n  // and not in consequential order\n  var timeoutId = setTimeout(function() {\n    target.push(item);\n    cb(null, item * 2);\n  }, delay);\n\n  // allow to cancel "leftover" jobs upon error\n  // return function, invoking of which will abort this job\n  return clearTimeout.bind(null, timeoutId);\n}\n</code></pre>\n<p>More examples could be found in <a href="test/test-parallel-array.js">test/test-parallel-array.js</a>.</p>\n<h4>Input Object</h4>\n<p>Also it supports named jobs, listed via object.</p>\n<pre><code class="language-javascript">var parallel = require(\'asynckit/parallel\')\n  , assert   = require(\'assert\')\n  ;\n\nvar source         = { first: 1, one: 1, four: 4, sixteen: 16, sixtyFour: 64, thirtyTwo: 32, eight: 8, two: 2 }\n  , expectedResult = { first: 2, one: 2, four: 8, sixteen: 32, sixtyFour: 128, thirtyTwo: 64, eight: 16, two: 4 }\n  , expectedTarget = [ 1, 1, 2, 4, 8, 16, 32, 64 ]\n  , expectedKeys   = [ \'first\', \'one\', \'two\', \'four\', \'eight\', \'sixteen\', \'thirtyTwo\', \'sixtyFour\' ]\n  , target         = []\n  , keys           = []\n  ;\n\nparallel(source, asyncJob, function(err, result)\n{\n  assert.deepEqual(result, expectedResult);\n  assert.deepEqual(target, expectedTarget);\n  assert.deepEqual(keys, expectedKeys);\n});\n\n// supports full value, key, callback (shortcut) interface\nfunction asyncJob(item, key, cb)\n{\n  // different delays (in ms) per item\n  var delay = item * 25;\n\n  // pretend different jobs take different time to finish\n  // and not in consequential order\n  var timeoutId = setTimeout(function() {\n    keys.push(key);\n    target.push(item);\n    cb(null, item * 2);\n  }, delay);\n\n  // allow to cancel "leftover" jobs upon error\n  // return function, invoking of which will abort this job\n  return clearTimeout.bind(null, timeoutId);\n}\n</code></pre>\n<p>More examples could be found in <a href="test/test-parallel-object.js">test/test-parallel-object.js</a>.</p>\n<h3>Serial Jobs</h3>\n<p>Runs iterator over provided array sequentially. Stores output in the <code>result</code> array,\non the matching positions. In unlikely event of an error from one of the jobs,\nwill not proceed to the rest of the items in the list\nand return error along with salvaged data to the main callback function.</p>\n<h4>Input Array</h4>\n<pre><code class="language-javascript">var serial = require(\'asynckit/serial\')\n  , assert = require(\'assert\')\n  ;\n\nvar source         = [ 1, 1, 4, 16, 64, 32, 8, 2 ]\n  , expectedResult = [ 2, 2, 8, 32, 128, 64, 16, 4 ]\n  , expectedTarget = [ 0, 1, 2, 3, 4, 5, 6, 7 ]\n  , target         = []\n  ;\n\nserial(source, asyncJob, function(err, result)\n{\n  assert.deepEqual(result, expectedResult);\n  assert.deepEqual(target, expectedTarget);\n});\n\n// extended interface (item, key, callback)\n// also supported for arrays\nfunction asyncJob(item, key, cb)\n{\n  target.push(key);\n\n  // it will be automatically made async\n  // even it iterator "returns" in the same event loop\n  cb(null, item * 2);\n}\n</code></pre>\n<p>More examples could be found in <a href="test/test-serial-array.js">test/test-serial-array.js</a>.</p>\n<h4>Input Object</h4>\n<p>Also it supports named jobs, listed via object.</p>\n<pre><code class="language-javascript">var serial = require(\'asynckit\').serial\n  , assert = require(\'assert\')\n  ;\n\nvar source         = [ 1, 1, 4, 16, 64, 32, 8, 2 ]\n  , expectedResult = [ 2, 2, 8, 32, 128, 64, 16, 4 ]\n  , expectedTarget = [ 0, 1, 2, 3, 4, 5, 6, 7 ]\n  , target         = []\n  ;\n\nvar source         = { first: 1, one: 1, four: 4, sixteen: 16, sixtyFour: 64, thirtyTwo: 32, eight: 8, two: 2 }\n  , expectedResult = { first: 2, one: 2, four: 8, sixteen: 32, sixtyFour: 128, thirtyTwo: 64, eight: 16, two: 4 }\n  , expectedTarget = [ 1, 1, 4, 16, 64, 32, 8, 2 ]\n  , target         = []\n  ;\n\n\nserial(source, asyncJob, function(err, result)\n{\n  assert.deepEqual(result, expectedResult);\n  assert.deepEqual(target, expectedTarget);\n});\n\n// shortcut interface (item, callback)\n// works for object as well as for the arrays\nfunction asyncJob(item, cb)\n{\n  target.push(item);\n\n  // it will be automatically made async\n  // even it iterator "returns" in the same event loop\n  cb(null, item * 2);\n}\n</code></pre>\n<p>More examples could be found in <a href="test/test-serial-object.js">test/test-serial-object.js</a>.</p>\n<p><em>Note: Since _object</em> is an <em>unordered</em> collection of properties,\nit may produce unexpected results with sequential iterations.\nWhenever order of the jobs\' execution is important please use <code>serialOrdered</code> method._</p>\n<h3>Ordered Serial Iterations</h3>\n<p>TBD</p>\n<p>For example <a href="compare-property">compare-property</a> package.</p>\n<h3>Streaming interface</h3>\n<p>TBD</p>\n<h2>Want to Know More?</h2>\n<p>More examples can be found in <a href="test/">test folder</a>.</p>\n<p>Or open an <a href="https://github.com/alexindigo/asynckit/issues">issue</a> with questions and/or suggestions.</p>\n<h2>License</h2>\n<p>AsyncKit is licensed under the MIT license.</p>',docPath:"argo-ci/node_modules/fsevents/node_modules/asynckit/readme",proj:"argo-ci"}}}});
//# sourceMappingURL=path---docs-argo-ci-node-modules-fsevents-node-modules-asynckit-readme-html-f468d594f034930930fb.js.map