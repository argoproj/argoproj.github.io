webpackJsonp([0xf2ee4087521f],{2079:function(e,o){e.exports={pathContext:{docHtml:'<h1 align="center">\n\t<br>\n\t<br>\n\t<img width="360" src="https://cdn.rawgit.com/chalk/chalk/19935d6484811c5e468817f846b7b3d417d7bf4a/logo.svg" alt="chalk">\n\t<br>\n\t<br>\n\t<br>\n</h1>\n<blockquote>\n<p>Terminal string styling done right</p>\n</blockquote>\n<p><a href="https://travis-ci.org/chalk/chalk"><img src="https://travis-ci.org/chalk/chalk.svg?branch=master" alt="Build Status"></a>\n<a href="https://coveralls.io/r/chalk/chalk?branch=master"><img src="https://coveralls.io/repos/chalk/chalk/badge.svg?branch=master" alt="Coverage Status"></a>\n<a href="https://www.youtube.com/watch?v=9auOCbH5Ns4"><img src="http://img.shields.io/badge/unicorn-approved-ff69b4.svg"></a></p>\n<p><a href="https://github.com/Marak/colors.js">colors.js</a> used to be the most popular string styling module, but it has serious deficiencies like extending <code>String.prototype</code> which causes all kinds of <a href="https://github.com/yeoman/yo/issues/68">problems</a>. Although there are other ones, they either do too much or not enough.</p>\n<p><strong>Chalk is a clean and focused alternative.</strong></p>\n<p><img src="https://github.com/chalk/ansi-styles/raw/master/screenshot.png"></p>\n<h2>Why</h2>\n<ul>\n<li>Highly performant</li>\n<li>Doesn\'t extend <code>String.prototype</code></li>\n<li>Expressive API</li>\n<li>Ability to nest styles</li>\n<li>Clean and focused</li>\n<li>Auto-detects color support</li>\n<li>Actively maintained</li>\n<li><a href="https://www.npmjs.com/browse/depended/chalk">Used by ~4500 modules</a> as of July 15, 2015</li>\n</ul>\n<h2>Install</h2>\n<pre><code>$ npm install --save chalk\n</code></pre>\n<h2>Usage</h2>\n<p>Chalk comes with an easy to use composable API where you just chain and nest the styles you want.</p>\n<pre><code class="language-js">var chalk = require(\'chalk\');\n\n// style a string\nchalk.blue(\'Hello world!\');\n\n// combine styled and normal strings\nchalk.blue(\'Hello\') + \'World\' + chalk.red(\'!\');\n\n// compose multiple styles using the chainable API\nchalk.blue.bgRed.bold(\'Hello world!\');\n\n// pass in multiple arguments\nchalk.blue(\'Hello\', \'World!\', \'Foo\', \'bar\', \'biz\', \'baz\');\n\n// nest styles\nchalk.red(\'Hello\', chalk.underline.bgBlue(\'world\') + \'!\');\n\n// nest styles of the same type even (color, underline, background)\nchalk.green(\n    \'I am a green line \' +\n    chalk.blue.underline.bold(\'with a blue substring\') +\n    \' that becomes green again!\'\n);\n</code></pre>\n<p>Easily define your own themes.</p>\n<pre><code class="language-js">var chalk = require(\'chalk\');\nvar error = chalk.bold.red;\nconsole.log(error(\'Error!\'));\n</code></pre>\n<p>Take advantage of console.log <a href="http://nodejs.org/docs/latest/api/console.html#console_console_log_data">string substitution</a>.</p>\n<pre><code class="language-js">var name = \'Sindre\';\nconsole.log(chalk.green(\'Hello %s\'), name);\n//=> Hello Sindre\n</code></pre>\n<h2>API</h2>\n<h3>chalk.<code>&#x3C;style>[.&#x3C;style>...](string, [string...])</code></h3>\n<p>Example: <code>chalk.red.bold.underline(\'Hello\', \'world\');</code></p>\n<p>Chain <a href="#styles">styles</a> and call the last one as a method with a string argument. Order doesn\'t matter, and later styles take precedent in case of a conflict. This simply means that <code>Chalk.red.yellow.green</code> is equivalent to <code>Chalk.green</code>.</p>\n<p>Multiple arguments will be separated by space.</p>\n<h3>chalk.enabled</h3>\n<p>Color support is automatically detected, but you can override it by setting the <code>enabled</code> property. You should however only do this in your own code as it applies globally to all chalk consumers.</p>\n<p>If you need to change this in a reusable module create a new instance:</p>\n<pre><code class="language-js">var ctx = new chalk.constructor({enabled: false});\n</code></pre>\n<h3>chalk.supportsColor</h3>\n<p>Detect whether the terminal <a href="https://github.com/chalk/supports-color">supports color</a>. Used internally and handled for you, but exposed for convenience.</p>\n<p>Can be overridden by the user with the flags <code>--color</code> and <code>--no-color</code>. For situations where using <code>--color</code> is not possible, add an environment variable <code>FORCE_COLOR</code> with any value to force color. Trumps <code>--no-color</code>.</p>\n<h3>chalk.styles</h3>\n<p>Exposes the styles as <a href="https://github.com/chalk/ansi-styles">ANSI escape codes</a>.</p>\n<p>Generally not useful, but you might need just the <code>.open</code> or <code>.close</code> escape code if you\'re mixing externally styled strings with your own.</p>\n<pre><code class="language-js">var chalk = require(\'chalk\');\n\nconsole.log(chalk.styles.red);\n//=> {open: \'\\u001b[31m\', close: \'\\u001b[39m\'}\n\nconsole.log(chalk.styles.red.open + \'Hello\' + chalk.styles.red.close);\n</code></pre>\n<h3>chalk.hasColor(string)</h3>\n<p>Check whether a string <a href="https://github.com/chalk/has-ansi">has color</a>.</p>\n<h3>chalk.stripColor(string)</h3>\n<p><a href="https://github.com/chalk/strip-ansi">Strip color</a> from a string.</p>\n<p>Can be useful in combination with <code>.supportsColor</code> to strip color on externally styled text when it\'s not supported.</p>\n<p>Example:</p>\n<pre><code class="language-js">var chalk = require(\'chalk\');\nvar styledString = getText();\n\nif (!chalk.supportsColor) {\n    styledString = chalk.stripColor(styledString);\n}\n</code></pre>\n<h2>Styles</h2>\n<h3>Modifiers</h3>\n<ul>\n<li><code>reset</code></li>\n<li><code>bold</code></li>\n<li><code>dim</code></li>\n<li><code>italic</code> <em>(not widely supported)</em></li>\n<li><code>underline</code></li>\n<li><code>inverse</code></li>\n<li><code>hidden</code></li>\n<li><code>strikethrough</code> <em>(not widely supported)</em></li>\n</ul>\n<h3>Colors</h3>\n<ul>\n<li><code>black</code></li>\n<li><code>red</code></li>\n<li><code>green</code></li>\n<li><code>yellow</code></li>\n<li><code>blue</code> <em>(on Windows the bright version is used as normal blue is illegible)</em></li>\n<li><code>magenta</code></li>\n<li><code>cyan</code></li>\n<li><code>white</code></li>\n<li><code>gray</code></li>\n</ul>\n<h3>Background colors</h3>\n<ul>\n<li><code>bgBlack</code></li>\n<li><code>bgRed</code></li>\n<li><code>bgGreen</code></li>\n<li><code>bgYellow</code></li>\n<li><code>bgBlue</code></li>\n<li><code>bgMagenta</code></li>\n<li><code>bgCyan</code></li>\n<li><code>bgWhite</code></li>\n</ul>\n<h2>256-colors</h2>\n<p>Chalk does not support anything other than the base eight colors, which guarantees it will work on all terminals and systems. Some terminals, specifically <code>xterm</code> compliant ones, will support the full range of 8-bit colors. For this the lower level <a href="https://github.com/jbnicolai/ansi-256-colors">ansi-256-colors</a> package can be used.</p>\n<h2>Windows</h2>\n<p>If you\'re on Windows, do yourself a favor and use <a href="http://bliker.github.io/cmder/"><code>cmder</code></a> instead of <code>cmd.exe</code>.</p>\n<h2>Related</h2>\n<ul>\n<li><a href="https://github.com/chalk/chalk-cli">chalk-cli</a> - CLI for this module</li>\n<li><a href="https://github.com/chalk/ansi-styles/">ansi-styles</a> - ANSI escape codes for styling strings in the terminal</li>\n<li><a href="https://github.com/chalk/supports-color/">supports-color</a> - Detect whether a terminal supports color</li>\n<li><a href="https://github.com/chalk/strip-ansi">strip-ansi</a> - Strip ANSI escape codes</li>\n<li><a href="https://github.com/chalk/has-ansi">has-ansi</a> - Check if a string has ANSI escape codes</li>\n<li><a href="https://github.com/chalk/ansi-regex">ansi-regex</a> - Regular expression for matching ANSI escape codes</li>\n<li><a href="https://github.com/chalk/wrap-ansi">wrap-ansi</a> - Wordwrap a string with ANSI escape codes</li>\n</ul>\n<h2>License</h2>\n<p>MIT Â© <a href="http://sindresorhus.com">Sindre Sorhus</a></p>',docPath:"argo-ci/node_modules/babel-code-frame/node_modules/chalk/readme",proj:"argo-ci"}}}});
//# sourceMappingURL=path---docs-argo-ci-node-modules-babel-code-frame-node-modules-chalk-47561a359709f3dbb09c.js.map