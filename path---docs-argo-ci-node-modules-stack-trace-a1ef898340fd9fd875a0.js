webpackJsonp([40741094936385],{3187:function(e,t){e.exports={pathContext:{docHtml:"<h1>stack-trace</h1>\n<p>Get v8 stack traces as an array of CallSite objects.</p>\n<h2>Install</h2>\n<pre><code class=\"language-bash\">npm install stack-trace\n</code></pre>\n<h2>Usage</h2>\n<p>The stack-trace module makes it easy for you to capture the current stack:</p>\n<pre><code class=\"language-javascript\">var stackTrace = require('stack-trace');\nvar trace = stackTrace.get();\n\nrequire('assert').strictEqual(trace[0].getFileName(), __filename);\n</code></pre>\n<p>However, sometimes you have already popped the stack you are interested in,\nand all you have left is an <code>Error</code> object. This module can help:</p>\n<pre><code class=\"language-javascript\">var stackTrace = require('stack-trace');\nvar err = new Error('something went wrong');\nvar trace = stackTrace.parse(err);\n\nrequire('assert').strictEqual(trace[0].getFileName(), __filename);\n</code></pre>\n<p>Please note that parsing the <code>Error#stack</code> property is not perfect, only\ncertain properties can be retrieved with it as noted in the API docs below.</p>\n<h2>Long stack traces</h2>\n<p>stack-trace works great with <a href=\"https://github.com/tlrobinson/long-stack-traces\">long-stack-traces</a>, when parsing an <code>err.stack</code>\nthat has crossed the event loop boundary, a <code>CallSite</code> object returning\n<code>'----------------------------------------'</code> for <code>getFileName()</code> is created.\nAll other methods of the event loop boundary call site return <code>null</code>.</p>\n<h2>API</h2>\n<h3>stackTrace.get([belowFn])</h3>\n<p>Returns an array of <code>CallSite</code> objects, where element <code>0</code> is the current call\nsite.</p>\n<p>When passing a function on the current stack as the <code>belowFn</code> parameter, the\nreturned array will only include <code>CallSite</code> objects below this function.</p>\n<h3>stackTrace.parse(err)</h3>\n<p>Parses the <code>err.stack</code> property of an <code>Error</code> object into an array compatible\nwith those returned by <code>stackTrace.get()</code>. However, only the following methods\nare implemented on the returned <code>CallSite</code> objects.</p>\n<ul>\n<li>getTypeName</li>\n<li>getFunctionName</li>\n<li>getMethodName</li>\n<li>getFileName</li>\n<li>getLineNumber</li>\n<li>getColumnNumber</li>\n<li>isNative</li>\n</ul>\n<p>Note: Except <code>getFunctionName()</code>, all of the above methods return exactly the\nsame values as you would get from <code>stackTrace.get()</code>. <code>getFunctionName()</code>\nis sometimes a little different, but still useful.</p>\n<h3>CallSite</h3>\n<p>The official v8 CallSite object API can be found <a href=\"http://code.google.com/p/v8/wiki/JavaScriptStackTraceApi\">here</a>. A quick\nexcerpt:</p>\n<blockquote>\n<p>A CallSite object defines the following methods:</p>\n<ul>\n<li><strong>getThis</strong>: returns the value of this</li>\n<li><strong>getTypeName</strong>: returns the type of this as a string. This is the name of the function stored in the constructor field of this, if available, otherwise the object's [[Class]] internal property.</li>\n<li><strong>getFunction</strong>: returns the current function</li>\n<li><strong>getFunctionName</strong>: returns the name of the current function, typically its name property. If a name property is not available an attempt will be made to try to infer a name from the function's context.</li>\n<li><strong>getMethodName</strong>: returns the name of the property of this or one of its prototypes that holds the current function</li>\n<li><strong>getFileName</strong>: if this function was defined in a script returns the name of the script</li>\n<li><strong>getLineNumber</strong>: if this function was defined in a script returns the current line number</li>\n<li><strong>getColumnNumber</strong>: if this function was defined in a script returns the current column number</li>\n<li><strong>getEvalOrigin</strong>: if this function was created using a call to eval returns a CallSite object representing the location where eval was called</li>\n<li><strong>isToplevel</strong>: is this a toplevel invocation, that is, is this the global object?</li>\n<li><strong>isEval</strong>: does this call take place in code defined by a call to eval?</li>\n<li><strong>isNative</strong>: is this call in native V8 code?</li>\n<li><strong>isConstructor</strong>: is this a constructor call?</li>\n</ul>\n</blockquote>\n<h2>License</h2>\n<p>stack-trace is licensed under the MIT license.</p>",docPath:"argo-ci/node_modules/stack-trace/readme",proj:"argo-ci"}}}});
//# sourceMappingURL=path---docs-argo-ci-node-modules-stack-trace-a1ef898340fd9fd875a0.js.map