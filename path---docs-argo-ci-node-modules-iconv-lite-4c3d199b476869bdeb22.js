webpackJsonp([0x99c8db7fa0c0],{2705:function(e,n){e.exports={pathContext:{docHtml:'<h2>Pure JS character encoding conversion <a href="https://travis-ci.org/ashtuchkin/iconv-lite"><img src="https://travis-ci.org/ashtuchkin/iconv-lite.svg?branch=master" alt="Build Status"></a></h2>\n<ul>\n<li>Doesn\'t need native code compilation. Works on Windows and in sandboxed environments like <a href="http://c9.io">Cloud9</a>.</li>\n<li>Used in popular projects like <a href="https://github.com/expressjs/body-parser">Express.js (body_parser)</a>,\n<a href="http://gruntjs.com/">Grunt</a>, <a href="http://www.nodemailer.com/">Nodemailer</a>, <a href="http://yeoman.io/">Yeoman</a> and others.</li>\n<li>Faster than <a href="https://github.com/bnoordhuis/node-iconv">node-iconv</a> (see below for performance comparison).</li>\n<li>Intuitive encode/decode API</li>\n<li>Streaming support for Node v0.10+</li>\n<li>[Deprecated] Can extend Node.js primitives (buffers, streams) to support all iconv-lite encodings.</li>\n<li>In-browser usage via <a href="https://github.com/substack/node-browserify">Browserify</a> (~180k gzip compressed with Buffer shim included).</li>\n<li>Typescript <a href="https://github.com/ashtuchkin/iconv-lite/blob/master/lib/index.d.ts">type definition file</a> included.</li>\n<li>React Native is supported (need to explicitly <code>npm install</code> two more modules: <code>buffer</code> and <code>stream</code>).</li>\n<li>License: MIT.</li>\n</ul>\n<p><a href="https://npmjs.org/packages/iconv-lite/"><img src="https://nodei.co/npm/iconv-lite.png?downloads=true&#x26;downloadRank=true" alt="NPM Stats"></a></p>\n<h2>Usage</h2>\n<h3>Basic API</h3>\n<pre><code class="language-javascript">var iconv = require(\'iconv-lite\');\n\n// Convert from an encoded buffer to js string.\nstr = iconv.decode(new Buffer([0x68, 0x65, 0x6c, 0x6c, 0x6f]), \'win1251\');\n\n// Convert from js string to an encoded buffer.\nbuf = iconv.encode("Sample input string", \'win1251\');\n\n// Check if encoding is supported\niconv.encodingExists("us-ascii")\n</code></pre>\n<h3>Streaming API (Node v0.10+)</h3>\n<pre><code class="language-javascript">// Decode stream (from binary stream to js strings)\nhttp.createServer(function(req, res) {\n    var converterStream = iconv.decodeStream(\'win1251\');\n    req.pipe(converterStream);\n\n    converterStream.on(\'data\', function(str) {\n        console.log(str); // Do something with decoded strings, chunk-by-chunk.\n    });\n});\n\n// Convert encoding streaming example\nfs.createReadStream(\'file-in-win1251.txt\')\n    .pipe(iconv.decodeStream(\'win1251\'))\n    .pipe(iconv.encodeStream(\'ucs2\'))\n    .pipe(fs.createWriteStream(\'file-in-ucs2.txt\'));\n\n// Sugar: all encode/decode streams have .collect(cb) method to accumulate data.\nhttp.createServer(function(req, res) {\n    req.pipe(iconv.decodeStream(\'win1251\')).collect(function(err, body) {\n        assert(typeof body == \'string\');\n        console.log(body); // full request body string\n    });\n});\n</code></pre>\n<h3>[Deprecated] Extend Node.js own encodings</h3>\n<blockquote>\n<p>NOTE: This doesn\'t work on latest Node versions. See <a href="https://github.com/ashtuchkin/iconv-lite/wiki/Node-v4-compatibility">details</a>.</p>\n</blockquote>\n<pre><code class="language-javascript">// After this call all Node basic primitives will understand iconv-lite encodings.\niconv.extendNodeEncodings();\n\n// Examples:\nbuf = new Buffer(str, \'win1251\');\nbuf.write(str, \'gbk\');\nstr = buf.toString(\'latin1\');\nassert(Buffer.isEncoding(\'iso-8859-15\'));\nBuffer.byteLength(str, \'us-ascii\');\n\nhttp.createServer(function(req, res) {\n    req.setEncoding(\'big5\');\n    req.collect(function(err, body) {\n        console.log(body);\n    });\n});\n\nfs.createReadStream("file.txt", "shift_jis");\n\n// External modules are also supported (if they use Node primitives, which they probably do).\nrequest = require(\'request\');\nrequest({\n    url: "http://github.com/", \n    encoding: "cp932"\n});\n\n// To remove extensions\niconv.undoExtendNodeEncodings();\n</code></pre>\n<h2>Supported encodings</h2>\n<ul>\n<li>All node.js native encodings: utf8, ucs2 / utf16-le, ascii, binary, base64, hex.</li>\n<li>Additional unicode encodings: utf16, utf16-be, utf-7, utf-7-imap.</li>\n<li>All widespread singlebyte encodings: Windows 125x family, ISO-8859 family,\nIBM/DOS codepages, Macintosh family, KOI8 family, all others supported by iconv library.\nAliases like \'latin1\', \'us-ascii\' also supported.</li>\n<li>All widespread multibyte encodings: CP932, CP936, CP949, CP950, GB2312, GBK, GB18030, Big5, Shift_JIS, EUC-JP.</li>\n</ul>\n<p>See <a href="https://github.com/ashtuchkin/iconv-lite/wiki/Supported-Encodings">all supported encodings on wiki</a>.</p>\n<p>Most singlebyte encodings are generated automatically from <a href="https://github.com/bnoordhuis/node-iconv">node-iconv</a>. Thank you Ben Noordhuis and libiconv authors!</p>\n<p>Multibyte encodings are generated from <a href="http://www.unicode.org/Public/MAPPINGS/">Unicode.org mappings</a> and <a href="http://encoding.spec.whatwg.org/">WHATWG Encoding Standard mappings</a>. Thank you, respective authors!</p>\n<h2>Encoding/decoding speed</h2>\n<p>Comparison with node-iconv module (1000x256kb, on MacBook Pro, Core i5/2.6 GHz, Node v0.12.0).\nNote: your results may vary, so please always check on your hardware.</p>\n<pre><code>operation             iconv@2.1.4   iconv-lite@0.4.7\n----------------------------------------------------------\nencode(\'win1251\')     ~96 Mb/s      ~320 Mb/s\ndecode(\'win1251\')     ~95 Mb/s      ~246 Mb/s\n</code></pre>\n<h2>BOM handling</h2>\n<ul>\n<li>Decoding: BOM is stripped by default, unless overridden by passing <code>stripBOM: false</code> in options\n(f.ex. <code>iconv.decode(buf, enc, {stripBOM: false})</code>).\nA callback might also be given as a <code>stripBOM</code> parameter - it\'ll be called if BOM character was actually found.</li>\n<li>If you want to detect UTF-8 BOM when decoding other encodings, use <a href="https://github.com/danielgindi/node-autodetect-decoder-stream">node-autodetect-decoder-stream</a> module.</li>\n<li>Encoding: No BOM added, unless overridden by <code>addBOM: true</code> option.</li>\n</ul>\n<h2>UTF-16 Encodings</h2>\n<p>This library supports UTF-16LE, UTF-16BE and UTF-16 encodings. First two are straightforward, but UTF-16 is trying to be\nsmart about endianness in the following ways:</p>\n<ul>\n<li>Decoding: uses BOM and \'spaces heuristic\' to determine input endianness. Default is UTF-16LE, but can be\noverridden with <code>defaultEncoding: \'utf-16be\'</code> option. Strips BOM unless <code>stripBOM: false</code>.</li>\n<li>Encoding: uses UTF-16LE and writes BOM by default. Use <code>addBOM: false</code> to override.</li>\n</ul>\n<h2>Other notes</h2>\n<p>When decoding, be sure to supply a Buffer to decode() method, otherwise <a href="https://github.com/ashtuchkin/iconv-lite/wiki/Use-Buffers-when-decoding">bad things usually happen</a>.<br>\nUntranslatable characters are set to ï¿½ or ?. No transliteration is currently supported.<br>\nNode versions 0.10.31 and 0.11.13 are buggy, don\'t use them (see #65, #77).  </p>\n<h2>Testing</h2>\n<pre><code class="language-bash">$ git clone git@github.com:ashtuchkin/iconv-lite.git\n$ cd iconv-lite\n$ npm install\n$ npm test\n    \n$ # To view performance:\n$ node test/performance.js\n\n$ # To view test coverage:\n$ npm run coverage\n$ open coverage/lcov-report/index.html\n</code></pre>\n<h2>Adoption</h2>\n<p><a href="https://nodei.co/npm/iconv-lite/"><img src="https://nodei.co/npm-dl/iconv-lite.png" alt="NPM"></a>\n<a href="https://www.codeship.com/projects/29053"><img src="https://www.codeship.com/projects/81670840-fa72-0131-4520-4a01a6c01acc/status" alt="Codeship Status for ashtuchkin/iconv-lite"></a></p>',docPath:"argo-ci/node_modules/iconv-lite/readme",proj:"argo-ci"}}}});
//# sourceMappingURL=path---docs-argo-ci-node-modules-iconv-lite-4c3d199b476869bdeb22.js.map