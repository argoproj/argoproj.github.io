{"version":3,"sources":["webpack:///path---docs-argo-ci-node-modules-extsprintf-1c22073bd59f6cd7d0d2.js","webpack:///./.cache/json/docs-argo-ci-node-modules-extsprintf.json"],"names":["webpackJsonp","2319","module","exports","pathContext","docHtml","docPath","proj"],"mappings":"AAAAA,cAAc,iBAERC,KACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,aAAeC,QAAA,gnDAAizCC,QAAA,yCAAAC,KAAA","file":"path---docs-argo-ci-node-modules-extsprintf-1c22073bd59f6cd7d0d2.js","sourcesContent":["webpackJsonp([53005632279572],{\n\n/***/ 2319:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"pathContext\":{\"docHtml\":\"<h1>extsprintf: extended POSIX-style sprintf</h1>\\n<p>Stripped down version of s[n]printf(3c).  We make a best effort to throw an\\nexception when given a format string we don't understand, rather than ignoring\\nit, so that we won't break existing programs if/when we go implement the rest\\nof this.</p>\\n<p>This implementation currently supports specifying</p>\\n<ul>\\n<li>field alignment ('-' flag),</li>\\n<li>zero-pad ('0' flag)</li>\\n<li>always show numeric sign ('+' flag),</li>\\n<li>field width</li>\\n<li>conversions for strings, decimal integers, and floats (numbers).</li>\\n<li>argument size specifiers.  These are all accepted but ignored, since\\nJavascript has no notion of the physical size of an argument.</li>\\n</ul>\\n<p>Everything else is currently unsupported, most notably: precision, unsigned\\nnumbers, non-decimal numbers, and characters.</p>\\n<p>Besides the usual POSIX conversions, this implementation supports:</p>\\n<ul>\\n<li><code>%j</code>: pretty-print a JSON object (using node's \\\"inspect\\\")</li>\\n<li><code>%r</code>: pretty-print an Error object</li>\\n</ul>\\n<h1>Example</h1>\\n<p>First, install it:</p>\\n<pre><code># npm install extsprintf\\n</code></pre>\\n<p>Now, use it:</p>\\n<pre><code>var mod_extsprintf = require('extsprintf');\\nconsole.log(mod_extsprintf.sprintf('hello %25s', 'world'));\\n</code></pre>\\n<p>outputs:</p>\\n<pre><code>hello                     world\\n</code></pre>\\n<h1>Also supported</h1>\\n<p><strong>printf</strong>: same args as sprintf, but prints the result to stdout</p>\\n<p><strong>fprintf</strong>: same args as sprintf, preceded by a Node stream.  Prints the result\\nto the given stream.</p>\",\"docPath\":\"argo-ci/node_modules/extsprintf/readme\",\"proj\":\"argo-ci\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---docs-argo-ci-node-modules-extsprintf-1c22073bd59f6cd7d0d2.js","module.exports = {\"pathContext\":{\"docHtml\":\"<h1>extsprintf: extended POSIX-style sprintf</h1>\\n<p>Stripped down version of s[n]printf(3c).  We make a best effort to throw an\\nexception when given a format string we don't understand, rather than ignoring\\nit, so that we won't break existing programs if/when we go implement the rest\\nof this.</p>\\n<p>This implementation currently supports specifying</p>\\n<ul>\\n<li>field alignment ('-' flag),</li>\\n<li>zero-pad ('0' flag)</li>\\n<li>always show numeric sign ('+' flag),</li>\\n<li>field width</li>\\n<li>conversions for strings, decimal integers, and floats (numbers).</li>\\n<li>argument size specifiers.  These are all accepted but ignored, since\\nJavascript has no notion of the physical size of an argument.</li>\\n</ul>\\n<p>Everything else is currently unsupported, most notably: precision, unsigned\\nnumbers, non-decimal numbers, and characters.</p>\\n<p>Besides the usual POSIX conversions, this implementation supports:</p>\\n<ul>\\n<li><code>%j</code>: pretty-print a JSON object (using node's \\\"inspect\\\")</li>\\n<li><code>%r</code>: pretty-print an Error object</li>\\n</ul>\\n<h1>Example</h1>\\n<p>First, install it:</p>\\n<pre><code># npm install extsprintf\\n</code></pre>\\n<p>Now, use it:</p>\\n<pre><code>var mod_extsprintf = require('extsprintf');\\nconsole.log(mod_extsprintf.sprintf('hello %25s', 'world'));\\n</code></pre>\\n<p>outputs:</p>\\n<pre><code>hello                     world\\n</code></pre>\\n<h1>Also supported</h1>\\n<p><strong>printf</strong>: same args as sprintf, but prints the result to stdout</p>\\n<p><strong>fprintf</strong>: same args as sprintf, preceded by a Node stream.  Prints the result\\nto the given stream.</p>\",\"docPath\":\"argo-ci/node_modules/extsprintf/readme\",\"proj\":\"argo-ci\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/docs-argo-ci-node-modules-extsprintf.json\n// module id = 2319\n// module chunks = 53005632279572"],"sourceRoot":""}