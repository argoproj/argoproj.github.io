{"version":3,"sources":["webpack:///path---docs-argo-ci-node-modules-js-yaml-99157090dba77bc951f9.js","webpack:///./.cache/json/docs-argo-ci-node-modules-js-yaml.json"],"names":["webpackJsonp","2795","module","exports","pathContext","docHtml","docPath","proj"],"mappings":"AAAAA,cAAc,iBAERC,KACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,aAAeC,QAAA,slYAA20WC,QAAA,sCAAAC,KAAA","file":"path---docs-argo-ci-node-modules-js-yaml-99157090dba77bc951f9.js","sourcesContent":["webpackJsonp([180817404576779],{\n\n/***/ 2795:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"pathContext\":{\"docHtml\":\"<h1>JS-YAML - YAML 1.2 parser / writer for JavaScript</h1>\\n<p><a href=\\\"https://travis-ci.org/nodeca/js-yaml\\\"><img src=\\\"https://travis-ci.org/nodeca/js-yaml.svg?branch=master\\\" alt=\\\"Build Status\\\"></a>\\n<a href=\\\"https://www.npmjs.org/package/js-yaml\\\"><img src=\\\"https://img.shields.io/npm/v/js-yaml.svg\\\" alt=\\\"NPM version\\\"></a></p>\\n<p><strong><a href=\\\"http://nodeca.github.com/js-yaml/\\\">Online Demo</a></strong></p>\\n<p>This is an implementation of <a href=\\\"http://yaml.org/\\\">YAML</a>, a human-friendly data\\nserialization language. Started as <a href=\\\"http://pyyaml.org/\\\">PyYAML</a> port, it was\\ncompletely rewritten from scratch. Now it's very fast, and supports 1.2 spec.</p>\\n<h2>Installation</h2>\\n<h3>YAML module for node.js</h3>\\n<pre><code>npm install js-yaml\\n</code></pre>\\n<h3>CLI executable</h3>\\n<p>If you want to inspect your YAML files from CLI, install js-yaml globally:</p>\\n<pre><code>npm install -g js-yaml\\n</code></pre>\\n<h4>Usage</h4>\\n<pre><code>usage: js-yaml [-h] [-v] [-c] [-t] file\\n\\nPositional arguments:\\n  file           File with YAML document(s)\\n\\nOptional arguments:\\n  -h, --help     Show this help message and exit.\\n  -v, --version  Show program's version number and exit.\\n  -c, --compact  Display errors in compact mode\\n  -t, --trace    Show stack trace on error\\n</code></pre>\\n<h3>Bundled YAML library for browsers</h3>\\n<pre><code class=\\\"language-html\\\">&#x3C;!-- esprima required only for !!js/function -->\\n&#x3C;script src=\\\"esprima.js\\\">&#x3C;/script>\\n&#x3C;script src=\\\"js-yaml.min.js\\\">&#x3C;/script>\\n&#x3C;script type=\\\"text/javascript\\\">\\nvar doc = jsyaml.load('greeting: hello\\\\nname: world');\\n&#x3C;/script>\\n</code></pre>\\n<p>Browser support was done mostly for the online demo. If you find any errors - feel\\nfree to send pull requests with fixes. Also note, that IE and other old browsers\\nneeds <a href=\\\"https://github.com/kriskowal/es5-shim\\\">es5-shims</a> to operate.</p>\\n<p>Notes:</p>\\n<ol>\\n<li>We have no resources to support browserified version. Don't expect it to be\\nwell tested. Don't expect fast fixes if something goes wrong there.</li>\\n<li><code>!!js/function</code> in browser bundle will not work by default. If you really need\\nit - load <code>esprima</code> parser first (via amd or directly).</li>\\n<li><code>!!bin</code> in browser will return <code>Array</code>, because browsers do not support\\nnode.js <code>Buffer</code> and adding Buffer shims is completely useless on practice.</li>\\n</ol>\\n<h2>API</h2>\\n<p>Here we cover the most 'useful' methods. If you need advanced details (creating\\nyour own tags), see <a href=\\\"https://github.com/nodeca/js-yaml/wiki\\\">wiki</a> and\\n<a href=\\\"https://github.com/nodeca/js-yaml/tree/master/examples\\\">examples</a> for more\\ninfo.</p>\\n<pre><code class=\\\"language-javascript\\\">yaml = require('js-yaml');\\nfs   = require('fs');\\n\\n// Get document, or throw exception on error\\ntry {\\n  var doc = yaml.safeLoad(fs.readFileSync('/home/ixti/example.yml', 'utf8'));\\n  console.log(doc);\\n} catch (e) {\\n  console.log(e);\\n}\\n</code></pre>\\n<h3>safeLoad (string [ , options ])</h3>\\n<p><strong>Recommended loading way.</strong> Parses <code>string</code> as single YAML document. Returns a JavaScript\\nobject or throws <code>YAMLException</code> on error. By default, does not support regexps,\\nfunctions and undefined. This method is safe for untrusted data.</p>\\n<p>options:</p>\\n<ul>\\n<li><code>filename</code> <em>(default: null)</em> - string to be used as a file path in\\nerror/warning messages.</li>\\n<li><code>onWarning</code> <em>(default: null)</em> - function to call on warning messages.\\nLoader will throw on warnings if this function is not provided.</li>\\n<li>\\n<p><code>schema</code> <em>(default: `DEFAULT</em>SAFE<em>SCHEMA`)</em> - specifies a schema to use.</p>\\n<ul>\\n<li><code>FAILSAFE_SCHEMA</code> - only strings, arrays and plain objects:\\n<a href=\\\"http://www.yaml.org/spec/1.2/spec.html#id2802346\\\">http://www.yaml.org/spec/1.2/spec.html#id2802346</a></li>\\n<li><code>JSON_SCHEMA</code> - all JSON-supported types:\\n<a href=\\\"http://www.yaml.org/spec/1.2/spec.html#id2803231\\\">http://www.yaml.org/spec/1.2/spec.html#id2803231</a></li>\\n<li><code>CORE_SCHEMA</code> - same as <code>JSON_SCHEMA</code>:\\n<a href=\\\"http://www.yaml.org/spec/1.2/spec.html#id2804923\\\">http://www.yaml.org/spec/1.2/spec.html#id2804923</a></li>\\n<li><code>DEFAULT_SAFE_SCHEMA</code> - all supported YAML types, without unsafe ones\\n(<code>!!js/undefined</code>, <code>!!js/regexp</code> and <code>!!js/function</code>):\\n<a href=\\\"http://yaml.org/type/\\\">http://yaml.org/type/</a></li>\\n<li><code>DEFAULT_FULL_SCHEMA</code> - all supported YAML types.</li>\\n</ul>\\n</li>\\n<li><code>json</code> <em>(default: false)</em> - compatibility with JSON.parse behaviour. If true, then duplicate keys in a mapping will override values rather than throwing an error.</li>\\n</ul>\\n<p>NOTE: This function <strong>does not</strong> understand multi-document sources, it throws\\nexception on those.</p>\\n<p>NOTE: JS-YAML <strong>does not</strong> support schema-specific tag resolution restrictions.\\nSo, the JSON schema is not as strictly defined in the YAML specification.\\nIt allows numbers in any notation, use <code>Null</code> and <code>NULL</code> as <code>null</code>, etc.\\nThe core schema also has no such restrictions. It allows binary notation for integers.</p>\\n<h3>load (string [ , options ])</h3>\\n<p><strong>Use with care with untrusted sources</strong>. The same as <code>safeLoad()</code> but uses\\n<code>DEFAULT_FULL_SCHEMA</code> by default - adds some JavaScript-specific types:\\n<code>!!js/function</code>, <code>!!js/regexp</code> and <code>!!js/undefined</code>. For untrusted sources, you\\nmust additionally validate object structure to avoid injections:</p>\\n<pre><code class=\\\"language-javascript\\\">var untrusted_code = '\\\"toString\\\": !&#x3C;tag:yaml.org,2002:js/function> \\\"function (){very_evil_thing();}\\\"';\\n\\n// I'm just converting that string, what could possibly go wrong?\\nrequire('js-yaml').load(untrusted_code) + ''\\n</code></pre>\\n<h3>safeLoadAll (string <a href=\\\"\\\">, iterator</a>)</h3>\\n<p>Same as <code>safeLoad()</code>, but understands multi-document sources. Applies\\n<code>iterator</code> to each document if specified, or returns array of documents.</p>\\n<pre><code class=\\\"language-javascript\\\">var yaml = require('js-yaml');\\n\\nyaml.safeLoadAll(data, function (doc) {\\n  console.log(doc);\\n});\\n</code></pre>\\n<h3>loadAll (string <a href=\\\"\\\">, iterator</a>)</h3>\\n<p>Same as <code>safeLoadAll()</code> but uses <code>DEFAULT_FULL_SCHEMA</code> by default.</p>\\n<h3>safeDump (object [ , options ])</h3>\\n<p>Serializes <code>object</code> as a YAML document. Uses <code>DEFAULT_SAFE_SCHEMA</code>, so it will\\nthrow an exception if you try to dump regexps or functions. However, you can\\ndisable exceptions by setting the <code>skipInvalid</code> option to <code>true</code>.</p>\\n<p>options:</p>\\n<ul>\\n<li><code>indent</code> <em>(default: 2)</em> - indentation width to use (in spaces).</li>\\n<li><code>skipInvalid</code> <em>(default: false)</em> - do not throw on invalid types (like function\\nin the safe schema) and skip pairs and single values with such types.</li>\\n<li><code>flowLevel</code> (default: -1) - specifies level of nesting, when to switch from\\nblock to flow style for collections. -1 means block style everwhere</li>\\n<li><code>styles</code> - \\\"tag\\\" => \\\"style\\\" map. Each tag may have own set of styles.</li>\\n<li><code>schema</code> <em>(default: `DEFAULT</em>SAFE<em>SCHEMA`)</em> specifies a schema to use.</li>\\n<li><code>sortKeys</code> <em>(default: <code>false</code>)</em> - if <code>true</code>, sort keys when dumping YAML. If a\\nfunction, use the function to sort the keys.</li>\\n<li><code>lineWidth</code> <em>(default: <code>80</code>)</em> - set max line width.</li>\\n<li><code>noRefs</code> <em>(default: <code>false</code>)</em> - if <code>true</code>, don't convert duplicate objects into references</li>\\n<li><code>noCompatMode</code> <em>(default: <code>false</code>)</em> - if <code>true</code> don't try to be compatible with older\\nyaml versions. Currently: don't quote \\\"yes\\\", \\\"no\\\" and so on, as required for YAML 1.1</li>\\n<li><code>condenseFlow</code> <em>(default: <code>false</code>)</em> - if <code>true</code> flow sequences will be condensed, omitting the space between <code>a, b</code>. Eg. <code>'[a,b]'</code>, and omitting the space between <code>key: value</code> and quoting the key. Eg. <code>'{\\\"a\\\":b}'</code> Can be useful when using yaml for pretty URL query params as spaces are %-encoded.</li>\\n</ul>\\n<p>The following table show availlable styles (e.g. \\\"canonical\\\",\\n\\\"binary\\\"...) available for each tag (.e.g. !!null, !!int ...). Yaml\\nouput is shown on the right side after <code>=></code> (default setting) or <code>-></code>:</p>\\n<pre><code class=\\\"language-none\\\">!!null\\n  \\\"canonical\\\"   -> \\\"~\\\"\\n  \\\"lowercase\\\"   => \\\"null\\\"\\n  \\\"uppercase\\\"   -> \\\"NULL\\\"\\n  \\\"camelcase\\\"   -> \\\"Null\\\"\\n\\n!!int\\n  \\\"binary\\\"      -> \\\"0b1\\\", \\\"0b101010\\\", \\\"0b1110001111010\\\"\\n  \\\"octal\\\"       -> \\\"01\\\", \\\"052\\\", \\\"016172\\\"\\n  \\\"decimal\\\"     => \\\"1\\\", \\\"42\\\", \\\"7290\\\"\\n  \\\"hexadecimal\\\" -> \\\"0x1\\\", \\\"0x2A\\\", \\\"0x1C7A\\\"\\n\\n!!bool\\n  \\\"lowercase\\\"   => \\\"true\\\", \\\"false\\\"\\n  \\\"uppercase\\\"   -> \\\"TRUE\\\", \\\"FALSE\\\"\\n  \\\"camelcase\\\"   -> \\\"True\\\", \\\"False\\\"\\n\\n!!float\\n  \\\"lowercase\\\"   => \\\".nan\\\", '.inf'\\n  \\\"uppercase\\\"   -> \\\".NAN\\\", '.INF'\\n  \\\"camelcase\\\"   -> \\\".NaN\\\", '.Inf'\\n</code></pre>\\n<p>Example:</p>\\n<pre><code class=\\\"language-javascript\\\">safeDump (object, {\\n  'styles': {\\n    '!!null': 'canonical' // dump null as ~\\n  },\\n  'sortKeys': true        // sort object keys\\n});\\n</code></pre>\\n<h3>dump (object [ , options ])</h3>\\n<p>Same as <code>safeDump()</code> but without limits (uses <code>DEFAULT_FULL_SCHEMA</code> by default).</p>\\n<h2>Supported YAML types</h2>\\n<p>The list of standard YAML tags and corresponding JavaScipt types. See also\\n<a href=\\\"http://pyyaml.org/wiki/YAMLTagDiscussion\\\">YAML tag discussion</a> and\\n<a href=\\\"http://yaml.org/type/\\\">YAML types repository</a>.</p>\\n<pre><code>!!null ''                   # null\\n!!bool 'yes'                # bool\\n!!int '3...'                # number\\n!!float '3.14...'           # number\\n!!binary '...base64...'     # buffer\\n!!timestamp 'YYYY-...'      # date\\n!!omap [ ... ]              # array of key-value pairs\\n!!pairs [ ... ]             # array or array pairs\\n!!set { ... }               # array of objects with given keys and null values\\n!!str '...'                 # string\\n!!seq [ ... ]               # array\\n!!map { ... }               # object\\n</code></pre>\\n<p><strong>JavaScript-specific tags</strong></p>\\n<pre><code>!!js/regexp /pattern/gim            # RegExp\\n!!js/undefined ''                   # Undefined\\n!!js/function 'function () {...}'   # Function\\n</code></pre>\\n<h2>Caveats</h2>\\n<p>Note, that you use arrays or objects as key in JS-YAML. JS does not allow objects\\nor arrays as keys, and stringifies (by calling <code>toString()</code> method) them at the\\nmoment of adding them.</p>\\n<pre><code class=\\\"language-yaml\\\">---\\n? [ foo, bar ]\\n: - baz\\n? { foo: bar }\\n: - baz\\n  - baz\\n</code></pre>\\n<pre><code class=\\\"language-javascript\\\">{ \\\"foo,bar\\\": [\\\"baz\\\"], \\\"[object Object]\\\": [\\\"baz\\\", \\\"baz\\\"] }\\n</code></pre>\\n<p>Also, reading of properties on implicit block mapping keys is not supported yet.\\nSo, the following YAML document cannot be loaded.</p>\\n<pre><code class=\\\"language-yaml\\\">&#x26;anchor foo:\\n  foo: bar\\n  *anchor: duplicate key\\n  baz: bat\\n  *anchor: duplicate key\\n</code></pre>\\n<h2>Breaking changes in 2.x.x -> 3.x.x</h2>\\n<p>If you have not used <strong>custom</strong> tags or loader classes and not loaded yaml\\nfiles via <code>require()</code>, no changes are needed. Just upgrade the library.</p>\\n<p>Otherwise, you should:</p>\\n<ol>\\n<li>Replace all occurrences of <code>require('xxxx.yml')</code> by <code>fs.readFileSync()</code> +\\n<code>yaml.safeLoad()</code>.</li>\\n<li>rewrite your custom tags constructors and custom loader\\nclasses, to conform the new API. See\\n<a href=\\\"https://github.com/nodeca/js-yaml/tree/master/examples\\\">examples</a> and\\n<a href=\\\"https://github.com/nodeca/js-yaml/wiki\\\">wiki</a> for details.</li>\\n</ol>\\n<h2>License</h2>\\n<p>View the <a href=\\\"https://github.com/nodeca/js-yaml/blob/master/LICENSE\\\">LICENSE</a> file\\n(MIT).</p>\",\"docPath\":\"argo-ci/node_modules/js-yaml/readme\",\"proj\":\"argo-ci\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---docs-argo-ci-node-modules-js-yaml-99157090dba77bc951f9.js","module.exports = {\"pathContext\":{\"docHtml\":\"<h1>JS-YAML - YAML 1.2 parser / writer for JavaScript</h1>\\n<p><a href=\\\"https://travis-ci.org/nodeca/js-yaml\\\"><img src=\\\"https://travis-ci.org/nodeca/js-yaml.svg?branch=master\\\" alt=\\\"Build Status\\\"></a>\\n<a href=\\\"https://www.npmjs.org/package/js-yaml\\\"><img src=\\\"https://img.shields.io/npm/v/js-yaml.svg\\\" alt=\\\"NPM version\\\"></a></p>\\n<p><strong><a href=\\\"http://nodeca.github.com/js-yaml/\\\">Online Demo</a></strong></p>\\n<p>This is an implementation of <a href=\\\"http://yaml.org/\\\">YAML</a>, a human-friendly data\\nserialization language. Started as <a href=\\\"http://pyyaml.org/\\\">PyYAML</a> port, it was\\ncompletely rewritten from scratch. Now it's very fast, and supports 1.2 spec.</p>\\n<h2>Installation</h2>\\n<h3>YAML module for node.js</h3>\\n<pre><code>npm install js-yaml\\n</code></pre>\\n<h3>CLI executable</h3>\\n<p>If you want to inspect your YAML files from CLI, install js-yaml globally:</p>\\n<pre><code>npm install -g js-yaml\\n</code></pre>\\n<h4>Usage</h4>\\n<pre><code>usage: js-yaml [-h] [-v] [-c] [-t] file\\n\\nPositional arguments:\\n  file           File with YAML document(s)\\n\\nOptional arguments:\\n  -h, --help     Show this help message and exit.\\n  -v, --version  Show program's version number and exit.\\n  -c, --compact  Display errors in compact mode\\n  -t, --trace    Show stack trace on error\\n</code></pre>\\n<h3>Bundled YAML library for browsers</h3>\\n<pre><code class=\\\"language-html\\\">&#x3C;!-- esprima required only for !!js/function -->\\n&#x3C;script src=\\\"esprima.js\\\">&#x3C;/script>\\n&#x3C;script src=\\\"js-yaml.min.js\\\">&#x3C;/script>\\n&#x3C;script type=\\\"text/javascript\\\">\\nvar doc = jsyaml.load('greeting: hello\\\\nname: world');\\n&#x3C;/script>\\n</code></pre>\\n<p>Browser support was done mostly for the online demo. If you find any errors - feel\\nfree to send pull requests with fixes. Also note, that IE and other old browsers\\nneeds <a href=\\\"https://github.com/kriskowal/es5-shim\\\">es5-shims</a> to operate.</p>\\n<p>Notes:</p>\\n<ol>\\n<li>We have no resources to support browserified version. Don't expect it to be\\nwell tested. Don't expect fast fixes if something goes wrong there.</li>\\n<li><code>!!js/function</code> in browser bundle will not work by default. If you really need\\nit - load <code>esprima</code> parser first (via amd or directly).</li>\\n<li><code>!!bin</code> in browser will return <code>Array</code>, because browsers do not support\\nnode.js <code>Buffer</code> and adding Buffer shims is completely useless on practice.</li>\\n</ol>\\n<h2>API</h2>\\n<p>Here we cover the most 'useful' methods. If you need advanced details (creating\\nyour own tags), see <a href=\\\"https://github.com/nodeca/js-yaml/wiki\\\">wiki</a> and\\n<a href=\\\"https://github.com/nodeca/js-yaml/tree/master/examples\\\">examples</a> for more\\ninfo.</p>\\n<pre><code class=\\\"language-javascript\\\">yaml = require('js-yaml');\\nfs   = require('fs');\\n\\n// Get document, or throw exception on error\\ntry {\\n  var doc = yaml.safeLoad(fs.readFileSync('/home/ixti/example.yml', 'utf8'));\\n  console.log(doc);\\n} catch (e) {\\n  console.log(e);\\n}\\n</code></pre>\\n<h3>safeLoad (string [ , options ])</h3>\\n<p><strong>Recommended loading way.</strong> Parses <code>string</code> as single YAML document. Returns a JavaScript\\nobject or throws <code>YAMLException</code> on error. By default, does not support regexps,\\nfunctions and undefined. This method is safe for untrusted data.</p>\\n<p>options:</p>\\n<ul>\\n<li><code>filename</code> <em>(default: null)</em> - string to be used as a file path in\\nerror/warning messages.</li>\\n<li><code>onWarning</code> <em>(default: null)</em> - function to call on warning messages.\\nLoader will throw on warnings if this function is not provided.</li>\\n<li>\\n<p><code>schema</code> <em>(default: `DEFAULT</em>SAFE<em>SCHEMA`)</em> - specifies a schema to use.</p>\\n<ul>\\n<li><code>FAILSAFE_SCHEMA</code> - only strings, arrays and plain objects:\\n<a href=\\\"http://www.yaml.org/spec/1.2/spec.html#id2802346\\\">http://www.yaml.org/spec/1.2/spec.html#id2802346</a></li>\\n<li><code>JSON_SCHEMA</code> - all JSON-supported types:\\n<a href=\\\"http://www.yaml.org/spec/1.2/spec.html#id2803231\\\">http://www.yaml.org/spec/1.2/spec.html#id2803231</a></li>\\n<li><code>CORE_SCHEMA</code> - same as <code>JSON_SCHEMA</code>:\\n<a href=\\\"http://www.yaml.org/spec/1.2/spec.html#id2804923\\\">http://www.yaml.org/spec/1.2/spec.html#id2804923</a></li>\\n<li><code>DEFAULT_SAFE_SCHEMA</code> - all supported YAML types, without unsafe ones\\n(<code>!!js/undefined</code>, <code>!!js/regexp</code> and <code>!!js/function</code>):\\n<a href=\\\"http://yaml.org/type/\\\">http://yaml.org/type/</a></li>\\n<li><code>DEFAULT_FULL_SCHEMA</code> - all supported YAML types.</li>\\n</ul>\\n</li>\\n<li><code>json</code> <em>(default: false)</em> - compatibility with JSON.parse behaviour. If true, then duplicate keys in a mapping will override values rather than throwing an error.</li>\\n</ul>\\n<p>NOTE: This function <strong>does not</strong> understand multi-document sources, it throws\\nexception on those.</p>\\n<p>NOTE: JS-YAML <strong>does not</strong> support schema-specific tag resolution restrictions.\\nSo, the JSON schema is not as strictly defined in the YAML specification.\\nIt allows numbers in any notation, use <code>Null</code> and <code>NULL</code> as <code>null</code>, etc.\\nThe core schema also has no such restrictions. It allows binary notation for integers.</p>\\n<h3>load (string [ , options ])</h3>\\n<p><strong>Use with care with untrusted sources</strong>. The same as <code>safeLoad()</code> but uses\\n<code>DEFAULT_FULL_SCHEMA</code> by default - adds some JavaScript-specific types:\\n<code>!!js/function</code>, <code>!!js/regexp</code> and <code>!!js/undefined</code>. For untrusted sources, you\\nmust additionally validate object structure to avoid injections:</p>\\n<pre><code class=\\\"language-javascript\\\">var untrusted_code = '\\\"toString\\\": !&#x3C;tag:yaml.org,2002:js/function> \\\"function (){very_evil_thing();}\\\"';\\n\\n// I'm just converting that string, what could possibly go wrong?\\nrequire('js-yaml').load(untrusted_code) + ''\\n</code></pre>\\n<h3>safeLoadAll (string <a href=\\\"\\\">, iterator</a>)</h3>\\n<p>Same as <code>safeLoad()</code>, but understands multi-document sources. Applies\\n<code>iterator</code> to each document if specified, or returns array of documents.</p>\\n<pre><code class=\\\"language-javascript\\\">var yaml = require('js-yaml');\\n\\nyaml.safeLoadAll(data, function (doc) {\\n  console.log(doc);\\n});\\n</code></pre>\\n<h3>loadAll (string <a href=\\\"\\\">, iterator</a>)</h3>\\n<p>Same as <code>safeLoadAll()</code> but uses <code>DEFAULT_FULL_SCHEMA</code> by default.</p>\\n<h3>safeDump (object [ , options ])</h3>\\n<p>Serializes <code>object</code> as a YAML document. Uses <code>DEFAULT_SAFE_SCHEMA</code>, so it will\\nthrow an exception if you try to dump regexps or functions. However, you can\\ndisable exceptions by setting the <code>skipInvalid</code> option to <code>true</code>.</p>\\n<p>options:</p>\\n<ul>\\n<li><code>indent</code> <em>(default: 2)</em> - indentation width to use (in spaces).</li>\\n<li><code>skipInvalid</code> <em>(default: false)</em> - do not throw on invalid types (like function\\nin the safe schema) and skip pairs and single values with such types.</li>\\n<li><code>flowLevel</code> (default: -1) - specifies level of nesting, when to switch from\\nblock to flow style for collections. -1 means block style everwhere</li>\\n<li><code>styles</code> - \\\"tag\\\" => \\\"style\\\" map. Each tag may have own set of styles.</li>\\n<li><code>schema</code> <em>(default: `DEFAULT</em>SAFE<em>SCHEMA`)</em> specifies a schema to use.</li>\\n<li><code>sortKeys</code> <em>(default: <code>false</code>)</em> - if <code>true</code>, sort keys when dumping YAML. If a\\nfunction, use the function to sort the keys.</li>\\n<li><code>lineWidth</code> <em>(default: <code>80</code>)</em> - set max line width.</li>\\n<li><code>noRefs</code> <em>(default: <code>false</code>)</em> - if <code>true</code>, don't convert duplicate objects into references</li>\\n<li><code>noCompatMode</code> <em>(default: <code>false</code>)</em> - if <code>true</code> don't try to be compatible with older\\nyaml versions. Currently: don't quote \\\"yes\\\", \\\"no\\\" and so on, as required for YAML 1.1</li>\\n<li><code>condenseFlow</code> <em>(default: <code>false</code>)</em> - if <code>true</code> flow sequences will be condensed, omitting the space between <code>a, b</code>. Eg. <code>'[a,b]'</code>, and omitting the space between <code>key: value</code> and quoting the key. Eg. <code>'{\\\"a\\\":b}'</code> Can be useful when using yaml for pretty URL query params as spaces are %-encoded.</li>\\n</ul>\\n<p>The following table show availlable styles (e.g. \\\"canonical\\\",\\n\\\"binary\\\"...) available for each tag (.e.g. !!null, !!int ...). Yaml\\nouput is shown on the right side after <code>=></code> (default setting) or <code>-></code>:</p>\\n<pre><code class=\\\"language-none\\\">!!null\\n  \\\"canonical\\\"   -> \\\"~\\\"\\n  \\\"lowercase\\\"   => \\\"null\\\"\\n  \\\"uppercase\\\"   -> \\\"NULL\\\"\\n  \\\"camelcase\\\"   -> \\\"Null\\\"\\n\\n!!int\\n  \\\"binary\\\"      -> \\\"0b1\\\", \\\"0b101010\\\", \\\"0b1110001111010\\\"\\n  \\\"octal\\\"       -> \\\"01\\\", \\\"052\\\", \\\"016172\\\"\\n  \\\"decimal\\\"     => \\\"1\\\", \\\"42\\\", \\\"7290\\\"\\n  \\\"hexadecimal\\\" -> \\\"0x1\\\", \\\"0x2A\\\", \\\"0x1C7A\\\"\\n\\n!!bool\\n  \\\"lowercase\\\"   => \\\"true\\\", \\\"false\\\"\\n  \\\"uppercase\\\"   -> \\\"TRUE\\\", \\\"FALSE\\\"\\n  \\\"camelcase\\\"   -> \\\"True\\\", \\\"False\\\"\\n\\n!!float\\n  \\\"lowercase\\\"   => \\\".nan\\\", '.inf'\\n  \\\"uppercase\\\"   -> \\\".NAN\\\", '.INF'\\n  \\\"camelcase\\\"   -> \\\".NaN\\\", '.Inf'\\n</code></pre>\\n<p>Example:</p>\\n<pre><code class=\\\"language-javascript\\\">safeDump (object, {\\n  'styles': {\\n    '!!null': 'canonical' // dump null as ~\\n  },\\n  'sortKeys': true        // sort object keys\\n});\\n</code></pre>\\n<h3>dump (object [ , options ])</h3>\\n<p>Same as <code>safeDump()</code> but without limits (uses <code>DEFAULT_FULL_SCHEMA</code> by default).</p>\\n<h2>Supported YAML types</h2>\\n<p>The list of standard YAML tags and corresponding JavaScipt types. See also\\n<a href=\\\"http://pyyaml.org/wiki/YAMLTagDiscussion\\\">YAML tag discussion</a> and\\n<a href=\\\"http://yaml.org/type/\\\">YAML types repository</a>.</p>\\n<pre><code>!!null ''                   # null\\n!!bool 'yes'                # bool\\n!!int '3...'                # number\\n!!float '3.14...'           # number\\n!!binary '...base64...'     # buffer\\n!!timestamp 'YYYY-...'      # date\\n!!omap [ ... ]              # array of key-value pairs\\n!!pairs [ ... ]             # array or array pairs\\n!!set { ... }               # array of objects with given keys and null values\\n!!str '...'                 # string\\n!!seq [ ... ]               # array\\n!!map { ... }               # object\\n</code></pre>\\n<p><strong>JavaScript-specific tags</strong></p>\\n<pre><code>!!js/regexp /pattern/gim            # RegExp\\n!!js/undefined ''                   # Undefined\\n!!js/function 'function () {...}'   # Function\\n</code></pre>\\n<h2>Caveats</h2>\\n<p>Note, that you use arrays or objects as key in JS-YAML. JS does not allow objects\\nor arrays as keys, and stringifies (by calling <code>toString()</code> method) them at the\\nmoment of adding them.</p>\\n<pre><code class=\\\"language-yaml\\\">---\\n? [ foo, bar ]\\n: - baz\\n? { foo: bar }\\n: - baz\\n  - baz\\n</code></pre>\\n<pre><code class=\\\"language-javascript\\\">{ \\\"foo,bar\\\": [\\\"baz\\\"], \\\"[object Object]\\\": [\\\"baz\\\", \\\"baz\\\"] }\\n</code></pre>\\n<p>Also, reading of properties on implicit block mapping keys is not supported yet.\\nSo, the following YAML document cannot be loaded.</p>\\n<pre><code class=\\\"language-yaml\\\">&#x26;anchor foo:\\n  foo: bar\\n  *anchor: duplicate key\\n  baz: bat\\n  *anchor: duplicate key\\n</code></pre>\\n<h2>Breaking changes in 2.x.x -> 3.x.x</h2>\\n<p>If you have not used <strong>custom</strong> tags or loader classes and not loaded yaml\\nfiles via <code>require()</code>, no changes are needed. Just upgrade the library.</p>\\n<p>Otherwise, you should:</p>\\n<ol>\\n<li>Replace all occurrences of <code>require('xxxx.yml')</code> by <code>fs.readFileSync()</code> +\\n<code>yaml.safeLoad()</code>.</li>\\n<li>rewrite your custom tags constructors and custom loader\\nclasses, to conform the new API. See\\n<a href=\\\"https://github.com/nodeca/js-yaml/tree/master/examples\\\">examples</a> and\\n<a href=\\\"https://github.com/nodeca/js-yaml/wiki\\\">wiki</a> for details.</li>\\n</ol>\\n<h2>License</h2>\\n<p>View the <a href=\\\"https://github.com/nodeca/js-yaml/blob/master/LICENSE\\\">LICENSE</a> file\\n(MIT).</p>\",\"docPath\":\"argo-ci/node_modules/js-yaml/readme\",\"proj\":\"argo-ci\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/docs-argo-ci-node-modules-js-yaml.json\n// module id = 2795\n// module chunks = 180817404576779"],"sourceRoot":""}