webpackJsonp([0x770bc61daf7b],{2628:function(e,t){e.exports={pathContext:{docHtml:'<p>Like FS streams, but with stat on them, and supporting directories and\nsymbolic links, as well as normal files.  Also, you can use this to set\nthe stats on a file, even if you don\'t change its contents, or to create\na symlink, etc.</p>\n<p>So, for example, you can "write" a directory, and it\'ll call <code>mkdir</code>.  You\ncan specify a uid and gid, and it\'ll call <code>chown</code>.  You can specify a\n<code>mtime</code> and <code>atime</code>, and it\'ll call <code>utimes</code>.  You can call it a symlink\nand provide a <code>linkpath</code> and it\'ll call <code>symlink</code>.</p>\n<p>Note that it won\'t automatically resolve symbolic links.  So, if you\ncall <code>fstream.Reader(\'/some/symlink\')</code> then you\'ll get an object\nthat stats and then ends immediately (since it has no data).  To follow\nsymbolic links, do this: <code>fstream.Reader({path:\'/some/symlink\', follow: true })</code>.</p>\n<p>There are various checks to make sure that the bytes emitted are the\nsame as the intended size, if the size is set.</p>\n<h2>Examples</h2>\n<pre><code class="language-javascript">fstream\n  .Writer({ path: "path/to/file"\n          , mode: 0755\n          , size: 6\n          })\n  .write("hello\\n")\n  .end()\n</code></pre>\n<p>This will create the directories if they\'re missing, and then write\n<code>hello\\n</code> into the file, chmod it to 0755, and assert that 6 bytes have\nbeen written when it\'s done.</p>\n<pre><code class="language-javascript">fstream\n  .Writer({ path: "path/to/file"\n          , mode: 0755\n          , size: 6\n          , flags: "a"\n          })\n  .write("hello\\n")\n  .end()\n</code></pre>\n<p>You can pass flags in, if you want to append to a file.</p>\n<pre><code class="language-javascript">fstream\n  .Writer({ path: "path/to/symlink"\n          , linkpath: "./file"\n          , SymbolicLink: true\n          , mode: "0755" // octal strings supported\n          })\n  .end()\n</code></pre>\n<p>If isSymbolicLink is a function, it\'ll be called, and if it returns\ntrue, then it\'ll treat it as a symlink.  If it\'s not a function, then\nany truish value will make a symlink, or you can set <code>type: \'SymbolicLink\'</code>, which does the same thing.</p>\n<p>Note that the linkpath is relative to the symbolic link location, not\nthe parent dir or cwd.</p>\n<pre><code class="language-javascript">fstream\n  .Reader("path/to/dir")\n  .pipe(fstream.Writer("path/to/other/dir"))\n</code></pre>\n<p>This will do like <code>cp -Rp path/to/dir path/to/other/dir</code>.  If the other\ndir exists and isn\'t a directory, then it\'ll emit an error.  It\'ll also\nset the uid, gid, mode, etc. to be identical.  In this way, it\'s more\nlike <code>rsync -a</code> than simply a copy.</p>',docPath:"argo-ci/node_modules/fstream/readme",proj:"argo-ci"}}}});
//# sourceMappingURL=path---docs-argo-ci-node-modules-fstream-readme-html-149a3d0c2241ed70f68e.js.map