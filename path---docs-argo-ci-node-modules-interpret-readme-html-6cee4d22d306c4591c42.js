webpackJsonp([0x84581f792f5b],{2718:function(e,n){e.exports={pathContext:{docHtml:"<h1>interpret</h1>\n<blockquote>\n<p>A dictionary of file extensions and associated module loaders.</p>\n</blockquote>\n<p><a href=\"https://nodei.co/npm/interpret/\"><img src=\"https://nodei.co/npm/interpret.png\" alt=\"NPM\"></a></p>\n<h2>What is it</h2>\n<p>This is used by <a href=\"http://github.com/tkellen/node-liftoff\">Liftoff</a> to automatically require dependencies for configuration files, and by <a href=\"http://github.com/tkellen/node-rechoir\">rechoir</a> for registering module loaders.</p>\n<h2>API</h2>\n<h3>extensions</h3>\n<p>Map file types to modules which provide a <a href=\"http://nodejs.org/api/globals.html#globals_require_extensions\">require.extensions</a> loader.</p>\n<pre><code class=\"language-js\">{\n  '.babel.js': [\n    {\n      module: '@babel/register',\n      register: function (module) {\n        module({\n          // register on .js extension due to https://github.com/joyent/node/blob/v0.12.0/lib/module.js#L353\n          // which only captures the final extension (.babel.js -> .js)\n          extensions: '.js'\n        });\n      }\n    },\n    {\n      module: 'babel-register',\n      register: function (module) {\n        module({\n          // register on .js extension due to https://github.com/joyent/node/blob/v0.12.0/lib/module.js#L353\n          // which only captures the final extension (.babel.js -> .js)\n          extensions: '.js'\n        });\n      }\n    },\n    {\n      module: 'babel-core/register',\n      register: function (module) {\n        module({\n          extensions: '.js'\n        });\n      }\n    },\n    {\n      module: 'babel/register',\n      register: function (module) {\n        module({\n          extensions: '.js'\n        });\n      }\n    }\n  ],\n  '.buble.js': 'buble/register',\n  '.cirru': 'cirru-script/lib/register',\n  '.cjsx': 'node-cjsx/register',\n  '.co': 'coco',\n  '.coffee': ['coffeescript/register', 'coffee-script/register', 'coffeescript', 'coffee-script'],\n  '.coffee.md': ['coffeescript/register', 'coffee-script/register', 'coffeescript', 'coffee-script'],\n  '.csv': 'require-csv',\n  '.eg': 'earlgrey/register',\n  '.iced': ['iced-coffee-script/register', 'iced-coffee-script'],\n  '.iced.md': 'iced-coffee-script/register',\n  '.ini': 'require-ini',\n  '.js': null,\n  '.json': null,\n  '.json5': 'json5/lib/require',\n  '.jsx': [\n    {\n      module: '@babel/register',\n      register: function (module) {\n        module({\n          extensions: '.jsx'\n        });\n      }\n    },\n    {\n      module: 'babel-register',\n      register: function (module) {\n        module({\n          extensions: '.jsx'\n        });\n      }\n    },\n    {\n      module: 'babel-core/register',\n      register: function (module) {\n        module({\n          extensions: '.jsx'\n        });\n      }\n    },\n    {\n      module: 'babel/register',\n      register: function (module) {\n        module({\n          extensions: '.jsx'\n        });\n      },\n    },\n    {\n      module: 'node-jsx',\n      register: function (module) {\n        module.install({\n          extension: '.jsx',\n          harmony: true\n        });\n      }\n    }\n  ],\n  '.litcoffee': ['coffeescript/register', 'coffee-script/register', 'coffeescript', 'coffee-script'],\n  '.liticed': 'iced-coffee-script/register',\n  '.ls': ['livescript', 'LiveScript'],\n  '.node': null,\n  '.toml': {\n    module: 'toml-require',\n    register: function (module) {\n      module.install();\n    }\n  },\n  '.ts': ['ts-node/register', 'typescript-node/register', 'typescript-register', 'typescript-require'],\n  '.tsx': ['ts-node/register', 'typescript-node/register'],\n  '.wisp': 'wisp/engine/node',\n  '.xml': 'require-xml',\n  '.yaml': 'require-yaml',\n  '.yml': 'require-yaml'\n};\n</code></pre>\n<h3>jsVariants</h3>\n<p>Same as above, but only include the extensions which are javascript variants.</p>\n<h2>How to use it</h2>\n<p>Consumers should use the exported <code>extensions</code> or <code>jsVariants</code> object to determine which module should be loaded for a given extension. If a matching extension is found, consumers should do the following:</p>\n<ol>\n<li>\n<p>If the value is null, do nothing.</p>\n</li>\n<li>\n<p>If the value is a string, try to require it.</p>\n</li>\n<li>\n<p>If the value is an object, try to require the <code>module</code> property. If successful, the <code>register</code> property (a function) should be called with the module passed as the first argument.</p>\n</li>\n<li>\n<p>If the value is an array, iterate over it, attempting step #2 or #3 until one of the attempts does not throw.</p>\n</li>\n</ol>",docPath:"argo-ci/node_modules/interpret/readme",proj:"argo-ci"}}}});
//# sourceMappingURL=path---docs-argo-ci-node-modules-interpret-readme-html-6cee4d22d306c4591c42.js.map