webpackJsonp([0x77beda0f7a42],{2799:function(e,a){e.exports={pathContext:{docHtml:'<h1>json-schema-traverse</h1>\n<p>Traverse JSON Schema passing each schema object to callback</p>\n<p><a href="https://travis-ci.org/epoberezkin/json-schema-traverse"><img src="https://travis-ci.org/epoberezkin/json-schema-traverse.svg?branch=master" alt="Build Status"></a>\n<a href="https://www.npmjs.com/package/json-schema-traverse"><img src="https://badge.fury.io/js/json-schema-traverse.svg" alt="npm version"></a>\n<a href="https://coveralls.io/github/epoberezkin/json-schema-traverse?branch=master"><img src="https://coveralls.io/repos/github/epoberezkin/json-schema-traverse/badge.svg?branch=master" alt="Coverage Status"></a></p>\n<h2>Install</h2>\n<pre><code>npm install json-schema-traverse\n</code></pre>\n<h2>Usage</h2>\n<pre><code class="language-javascript">const traverse = require(\'json-schema-traverse\');\nconst schema = {\n  properties: {\n    foo: {type: \'string\'},\n    bar: {type: \'integer\'}\n  }\n};\n\ntraverse(schema, cb);\n// cb is called 3 times with:\n// 1. root schema\n// 2. {type: \'string\'}\n// 3. {type: \'integer\'}\n</code></pre>\n<p>Callback function is called for each schema object (not including draft-06 boolean schemas), including the root schema. Schema references ($ref) are not resolved, they are passed as is.</p>\n<p>Callback is passed these parameters:</p>\n<ul>\n<li><em>schema</em>: the current schema object</li>\n<li><em>JSON pointer</em>: from the root schema to the current schema object</li>\n<li><em>root schema</em>: the schema passed to <code>traverse</code> object</li>\n<li><em>parent JSON pointer</em>: from the root schema to the parent schema object (see below)</li>\n<li><em>parent keyword</em>: the keyword inside which this schema appears (e.g. <code>properties</code>, <code>anyOf</code>, etc.)</li>\n<li><em>parent schema</em>: not necessarily parent object/array; in the example above the parent schema for <code>{type: \'string\'}</code> is the root schema</li>\n<li><em>index/property</em>: index or property name in the array/object containing multiple schemas; in the example above for <code>{type: \'string\'}</code> the property name is <code>\'foo\'</code></li>\n</ul>\n<h2>Traverse objects in all unknown keywords</h2>\n<pre><code class="language-javascript">const traverse = require(\'json-schema-traverse\');\nconst schema = {\n  mySchema: {\n    minimum: 1,\n    maximum: 2\n  }\n};\n\ntraverse(schema, {allKeys: true}, cb);\n// cb is called 2 times with:\n// 1. root schema\n// 2. mySchema\n</code></pre>\n<p>Without option <code>allKeys: true</code> callback will be called only with root schema.</p>\n<h2>License</h2>\n<p><a href="https://github.com/epoberezkin/json-schema-traverse/blob/master/LICENSE">MIT</a></p>',docPath:"argo-ci/node_modules/json-schema-traverse/readme",proj:"argo-ci"}}}});
//# sourceMappingURL=path---docs-argo-ci-node-modules-json-schema-traverse-readme-html-bab92d7dac8cc6fa9d8b.js.map