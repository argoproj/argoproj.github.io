{"version":3,"sources":["webpack:///path---docs-argo-ci-node-modules-shelljs-8ef71d8717d87281fdde.js","webpack:///./.cache/json/docs-argo-ci-node-modules-shelljs.json"],"names":["webpackJsonp","3165","module","exports","pathContext","docHtml","docPath","proj"],"mappings":"AAAAA,cAAc,iBAERC,KACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,aAAeC,QAAA,u61BAAgq1BC,QAAA,sCAAAC,KAAA","file":"path---docs-argo-ci-node-modules-shelljs-8ef71d8717d87281fdde.js","sourcesContent":["webpackJsonp([76348042125409],{\n\n/***/ 3165:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"pathContext\":{\"docHtml\":\"<h1>ShellJS - Unix shell commands for Node.js</h1>\\n<p><a href=\\\"https://gitter.im/shelljs/shelljs?utm_source=badge&#x26;utm_medium=badge&#x26;utm_campaign=pr-badge&#x26;utm_content=badge\\\"><img src=\\\"https://img.shields.io/gitter/room/nwjs/nw.js.svg?style=flat-square\\\" alt=\\\"Gitter\\\"></a>\\n<a href=\\\"https://travis-ci.org/shelljs/shelljs\\\"><img src=\\\"https://img.shields.io/travis/shelljs/shelljs/master.svg?style=flat-square&#x26;label=unix\\\" alt=\\\"Travis\\\"></a>\\n<a href=\\\"https://ci.appveyor.com/project/shelljs/shelljs/branch/master\\\"><img src=\\\"https://img.shields.io/appveyor/ci/shelljs/shelljs/master.svg?style=flat-square&#x26;label=windows\\\" alt=\\\"AppVeyor\\\"></a>\\n<a href=\\\"https://codecov.io/gh/shelljs/shelljs\\\"><img src=\\\"https://img.shields.io/codecov/c/github/shelljs/shelljs/master.svg?style=flat-square&#x26;label=coverage\\\" alt=\\\"Codecov\\\"></a>\\n<a href=\\\"https://www.npmjs.com/package/shelljs\\\"><img src=\\\"https://img.shields.io/npm/v/shelljs.svg?style=flat-square\\\" alt=\\\"npm version\\\"></a>\\n<a href=\\\"https://www.npmjs.com/package/shelljs\\\"><img src=\\\"https://img.shields.io/npm/dm/shelljs.svg?style=flat-square\\\" alt=\\\"npm downloads\\\"></a></p>\\n<p>ShellJS is a portable <strong>(Windows/Linux/OS X)</strong> implementation of Unix shell\\ncommands on top of the Node.js API. You can use it to eliminate your shell\\nscript's dependency on Unix while still keeping its familiar and powerful\\ncommands. You can also install it globally so you can run it from outside Node\\nprojects - say goodbye to those gnarly Bash scripts!</p>\\n<p>ShellJS is proudly tested on every node release since <code>v0.11</code>!</p>\\n<p>The project is <a href=\\\"http://travis-ci.org/shelljs/shelljs\\\">unit-tested</a> and battle-tested in projects like:</p>\\n<ul>\\n<li><a href=\\\"http://github.com/mozilla/pdf.js\\\">PDF.js</a> - Firefox's next-gen PDF reader</li>\\n<li><a href=\\\"http://getfirebug.com/\\\">Firebug</a> - Firefox's infamous debugger</li>\\n<li><a href=\\\"http://jshint.com\\\">JSHint</a> &#x26; <a href=\\\"http://eslint.org/\\\">ESLint</a> - popular JavaScript linters</li>\\n<li><a href=\\\"http://zeptojs.com\\\">Zepto</a> - jQuery-compatible JavaScript library for modern browsers</li>\\n<li><a href=\\\"http://yeoman.io/\\\">Yeoman</a> - Web application stack and development tool</li>\\n<li><a href=\\\"http://deployd.com\\\">Deployd.com</a> - Open source PaaS for quick API backend generation</li>\\n<li>And <a href=\\\"https://npmjs.org/browse/depended/shelljs\\\">many more</a>.</li>\\n</ul>\\n<p>If you have feedback, suggestions, or need help, feel free to post in our <a href=\\\"https://github.com/shelljs/shelljs/issues\\\">issue\\ntracker</a>.</p>\\n<p>Think ShellJS is cool? Check out some related projects in our <a href=\\\"https://github.com/shelljs/shelljs/wiki\\\">Wiki\\npage</a>!</p>\\n<p>Upgrading from an older version? Check out our <a href=\\\"https://github.com/shelljs/shelljs/wiki/Breaking-Changes\\\">breaking\\nchanges</a> page to see\\nwhat changes to watch out for while upgrading.</p>\\n<h2>Command line use</h2>\\n<p>If you just want cross platform UNIX commands, checkout our new project\\n<a href=\\\"https://github.com/shelljs/shx\\\">shelljs/shx</a>, a utility to expose <code>shelljs</code> to\\nthe command line.</p>\\n<p>For example:</p>\\n<pre><code>$ shx mkdir -p foo\\n$ shx touch foo/bar.txt\\n$ shx rm -rf foo\\n</code></pre>\\n<h2>A quick note about the docs</h2>\\n<p>For documentation on all the latest features, check out our\\n<a href=\\\"https://github.com/shelljs/shelljs\\\">README</a>. To read docs that are consistent\\nwith the latest release, check out <a href=\\\"https://www.npmjs.com/package/shelljs\\\">the npm\\npage</a> or\\n<a href=\\\"http://documentup.com/shelljs/shelljs\\\">shelljs.org</a>.</p>\\n<h2>Installing</h2>\\n<p>Via npm:</p>\\n<pre><code class=\\\"language-bash\\\">$ npm install [-g] shelljs\\n</code></pre>\\n<h2>Examples</h2>\\n<pre><code class=\\\"language-javascript\\\">var shell = require('shelljs');\\n\\nif (!shell.which('git')) {\\n  shell.echo('Sorry, this script requires git');\\n  shell.exit(1);\\n}\\n\\n// Copy files to release dir\\nshell.rm('-rf', 'out/Release');\\nshell.cp('-R', 'stuff/', 'out/Release');\\n\\n// Replace macros in each .js file\\nshell.cd('lib');\\nshell.ls('*.js').forEach(function (file) {\\n  shell.sed('-i', 'BUILD_VERSION', 'v0.1.2', file);\\n  shell.sed('-i', /^.*REMOVE_THIS_LINE.*$/, '', file);\\n  shell.sed('-i', /.*REPLACE_LINE_WITH_MACRO.*\\\\n/, shell.cat('macro.js'), file);\\n});\\nshell.cd('..');\\n\\n// Run external tool synchronously\\nif (shell.exec('git commit -am \\\"Auto-commit\\\"').code !== 0) {\\n  shell.echo('Error: Git commit failed');\\n  shell.exit(1);\\n}\\n</code></pre>\\n<h2>Global vs. Local</h2>\\n<p>We no longer recommend using a global-import for ShellJS (i.e.\\n<code>require('shelljs/global')</code>). While still supported for convenience, this\\npollutes the global namespace, and should therefore only be used with caution.</p>\\n<p>Instead, we recommend a local import (standard for npm packages):</p>\\n<pre><code class=\\\"language-javascript\\\">var shell = require('shelljs');\\nshell.echo('hello world');\\n</code></pre>\\n<!-- DO NOT MODIFY BEYOND THIS POINT - IT'S AUTOMATICALLY GENERATED -->\\n<h2>Command reference</h2>\\n<p>All commands run synchronously, unless otherwise stated.\\nAll commands accept standard bash globbing characters (<code>*</code>, <code>?</code>, etc.),\\ncompatible with the <a href=\\\"https://github.com/isaacs/node-glob\\\">node glob module</a>.</p>\\n<p>For less-commonly used commands and features, please check out our <a href=\\\"https://github.com/shelljs/shelljs/wiki\\\">wiki\\npage</a>.</p>\\n<h3>cat(file [, file ...])</h3>\\n<h3>cat(file_array)</h3>\\n<p>Examples:</p>\\n<pre><code class=\\\"language-javascript\\\">var str = cat('file*.txt');\\nvar str = cat('file1', 'file2');\\nvar str = cat(['file1', 'file2']); // same as above\\n</code></pre>\\n<p>Returns a string containing the given file, or a concatenated string\\ncontaining the files if more than one file is given (a new line character is\\nintroduced between each file).</p>\\n<h3>cd([dir])</h3>\\n<p>Changes to directory <code>dir</code> for the duration of the script. Changes to home\\ndirectory if no argument is supplied.</p>\\n<h3>chmod([options,] octal<em>mode || octal</em>string, file)</h3>\\n<h3>chmod([options,] symbolic_mode, file)</h3>\\n<p>Available options:</p>\\n<ul>\\n<li><code>-v</code>: output a diagnostic for every file processed</li>\\n<li><code>-c</code>: like verbose but report only when a change is made</li>\\n<li><code>-R</code>: change files and directories recursively</li>\\n</ul>\\n<p>Examples:</p>\\n<pre><code class=\\\"language-javascript\\\">chmod(755, '/Users/brandon');\\nchmod('755', '/Users/brandon'); // same as above\\nchmod('u+x', '/Users/brandon');\\nchmod('-R', 'a-w', '/Users/brandon');\\n</code></pre>\\n<p>Alters the permissions of a file or directory by either specifying the\\nabsolute permissions in octal form or expressing the changes in symbols.\\nThis command tries to mimic the POSIX behavior as much as possible.\\nNotable exceptions:</p>\\n<ul>\\n<li>In symbolic modes, 'a-r' and '-r' are identical.  No consideration is\\ngiven to the umask.</li>\\n<li>There is no \\\"quiet\\\" option since default behavior is to run silent.</li>\\n</ul>\\n<h3>cp([options,] source [, source ...], dest)</h3>\\n<h3>cp([options,] source_array, dest)</h3>\\n<p>Available options:</p>\\n<ul>\\n<li><code>-f</code>: force (default behavior)</li>\\n<li><code>-n</code>: no-clobber</li>\\n<li><code>-u</code>: only copy if source is newer than dest</li>\\n<li><code>-r</code>, <code>-R</code>: recursive</li>\\n<li><code>-L</code>: follow symlinks</li>\\n<li><code>-P</code>: don't follow symlinks</li>\\n</ul>\\n<p>Examples:</p>\\n<pre><code class=\\\"language-javascript\\\">cp('file1', 'dir1');\\ncp('-R', 'path/to/dir/', '~/newCopy/');\\ncp('-Rf', '/tmp/*', '/usr/local/*', '/home/tmp');\\ncp('-Rf', ['/tmp/*', '/usr/local/*'], '/home/tmp'); // same as above\\n</code></pre>\\n<p>Copies files.</p>\\n<h3>pushd(<a href=\\\"\\\">options,</a>)</h3>\\n<p>Available options:</p>\\n<ul>\\n<li><code>-n</code>: Suppresses the normal change of directory when adding directories to the stack, so that only the stack is manipulated.</li>\\n</ul>\\n<p>Arguments:</p>\\n<ul>\\n<li><code>dir</code>: Makes the current working directory be the top of the stack, and then executes the equivalent of <code>cd dir</code>.</li>\\n<li><code>+N</code>: Brings the Nth directory (counting from the left of the list printed by dirs, starting with zero) to the top of the list by rotating the stack.</li>\\n<li><code>-N</code>: Brings the Nth directory (counting from the right of the list printed by dirs, starting with zero) to the top of the list by rotating the stack.</li>\\n</ul>\\n<p>Examples:</p>\\n<pre><code class=\\\"language-javascript\\\">// process.cwd() === '/usr'\\npushd('/etc'); // Returns /etc /usr\\npushd('+1');   // Returns /usr /etc\\n</code></pre>\\n<p>Save the current directory on the top of the directory stack and then cd to <code>dir</code>. With no arguments, pushd exchanges the top two directories. Returns an array of paths in the stack.</p>\\n<h3>popd(<a href=\\\"\\\">options,</a>)</h3>\\n<p>Available options:</p>\\n<ul>\\n<li><code>-n</code>: Suppresses the normal change of directory when removing directories from the stack, so that only the stack is manipulated.</li>\\n</ul>\\n<p>Arguments:</p>\\n<ul>\\n<li><code>+N</code>: Removes the Nth directory (counting from the left of the list printed by dirs), starting with zero.</li>\\n<li><code>-N</code>: Removes the Nth directory (counting from the right of the list printed by dirs), starting with zero.</li>\\n</ul>\\n<p>Examples:</p>\\n<pre><code class=\\\"language-javascript\\\">echo(process.cwd()); // '/usr'\\npushd('/etc');       // '/etc /usr'\\necho(process.cwd()); // '/etc'\\npopd();              // '/usr'\\necho(process.cwd()); // '/usr'\\n</code></pre>\\n<p>When no arguments are given, popd removes the top directory from the stack and performs a cd to the new top directory. The elements are numbered from 0 starting at the first directory listed with dirs; i.e., popd is equivalent to popd +0. Returns an array of paths in the stack.</p>\\n<h3>dirs([options | '+N' | '-N'])</h3>\\n<p>Available options:</p>\\n<ul>\\n<li><code>-c</code>: Clears the directory stack by deleting all of the elements.</li>\\n</ul>\\n<p>Arguments:</p>\\n<ul>\\n<li><code>+N</code>: Displays the Nth directory (counting from the left of the list printed by dirs when invoked without options), starting with zero.</li>\\n<li><code>-N</code>: Displays the Nth directory (counting from the right of the list printed by dirs when invoked without options), starting with zero.</li>\\n</ul>\\n<p>Display the list of currently remembered directories. Returns an array of paths in the stack, or a single path if +N or -N was specified.</p>\\n<p>See also: pushd, popd</p>\\n<h3>echo([options,] string [, string ...])</h3>\\n<p>Available options:</p>\\n<ul>\\n<li><code>-e</code>: interpret backslash escapes (default)</li>\\n</ul>\\n<p>Examples:</p>\\n<pre><code class=\\\"language-javascript\\\">echo('hello world');\\nvar str = echo('hello world');\\n</code></pre>\\n<p>Prints string to stdout, and returns string with additional utility methods\\nlike <code>.to()</code>.</p>\\n<h3>exec(command <a href=\\\"\\\">, options</a>)</h3>\\n<p>Available options (all <code>false</code> by default):</p>\\n<ul>\\n<li><code>async</code>: Asynchronous execution. If a callback is provided, it will be set to\\n<code>true</code>, regardless of the passed value.</li>\\n<li><code>silent</code>: Do not echo program output to console.</li>\\n<li>and any option available to Node.js's\\n<a href=\\\"https://nodejs.org/api/child_process.html#child_process_child_process_exec_command_options_callback\\\">child_process.exec()</a></li>\\n</ul>\\n<p>Examples:</p>\\n<pre><code class=\\\"language-javascript\\\">var version = exec('node --version', {silent:true}).stdout;\\n\\nvar child = exec('some_long_running_process', {async:true});\\nchild.stdout.on('data', function(data) {\\n  /* ... do something with data ... */\\n});\\n\\nexec('some_long_running_process', function(code, stdout, stderr) {\\n  console.log('Exit code:', code);\\n  console.log('Program output:', stdout);\\n  console.log('Program stderr:', stderr);\\n});\\n</code></pre>\\n<p>Executes the given <code>command</code> <em>synchronously</em>, unless otherwise specified.  When in synchronous\\nmode, this returns a ShellString (compatible with ShellJS v0.6.x, which returns an object\\nof the form <code>{ code:..., stdout:... , stderr:... }</code>). Otherwise, this returns the child process\\nobject, and the <code>callback</code> gets the arguments <code>(code, stdout, stderr)</code>.</p>\\n<p>Not seeing the behavior you want? <code>exec()</code> runs everything through <code>sh</code>\\nby default (or <code>cmd.exe</code> on Windows), which differs from <code>bash</code>. If you\\nneed bash-specific behavior, try out the <code>{shell: 'path/to/bash'}</code> option.</p>\\n<p><strong>Note:</strong> For long-lived processes, it's best to run <code>exec()</code> asynchronously as\\nthe current synchronous implementation uses a lot of CPU. This should be getting\\nfixed soon.</p>\\n<h3>find(path [, path ...])</h3>\\n<h3>find(path_array)</h3>\\n<p>Examples:</p>\\n<pre><code class=\\\"language-javascript\\\">find('src', 'lib');\\nfind(['src', 'lib']); // same as above\\nfind('.').filter(function(file) { return file.match(/\\\\.js$/); });\\n</code></pre>\\n<p>Returns array of all files (however deep) in the given paths.</p>\\n<p>The main difference from <code>ls('-R', path)</code> is that the resulting file names\\ninclude the base directories, e.g. <code>lib/resources/file1</code> instead of just <code>file1</code>.</p>\\n<h3>grep([options,] regex_filter, file [, file ...])</h3>\\n<h3>grep([options,] regex<em>filter, file</em>array)</h3>\\n<p>Available options:</p>\\n<ul>\\n<li><code>-v</code>: Inverse the sense of the regex and print the lines not matching the criteria.</li>\\n<li><code>-l</code>: Print only filenames of matching files</li>\\n</ul>\\n<p>Examples:</p>\\n<pre><code class=\\\"language-javascript\\\">grep('-v', 'GLOBAL_VARIABLE', '*.js');\\ngrep('GLOBAL_VARIABLE', '*.js');\\n</code></pre>\\n<p>Reads input string from given files and returns a string containing all lines of the\\nfile that match the given <code>regex_filter</code>.</p>\\n<h3>head([{'-n': &#x3C;num>},] file [, file ...])</h3>\\n<h3>head([{'-n': &#x3C;num>},] file_array)</h3>\\n<p>Available options:</p>\\n<ul>\\n<li><code>-n &#x3C;num></code>: Show the first <code>&#x3C;num></code> lines of the files</li>\\n</ul>\\n<p>Examples:</p>\\n<pre><code class=\\\"language-javascript\\\">var str = head({'-n': 1}, 'file*.txt');\\nvar str = head('file1', 'file2');\\nvar str = head(['file1', 'file2']); // same as above\\n</code></pre>\\n<p>Read the start of a file.</p>\\n<h3>ln([options,] source, dest)</h3>\\n<p>Available options:</p>\\n<ul>\\n<li><code>-s</code>: symlink</li>\\n<li><code>-f</code>: force</li>\\n</ul>\\n<p>Examples:</p>\\n<pre><code class=\\\"language-javascript\\\">ln('file', 'newlink');\\nln('-sf', 'file', 'existing');\\n</code></pre>\\n<p>Links source to dest. Use -f to force the link, should dest already exist.</p>\\n<h3>ls(<a href=\\\"\\\">options,</a>)</h3>\\n<h3>ls([options,] path_array)</h3>\\n<p>Available options:</p>\\n<ul>\\n<li><code>-R</code>: recursive</li>\\n<li><code>-A</code>: all files (include files beginning with <code>.</code>, except for <code>.</code> and <code>..</code>)</li>\\n<li><code>-L</code>: follow symlinks</li>\\n<li><code>-d</code>: list directories themselves, not their contents</li>\\n<li><code>-l</code>: list objects representing each file, each with fields containing <code>ls -l</code> output fields. See\\n<a href=\\\"https://nodejs.org/api/fs.html#fs_class_fs_stats\\\">fs.Stats</a>\\nfor more info</li>\\n</ul>\\n<p>Examples:</p>\\n<pre><code class=\\\"language-javascript\\\">ls('projs/*.js');\\nls('-R', '/users/me', '/tmp');\\nls('-R', ['/users/me', '/tmp']); // same as above\\nls('-l', 'file.txt'); // { name: 'file.txt', mode: 33188, nlink: 1, ...}\\n</code></pre>\\n<p>Returns array of files in the given path, or in current directory if no path provided.</p>\\n<h3>mkdir([options,] dir [, dir ...])</h3>\\n<h3>mkdir([options,] dir_array)</h3>\\n<p>Available options:</p>\\n<ul>\\n<li><code>-p</code>: full path (will create intermediate dirs if necessary)</li>\\n</ul>\\n<p>Examples:</p>\\n<pre><code class=\\\"language-javascript\\\">mkdir('-p', '/tmp/a/b/c/d', '/tmp/e/f/g');\\nmkdir('-p', ['/tmp/a/b/c/d', '/tmp/e/f/g']); // same as above\\n</code></pre>\\n<p>Creates directories.</p>\\n<h3>mv([options ,] source [, source ...], dest')</h3>\\n<h3>mv([options ,] source_array, dest')</h3>\\n<p>Available options:</p>\\n<ul>\\n<li><code>-f</code>: force (default behavior)</li>\\n<li><code>-n</code>: no-clobber</li>\\n</ul>\\n<p>Examples:</p>\\n<pre><code class=\\\"language-javascript\\\">mv('-n', 'file', 'dir/');\\nmv('file1', 'file2', 'dir/');\\nmv(['file1', 'file2'], 'dir/'); // same as above\\n</code></pre>\\n<p>Moves files.</p>\\n<h3>pwd()</h3>\\n<p>Returns the current directory.</p>\\n<h3>rm([options,] file [, file ...])</h3>\\n<h3>rm([options,] file_array)</h3>\\n<p>Available options:</p>\\n<ul>\\n<li><code>-f</code>: force</li>\\n<li><code>-r, -R</code>: recursive</li>\\n</ul>\\n<p>Examples:</p>\\n<pre><code class=\\\"language-javascript\\\">rm('-rf', '/tmp/*');\\nrm('some_file.txt', 'another_file.txt');\\nrm(['some_file.txt', 'another_file.txt']); // same as above\\n</code></pre>\\n<p>Removes files.</p>\\n<h3>sed([options,] search_regex, replacement, file [, file ...])</h3>\\n<h3>sed([options,] search<em>regex, replacement, file</em>array)</h3>\\n<p>Available options:</p>\\n<ul>\\n<li><code>-i</code>: Replace contents of 'file' in-place. <em>Note that no backups will be created!</em></li>\\n</ul>\\n<p>Examples:</p>\\n<pre><code class=\\\"language-javascript\\\">sed('-i', 'PROGRAM_VERSION', 'v0.1.3', 'source.js');\\nsed(/.*DELETE_THIS_LINE.*\\\\n/, '', 'source.js');\\n</code></pre>\\n<p>Reads an input string from <code>files</code> and performs a JavaScript <code>replace()</code> on the input\\nusing the given search regex and replacement string or function. Returns the new string after replacement.</p>\\n<p>Note:</p>\\n<p>Like unix <code>sed</code>, ShellJS <code>sed</code> supports capture groups. Capture groups are specified\\nusing the <code>$n</code> syntax:</p>\\n<pre><code class=\\\"language-javascript\\\">sed(/(\\\\w+)\\\\s(\\\\w+)/, '$2, $1', 'file.txt');\\n</code></pre>\\n<h3>set(options)</h3>\\n<p>Available options:</p>\\n<ul>\\n<li><code>+/-e</code>: exit upon error (<code>config.fatal</code>)</li>\\n<li><code>+/-v</code>: verbose: show all commands (<code>config.verbose</code>)</li>\\n<li><code>+/-f</code>: disable filename expansion (globbing)</li>\\n</ul>\\n<p>Examples:</p>\\n<pre><code class=\\\"language-javascript\\\">set('-e'); // exit upon first error\\nset('+e'); // this undoes a \\\"set('-e')\\\"\\n</code></pre>\\n<p>Sets global configuration variables</p>\\n<h3>sort([options,] file [, file ...])</h3>\\n<h3>sort([options,] file_array)</h3>\\n<p>Available options:</p>\\n<ul>\\n<li><code>-r</code>: Reverse the result of comparisons</li>\\n<li><code>-n</code>: Compare according to numerical value</li>\\n</ul>\\n<p>Examples:</p>\\n<pre><code class=\\\"language-javascript\\\">sort('foo.txt', 'bar.txt');\\nsort('-r', 'foo.txt');\\n</code></pre>\\n<p>Return the contents of the files, sorted line-by-line. Sorting multiple\\nfiles mixes their content, just like unix sort does.</p>\\n<h3>tail([{'-n': &#x3C;num>},] file [, file ...])</h3>\\n<h3>tail([{'-n': &#x3C;num>},] file_array)</h3>\\n<p>Available options:</p>\\n<ul>\\n<li><code>-n &#x3C;num></code>: Show the last <code>&#x3C;num></code> lines of the files</li>\\n</ul>\\n<p>Examples:</p>\\n<pre><code class=\\\"language-javascript\\\">var str = tail({'-n': 1}, 'file*.txt');\\nvar str = tail('file1', 'file2');\\nvar str = tail(['file1', 'file2']); // same as above\\n</code></pre>\\n<p>Read the end of a file.</p>\\n<h3>tempdir()</h3>\\n<p>Examples:</p>\\n<pre><code class=\\\"language-javascript\\\">var tmp = tempdir(); // \\\"/tmp\\\" for most *nix platforms\\n</code></pre>\\n<p>Searches and returns string containing a writeable, platform-dependent temporary directory.\\nFollows Python's <a href=\\\"http://docs.python.org/library/tempfile.html#tempfile.tempdir\\\">tempfile algorithm</a>.</p>\\n<h3>test(expression)</h3>\\n<p>Available expression primaries:</p>\\n<ul>\\n<li><code>'-b', 'path'</code>: true if path is a block device</li>\\n<li><code>'-c', 'path'</code>: true if path is a character device</li>\\n<li><code>'-d', 'path'</code>: true if path is a directory</li>\\n<li><code>'-e', 'path'</code>: true if path exists</li>\\n<li><code>'-f', 'path'</code>: true if path is a regular file</li>\\n<li><code>'-L', 'path'</code>: true if path is a symbolic link</li>\\n<li><code>'-p', 'path'</code>: true if path is a pipe (FIFO)</li>\\n<li><code>'-S', 'path'</code>: true if path is a socket</li>\\n</ul>\\n<p>Examples:</p>\\n<pre><code class=\\\"language-javascript\\\">if (test('-d', path)) { /* do something with dir */ };\\nif (!test('-f', path)) continue; // skip if it's a regular file\\n</code></pre>\\n<p>Evaluates expression using the available primaries and returns corresponding value.</p>\\n<h3>ShellString.prototype.to(file)</h3>\\n<p>Examples:</p>\\n<pre><code class=\\\"language-javascript\\\">cat('input.txt').to('output.txt');\\n</code></pre>\\n<p>Analogous to the redirection operator <code>></code> in Unix, but works with\\nShellStrings (such as those returned by <code>cat</code>, <code>grep</code>, etc). <em>Like Unix\\nredirections, <code>to()</code> will overwrite any existing file!</em></p>\\n<h3>ShellString.prototype.toEnd(file)</h3>\\n<p>Examples:</p>\\n<pre><code class=\\\"language-javascript\\\">cat('input.txt').toEnd('output.txt');\\n</code></pre>\\n<p>Analogous to the redirect-and-append operator <code>>></code> in Unix, but works with\\nShellStrings (such as those returned by <code>cat</code>, <code>grep</code>, etc).</p>\\n<h3>touch([options,] file [, file ...])</h3>\\n<h3>touch([options,] file_array)</h3>\\n<p>Available options:</p>\\n<ul>\\n<li><code>-a</code>: Change only the access time</li>\\n<li><code>-c</code>: Do not create any files</li>\\n<li><code>-m</code>: Change only the modification time</li>\\n<li><code>-d DATE</code>: Parse DATE and use it instead of current time</li>\\n<li><code>-r FILE</code>: Use FILE's times instead of current time</li>\\n</ul>\\n<p>Examples:</p>\\n<pre><code class=\\\"language-javascript\\\">touch('source.js');\\ntouch('-c', '/path/to/some/dir/source.js');\\ntouch({ '-r': FILE }, '/path/to/some/dir/source.js');\\n</code></pre>\\n<p>Update the access and modification times of each FILE to the current time.\\nA FILE argument that does not exist is created empty, unless -c is supplied.\\nThis is a partial implementation of <em><a href=\\\"http://linux.die.net/man/1/touch\\\">touch(1)</a></em>.</p>\\n<h3>uniq([options,]input, [output]])</h3>\\n<p>Available options:</p>\\n<ul>\\n<li><code>-i</code>: Ignore case while comparing</li>\\n<li><code>-c</code>: Prefix lines by the number of occurrences</li>\\n<li><code>-d</code>: Only print duplicate lines, one for each group of identical lines</li>\\n</ul>\\n<p>Examples:</p>\\n<pre><code class=\\\"language-javascript\\\">uniq('foo.txt');\\nuniq('-i', 'foo.txt');\\nuniq('-cd', 'foo.txt', 'bar.txt');\\n</code></pre>\\n<p>Filter adjacent matching lines from input</p>\\n<h3>which(command)</h3>\\n<p>Examples:</p>\\n<pre><code class=\\\"language-javascript\\\">var nodeExec = which('node');\\n</code></pre>\\n<p>Searches for <code>command</code> in the system's PATH. On Windows, this uses the\\n<code>PATHEXT</code> variable to append the extension if it's not already executable.\\nReturns string containing the absolute path to the command.</p>\\n<h3>exit(code)</h3>\\n<p>Exits the current process with the given exit code.</p>\\n<h3>error()</h3>\\n<p>Tests if error occurred in the last command. Returns a truthy value if an\\nerror returned and a falsy value otherwise.</p>\\n<p><strong>Note</strong>: do not rely on the\\nreturn value to be an error message. If you need the last error message, use\\nthe <code>.stderr</code> attribute from the last command's return value instead.</p>\\n<h3>ShellString(str)</h3>\\n<p>Examples:</p>\\n<pre><code class=\\\"language-javascript\\\">var foo = ShellString('hello world');\\n</code></pre>\\n<p>Turns a regular string into a string-like object similar to what each\\ncommand returns. This has special methods, like <code>.to()</code> and <code>.toEnd()</code></p>\\n<h3>env['VAR_NAME']</h3>\\n<p>Object containing environment variables (both getter and setter). Shortcut\\nto process.env.</p>\\n<h3>Pipes</h3>\\n<p>Examples:</p>\\n<pre><code class=\\\"language-javascript\\\">grep('foo', 'file1.txt', 'file2.txt').sed(/o/g, 'a').to('output.txt');\\necho('files with o\\\\'s in the name:\\\\n' + ls().grep('o'));\\ncat('test.js').exec('node'); // pipe to exec() call\\n</code></pre>\\n<p>Commands can send their output to another command in a pipe-like fashion.\\n<code>sed</code>, <code>grep</code>, <code>cat</code>, <code>exec</code>, <code>to</code>, and <code>toEnd</code> can appear on the right-hand\\nside of a pipe. Pipes can be chained.</p>\\n<h2>Configuration</h2>\\n<h3>config.silent</h3>\\n<p>Example:</p>\\n<pre><code class=\\\"language-javascript\\\">var sh = require('shelljs');\\nvar silentState = sh.config.silent; // save old silent state\\nsh.config.silent = true;\\n/* ... */\\nsh.config.silent = silentState; // restore old silent state\\n</code></pre>\\n<p>Suppresses all command output if <code>true</code>, except for <code>echo()</code> calls.\\nDefault is <code>false</code>.</p>\\n<h3>config.fatal</h3>\\n<p>Example:</p>\\n<pre><code class=\\\"language-javascript\\\">require('shelljs/global');\\nconfig.fatal = true; // or set('-e');\\ncp('this_file_does_not_exist', '/dev/null'); // throws Error here\\n/* more commands... */\\n</code></pre>\\n<p>If <code>true</code> the script will throw a Javascript error when any shell.js\\ncommand encounters an error. Default is <code>false</code>. This is analogous to\\nBash's <code>set -e</code></p>\\n<h3>config.verbose</h3>\\n<p>Example:</p>\\n<pre><code class=\\\"language-javascript\\\">config.verbose = true; // or set('-v');\\ncd('dir/');\\nrm('-rf', 'foo.txt', 'bar.txt');\\nexec('echo hello');\\n</code></pre>\\n<p>Will print each command as follows:</p>\\n<pre><code>cd dir/\\nrm -rf foo.txt bar.txt\\nexec echo hello\\n</code></pre>\\n<h3>config.globOptions</h3>\\n<p>Example:</p>\\n<pre><code class=\\\"language-javascript\\\">config.globOptions = {nodir: true};\\n</code></pre>\\n<p>Use this value for calls to <code>glob.sync()</code> instead of the default options.</p>\\n<h3>config.reset()</h3>\\n<p>Example:</p>\\n<pre><code class=\\\"language-javascript\\\">var shell = require('shelljs');\\n// Make changes to shell.config, and do stuff...\\n/* ... */\\nshell.config.reset(); // reset to original state\\n// Do more stuff, but with original settings\\n/* ... */\\n</code></pre>\\n<p>Reset shell.config to the defaults:</p>\\n<pre><code class=\\\"language-javascript\\\">{\\n  fatal: false,\\n  globOptions: {},\\n  maxdepth: 255,\\n  noglob: false,\\n  silent: false,\\n  verbose: false,\\n}\\n</code></pre>\\n<h2>Team</h2>\\n<table>\\n<thead>\\n<tr>\\n<th align=\\\"center\\\"><a href=\\\"https://github.com/nfischer\\\"><img src=\\\"https://avatars.githubusercontent.com/u/5801521?s=130\\\" alt=\\\"Nate Fischer\\\"></a></th>\\n<th align=\\\"center\\\"><a href=\\\"http://github.com/freitagbr\\\"><img src=\\\"https://avatars1.githubusercontent.com/u/5988055?v=3&#x26;s=130\\\" alt=\\\"Brandon Freitag\\\"></a></th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td align=\\\"center\\\"><a href=\\\"https://github.com/nfischer\\\">Nate Fischer</a></td>\\n<td align=\\\"center\\\"><a href=\\\"http://github.com/freitagbr\\\">Brandon Freitag</a></td>\\n</tr>\\n</tbody>\\n</table>\",\"docPath\":\"argo-ci/node_modules/shelljs/readme\",\"proj\":\"argo-ci\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---docs-argo-ci-node-modules-shelljs-8ef71d8717d87281fdde.js","module.exports = {\"pathContext\":{\"docHtml\":\"<h1>ShellJS - Unix shell commands for Node.js</h1>\\n<p><a href=\\\"https://gitter.im/shelljs/shelljs?utm_source=badge&#x26;utm_medium=badge&#x26;utm_campaign=pr-badge&#x26;utm_content=badge\\\"><img src=\\\"https://img.shields.io/gitter/room/nwjs/nw.js.svg?style=flat-square\\\" alt=\\\"Gitter\\\"></a>\\n<a href=\\\"https://travis-ci.org/shelljs/shelljs\\\"><img src=\\\"https://img.shields.io/travis/shelljs/shelljs/master.svg?style=flat-square&#x26;label=unix\\\" alt=\\\"Travis\\\"></a>\\n<a href=\\\"https://ci.appveyor.com/project/shelljs/shelljs/branch/master\\\"><img src=\\\"https://img.shields.io/appveyor/ci/shelljs/shelljs/master.svg?style=flat-square&#x26;label=windows\\\" alt=\\\"AppVeyor\\\"></a>\\n<a href=\\\"https://codecov.io/gh/shelljs/shelljs\\\"><img src=\\\"https://img.shields.io/codecov/c/github/shelljs/shelljs/master.svg?style=flat-square&#x26;label=coverage\\\" alt=\\\"Codecov\\\"></a>\\n<a href=\\\"https://www.npmjs.com/package/shelljs\\\"><img src=\\\"https://img.shields.io/npm/v/shelljs.svg?style=flat-square\\\" alt=\\\"npm version\\\"></a>\\n<a href=\\\"https://www.npmjs.com/package/shelljs\\\"><img src=\\\"https://img.shields.io/npm/dm/shelljs.svg?style=flat-square\\\" alt=\\\"npm downloads\\\"></a></p>\\n<p>ShellJS is a portable <strong>(Windows/Linux/OS X)</strong> implementation of Unix shell\\ncommands on top of the Node.js API. You can use it to eliminate your shell\\nscript's dependency on Unix while still keeping its familiar and powerful\\ncommands. You can also install it globally so you can run it from outside Node\\nprojects - say goodbye to those gnarly Bash scripts!</p>\\n<p>ShellJS is proudly tested on every node release since <code>v0.11</code>!</p>\\n<p>The project is <a href=\\\"http://travis-ci.org/shelljs/shelljs\\\">unit-tested</a> and battle-tested in projects like:</p>\\n<ul>\\n<li><a href=\\\"http://github.com/mozilla/pdf.js\\\">PDF.js</a> - Firefox's next-gen PDF reader</li>\\n<li><a href=\\\"http://getfirebug.com/\\\">Firebug</a> - Firefox's infamous debugger</li>\\n<li><a href=\\\"http://jshint.com\\\">JSHint</a> &#x26; <a href=\\\"http://eslint.org/\\\">ESLint</a> - popular JavaScript linters</li>\\n<li><a href=\\\"http://zeptojs.com\\\">Zepto</a> - jQuery-compatible JavaScript library for modern browsers</li>\\n<li><a href=\\\"http://yeoman.io/\\\">Yeoman</a> - Web application stack and development tool</li>\\n<li><a href=\\\"http://deployd.com\\\">Deployd.com</a> - Open source PaaS for quick API backend generation</li>\\n<li>And <a href=\\\"https://npmjs.org/browse/depended/shelljs\\\">many more</a>.</li>\\n</ul>\\n<p>If you have feedback, suggestions, or need help, feel free to post in our <a href=\\\"https://github.com/shelljs/shelljs/issues\\\">issue\\ntracker</a>.</p>\\n<p>Think ShellJS is cool? Check out some related projects in our <a href=\\\"https://github.com/shelljs/shelljs/wiki\\\">Wiki\\npage</a>!</p>\\n<p>Upgrading from an older version? Check out our <a href=\\\"https://github.com/shelljs/shelljs/wiki/Breaking-Changes\\\">breaking\\nchanges</a> page to see\\nwhat changes to watch out for while upgrading.</p>\\n<h2>Command line use</h2>\\n<p>If you just want cross platform UNIX commands, checkout our new project\\n<a href=\\\"https://github.com/shelljs/shx\\\">shelljs/shx</a>, a utility to expose <code>shelljs</code> to\\nthe command line.</p>\\n<p>For example:</p>\\n<pre><code>$ shx mkdir -p foo\\n$ shx touch foo/bar.txt\\n$ shx rm -rf foo\\n</code></pre>\\n<h2>A quick note about the docs</h2>\\n<p>For documentation on all the latest features, check out our\\n<a href=\\\"https://github.com/shelljs/shelljs\\\">README</a>. To read docs that are consistent\\nwith the latest release, check out <a href=\\\"https://www.npmjs.com/package/shelljs\\\">the npm\\npage</a> or\\n<a href=\\\"http://documentup.com/shelljs/shelljs\\\">shelljs.org</a>.</p>\\n<h2>Installing</h2>\\n<p>Via npm:</p>\\n<pre><code class=\\\"language-bash\\\">$ npm install [-g] shelljs\\n</code></pre>\\n<h2>Examples</h2>\\n<pre><code class=\\\"language-javascript\\\">var shell = require('shelljs');\\n\\nif (!shell.which('git')) {\\n  shell.echo('Sorry, this script requires git');\\n  shell.exit(1);\\n}\\n\\n// Copy files to release dir\\nshell.rm('-rf', 'out/Release');\\nshell.cp('-R', 'stuff/', 'out/Release');\\n\\n// Replace macros in each .js file\\nshell.cd('lib');\\nshell.ls('*.js').forEach(function (file) {\\n  shell.sed('-i', 'BUILD_VERSION', 'v0.1.2', file);\\n  shell.sed('-i', /^.*REMOVE_THIS_LINE.*$/, '', file);\\n  shell.sed('-i', /.*REPLACE_LINE_WITH_MACRO.*\\\\n/, shell.cat('macro.js'), file);\\n});\\nshell.cd('..');\\n\\n// Run external tool synchronously\\nif (shell.exec('git commit -am \\\"Auto-commit\\\"').code !== 0) {\\n  shell.echo('Error: Git commit failed');\\n  shell.exit(1);\\n}\\n</code></pre>\\n<h2>Global vs. Local</h2>\\n<p>We no longer recommend using a global-import for ShellJS (i.e.\\n<code>require('shelljs/global')</code>). While still supported for convenience, this\\npollutes the global namespace, and should therefore only be used with caution.</p>\\n<p>Instead, we recommend a local import (standard for npm packages):</p>\\n<pre><code class=\\\"language-javascript\\\">var shell = require('shelljs');\\nshell.echo('hello world');\\n</code></pre>\\n<!-- DO NOT MODIFY BEYOND THIS POINT - IT'S AUTOMATICALLY GENERATED -->\\n<h2>Command reference</h2>\\n<p>All commands run synchronously, unless otherwise stated.\\nAll commands accept standard bash globbing characters (<code>*</code>, <code>?</code>, etc.),\\ncompatible with the <a href=\\\"https://github.com/isaacs/node-glob\\\">node glob module</a>.</p>\\n<p>For less-commonly used commands and features, please check out our <a href=\\\"https://github.com/shelljs/shelljs/wiki\\\">wiki\\npage</a>.</p>\\n<h3>cat(file [, file ...])</h3>\\n<h3>cat(file_array)</h3>\\n<p>Examples:</p>\\n<pre><code class=\\\"language-javascript\\\">var str = cat('file*.txt');\\nvar str = cat('file1', 'file2');\\nvar str = cat(['file1', 'file2']); // same as above\\n</code></pre>\\n<p>Returns a string containing the given file, or a concatenated string\\ncontaining the files if more than one file is given (a new line character is\\nintroduced between each file).</p>\\n<h3>cd([dir])</h3>\\n<p>Changes to directory <code>dir</code> for the duration of the script. Changes to home\\ndirectory if no argument is supplied.</p>\\n<h3>chmod([options,] octal<em>mode || octal</em>string, file)</h3>\\n<h3>chmod([options,] symbolic_mode, file)</h3>\\n<p>Available options:</p>\\n<ul>\\n<li><code>-v</code>: output a diagnostic for every file processed</li>\\n<li><code>-c</code>: like verbose but report only when a change is made</li>\\n<li><code>-R</code>: change files and directories recursively</li>\\n</ul>\\n<p>Examples:</p>\\n<pre><code class=\\\"language-javascript\\\">chmod(755, '/Users/brandon');\\nchmod('755', '/Users/brandon'); // same as above\\nchmod('u+x', '/Users/brandon');\\nchmod('-R', 'a-w', '/Users/brandon');\\n</code></pre>\\n<p>Alters the permissions of a file or directory by either specifying the\\nabsolute permissions in octal form or expressing the changes in symbols.\\nThis command tries to mimic the POSIX behavior as much as possible.\\nNotable exceptions:</p>\\n<ul>\\n<li>In symbolic modes, 'a-r' and '-r' are identical.  No consideration is\\ngiven to the umask.</li>\\n<li>There is no \\\"quiet\\\" option since default behavior is to run silent.</li>\\n</ul>\\n<h3>cp([options,] source [, source ...], dest)</h3>\\n<h3>cp([options,] source_array, dest)</h3>\\n<p>Available options:</p>\\n<ul>\\n<li><code>-f</code>: force (default behavior)</li>\\n<li><code>-n</code>: no-clobber</li>\\n<li><code>-u</code>: only copy if source is newer than dest</li>\\n<li><code>-r</code>, <code>-R</code>: recursive</li>\\n<li><code>-L</code>: follow symlinks</li>\\n<li><code>-P</code>: don't follow symlinks</li>\\n</ul>\\n<p>Examples:</p>\\n<pre><code class=\\\"language-javascript\\\">cp('file1', 'dir1');\\ncp('-R', 'path/to/dir/', '~/newCopy/');\\ncp('-Rf', '/tmp/*', '/usr/local/*', '/home/tmp');\\ncp('-Rf', ['/tmp/*', '/usr/local/*'], '/home/tmp'); // same as above\\n</code></pre>\\n<p>Copies files.</p>\\n<h3>pushd(<a href=\\\"\\\">options,</a>)</h3>\\n<p>Available options:</p>\\n<ul>\\n<li><code>-n</code>: Suppresses the normal change of directory when adding directories to the stack, so that only the stack is manipulated.</li>\\n</ul>\\n<p>Arguments:</p>\\n<ul>\\n<li><code>dir</code>: Makes the current working directory be the top of the stack, and then executes the equivalent of <code>cd dir</code>.</li>\\n<li><code>+N</code>: Brings the Nth directory (counting from the left of the list printed by dirs, starting with zero) to the top of the list by rotating the stack.</li>\\n<li><code>-N</code>: Brings the Nth directory (counting from the right of the list printed by dirs, starting with zero) to the top of the list by rotating the stack.</li>\\n</ul>\\n<p>Examples:</p>\\n<pre><code class=\\\"language-javascript\\\">// process.cwd() === '/usr'\\npushd('/etc'); // Returns /etc /usr\\npushd('+1');   // Returns /usr /etc\\n</code></pre>\\n<p>Save the current directory on the top of the directory stack and then cd to <code>dir</code>. With no arguments, pushd exchanges the top two directories. Returns an array of paths in the stack.</p>\\n<h3>popd(<a href=\\\"\\\">options,</a>)</h3>\\n<p>Available options:</p>\\n<ul>\\n<li><code>-n</code>: Suppresses the normal change of directory when removing directories from the stack, so that only the stack is manipulated.</li>\\n</ul>\\n<p>Arguments:</p>\\n<ul>\\n<li><code>+N</code>: Removes the Nth directory (counting from the left of the list printed by dirs), starting with zero.</li>\\n<li><code>-N</code>: Removes the Nth directory (counting from the right of the list printed by dirs), starting with zero.</li>\\n</ul>\\n<p>Examples:</p>\\n<pre><code class=\\\"language-javascript\\\">echo(process.cwd()); // '/usr'\\npushd('/etc');       // '/etc /usr'\\necho(process.cwd()); // '/etc'\\npopd();              // '/usr'\\necho(process.cwd()); // '/usr'\\n</code></pre>\\n<p>When no arguments are given, popd removes the top directory from the stack and performs a cd to the new top directory. The elements are numbered from 0 starting at the first directory listed with dirs; i.e., popd is equivalent to popd +0. Returns an array of paths in the stack.</p>\\n<h3>dirs([options | '+N' | '-N'])</h3>\\n<p>Available options:</p>\\n<ul>\\n<li><code>-c</code>: Clears the directory stack by deleting all of the elements.</li>\\n</ul>\\n<p>Arguments:</p>\\n<ul>\\n<li><code>+N</code>: Displays the Nth directory (counting from the left of the list printed by dirs when invoked without options), starting with zero.</li>\\n<li><code>-N</code>: Displays the Nth directory (counting from the right of the list printed by dirs when invoked without options), starting with zero.</li>\\n</ul>\\n<p>Display the list of currently remembered directories. Returns an array of paths in the stack, or a single path if +N or -N was specified.</p>\\n<p>See also: pushd, popd</p>\\n<h3>echo([options,] string [, string ...])</h3>\\n<p>Available options:</p>\\n<ul>\\n<li><code>-e</code>: interpret backslash escapes (default)</li>\\n</ul>\\n<p>Examples:</p>\\n<pre><code class=\\\"language-javascript\\\">echo('hello world');\\nvar str = echo('hello world');\\n</code></pre>\\n<p>Prints string to stdout, and returns string with additional utility methods\\nlike <code>.to()</code>.</p>\\n<h3>exec(command <a href=\\\"\\\">, options</a>)</h3>\\n<p>Available options (all <code>false</code> by default):</p>\\n<ul>\\n<li><code>async</code>: Asynchronous execution. If a callback is provided, it will be set to\\n<code>true</code>, regardless of the passed value.</li>\\n<li><code>silent</code>: Do not echo program output to console.</li>\\n<li>and any option available to Node.js's\\n<a href=\\\"https://nodejs.org/api/child_process.html#child_process_child_process_exec_command_options_callback\\\">child_process.exec()</a></li>\\n</ul>\\n<p>Examples:</p>\\n<pre><code class=\\\"language-javascript\\\">var version = exec('node --version', {silent:true}).stdout;\\n\\nvar child = exec('some_long_running_process', {async:true});\\nchild.stdout.on('data', function(data) {\\n  /* ... do something with data ... */\\n});\\n\\nexec('some_long_running_process', function(code, stdout, stderr) {\\n  console.log('Exit code:', code);\\n  console.log('Program output:', stdout);\\n  console.log('Program stderr:', stderr);\\n});\\n</code></pre>\\n<p>Executes the given <code>command</code> <em>synchronously</em>, unless otherwise specified.  When in synchronous\\nmode, this returns a ShellString (compatible with ShellJS v0.6.x, which returns an object\\nof the form <code>{ code:..., stdout:... , stderr:... }</code>). Otherwise, this returns the child process\\nobject, and the <code>callback</code> gets the arguments <code>(code, stdout, stderr)</code>.</p>\\n<p>Not seeing the behavior you want? <code>exec()</code> runs everything through <code>sh</code>\\nby default (or <code>cmd.exe</code> on Windows), which differs from <code>bash</code>. If you\\nneed bash-specific behavior, try out the <code>{shell: 'path/to/bash'}</code> option.</p>\\n<p><strong>Note:</strong> For long-lived processes, it's best to run <code>exec()</code> asynchronously as\\nthe current synchronous implementation uses a lot of CPU. This should be getting\\nfixed soon.</p>\\n<h3>find(path [, path ...])</h3>\\n<h3>find(path_array)</h3>\\n<p>Examples:</p>\\n<pre><code class=\\\"language-javascript\\\">find('src', 'lib');\\nfind(['src', 'lib']); // same as above\\nfind('.').filter(function(file) { return file.match(/\\\\.js$/); });\\n</code></pre>\\n<p>Returns array of all files (however deep) in the given paths.</p>\\n<p>The main difference from <code>ls('-R', path)</code> is that the resulting file names\\ninclude the base directories, e.g. <code>lib/resources/file1</code> instead of just <code>file1</code>.</p>\\n<h3>grep([options,] regex_filter, file [, file ...])</h3>\\n<h3>grep([options,] regex<em>filter, file</em>array)</h3>\\n<p>Available options:</p>\\n<ul>\\n<li><code>-v</code>: Inverse the sense of the regex and print the lines not matching the criteria.</li>\\n<li><code>-l</code>: Print only filenames of matching files</li>\\n</ul>\\n<p>Examples:</p>\\n<pre><code class=\\\"language-javascript\\\">grep('-v', 'GLOBAL_VARIABLE', '*.js');\\ngrep('GLOBAL_VARIABLE', '*.js');\\n</code></pre>\\n<p>Reads input string from given files and returns a string containing all lines of the\\nfile that match the given <code>regex_filter</code>.</p>\\n<h3>head([{'-n': &#x3C;num>},] file [, file ...])</h3>\\n<h3>head([{'-n': &#x3C;num>},] file_array)</h3>\\n<p>Available options:</p>\\n<ul>\\n<li><code>-n &#x3C;num></code>: Show the first <code>&#x3C;num></code> lines of the files</li>\\n</ul>\\n<p>Examples:</p>\\n<pre><code class=\\\"language-javascript\\\">var str = head({'-n': 1}, 'file*.txt');\\nvar str = head('file1', 'file2');\\nvar str = head(['file1', 'file2']); // same as above\\n</code></pre>\\n<p>Read the start of a file.</p>\\n<h3>ln([options,] source, dest)</h3>\\n<p>Available options:</p>\\n<ul>\\n<li><code>-s</code>: symlink</li>\\n<li><code>-f</code>: force</li>\\n</ul>\\n<p>Examples:</p>\\n<pre><code class=\\\"language-javascript\\\">ln('file', 'newlink');\\nln('-sf', 'file', 'existing');\\n</code></pre>\\n<p>Links source to dest. Use -f to force the link, should dest already exist.</p>\\n<h3>ls(<a href=\\\"\\\">options,</a>)</h3>\\n<h3>ls([options,] path_array)</h3>\\n<p>Available options:</p>\\n<ul>\\n<li><code>-R</code>: recursive</li>\\n<li><code>-A</code>: all files (include files beginning with <code>.</code>, except for <code>.</code> and <code>..</code>)</li>\\n<li><code>-L</code>: follow symlinks</li>\\n<li><code>-d</code>: list directories themselves, not their contents</li>\\n<li><code>-l</code>: list objects representing each file, each with fields containing <code>ls -l</code> output fields. See\\n<a href=\\\"https://nodejs.org/api/fs.html#fs_class_fs_stats\\\">fs.Stats</a>\\nfor more info</li>\\n</ul>\\n<p>Examples:</p>\\n<pre><code class=\\\"language-javascript\\\">ls('projs/*.js');\\nls('-R', '/users/me', '/tmp');\\nls('-R', ['/users/me', '/tmp']); // same as above\\nls('-l', 'file.txt'); // { name: 'file.txt', mode: 33188, nlink: 1, ...}\\n</code></pre>\\n<p>Returns array of files in the given path, or in current directory if no path provided.</p>\\n<h3>mkdir([options,] dir [, dir ...])</h3>\\n<h3>mkdir([options,] dir_array)</h3>\\n<p>Available options:</p>\\n<ul>\\n<li><code>-p</code>: full path (will create intermediate dirs if necessary)</li>\\n</ul>\\n<p>Examples:</p>\\n<pre><code class=\\\"language-javascript\\\">mkdir('-p', '/tmp/a/b/c/d', '/tmp/e/f/g');\\nmkdir('-p', ['/tmp/a/b/c/d', '/tmp/e/f/g']); // same as above\\n</code></pre>\\n<p>Creates directories.</p>\\n<h3>mv([options ,] source [, source ...], dest')</h3>\\n<h3>mv([options ,] source_array, dest')</h3>\\n<p>Available options:</p>\\n<ul>\\n<li><code>-f</code>: force (default behavior)</li>\\n<li><code>-n</code>: no-clobber</li>\\n</ul>\\n<p>Examples:</p>\\n<pre><code class=\\\"language-javascript\\\">mv('-n', 'file', 'dir/');\\nmv('file1', 'file2', 'dir/');\\nmv(['file1', 'file2'], 'dir/'); // same as above\\n</code></pre>\\n<p>Moves files.</p>\\n<h3>pwd()</h3>\\n<p>Returns the current directory.</p>\\n<h3>rm([options,] file [, file ...])</h3>\\n<h3>rm([options,] file_array)</h3>\\n<p>Available options:</p>\\n<ul>\\n<li><code>-f</code>: force</li>\\n<li><code>-r, -R</code>: recursive</li>\\n</ul>\\n<p>Examples:</p>\\n<pre><code class=\\\"language-javascript\\\">rm('-rf', '/tmp/*');\\nrm('some_file.txt', 'another_file.txt');\\nrm(['some_file.txt', 'another_file.txt']); // same as above\\n</code></pre>\\n<p>Removes files.</p>\\n<h3>sed([options,] search_regex, replacement, file [, file ...])</h3>\\n<h3>sed([options,] search<em>regex, replacement, file</em>array)</h3>\\n<p>Available options:</p>\\n<ul>\\n<li><code>-i</code>: Replace contents of 'file' in-place. <em>Note that no backups will be created!</em></li>\\n</ul>\\n<p>Examples:</p>\\n<pre><code class=\\\"language-javascript\\\">sed('-i', 'PROGRAM_VERSION', 'v0.1.3', 'source.js');\\nsed(/.*DELETE_THIS_LINE.*\\\\n/, '', 'source.js');\\n</code></pre>\\n<p>Reads an input string from <code>files</code> and performs a JavaScript <code>replace()</code> on the input\\nusing the given search regex and replacement string or function. Returns the new string after replacement.</p>\\n<p>Note:</p>\\n<p>Like unix <code>sed</code>, ShellJS <code>sed</code> supports capture groups. Capture groups are specified\\nusing the <code>$n</code> syntax:</p>\\n<pre><code class=\\\"language-javascript\\\">sed(/(\\\\w+)\\\\s(\\\\w+)/, '$2, $1', 'file.txt');\\n</code></pre>\\n<h3>set(options)</h3>\\n<p>Available options:</p>\\n<ul>\\n<li><code>+/-e</code>: exit upon error (<code>config.fatal</code>)</li>\\n<li><code>+/-v</code>: verbose: show all commands (<code>config.verbose</code>)</li>\\n<li><code>+/-f</code>: disable filename expansion (globbing)</li>\\n</ul>\\n<p>Examples:</p>\\n<pre><code class=\\\"language-javascript\\\">set('-e'); // exit upon first error\\nset('+e'); // this undoes a \\\"set('-e')\\\"\\n</code></pre>\\n<p>Sets global configuration variables</p>\\n<h3>sort([options,] file [, file ...])</h3>\\n<h3>sort([options,] file_array)</h3>\\n<p>Available options:</p>\\n<ul>\\n<li><code>-r</code>: Reverse the result of comparisons</li>\\n<li><code>-n</code>: Compare according to numerical value</li>\\n</ul>\\n<p>Examples:</p>\\n<pre><code class=\\\"language-javascript\\\">sort('foo.txt', 'bar.txt');\\nsort('-r', 'foo.txt');\\n</code></pre>\\n<p>Return the contents of the files, sorted line-by-line. Sorting multiple\\nfiles mixes their content, just like unix sort does.</p>\\n<h3>tail([{'-n': &#x3C;num>},] file [, file ...])</h3>\\n<h3>tail([{'-n': &#x3C;num>},] file_array)</h3>\\n<p>Available options:</p>\\n<ul>\\n<li><code>-n &#x3C;num></code>: Show the last <code>&#x3C;num></code> lines of the files</li>\\n</ul>\\n<p>Examples:</p>\\n<pre><code class=\\\"language-javascript\\\">var str = tail({'-n': 1}, 'file*.txt');\\nvar str = tail('file1', 'file2');\\nvar str = tail(['file1', 'file2']); // same as above\\n</code></pre>\\n<p>Read the end of a file.</p>\\n<h3>tempdir()</h3>\\n<p>Examples:</p>\\n<pre><code class=\\\"language-javascript\\\">var tmp = tempdir(); // \\\"/tmp\\\" for most *nix platforms\\n</code></pre>\\n<p>Searches and returns string containing a writeable, platform-dependent temporary directory.\\nFollows Python's <a href=\\\"http://docs.python.org/library/tempfile.html#tempfile.tempdir\\\">tempfile algorithm</a>.</p>\\n<h3>test(expression)</h3>\\n<p>Available expression primaries:</p>\\n<ul>\\n<li><code>'-b', 'path'</code>: true if path is a block device</li>\\n<li><code>'-c', 'path'</code>: true if path is a character device</li>\\n<li><code>'-d', 'path'</code>: true if path is a directory</li>\\n<li><code>'-e', 'path'</code>: true if path exists</li>\\n<li><code>'-f', 'path'</code>: true if path is a regular file</li>\\n<li><code>'-L', 'path'</code>: true if path is a symbolic link</li>\\n<li><code>'-p', 'path'</code>: true if path is a pipe (FIFO)</li>\\n<li><code>'-S', 'path'</code>: true if path is a socket</li>\\n</ul>\\n<p>Examples:</p>\\n<pre><code class=\\\"language-javascript\\\">if (test('-d', path)) { /* do something with dir */ };\\nif (!test('-f', path)) continue; // skip if it's a regular file\\n</code></pre>\\n<p>Evaluates expression using the available primaries and returns corresponding value.</p>\\n<h3>ShellString.prototype.to(file)</h3>\\n<p>Examples:</p>\\n<pre><code class=\\\"language-javascript\\\">cat('input.txt').to('output.txt');\\n</code></pre>\\n<p>Analogous to the redirection operator <code>></code> in Unix, but works with\\nShellStrings (such as those returned by <code>cat</code>, <code>grep</code>, etc). <em>Like Unix\\nredirections, <code>to()</code> will overwrite any existing file!</em></p>\\n<h3>ShellString.prototype.toEnd(file)</h3>\\n<p>Examples:</p>\\n<pre><code class=\\\"language-javascript\\\">cat('input.txt').toEnd('output.txt');\\n</code></pre>\\n<p>Analogous to the redirect-and-append operator <code>>></code> in Unix, but works with\\nShellStrings (such as those returned by <code>cat</code>, <code>grep</code>, etc).</p>\\n<h3>touch([options,] file [, file ...])</h3>\\n<h3>touch([options,] file_array)</h3>\\n<p>Available options:</p>\\n<ul>\\n<li><code>-a</code>: Change only the access time</li>\\n<li><code>-c</code>: Do not create any files</li>\\n<li><code>-m</code>: Change only the modification time</li>\\n<li><code>-d DATE</code>: Parse DATE and use it instead of current time</li>\\n<li><code>-r FILE</code>: Use FILE's times instead of current time</li>\\n</ul>\\n<p>Examples:</p>\\n<pre><code class=\\\"language-javascript\\\">touch('source.js');\\ntouch('-c', '/path/to/some/dir/source.js');\\ntouch({ '-r': FILE }, '/path/to/some/dir/source.js');\\n</code></pre>\\n<p>Update the access and modification times of each FILE to the current time.\\nA FILE argument that does not exist is created empty, unless -c is supplied.\\nThis is a partial implementation of <em><a href=\\\"http://linux.die.net/man/1/touch\\\">touch(1)</a></em>.</p>\\n<h3>uniq([options,]input, [output]])</h3>\\n<p>Available options:</p>\\n<ul>\\n<li><code>-i</code>: Ignore case while comparing</li>\\n<li><code>-c</code>: Prefix lines by the number of occurrences</li>\\n<li><code>-d</code>: Only print duplicate lines, one for each group of identical lines</li>\\n</ul>\\n<p>Examples:</p>\\n<pre><code class=\\\"language-javascript\\\">uniq('foo.txt');\\nuniq('-i', 'foo.txt');\\nuniq('-cd', 'foo.txt', 'bar.txt');\\n</code></pre>\\n<p>Filter adjacent matching lines from input</p>\\n<h3>which(command)</h3>\\n<p>Examples:</p>\\n<pre><code class=\\\"language-javascript\\\">var nodeExec = which('node');\\n</code></pre>\\n<p>Searches for <code>command</code> in the system's PATH. On Windows, this uses the\\n<code>PATHEXT</code> variable to append the extension if it's not already executable.\\nReturns string containing the absolute path to the command.</p>\\n<h3>exit(code)</h3>\\n<p>Exits the current process with the given exit code.</p>\\n<h3>error()</h3>\\n<p>Tests if error occurred in the last command. Returns a truthy value if an\\nerror returned and a falsy value otherwise.</p>\\n<p><strong>Note</strong>: do not rely on the\\nreturn value to be an error message. If you need the last error message, use\\nthe <code>.stderr</code> attribute from the last command's return value instead.</p>\\n<h3>ShellString(str)</h3>\\n<p>Examples:</p>\\n<pre><code class=\\\"language-javascript\\\">var foo = ShellString('hello world');\\n</code></pre>\\n<p>Turns a regular string into a string-like object similar to what each\\ncommand returns. This has special methods, like <code>.to()</code> and <code>.toEnd()</code></p>\\n<h3>env['VAR_NAME']</h3>\\n<p>Object containing environment variables (both getter and setter). Shortcut\\nto process.env.</p>\\n<h3>Pipes</h3>\\n<p>Examples:</p>\\n<pre><code class=\\\"language-javascript\\\">grep('foo', 'file1.txt', 'file2.txt').sed(/o/g, 'a').to('output.txt');\\necho('files with o\\\\'s in the name:\\\\n' + ls().grep('o'));\\ncat('test.js').exec('node'); // pipe to exec() call\\n</code></pre>\\n<p>Commands can send their output to another command in a pipe-like fashion.\\n<code>sed</code>, <code>grep</code>, <code>cat</code>, <code>exec</code>, <code>to</code>, and <code>toEnd</code> can appear on the right-hand\\nside of a pipe. Pipes can be chained.</p>\\n<h2>Configuration</h2>\\n<h3>config.silent</h3>\\n<p>Example:</p>\\n<pre><code class=\\\"language-javascript\\\">var sh = require('shelljs');\\nvar silentState = sh.config.silent; // save old silent state\\nsh.config.silent = true;\\n/* ... */\\nsh.config.silent = silentState; // restore old silent state\\n</code></pre>\\n<p>Suppresses all command output if <code>true</code>, except for <code>echo()</code> calls.\\nDefault is <code>false</code>.</p>\\n<h3>config.fatal</h3>\\n<p>Example:</p>\\n<pre><code class=\\\"language-javascript\\\">require('shelljs/global');\\nconfig.fatal = true; // or set('-e');\\ncp('this_file_does_not_exist', '/dev/null'); // throws Error here\\n/* more commands... */\\n</code></pre>\\n<p>If <code>true</code> the script will throw a Javascript error when any shell.js\\ncommand encounters an error. Default is <code>false</code>. This is analogous to\\nBash's <code>set -e</code></p>\\n<h3>config.verbose</h3>\\n<p>Example:</p>\\n<pre><code class=\\\"language-javascript\\\">config.verbose = true; // or set('-v');\\ncd('dir/');\\nrm('-rf', 'foo.txt', 'bar.txt');\\nexec('echo hello');\\n</code></pre>\\n<p>Will print each command as follows:</p>\\n<pre><code>cd dir/\\nrm -rf foo.txt bar.txt\\nexec echo hello\\n</code></pre>\\n<h3>config.globOptions</h3>\\n<p>Example:</p>\\n<pre><code class=\\\"language-javascript\\\">config.globOptions = {nodir: true};\\n</code></pre>\\n<p>Use this value for calls to <code>glob.sync()</code> instead of the default options.</p>\\n<h3>config.reset()</h3>\\n<p>Example:</p>\\n<pre><code class=\\\"language-javascript\\\">var shell = require('shelljs');\\n// Make changes to shell.config, and do stuff...\\n/* ... */\\nshell.config.reset(); // reset to original state\\n// Do more stuff, but with original settings\\n/* ... */\\n</code></pre>\\n<p>Reset shell.config to the defaults:</p>\\n<pre><code class=\\\"language-javascript\\\">{\\n  fatal: false,\\n  globOptions: {},\\n  maxdepth: 255,\\n  noglob: false,\\n  silent: false,\\n  verbose: false,\\n}\\n</code></pre>\\n<h2>Team</h2>\\n<table>\\n<thead>\\n<tr>\\n<th align=\\\"center\\\"><a href=\\\"https://github.com/nfischer\\\"><img src=\\\"https://avatars.githubusercontent.com/u/5801521?s=130\\\" alt=\\\"Nate Fischer\\\"></a></th>\\n<th align=\\\"center\\\"><a href=\\\"http://github.com/freitagbr\\\"><img src=\\\"https://avatars1.githubusercontent.com/u/5988055?v=3&#x26;s=130\\\" alt=\\\"Brandon Freitag\\\"></a></th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td align=\\\"center\\\"><a href=\\\"https://github.com/nfischer\\\">Nate Fischer</a></td>\\n<td align=\\\"center\\\"><a href=\\\"http://github.com/freitagbr\\\">Brandon Freitag</a></td>\\n</tr>\\n</tbody>\\n</table>\",\"docPath\":\"argo-ci/node_modules/shelljs/readme\",\"proj\":\"argo-ci\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/docs-argo-ci-node-modules-shelljs.json\n// module id = 3165\n// module chunks = 76348042125409"],"sourceRoot":""}