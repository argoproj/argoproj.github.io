webpackJsonp([0xea5d27cb95cb],{2302:function(e,o){e.exports={pathContext:{docHtml:'<h1>ansi-styles <a href="https://travis-ci.org/chalk/ansi-styles"><img src="https://travis-ci.org/chalk/ansi-styles.svg?branch=master" alt="Build Status"></a></h1>\n<blockquote>\n<p><a href="http://en.wikipedia.org/wiki/ANSI_escape_code#Colors_and_Styles">ANSI escape codes</a> for styling strings in the terminal</p>\n</blockquote>\n<p>You probably want the higher-level <a href="https://github.com/chalk/chalk">chalk</a> module for styling your strings.</p>\n<img src="https://cdn.rawgit.com/chalk/ansi-styles/8261697c95bf34b6c7767e2cbe9941a851d59385/screenshot.svg" width="900">\n<h2>Install</h2>\n<pre><code>$ npm install ansi-styles\n</code></pre>\n<h2>Usage</h2>\n<pre><code class="language-js">const style = require(\'ansi-styles\');\n\nconsole.log(`${style.green.open}Hello world!${style.green.close}`);\n\n\n// Color conversion between 16/256/truecolor\n// NOTE: If conversion goes to 16 colors or 256 colors, the original color\n//       may be degraded to fit that color palette. This means terminals\n//       that do not support 16 million colors will best-match the\n//       original color.\nconsole.log(style.bgColor.ansi.hsl(120, 80, 72) + \'Hello world!\' + style.bgColor.close);\nconsole.log(style.color.ansi256.rgb(199, 20, 250) + \'Hello world!\' + style.color.close);\nconsole.log(style.color.ansi16m.hex(\'#ABCDEF\') + \'Hello world!\' + style.color.close);\n</code></pre>\n<h2>API</h2>\n<p>Each style has an <code>open</code> and <code>close</code> property.</p>\n<h2>Styles</h2>\n<h3>Modifiers</h3>\n<ul>\n<li><code>reset</code></li>\n<li><code>bold</code></li>\n<li><code>dim</code></li>\n<li><code>italic</code> <em>(Not widely supported)</em></li>\n<li><code>underline</code></li>\n<li><code>inverse</code></li>\n<li><code>hidden</code></li>\n<li><code>strikethrough</code> <em>(Not widely supported)</em></li>\n</ul>\n<h3>Colors</h3>\n<ul>\n<li><code>black</code></li>\n<li><code>red</code></li>\n<li><code>green</code></li>\n<li><code>yellow</code></li>\n<li><code>blue</code></li>\n<li><code>magenta</code></li>\n<li><code>cyan</code></li>\n<li><code>white</code></li>\n<li><code>gray</code> ("bright black")</li>\n<li><code>redBright</code></li>\n<li><code>greenBright</code></li>\n<li><code>yellowBright</code></li>\n<li><code>blueBright</code></li>\n<li><code>magentaBright</code></li>\n<li><code>cyanBright</code></li>\n<li><code>whiteBright</code></li>\n</ul>\n<h3>Background colors</h3>\n<ul>\n<li><code>bgBlack</code></li>\n<li><code>bgRed</code></li>\n<li><code>bgGreen</code></li>\n<li><code>bgYellow</code></li>\n<li><code>bgBlue</code></li>\n<li><code>bgMagenta</code></li>\n<li><code>bgCyan</code></li>\n<li><code>bgWhite</code></li>\n<li><code>bgBlackBright</code></li>\n<li><code>bgRedBright</code></li>\n<li><code>bgGreenBright</code></li>\n<li><code>bgYellowBright</code></li>\n<li><code>bgBlueBright</code></li>\n<li><code>bgMagentaBright</code></li>\n<li><code>bgCyanBright</code></li>\n<li><code>bgWhiteBright</code></li>\n</ul>\n<h2>Advanced usage</h2>\n<p>By default, you get a map of styles, but the styles are also available as groups. They are non-enumerable so they don\'t show up unless you access them explicitly. This makes it easier to expose only a subset in a higher-level module.</p>\n<ul>\n<li><code>style.modifier</code></li>\n<li><code>style.color</code></li>\n<li><code>style.bgColor</code></li>\n</ul>\n<h6>Example</h6>\n<pre><code class="language-js">console.log(style.color.green.open);\n</code></pre>\n<p>Raw escape codes (i.e. without the CSI escape prefix <code>\\u001B[</code> and render mode postfix <code>m</code>) are available under <code>style.codes</code>, which returns a <code>Map</code> with the open codes as keys and close codes as values.</p>\n<h6>Example</h6>\n<pre><code class="language-js">console.log(style.codes.get(36));\n//=> 39\n</code></pre>\n<h2><a href="https://gist.github.com/XVilka/8346728">256 / 16 million (TrueColor) support</a></h2>\n<p><code>ansi-styles</code> uses the <a href="https://github.com/Qix-/color-convert"><code>color-convert</code></a> package to allow for converting between various colors and ANSI escapes, with support for 256 and 16 million colors.</p>\n<p>To use these, call the associated conversion function with the intended output, for example:</p>\n<pre><code class="language-js">style.color.ansi.rgb(100, 200, 15); // RGB to 16 color ansi foreground code\nstyle.bgColor.ansi.rgb(100, 200, 15); // RGB to 16 color ansi background code\n\nstyle.color.ansi256.hsl(120, 100, 60); // HSL to 256 color ansi foreground code\nstyle.bgColor.ansi256.hsl(120, 100, 60); // HSL to 256 color ansi foreground code\n\nstyle.color.ansi16m.hex(\'#C0FFEE\'); // Hex (RGB) to 16 million color foreground code\nstyle.bgColor.ansi16m.hex(\'#C0FFEE\'); // Hex (RGB) to 16 million color background code\n</code></pre>\n<h2>Related</h2>\n<ul>\n<li><a href="https://github.com/sindresorhus/ansi-escapes">ansi-escapes</a> - ANSI escape codes for manipulating the terminal</li>\n</ul>\n<h2>Maintainers</h2>\n<ul>\n<li><a href="https://github.com/sindresorhus">Sindre Sorhus</a></li>\n<li><a href="https://github.com/qix-">Josh Junon</a></li>\n</ul>\n<h2>License</h2>\n<p>MIT</p>',docPath:"argo-ci/node_modules/express-winston/node_modules/ansi-styles/readme",proj:"argo-ci"}}}});
//# sourceMappingURL=path---docs-argo-ci-node-modules-express-winston-node-modules-ansi-styles-readme-html-8fe8a88fee61145adda6.js.map