webpackJsonp([6911981007179],{3053:function(n,e){n.exports={pathContext:{docHtml:'<h2>Promisify Node</h2>\n<p><strong>Stable: 0.1.5</strong> </p>\n<p><a href="https://travis-ci.org/nodegit/promisify-node"><img src="https://travis-ci.org/nodegit/promisify-node.png?branch=master" alt="Build\nStatus"></a></p>\n<p>Maintained by Tim Branyen <a href="http://twitter.com/tbranyen">@tbranyen</a>.</p>\n<p>Wraps Node modules, functions, and methods written in the Node-callback style\nto return Promises.</p>\n<h3>Install</h3>\n<pre><code class="language-bash">npm install promisify-node\n</code></pre>\n<h3>Examples</h3>\n<p>Wrap entire Node modules recursively:</p>\n<pre><code class="language-javascript">var promisify = require("promisify-node");\nvar fs = promisify("fs");\n\n// This function has been identified as an asynchronous function so it has\n// been automatically wrapped.\nfs.readFile("/etc/passwd").then(function(contents) {\n  console.log(contents);\n});\n</code></pre>\n<p>Wrap a single function:</p>\n<pre><code class="language-javascript">var promisify = require("promisify-node");\n\nfunction async(callback) {\n  callback(null, true);\n}\n\n// Convert the function to return a Promise.\nvar wrap = promisify(async);\n\n// Invoke the newly wrapped function.\nwrap().then(function(value) {\n  console.log(value === true);\n});\n</code></pre>\n<p>Wrap a method on an Object:</p>\n<pre><code class="language-javascript">var promisify = require("promisify-node");\n\nvar myObj = {\n  myMethod: function(a, b, cb) {\n    cb(a, b);\n  }\n};\n\n// No need to return anything as the methods will be replaced on the object.\npromisify(myObj);\n\n// Intentionally cause a failure by passing an object and inspect the message.\nmyObj.myMethod({ msg: "Failure!" }, null).then(null, function(err) {\n  console.log(err.msg);\n});\n</code></pre>\n<p>Wrap without mutating the original:</p>\n<pre><code class="language-javascript">var promisify = require("promisify-node");\n\nvar myObj = {\n  myMethod: function(a, b, cb) {\n    cb(a, b);\n  }\n};\n\n// Store the original method to check later\nvar originalMethod = myObj.myMethod;\n\n// Now store the result, since the \'true\' value means it won\'t mutate \'myObj\'.\nvar promisifiedObj = promisify(myObj, undefined, true);\n\n// Intentionally cause a failure by passing an object and inspect the message.\npromisifiedObj.myMethod({ msg: "Failure!" }, null).then(null, function(err) {\n  console.log(err.msg);\n});\n\n// The original method is still intact\nassert(myObj.myMethod === originalMethod);\nassert(promisifiedObj.myMethod !== myObj.myMethod);\n</code></pre>\n<h3>Tests</h3>\n<p>Run the tests after installing dependencies with:</p>\n<pre><code class="language-bash">npm test\n</code></pre>',docPath:"argo-ci/node_modules/promisify-node/readme",proj:"argo-ci"}}}});
//# sourceMappingURL=path---docs-argo-ci-node-modules-promisify-node-9fdad78682d74bf89bfe.js.map