webpackJsonp([0x808ceedb909b],{2640:function(e,t){e.exports={pathContext:{docHtml:"<h1>get-stream <a href=\"https://travis-ci.org/sindresorhus/get-stream\"><img src=\"https://travis-ci.org/sindresorhus/get-stream.svg?branch=master\" alt=\"Build Status\"></a></h1>\n<blockquote>\n<p>Get a stream as a string, buffer, or array</p>\n</blockquote>\n<h2>Install</h2>\n<pre><code>$ npm install --save get-stream\n</code></pre>\n<h2>Usage</h2>\n<pre><code class=\"language-js\">const fs = require('fs');\nconst getStream = require('get-stream');\nconst stream = fs.createReadStream('unicorn.txt');\n\ngetStream(stream).then(str => {\n    console.log(str);\n    /*\n                  ,,))))))));,\n               __)))))))))))))),\n    \\|/       -\\(((((''''((((((((.\n    -*-==//////((''  .     `)))))),\n    /|\\      ))| o    ;-.    '(((((                                  ,(,\n             ( `|    /  )    ;))))'                               ,_))^;(~\n                |   |   |   ,))((((_     _____------~~~-.        %,;(;(>';'~\n                o_);   ;    )))(((` ~---~  `::           \\      %%~~)(v;(`('~\n                      ;    ''''````         `:       `:::|\\,__,%%    );`'; ~\n                     |   _                )     /      `:|`----'     `-'\n               ______/\\/~    |                 /        /\n             /~;;.____/;;'  /          ___--,-(   `;;;/\n            / //  _;______;'------~~~~~    /;;/\\    /\n           //  | |                        / ;   \\;;,\\\n          (&#x3C;_  | ;                      /',/-----'  _>\n           \\_| ||_                     //~;~~~~~~~~~\n               `\\_|                   (,~~\n                                       \\~\\\n                                        ~~\n    */\n});\n</code></pre>\n<h2>API</h2>\n<p>The methods returns a promise that resolves when the <code>end</code> event fires on the stream, indicating that there is no more data to be read. The stream is switched to flowing mode.</p>\n<h3>getStream(stream, [options])</h3>\n<p>Get the <code>stream</code> as a string.</p>\n<h4>options</h4>\n<h5>encoding</h5>\n<p>Type: <code>string</code><br>\nDefault: <code>utf8</code></p>\n<p><a href=\"https://nodejs.org/api/buffer.html#buffer_buffer\">Encoding</a> of the incoming stream.</p>\n<h5>maxBuffer</h5>\n<p>Type: <code>number</code><br>\nDefault: <code>Infinity</code></p>\n<p>Maximum length of the returned string. If it exceeds this value before the stream ends, the promise will be rejected.</p>\n<h3>getStream.buffer(stream, [options])</h3>\n<p>Get the <code>stream</code> as a buffer.</p>\n<p>It honors the <code>maxBuffer</code> option as above, but it refers to byte length rather than string length.</p>\n<h3>getStream.array(stream, [options])</h3>\n<p>Get the <code>stream</code> as an array of values.</p>\n<p>It honors both the <code>maxBuffer</code> and <code>encoding</code> options. The behavior changes slightly based on the encoding chosen:</p>\n<ul>\n<li>\n<p>When <code>encoding</code> is unset, it assumes an <a href=\"https://nodesource.com/blog/understanding-object-streams/\">object mode stream</a> and collects values emitted from <code>stream</code> unmodified. In this case <code>maxBuffer</code> refers to the number of items in the array (not the sum of their sizes).</p>\n</li>\n<li>\n<p>When <code>encoding</code> is set to <code>buffer</code>, it collects an array of buffers. <code>maxBuffer</code> refers to the summed byte lengths of every buffer in the array.</p>\n</li>\n<li>\n<p>When <code>encoding</code> is set to anything else, it collects an array of strings. <code>maxBuffer</code> refers to the summed character lengths of every string in the array.</p>\n</li>\n</ul>\n<h2>Errors</h2>\n<p>If the input stream emits an <code>error</code> event, the promise will be rejected with the error. The buffered data will be attached to the <code>bufferedData</code> property of the error.</p>\n<pre><code class=\"language-js\">getStream(streamThatErrorsAtTheEnd('unicorn'))\n    .catch(err => {\n        console.log(err.bufferedData);\n        //=> 'unicorn'\n    });\n</code></pre>\n<h2>FAQ</h2>\n<h3>How is this different from <a href=\"https://github.com/maxogden/concat-stream\"><code>concat-stream</code></a>?</h3>\n<p>This module accepts a stream instead of being one and returns a promise instead of using a callback. The API is simpler and it only supports returning a string, buffer, or array. It doesn't have a fragile type inference. You explicitly choose what you want. And it doesn't depend on the huge <code>readable-stream</code> package.</p>\n<h2>Related</h2>\n<ul>\n<li><a href=\"https://github.com/sindresorhus/get-stdin\">get-stdin</a> - Get stdin as a string or buffer</li>\n</ul>\n<h2>License</h2>\n<p>MIT Â© <a href=\"https://sindresorhus.com\">Sindre Sorhus</a></p>",docPath:"argo-ci/node_modules/get-stream/readme",proj:"argo-ci"}}}});
//# sourceMappingURL=path---docs-argo-ci-node-modules-get-stream-b64320175725687ff4ff.js.map