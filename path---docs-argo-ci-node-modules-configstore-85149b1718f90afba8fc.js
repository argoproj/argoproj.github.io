webpackJsonp([31577166940987],{2191:function(e,n){e.exports={pathContext:{docHtml:"<h1>configstore <a href=\"https://travis-ci.org/yeoman/configstore\"><img src=\"https://travis-ci.org/yeoman/configstore.svg?branch=master\" alt=\"Build Status\"></a></h1>\n<blockquote>\n<p>Easily load and persist config without having to think about where and how</p>\n</blockquote>\n<p>Config is stored in a JSON file located in <code>$XDG_CONFIG_HOME</code> or <code>~/.config</code>.<br>\nExample: <code>~/.config/configstore/some-id.json</code></p>\n<p><em>If you need this for Electron, check out <a href=\"https://github.com/sindresorhus/electron-store\"><code>electron-store</code></a> instead.</em></p>\n<h2>Usage</h2>\n<pre><code class=\"language-js\">const Configstore = require('configstore');\nconst pkg = require('./package.json');\n\n// create a Configstore instance with an unique ID e.g.\n// Package name and optionally some default values\nconst conf = new Configstore(pkg.name, {foo: 'bar'});\n\nconsole.log(conf.get('foo'));\n//=> 'bar'\n\nconf.set('awesome', true);\nconsole.log(conf.get('awesome'));\n//=> true\n\n// Use dot-notation to access nested properties\nconf.set('bar.baz', true);\nconsole.log(conf.get('bar'));\n//=> {baz: true}\n\nconf.delete('awesome');\nconsole.log(conf.get('awesome'));\n//=> undefined\n</code></pre>\n<h2>API</h2>\n<h3>Configstore(packageName, [defaults], [options])</h3>\n<p>Returns a new instance.</p>\n<h4>packageName</h4>\n<p>Type: <code>string</code></p>\n<p>Name of your package.</p>\n<h4>defaults</h4>\n<p>Type: <code>Object</code></p>\n<p>Default config.</p>\n<h4>options</h4>\n<h5>globalConfigPath</h5>\n<p>Type: <code>boolean</code><br>\nDefault: <code>false</code></p>\n<p>Store the config at <code>$CONFIG/package-name/config.json</code> instead of the default <code>$CONFIG/configstore/package-name.json</code>. This is not recommended as you might end up conflicting with other tools, rendering the \"without having to think\" idea moot.</p>\n<h3>Instance</h3>\n<p>You can use <a href=\"https://github.com/sindresorhus/dot-prop\">dot-notation</a> in a <code>key</code> to access nested properties.</p>\n<h3>.set(key, value)</h3>\n<p>Set an item.</p>\n<h3>.set(object)</h3>\n<p>Set multiple items at once.</p>\n<h3>.get(key)</h3>\n<p>Get an item.</p>\n<h3>.has(key)</h3>\n<p>Check if an item exists.</p>\n<h3>.delete(key)</h3>\n<p>Delete an item.</p>\n<h3>.clear()</h3>\n<p>Delete all items.</p>\n<h3>.size</h3>\n<p>Get the item count.</p>\n<h3>.path</h3>\n<p>Get the path to the config file. Can be used to show the user where the config file is located or even better open it for them.</p>\n<h3>.all</h3>\n<p>Get all the config as an object or replace the current config with an object:</p>\n<pre><code class=\"language-js\">conf.all = {\n    hello: 'world'\n};\n</code></pre>\n<h2>License</h2>\n<p><a href=\"http://opensource.org/licenses/bsd-license.php\">BSD license</a><br>\nCopyright Google</p>",docPath:"argo-ci/node_modules/configstore/readme",proj:"argo-ci"}}}});
//# sourceMappingURL=path---docs-argo-ci-node-modules-configstore-85149b1718f90afba8fc.js.map