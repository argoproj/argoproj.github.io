{"version":3,"sources":["webpack:///path---docs-argo-ci-node-modules-encodeurl-readme-html-b0f38b4ee5e1792298dd.js","webpack:///./.cache/json/docs-argo-ci-node-modules-encodeurl-readme-html.json"],"names":["webpackJsonp","2269","module","exports","pathContext","docHtml","docPath","proj"],"mappings":"AAAAA,cAAc,iBAERC,KACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,aAAeC,QAAA,k2HAA49GC,QAAA,wCAAAC,KAAA","file":"path---docs-argo-ci-node-modules-encodeurl-readme-html-b0f38b4ee5e1792298dd.js","sourcesContent":["webpackJsonp([223119372911080],{\n\n/***/ 2269:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"pathContext\":{\"docHtml\":\"<h1>encodeurl</h1>\\n<p><a href=\\\"https://npmjs.org/package/encodeurl\\\"><img src=\\\"https://img.shields.io/npm/v/encodeurl.svg\\\" alt=\\\"NPM Version\\\"></a>\\n<a href=\\\"https://npmjs.org/package/encodeurl\\\"><img src=\\\"https://img.shields.io/npm/dm/encodeurl.svg\\\" alt=\\\"NPM Downloads\\\"></a>\\n<a href=\\\"https://nodejs.org/en/download\\\"><img src=\\\"https://img.shields.io/node/v/encodeurl.svg\\\" alt=\\\"Node.js Version\\\"></a>\\n<a href=\\\"https://travis-ci.org/pillarjs/encodeurl\\\"><img src=\\\"https://img.shields.io/travis/pillarjs/encodeurl.svg\\\" alt=\\\"Build Status\\\"></a>\\n<a href=\\\"https://coveralls.io/r/pillarjs/encodeurl?branch=master\\\"><img src=\\\"https://img.shields.io/coveralls/pillarjs/encodeurl.svg\\\" alt=\\\"Test Coverage\\\"></a></p>\\n<p>Encode a URL to a percent-encoded form, excluding already-encoded sequences</p>\\n<h2>Installation</h2>\\n<pre><code class=\\\"language-sh\\\">$ npm install encodeurl\\n</code></pre>\\n<h2>API</h2>\\n<pre><code class=\\\"language-js\\\">var encodeUrl = require('encodeurl')\\n</code></pre>\\n<h3>encodeUrl(url)</h3>\\n<p>Encode a URL to a percent-encoded form, excluding already-encoded sequences.</p>\\n<p>This function will take an already-encoded URL and encode all the non-URL\\ncode points (as UTF-8 byte sequences). This function will not encode the\\n\\\"%\\\" character unless it is not part of a valid sequence (<code>%20</code> will be\\nleft as-is, but <code>%foo</code> will be encoded as <code>%25foo</code>).</p>\\n<p>This encode is meant to be \\\"safe\\\" and does not throw errors. It will try as\\nhard as it can to properly encode the given URL, including replacing any raw,\\nunpaired surrogate pairs with the Unicode replacement character prior to\\nencoding.</p>\\n<p>This function is <em>similar</em> to the intrinsic function <code>encodeURI</code>, except it\\nwill not encode the <code>%</code> character if that is part of a valid sequence, will\\nnot encode <code>[</code> and <code>]</code> (for IPv6 hostnames) and will replace raw, unpaired\\nsurrogate pairs with the Unicode replacement character (instead of throwing).</p>\\n<h2>Examples</h2>\\n<h3>Encode a URL containing user-controled data</h3>\\n<pre><code class=\\\"language-js\\\">var encodeUrl = require('encodeurl')\\nvar escapeHtml = require('escape-html')\\n\\nhttp.createServer(function onRequest (req, res) {\\n  // get encoded form of inbound url\\n  var url = encodeUrl(req.url)\\n\\n  // create html message\\n  var body = '&#x3C;p>Location ' + escapeHtml(url) + ' not found&#x3C;/p>'\\n\\n  // send a 404\\n  res.statusCode = 404\\n  res.setHeader('Content-Type', 'text/html; charset=UTF-8')\\n  res.setHeader('Content-Length', String(Buffer.byteLength(body, 'utf-8')))\\n  res.end(body, 'utf-8')\\n})\\n</code></pre>\\n<h3>Encode a URL for use in a header field</h3>\\n<pre><code class=\\\"language-js\\\">var encodeUrl = require('encodeurl')\\nvar escapeHtml = require('escape-html')\\nvar url = require('url')\\n\\nhttp.createServer(function onRequest (req, res) {\\n  // parse inbound url\\n  var href = url.parse(req)\\n\\n  // set new host for redirect\\n  href.host = 'localhost'\\n  href.protocol = 'https:'\\n  href.slashes = true\\n\\n  // create location header\\n  var location = encodeUrl(url.format(href))\\n\\n  // create html message\\n  var body = '&#x3C;p>Redirecting to new site: ' + escapeHtml(location) + '&#x3C;/p>'\\n\\n  // send a 301\\n  res.statusCode = 301\\n  res.setHeader('Content-Type', 'text/html; charset=UTF-8')\\n  res.setHeader('Content-Length', String(Buffer.byteLength(body, 'utf-8')))\\n  res.setHeader('Location', location)\\n  res.end(body, 'utf-8')\\n})\\n</code></pre>\\n<h2>Testing</h2>\\n<pre><code class=\\\"language-sh\\\">$ npm test\\n$ npm run lint\\n</code></pre>\\n<h2>References</h2>\\n<ul>\\n<li><a href=\\\"https://tools.ietf.org/html/rfc3986\\\">RFC 3986: Uniform Resource Identifier (URI): Generic Syntax</a></li>\\n<li><a href=\\\"https://url.spec.whatwg.org/\\\">WHATWG URL Living Standard</a></li>\\n</ul>\\n<h2>License</h2>\\n<p><a href=\\\"LICENSE\\\">MIT</a></p>\",\"docPath\":\"argo-ci/node_modules/encodeurl/readme\",\"proj\":\"argo-ci\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---docs-argo-ci-node-modules-encodeurl-readme-html-b0f38b4ee5e1792298dd.js","module.exports = {\"pathContext\":{\"docHtml\":\"<h1>encodeurl</h1>\\n<p><a href=\\\"https://npmjs.org/package/encodeurl\\\"><img src=\\\"https://img.shields.io/npm/v/encodeurl.svg\\\" alt=\\\"NPM Version\\\"></a>\\n<a href=\\\"https://npmjs.org/package/encodeurl\\\"><img src=\\\"https://img.shields.io/npm/dm/encodeurl.svg\\\" alt=\\\"NPM Downloads\\\"></a>\\n<a href=\\\"https://nodejs.org/en/download\\\"><img src=\\\"https://img.shields.io/node/v/encodeurl.svg\\\" alt=\\\"Node.js Version\\\"></a>\\n<a href=\\\"https://travis-ci.org/pillarjs/encodeurl\\\"><img src=\\\"https://img.shields.io/travis/pillarjs/encodeurl.svg\\\" alt=\\\"Build Status\\\"></a>\\n<a href=\\\"https://coveralls.io/r/pillarjs/encodeurl?branch=master\\\"><img src=\\\"https://img.shields.io/coveralls/pillarjs/encodeurl.svg\\\" alt=\\\"Test Coverage\\\"></a></p>\\n<p>Encode a URL to a percent-encoded form, excluding already-encoded sequences</p>\\n<h2>Installation</h2>\\n<pre><code class=\\\"language-sh\\\">$ npm install encodeurl\\n</code></pre>\\n<h2>API</h2>\\n<pre><code class=\\\"language-js\\\">var encodeUrl = require('encodeurl')\\n</code></pre>\\n<h3>encodeUrl(url)</h3>\\n<p>Encode a URL to a percent-encoded form, excluding already-encoded sequences.</p>\\n<p>This function will take an already-encoded URL and encode all the non-URL\\ncode points (as UTF-8 byte sequences). This function will not encode the\\n\\\"%\\\" character unless it is not part of a valid sequence (<code>%20</code> will be\\nleft as-is, but <code>%foo</code> will be encoded as <code>%25foo</code>).</p>\\n<p>This encode is meant to be \\\"safe\\\" and does not throw errors. It will try as\\nhard as it can to properly encode the given URL, including replacing any raw,\\nunpaired surrogate pairs with the Unicode replacement character prior to\\nencoding.</p>\\n<p>This function is <em>similar</em> to the intrinsic function <code>encodeURI</code>, except it\\nwill not encode the <code>%</code> character if that is part of a valid sequence, will\\nnot encode <code>[</code> and <code>]</code> (for IPv6 hostnames) and will replace raw, unpaired\\nsurrogate pairs with the Unicode replacement character (instead of throwing).</p>\\n<h2>Examples</h2>\\n<h3>Encode a URL containing user-controled data</h3>\\n<pre><code class=\\\"language-js\\\">var encodeUrl = require('encodeurl')\\nvar escapeHtml = require('escape-html')\\n\\nhttp.createServer(function onRequest (req, res) {\\n  // get encoded form of inbound url\\n  var url = encodeUrl(req.url)\\n\\n  // create html message\\n  var body = '&#x3C;p>Location ' + escapeHtml(url) + ' not found&#x3C;/p>'\\n\\n  // send a 404\\n  res.statusCode = 404\\n  res.setHeader('Content-Type', 'text/html; charset=UTF-8')\\n  res.setHeader('Content-Length', String(Buffer.byteLength(body, 'utf-8')))\\n  res.end(body, 'utf-8')\\n})\\n</code></pre>\\n<h3>Encode a URL for use in a header field</h3>\\n<pre><code class=\\\"language-js\\\">var encodeUrl = require('encodeurl')\\nvar escapeHtml = require('escape-html')\\nvar url = require('url')\\n\\nhttp.createServer(function onRequest (req, res) {\\n  // parse inbound url\\n  var href = url.parse(req)\\n\\n  // set new host for redirect\\n  href.host = 'localhost'\\n  href.protocol = 'https:'\\n  href.slashes = true\\n\\n  // create location header\\n  var location = encodeUrl(url.format(href))\\n\\n  // create html message\\n  var body = '&#x3C;p>Redirecting to new site: ' + escapeHtml(location) + '&#x3C;/p>'\\n\\n  // send a 301\\n  res.statusCode = 301\\n  res.setHeader('Content-Type', 'text/html; charset=UTF-8')\\n  res.setHeader('Content-Length', String(Buffer.byteLength(body, 'utf-8')))\\n  res.setHeader('Location', location)\\n  res.end(body, 'utf-8')\\n})\\n</code></pre>\\n<h2>Testing</h2>\\n<pre><code class=\\\"language-sh\\\">$ npm test\\n$ npm run lint\\n</code></pre>\\n<h2>References</h2>\\n<ul>\\n<li><a href=\\\"https://tools.ietf.org/html/rfc3986\\\">RFC 3986: Uniform Resource Identifier (URI): Generic Syntax</a></li>\\n<li><a href=\\\"https://url.spec.whatwg.org/\\\">WHATWG URL Living Standard</a></li>\\n</ul>\\n<h2>License</h2>\\n<p><a href=\\\"LICENSE\\\">MIT</a></p>\",\"docPath\":\"argo-ci/node_modules/encodeurl/readme\",\"proj\":\"argo-ci\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/docs-argo-ci-node-modules-encodeurl-readme-html.json\n// module id = 2269\n// module chunks = 223119372911080"],"sourceRoot":""}