{"version":3,"sources":["webpack:///path---docs-argo-ci-node-modules-mime-readme-html-2531bcf349c40f595984.js","webpack:///./.cache/json/docs-argo-ci-node-modules-mime-readme-html.json"],"names":["webpackJsonp","2880","module","exports","pathContext","docHtml","docPath","proj"],"mappings":"AAAAA,cAAc,iBAERC,KACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,aAAeC,QAAA,4oFAA4iFC,QAAA,mCAAAC,KAAA","file":"path---docs-argo-ci-node-modules-mime-readme-html-2531bcf349c40f595984.js","sourcesContent":["webpackJsonp([219032384001807],{\n\n/***/ 2880:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"pathContext\":{\"docHtml\":\"<h1>mime</h1>\\n<p>Comprehensive MIME type mapping API based on mime-db module.</p>\\n<h2>Install</h2>\\n<p>Install with <a href=\\\"http://github.com/isaacs/npm\\\">npm</a>:</p>\\n<pre><code>npm install mime\\n</code></pre>\\n<h2>Contributing / Testing</h2>\\n<pre><code>npm run test\\n</code></pre>\\n<h2>Command Line</h2>\\n<pre><code>mime [path_string]\\n</code></pre>\\n<p>E.g.</p>\\n<pre><code>> mime scripts/jquery.js\\napplication/javascript\\n</code></pre>\\n<h2>API - Queries</h2>\\n<h3>mime.lookup(path)</h3>\\n<p>Get the mime type associated with a file, if no mime type is found <code>application/octet-stream</code> is returned. Performs a case-insensitive lookup using the extension in <code>path</code> (the substring after the last '/' or '.').  E.g.</p>\\n<pre><code class=\\\"language-js\\\">var mime = require('mime');\\n\\nmime.lookup('/path/to/file.txt');         // => 'text/plain'\\nmime.lookup('file.txt');                  // => 'text/plain'\\nmime.lookup('.TXT');                      // => 'text/plain'\\nmime.lookup('htm');                       // => 'text/html'\\n</code></pre>\\n<h3>mime.default_type</h3>\\n<p>Sets the mime type returned when <code>mime.lookup</code> fails to find the extension searched for. (Default is <code>application/octet-stream</code>.)</p>\\n<h3>mime.extension(type)</h3>\\n<p>Get the default extension for <code>type</code></p>\\n<pre><code class=\\\"language-js\\\">mime.extension('text/html');                 // => 'html'\\nmime.extension('application/octet-stream');  // => 'bin'\\n</code></pre>\\n<h3>mime.charsets.lookup()</h3>\\n<p>Map mime-type to charset</p>\\n<pre><code class=\\\"language-js\\\">mime.charsets.lookup('text/plain');        // => 'UTF-8'\\n</code></pre>\\n<p>(The logic for charset lookups is pretty rudimentary.  Feel free to suggest improvements.)</p>\\n<h2>API - Defining Custom Types</h2>\\n<p>Custom type mappings can be added on a per-project basis via the following APIs.</p>\\n<h3>mime.define()</h3>\\n<p>Add custom mime/extension mappings</p>\\n<pre><code class=\\\"language-js\\\">mime.define({\\n    'text/x-some-format': ['x-sf', 'x-sft', 'x-sfml'],\\n    'application/x-my-type': ['x-mt', 'x-mtt'],\\n    // etc ...\\n});\\n\\nmime.lookup('x-sft');                 // => 'text/x-some-format'\\n</code></pre>\\n<p>The first entry in the extensions array is returned by <code>mime.extension()</code>. E.g.</p>\\n<pre><code class=\\\"language-js\\\">mime.extension('text/x-some-format'); // => 'x-sf'\\n</code></pre>\\n<h3>mime.load(filepath)</h3>\\n<p>Load mappings from an Apache \\\".types\\\" format file</p>\\n<pre><code class=\\\"language-js\\\">mime.load('./my_project.types');\\n</code></pre>\\n<p>The .types file format is simple -  See the <code>types</code> dir for examples.</p>\",\"docPath\":\"argo-ci/node_modules/mime/readme\",\"proj\":\"argo-ci\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---docs-argo-ci-node-modules-mime-readme-html-2531bcf349c40f595984.js","module.exports = {\"pathContext\":{\"docHtml\":\"<h1>mime</h1>\\n<p>Comprehensive MIME type mapping API based on mime-db module.</p>\\n<h2>Install</h2>\\n<p>Install with <a href=\\\"http://github.com/isaacs/npm\\\">npm</a>:</p>\\n<pre><code>npm install mime\\n</code></pre>\\n<h2>Contributing / Testing</h2>\\n<pre><code>npm run test\\n</code></pre>\\n<h2>Command Line</h2>\\n<pre><code>mime [path_string]\\n</code></pre>\\n<p>E.g.</p>\\n<pre><code>> mime scripts/jquery.js\\napplication/javascript\\n</code></pre>\\n<h2>API - Queries</h2>\\n<h3>mime.lookup(path)</h3>\\n<p>Get the mime type associated with a file, if no mime type is found <code>application/octet-stream</code> is returned. Performs a case-insensitive lookup using the extension in <code>path</code> (the substring after the last '/' or '.').  E.g.</p>\\n<pre><code class=\\\"language-js\\\">var mime = require('mime');\\n\\nmime.lookup('/path/to/file.txt');         // => 'text/plain'\\nmime.lookup('file.txt');                  // => 'text/plain'\\nmime.lookup('.TXT');                      // => 'text/plain'\\nmime.lookup('htm');                       // => 'text/html'\\n</code></pre>\\n<h3>mime.default_type</h3>\\n<p>Sets the mime type returned when <code>mime.lookup</code> fails to find the extension searched for. (Default is <code>application/octet-stream</code>.)</p>\\n<h3>mime.extension(type)</h3>\\n<p>Get the default extension for <code>type</code></p>\\n<pre><code class=\\\"language-js\\\">mime.extension('text/html');                 // => 'html'\\nmime.extension('application/octet-stream');  // => 'bin'\\n</code></pre>\\n<h3>mime.charsets.lookup()</h3>\\n<p>Map mime-type to charset</p>\\n<pre><code class=\\\"language-js\\\">mime.charsets.lookup('text/plain');        // => 'UTF-8'\\n</code></pre>\\n<p>(The logic for charset lookups is pretty rudimentary.  Feel free to suggest improvements.)</p>\\n<h2>API - Defining Custom Types</h2>\\n<p>Custom type mappings can be added on a per-project basis via the following APIs.</p>\\n<h3>mime.define()</h3>\\n<p>Add custom mime/extension mappings</p>\\n<pre><code class=\\\"language-js\\\">mime.define({\\n    'text/x-some-format': ['x-sf', 'x-sft', 'x-sfml'],\\n    'application/x-my-type': ['x-mt', 'x-mtt'],\\n    // etc ...\\n});\\n\\nmime.lookup('x-sft');                 // => 'text/x-some-format'\\n</code></pre>\\n<p>The first entry in the extensions array is returned by <code>mime.extension()</code>. E.g.</p>\\n<pre><code class=\\\"language-js\\\">mime.extension('text/x-some-format'); // => 'x-sf'\\n</code></pre>\\n<h3>mime.load(filepath)</h3>\\n<p>Load mappings from an Apache \\\".types\\\" format file</p>\\n<pre><code class=\\\"language-js\\\">mime.load('./my_project.types');\\n</code></pre>\\n<p>The .types file format is simple -  See the <code>types</code> dir for examples.</p>\",\"docPath\":\"argo-ci/node_modules/mime/readme\",\"proj\":\"argo-ci\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/docs-argo-ci-node-modules-mime-readme-html.json\n// module id = 2880\n// module chunks = 219032384001807"],"sourceRoot":""}