webpackJsonp([0xa92f9475915e],{2305:function(e,o){e.exports={pathContext:{docHtml:'<h1 align="center">\n\t<br>\n\t<br>\n\t<img width="320" src="media/logo.svg" alt="Chalk">\n\t<br>\n\t<br>\n\t<br>\n</h1>\n<blockquote>\n<p>Terminal string styling done right</p>\n</blockquote>\n<p><a href="https://travis-ci.org/chalk/chalk"><img src="https://travis-ci.org/chalk/chalk.svg?branch=master" alt="Build Status"></a> <a href="https://coveralls.io/github/chalk/chalk?branch=master"><img src="https://coveralls.io/repos/github/chalk/chalk/badge.svg?branch=master" alt="Coverage Status"></a> <a href="https://www.youtube.com/watch?v=9auOCbH5Ns4"><img src="https://img.shields.io/badge/unicorn-approved-ff69b4.svg"></a> <a href="https://github.com/xojs/xo"><img src="https://img.shields.io/badge/code_style-XO-5ed9c7.svg" alt="XO code style"></a> <a href="https://github.com/sindresorhus/awesome-nodejs"><img src="https://awesome.re/mentioned-badge.svg" alt="Mentioned in Awesome Node.js"></a></p>\n<h3><a href="https://github.com/chalk/chalk/releases/tag/v2.0.0">See what\'s new in Chalk 2</a></h3>\n<img src="https://cdn.rawgit.com/chalk/ansi-styles/8261697c95bf34b6c7767e2cbe9941a851d59385/screenshot.svg" alt="" width="900">\n<h2>Highlights</h2>\n<ul>\n<li>Expressive API</li>\n<li>Highly performant</li>\n<li>Ability to nest styles</li>\n<li><a href="#256-and-truecolor-color-support">256/Truecolor color support</a></li>\n<li>Auto-detects color support</li>\n<li>Doesn\'t extend <code>String.prototype</code></li>\n<li>Clean and focused</li>\n<li>Actively maintained</li>\n<li><a href="https://www.npmjs.com/browse/depended/chalk">Used by ~23,000 packages</a> as of December 31, 2017</li>\n</ul>\n<h2>Install</h2>\n<pre><code class="language-console">$ npm install chalk\n</code></pre>\n<a href="https://www.patreon.com/sindresorhus">\n\t<img src="https://c5.patreon.com/external/logo/become_a_patron_button@2x.png" width="160">\n</a>\n<h2>Usage</h2>\n<pre><code class="language-js">const chalk = require(\'chalk\');\n\nconsole.log(chalk.blue(\'Hello world!\'));\n</code></pre>\n<p>Chalk comes with an easy to use composable API where you just chain and nest the styles you want.</p>\n<pre><code class="language-js">const chalk = require(\'chalk\');\nconst log = console.log;\n\n// Combine styled and normal strings\nlog(chalk.blue(\'Hello\') + \' World\' + chalk.red(\'!\'));\n\n// Compose multiple styles using the chainable API\nlog(chalk.blue.bgRed.bold(\'Hello world!\'));\n\n// Pass in multiple arguments\nlog(chalk.blue(\'Hello\', \'World!\', \'Foo\', \'bar\', \'biz\', \'baz\'));\n\n// Nest styles\nlog(chalk.red(\'Hello\', chalk.underline.bgBlue(\'world\') + \'!\'));\n\n// Nest styles of the same type even (color, underline, background)\nlog(chalk.green(\n    \'I am a green line \' +\n    chalk.blue.underline.bold(\'with a blue substring\') +\n    \' that becomes green again!\'\n));\n\n// ES2015 template literal\nlog(`\nCPU: ${chalk.red(\'90%\')}\nRAM: ${chalk.green(\'40%\')}\nDISK: ${chalk.yellow(\'70%\')}\n`);\n\n// ES2015 tagged template literal\nlog(chalk`\nCPU: {red ${cpu.totalPercent}%}\nRAM: {green ${ram.used / ram.total * 100}%}\nDISK: {rgb(255,131,0) ${disk.used / disk.total * 100}%}\n`);\n\n// Use RGB colors in terminal emulators that support it.\nlog(chalk.keyword(\'orange\')(\'Yay for orange colored text!\'));\nlog(chalk.rgb(123, 45, 67).underline(\'Underlined reddish color\'));\nlog(chalk.hex(\'#DEADED\').bold(\'Bold gray!\'));\n</code></pre>\n<p>Easily define your own themes:</p>\n<pre><code class="language-js">const chalk = require(\'chalk\');\n\nconst error = chalk.bold.red;\nconst warning = chalk.keyword(\'orange\');\n\nconsole.log(error(\'Error!\'));\nconsole.log(warning(\'Warning!\'));\n</code></pre>\n<p>Take advantage of console.log <a href="https://nodejs.org/docs/latest/api/console.html#console_console_log_data_args">string substitution</a>:</p>\n<pre><code class="language-js">const name = \'Sindre\';\nconsole.log(chalk.green(\'Hello %s\'), name);\n//=> \'Hello Sindre\'\n</code></pre>\n<h2>API</h2>\n<h3>chalk.<code>&#x3C;style>[.&#x3C;style>...](string, [string...])</code></h3>\n<p>Example: <code>chalk.red.bold.underline(\'Hello\', \'world\');</code></p>\n<p>Chain <a href="#styles">styles</a> and call the last one as a method with a string argument. Order doesn\'t matter, and later styles take precedent in case of a conflict. This simply means that <code>chalk.red.yellow.green</code> is equivalent to <code>chalk.green</code>.</p>\n<p>Multiple arguments will be separated by space.</p>\n<h3>chalk.enabled</h3>\n<p>Color support is automatically detected, as is the level (see <code>chalk.level</code>). However, if you\'d like to simply enable/disable Chalk, you can do so via the <code>.enabled</code> property.</p>\n<p>Chalk is enabled by default unless explicitly disabled via the constructor or <code>chalk.level</code> is <code>0</code>.</p>\n<p>If you need to change this in a reusable module, create a new instance:</p>\n<pre><code class="language-js">const ctx = new chalk.constructor({enabled: false});\n</code></pre>\n<h3>chalk.level</h3>\n<p>Color support is automatically detected, but you can override it by setting the <code>level</code> property. You should however only do this in your own code as it applies globally to all Chalk consumers.</p>\n<p>If you need to change this in a reusable module, create a new instance:</p>\n<pre><code class="language-js">const ctx = new chalk.constructor({level: 0});\n</code></pre>\n<p>Levels are as follows:</p>\n<ol start="0">\n<li>All colors disabled</li>\n<li>Basic color support (16 colors)</li>\n<li>256 color support</li>\n<li>Truecolor support (16 million colors)</li>\n</ol>\n<h3>chalk.supportsColor</h3>\n<p>Detect whether the terminal <a href="https://github.com/chalk/supports-color">supports color</a>. Used internally and handled for you, but exposed for convenience.</p>\n<p>Can be overridden by the user with the flags <code>--color</code> and <code>--no-color</code>. For situations where using <code>--color</code> is not possible, add the environment variable <code>FORCE_COLOR=1</code> to forcefully enable color or <code>FORCE_COLOR=0</code> to forcefully disable. The use of <code>FORCE_COLOR</code> overrides all other color support checks.</p>\n<p>Explicit 256/Truecolor mode can be enabled using the <code>--color=256</code> and <code>--color=16m</code> flags, respectively.</p>\n<h2>Styles</h2>\n<h3>Modifiers</h3>\n<ul>\n<li><code>reset</code></li>\n<li><code>bold</code></li>\n<li><code>dim</code></li>\n<li><code>italic</code> <em>(Not widely supported)</em></li>\n<li><code>underline</code></li>\n<li><code>inverse</code></li>\n<li><code>hidden</code></li>\n<li><code>strikethrough</code> <em>(Not widely supported)</em></li>\n<li><code>visible</code> (Text is emitted only if enabled)</li>\n</ul>\n<h3>Colors</h3>\n<ul>\n<li><code>black</code></li>\n<li><code>red</code></li>\n<li><code>green</code></li>\n<li><code>yellow</code></li>\n<li><code>blue</code> <em>(On Windows the bright version is used since normal blue is illegible)</em></li>\n<li><code>magenta</code></li>\n<li><code>cyan</code></li>\n<li><code>white</code></li>\n<li><code>gray</code> ("bright black")</li>\n<li><code>redBright</code></li>\n<li><code>greenBright</code></li>\n<li><code>yellowBright</code></li>\n<li><code>blueBright</code></li>\n<li><code>magentaBright</code></li>\n<li><code>cyanBright</code></li>\n<li><code>whiteBright</code></li>\n</ul>\n<h3>Background colors</h3>\n<ul>\n<li><code>bgBlack</code></li>\n<li><code>bgRed</code></li>\n<li><code>bgGreen</code></li>\n<li><code>bgYellow</code></li>\n<li><code>bgBlue</code></li>\n<li><code>bgMagenta</code></li>\n<li><code>bgCyan</code></li>\n<li><code>bgWhite</code></li>\n<li><code>bgBlackBright</code></li>\n<li><code>bgRedBright</code></li>\n<li><code>bgGreenBright</code></li>\n<li><code>bgYellowBright</code></li>\n<li><code>bgBlueBright</code></li>\n<li><code>bgMagentaBright</code></li>\n<li><code>bgCyanBright</code></li>\n<li><code>bgWhiteBright</code></li>\n</ul>\n<h2>Tagged template literal</h2>\n<p>Chalk can be used as a <a href="http://exploringjs.com/es6/ch_template-literals.html#_tagged-template-literals">tagged template literal</a>.</p>\n<pre><code class="language-js">const chalk = require(\'chalk\');\n\nconst miles = 18;\nconst calculateFeet = miles => miles * 5280;\n\nconsole.log(chalk`\n  There are {bold 5280 feet} in a mile.\n  In {bold ${miles} miles}, there are {green.bold ${calculateFeet(miles)} feet}.\n`);\n</code></pre>\n<p>Blocks are delimited by an opening curly brace (<code>{</code>), a style, some content, and a closing curly brace (<code>}</code>).</p>\n<p>Template styles are chained exactly like normal Chalk styles. The following two statements are equivalent:</p>\n<pre><code class="language-js">console.log(chalk.bold.rgb(10, 100, 200)(\'Hello!\'));\nconsole.log(chalk`{bold.rgb(10,100,200) Hello!}`);\n</code></pre>\n<p>Note that function styles (<code>rgb()</code>, <code>hsl()</code>, <code>keyword()</code>, etc.) may not contain spaces between parameters.</p>\n<p>All interpolated values (<code>chalk`${foo}`</code>) are converted to strings via the <code>.toString()</code> method. All curly braces (<code>{</code> and <code>}</code>) in interpolated value strings are escaped.</p>\n<h2>256 and Truecolor color support</h2>\n<p>Chalk supports 256 colors and <a href="https://gist.github.com/XVilka/8346728">Truecolor</a> (16 million colors) on supported terminal apps.</p>\n<p>Colors are downsampled from 16 million RGB values to an ANSI color format that is supported by the terminal emulator (or by specifying <code>{level: n}</code> as a Chalk option). For example, Chalk configured to run at level 1 (basic color support) will downsample an RGB value of #FF0000 (red) to 31 (ANSI escape for red).</p>\n<p>Examples:</p>\n<ul>\n<li><code>chalk.hex(\'#DEADED\').underline(\'Hello, world!\')</code></li>\n<li><code>chalk.keyword(\'orange\')(\'Some orange text\')</code></li>\n<li><code>chalk.rgb(15, 100, 204).inverse(\'Hello!\')</code></li>\n</ul>\n<p>Background versions of these models are prefixed with <code>bg</code> and the first level of the module capitalized (e.g. <code>keyword</code> for foreground colors and <code>bgKeyword</code> for background colors).</p>\n<ul>\n<li><code>chalk.bgHex(\'#DEADED\').underline(\'Hello, world!\')</code></li>\n<li><code>chalk.bgKeyword(\'orange\')(\'Some orange text\')</code></li>\n<li><code>chalk.bgRgb(15, 100, 204).inverse(\'Hello!\')</code></li>\n</ul>\n<p>The following color models can be used:</p>\n<ul>\n<li><a href="https://en.wikipedia.org/wiki/RGB_color_model"><code>rgb</code></a> - Example: <code>chalk.rgb(255, 136, 0).bold(\'Orange!\')</code></li>\n<li><a href="https://en.wikipedia.org/wiki/Web_colors#Hex_triplet"><code>hex</code></a> - Example: <code>chalk.hex(\'#FF8800\').bold(\'Orange!\')</code></li>\n<li><a href="https://www.w3.org/wiki/CSS/Properties/color/keywords"><code>keyword</code></a> (CSS keywords) - Example: <code>chalk.keyword(\'orange\').bold(\'Orange!\')</code></li>\n<li><a href="https://en.wikipedia.org/wiki/HSL_and_HSV"><code>hsl</code></a> - Example: <code>chalk.hsl(32, 100, 50).bold(\'Orange!\')</code></li>\n<li><a href="https://en.wikipedia.org/wiki/HSL_and_HSV"><code>hsv</code></a> - Example: <code>chalk.hsv(32, 100, 100).bold(\'Orange!\')</code></li>\n<li><a href="https://en.wikipedia.org/wiki/HWB_color_model"><code>hwb</code></a>  - Example: <code>chalk.hwb(32, 0, 50).bold(\'Orange!\')</code></li>\n<li><code>ansi16</code></li>\n<li><code>ansi256</code></li>\n</ul>\n<h2>Windows</h2>\n<p>If you\'re on Windows, do yourself a favor and use <a href="http://cmder.net/"><code>cmder</code></a> instead of <code>cmd.exe</code>.</p>\n<h2>Origin story</h2>\n<p><a href="https://github.com/Marak/colors.js">colors.js</a> used to be the most popular string styling module, but it has serious deficiencies like extending <code>String.prototype</code> which causes all kinds of <a href="https://github.com/yeoman/yo/issues/68">problems</a> and the package is unmaintained. Although there are other packages, they either do too much or not enough. Chalk is a clean and focused alternative.</p>\n<h2>Related</h2>\n<ul>\n<li><a href="https://github.com/chalk/chalk-cli">chalk-cli</a> - CLI for this module</li>\n<li><a href="https://github.com/chalk/ansi-styles">ansi-styles</a> - ANSI escape codes for styling strings in the terminal</li>\n<li><a href="https://github.com/chalk/supports-color">supports-color</a> - Detect whether a terminal supports color</li>\n<li><a href="https://github.com/chalk/strip-ansi">strip-ansi</a> - Strip ANSI escape codes</li>\n<li><a href="https://github.com/chalk/strip-ansi-stream">strip-ansi-stream</a> - Strip ANSI escape codes from a stream</li>\n<li><a href="https://github.com/chalk/has-ansi">has-ansi</a> - Check if a string has ANSI escape codes</li>\n<li><a href="https://github.com/chalk/ansi-regex">ansi-regex</a> - Regular expression for matching ANSI escape codes</li>\n<li><a href="https://github.com/chalk/wrap-ansi">wrap-ansi</a> - Wordwrap a string with ANSI escape codes</li>\n<li><a href="https://github.com/chalk/slice-ansi">slice-ansi</a> - Slice a string with ANSI escape codes</li>\n<li><a href="https://github.com/qix-/color-convert">color-convert</a> - Converts colors between different models</li>\n<li><a href="https://github.com/bokub/chalk-animation">chalk-animation</a> - Animate strings in the terminal</li>\n<li><a href="https://github.com/bokub/gradient-string">gradient-string</a> - Apply color gradients to strings</li>\n<li><a href="https://github.com/LitoMore/chalk-pipe">chalk-pipe</a> - Create chalk style schemes with simpler style strings</li>\n<li><a href="https://github.com/sindresorhus/terminal-link">terminal-link</a> - Create clickable links in the terminal</li>\n</ul>\n<h2>Maintainers</h2>\n<ul>\n<li><a href="https://github.com/sindresorhus">Sindre Sorhus</a></li>\n<li><a href="https://github.com/qix-">Josh Junon</a></li>\n</ul>\n<h2>License</h2>\n<p>MIT</p>',docPath:"argo-ci/node_modules/express-winston/node_modules/chalk/readme",proj:"argo-ci"}}}});
//# sourceMappingURL=path---docs-argo-ci-node-modules-express-winston-node-modules-chalk-38c3cdd216e83f498994.js.map