webpackJsonp([0x63a5f5a4b335],{2294:function(e,o){e.exports={pathContext:{docHtml:'<h1>execa <a href="https://travis-ci.org/sindresorhus/execa"><img src="https://travis-ci.org/sindresorhus/execa.svg?branch=master" alt="Build Status: Linux"></a> <a href="https://ci.appveyor.com/project/sindresorhus/execa/branch/master"><img src="https://ci.appveyor.com/api/projects/status/x5ajamxtjtt93cqv/branch/master?svg=true" alt="Build status: Windows"></a> <a href="https://coveralls.io/github/sindresorhus/execa?branch=master"><img src="https://coveralls.io/repos/github/sindresorhus/execa/badge.svg?branch=master" alt="Coverage Status"></a></h1>\n<blockquote>\n<p>A better <a href="https://nodejs.org/api/child_process.html"><code>child_process</code></a></p>\n</blockquote>\n<h2>Why</h2>\n<ul>\n<li>Promise interface.</li>\n<li><a href="https://github.com/sindresorhus/strip-eof">Strips EOF</a> from the output so you don\'t have to <code>stdout.trim()</code>.</li>\n<li>Supports <a href="https://en.wikipedia.org/wiki/Shebang_(Unix)">shebang</a> binaries cross-platform.</li>\n<li><a href="https://github.com/IndigoUnited/node-cross-spawn#why">Improved Windows support.</a></li>\n<li>Higher max buffer. 10 MB instead of 200 KB.</li>\n<li><a href="#preferlocal">Executes locally installed binaries by name.</a></li>\n<li><a href="#cleanup">Cleans up spawned processes when the parent process dies.</a></li>\n</ul>\n<h2>Install</h2>\n<pre><code>$ npm install --save execa\n</code></pre>\n<h2>Usage</h2>\n<pre><code class="language-js">const execa = require(\'execa\');\n\nexeca(\'echo\', [\'unicorns\']).then(result => {\n    console.log(result.stdout);\n    //=> \'unicorns\'\n});\n\n// pipe the child process stdout to the current stdout\nexeca(\'echo\', [\'unicorns\']).stdout.pipe(process.stdout);\n\nexeca.shell(\'echo unicorns\').then(result => {\n    console.log(result.stdout);\n    //=> \'unicorns\'\n});\n\n// example of catching an error\nexeca.shell(\'exit 3\').catch(error => {\n    console.log(error);\n    /*\n    {\n        message: \'Command failed: /bin/sh -c exit 3\'\n        killed: false,\n        code: 3,\n        signal: null,\n        cmd: \'/bin/sh -c exit 3\',\n        stdout: \'\',\n        stderr: \'\',\n        timedOut: false\n    }\n    */\n});\n</code></pre>\n<h2>API</h2>\n<h3>execa(file, [arguments], [options])</h3>\n<p>Execute a file.</p>\n<p>Think of this as a mix of <code>child_process.execFile</code> and <code>child_process.spawn</code>.</p>\n<p>Returns a <a href="https://nodejs.org/api/child_process.html#child_process_class_childprocess"><code>child_process</code> instance</a>, which is enhanced to also be a <code>Promise</code> for a result <code>Object</code> with <code>stdout</code> and <code>stderr</code> properties.</p>\n<h3>execa.stdout(file, [arguments], [options])</h3>\n<p>Same as <code>execa()</code>, but returns only <code>stdout</code>.</p>\n<h3>execa.stderr(file, [arguments], [options])</h3>\n<p>Same as <code>execa()</code>, but returns only <code>stderr</code>.</p>\n<h3>execa.shell(command, [options])</h3>\n<p>Execute a command through the system shell. Prefer <code>execa()</code> whenever possible, as it\'s both faster and safer.</p>\n<p>Returns a <a href="https://nodejs.org/api/child_process.html#child_process_class_childprocess"><code>child_process</code> instance</a>.</p>\n<p>The <code>child_process</code> instance is enhanced to also be promise for a result object with <code>stdout</code> and <code>stderr</code> properties.</p>\n<h3>execa.sync(file, [arguments], [options])</h3>\n<p>Execute a file synchronously.</p>\n<p>Returns the same result object as <a href="https://nodejs.org/api/child_process.html#child_process_child_process_spawnsync_command_args_options"><code>child_process.spawnSync</code></a>.</p>\n<p>This method throws an <code>Error</code> if the command fails.</p>\n<h3>execa.shellSync(file, [options])</h3>\n<p>Execute a command synchronously through the system shell.</p>\n<p>Returns the same result object as <a href="https://nodejs.org/api/child_process.html#child_process_child_process_spawnsync_command_args_options"><code>child_process.spawnSync</code></a>.</p>\n<h3>options</h3>\n<p>Type: <code>Object</code></p>\n<h4>cwd</h4>\n<p>Type: <code>string</code><br>\nDefault: <code>process.cwd()</code></p>\n<p>Current working directory of the child process.</p>\n<h4>env</h4>\n<p>Type: <code>Object</code><br>\nDefault: <code>process.env</code></p>\n<p>Environment key-value pairs. Extends automatically from <code>process.env</code>. Set <code>extendEnv</code> to <code>false</code> if you don\'t want this.</p>\n<h4>extendEnv</h4>\n<p>Type: <code>boolean</code><br>\nDefault: <code>true</code></p>\n<p>Set to <code>false</code> if you don\'t want to extend the environment variables when providing the <code>env</code> property.</p>\n<h4>argv0</h4>\n<p>Type: <code>string</code></p>\n<p>Explicitly set the value of <code>argv[0]</code> sent to the child process. This will be set to <code>command</code> or <code>file</code> if not specified.</p>\n<h4>stdio</h4>\n<p>Type: <code>Array</code> <code>string</code><br>\nDefault: <code>pipe</code></p>\n<p>Child\'s <a href="https://nodejs.org/api/child_process.html#child_process_options_stdio">stdio</a> configuration.</p>\n<h4>detached</h4>\n<p>Type: <code>boolean</code></p>\n<p>Prepare child to run independently of its parent process. Specific behavior <a href="https://nodejs.org/api/child_process.html#child_process_options_detached">depends on the platform</a>.</p>\n<h4>uid</h4>\n<p>Type: <code>number</code></p>\n<p>Sets the user identity of the process.</p>\n<h4>gid</h4>\n<p>Type: <code>number</code></p>\n<p>Sets the group identity of the process.</p>\n<h4>shell</h4>\n<p>Type: <code>boolean</code> <code>string</code><br>\nDefault: <code>false</code></p>\n<p>If <code>true</code>, runs <code>command</code> inside of a shell. Uses <code>/bin/sh</code> on UNIX and <code>cmd.exe</code> on Windows. A different shell can be specified as a string. The shell should understand the <code>-c</code> switch on UNIX or <code>/d /s /c</code> on Windows.</p>\n<h4>stripEof</h4>\n<p>Type: <code>boolean</code><br>\nDefault: <code>true</code></p>\n<p><a href="https://github.com/sindresorhus/strip-eof">Strip EOF</a> (last newline) from the output.</p>\n<h4>preferLocal</h4>\n<p>Type: <code>boolean</code><br>\nDefault: <code>true</code></p>\n<p>Prefer locally installed binaries when looking for a binary to execute.<br>\nIf you <code>$ npm install foo</code>, you can then <code>execa(\'foo\')</code>.</p>\n<h4>localDir</h4>\n<p>Type: <code>string</code><br>\nDefault: <code>process.cwd()</code></p>\n<p>Preferred path to find locally installed binaries in (use with <code>preferLocal</code>).</p>\n<h4>input</h4>\n<p>Type: <code>string</code> <code>Buffer</code> <code>stream.Readable</code></p>\n<p>Write some input to the <code>stdin</code> of your binary.<br>\nStreams are not allowed when using the synchronous methods.</p>\n<h4>reject</h4>\n<p>Type: <code>boolean</code><br>\nDefault: <code>true</code></p>\n<p>Setting this to <code>false</code> resolves the promise with the error instead of rejecting it.</p>\n<h4>cleanup</h4>\n<p>Type: <code>boolean</code><br>\nDefault: <code>true</code></p>\n<p>Keep track of the spawned process and <code>kill</code> it when the parent process exits.</p>\n<h4>encoding</h4>\n<p>Type: <code>string</code><br>\nDefault: <code>utf8</code></p>\n<p>Specify the character encoding used to decode the <code>stdout</code> and <code>stderr</code> output.</p>\n<h4>timeout</h4>\n<p>Type: <code>number</code><br>\nDefault: <code>0</code></p>\n<p>If timeout is greater than <code>0</code>, the parent will send the signal identified by the <code>killSignal</code> property (the default is <code>SIGTERM</code>) if the child runs longer than timeout milliseconds.</p>\n<h4>maxBuffer</h4>\n<p>Type: <code>number</code><br>\nDefault: <code>10000000</code> (10MB)</p>\n<p>Largest amount of data in bytes allowed on <code>stdout</code> or <code>stderr</code>.</p>\n<h4>killSignal</h4>\n<p>Type: <code>string</code> <code>number</code><br>\nDefault: <code>SIGTERM</code></p>\n<p>Signal value to be used when the spawned process will be killed.</p>\n<h4>stdin</h4>\n<p>Type: <code>string</code> <code>number</code> <code>Stream</code> <code>undefined</code> <code>null</code><br>\nDefault: <code>pipe</code></p>\n<p>Same options as <a href="https://nodejs.org/dist/latest-v6.x/docs/api/child_process.html#child_process_options_stdio"><code>stdio</code></a>.</p>\n<h4>stdout</h4>\n<p>Type: <code>string</code> <code>number</code> <code>Stream</code> <code>undefined</code> <code>null</code><br>\nDefault: <code>pipe</code></p>\n<p>Same options as <a href="https://nodejs.org/dist/latest-v6.x/docs/api/child_process.html#child_process_options_stdio"><code>stdio</code></a>.</p>\n<h4>stderr</h4>\n<p>Type: <code>string</code> <code>number</code> <code>Stream</code> <code>undefined</code> <code>null</code><br>\nDefault: <code>pipe</code></p>\n<p>Same options as <a href="https://nodejs.org/dist/latest-v6.x/docs/api/child_process.html#child_process_options_stdio"><code>stdio</code></a>.</p>\n<h2>Tips</h2>\n<h3>Save and pipe output from a child process</h3>\n<p>Let\'s say you want to show the output of a child process in real-time while also saving it to a variable.</p>\n<pre><code class="language-js">const execa = require(\'execa\');\nconst getStream = require(\'get-stream\');\n\nconst stream = execa(\'echo\', [\'foo\']).stdout;\n\nstream.pipe(process.stdout);\n\ngetStream(stream).then(value => {\n    console.log(\'child output:\', value);\n});\n</code></pre>\n<h2>License</h2>\n<p>MIT Â© <a href="https://sindresorhus.com">Sindre Sorhus</a></p>',docPath:"argo-ci/node_modules/execa/readme",proj:"argo-ci"}}}});
//# sourceMappingURL=path---docs-argo-ci-node-modules-execa-d5210fd76db9c6cc6f2c.js.map