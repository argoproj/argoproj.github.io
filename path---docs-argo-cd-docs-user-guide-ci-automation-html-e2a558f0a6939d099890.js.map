{"version":3,"sources":["webpack:///path---docs-argo-cd-docs-user-guide-ci-automation-html-e2a558f0a6939d099890.js","webpack:///./.cache/json/docs-argo-cd-docs-user-guide-ci-automation-html.json"],"names":["webpackJsonp","574","module","exports","pathContext","docHtml","docPath","proj"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,aAAeC,QAAA,6uJAAw7IC,QAAA,wCAAAC,KAAA","file":"path---docs-argo-cd-docs-user-guide-ci-automation-html-e2a558f0a6939d099890.js","sourcesContent":["webpackJsonp([177448202977422],{\n\n/***/ 574:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"pathContext\":{\"docHtml\":\"<h1 id=\\\"automation-from-ci-pipelines\\\"><a href=\\\"#automation-from-ci-pipelines\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Automation from CI Pipelines</h1>\\n<p>Argo CD follows the GitOps model of deployment, where desired configuration changes are first\\npushed to Git, and the cluster state then syncs to the desired state in git. This is a departure\\nfrom imperative pipelines which do not traditionally use Git repositories to hold application\\nconfig.</p>\\n<p>To push new container images into to a cluster managed by Argo CD, the following workflow (or\\nvariations), might be used:</p>\\n<h2 id=\\\"build-and-publish-a-new-container-image\\\"><a href=\\\"#build-and-publish-a-new-container-image\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Build And Publish A New Container Image</h2>\\n<pre><code class=\\\"language-bash\\\">docker build -t mycompany/guestbook:v2.0 .\\ndocker push mycompany/guestbook:v2.0\\n</code></pre>\\n<h2 id=\\\"update-the-local-manifests-using-your-preferred-templating-tool-and-push-the-changes-to-git\\\"><a href=\\\"#update-the-local-manifests-using-your-preferred-templating-tool-and-push-the-changes-to-git\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Update The Local Manifests Using Your Preferred Templating Tool, And Push The Changes To Git</h2>\\n<p>!!! tip\\nThe use of a different Git repository to hold your kubernetes manifests (separate from\\nyour application source code), is highly recommended. See <a href=\\\"best_practices.html\\\">best practices</a>\\nfor further rationale.</p>\\n<pre><code class=\\\"language-bash\\\">git clone https://github.com/mycompany/guestbook-config.git\\ncd guestbook-config\\n\\n# kustomize\\nkustomize edit set imagetag mycompany/guestbook:v2.0\\n\\n# ksonnet\\nks param set guestbook image mycompany/guestbook:v2.0\\n\\n# plain yaml\\nkubectl patch --local -f config-deployment.yaml -p '{\\\"spec\\\":{\\\"template\\\":{\\\"spec\\\":{\\\"containers\\\":[{\\\"name\\\":\\\"guestbook\\\",\\\"image\\\":\\\"mycompany/guestbook:v2.0\\\"}]}}}}' -o yaml\\n\\ngit add . -m \\\"Update guestbook to v2.0\\\"\\ngit push\\n</code></pre>\\n<h2 id=\\\"synchronize-the-app-optional\\\"><a href=\\\"#synchronize-the-app-optional\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Synchronize The App (Optional)</h2>\\n<p>For convenience, the argocd CLI can be downloaded directly from the API server. This is\\nuseful so that the CLI used in the CI pipeline is always kept in-sync and uses argocd binary\\nthat is always compatible with the Argo CD API server.</p>\\n<pre><code class=\\\"language-bash\\\">export ARGOCD_SERVER=argocd.mycompany.com\\nexport ARGOCD_AUTH_TOKEN=&#x3C;JWT token generated from project>\\ncurl -sSL -o /usr/local/bin/argocd https://${ARGOCD_SERVER}/download/argocd-linux-amd64\\nargocd app sync guestbook\\nargocd app wait guestbook\\n</code></pre>\\n<p>If <a href=\\\"auto_sync.html\\\">automated synchronization</a> is configured for the application, this step is\\nunnecessary. The controller will automatically detect the new config (fast tracked using a\\n<a href=\\\"../operator-manual/webhook.html\\\">webhook</a>, or polled every 3 minutes), and automatically sync the new manifests.</p>\",\"docPath\":\"argo-cd/docs/user-guide/ci_automation\",\"proj\":\"argo-cd\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---docs-argo-cd-docs-user-guide-ci-automation-html-e2a558f0a6939d099890.js","module.exports = {\"pathContext\":{\"docHtml\":\"<h1 id=\\\"automation-from-ci-pipelines\\\"><a href=\\\"#automation-from-ci-pipelines\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Automation from CI Pipelines</h1>\\n<p>Argo CD follows the GitOps model of deployment, where desired configuration changes are first\\npushed to Git, and the cluster state then syncs to the desired state in git. This is a departure\\nfrom imperative pipelines which do not traditionally use Git repositories to hold application\\nconfig.</p>\\n<p>To push new container images into to a cluster managed by Argo CD, the following workflow (or\\nvariations), might be used:</p>\\n<h2 id=\\\"build-and-publish-a-new-container-image\\\"><a href=\\\"#build-and-publish-a-new-container-image\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Build And Publish A New Container Image</h2>\\n<pre><code class=\\\"language-bash\\\">docker build -t mycompany/guestbook:v2.0 .\\ndocker push mycompany/guestbook:v2.0\\n</code></pre>\\n<h2 id=\\\"update-the-local-manifests-using-your-preferred-templating-tool-and-push-the-changes-to-git\\\"><a href=\\\"#update-the-local-manifests-using-your-preferred-templating-tool-and-push-the-changes-to-git\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Update The Local Manifests Using Your Preferred Templating Tool, And Push The Changes To Git</h2>\\n<p>!!! tip\\nThe use of a different Git repository to hold your kubernetes manifests (separate from\\nyour application source code), is highly recommended. See <a href=\\\"best_practices.html\\\">best practices</a>\\nfor further rationale.</p>\\n<pre><code class=\\\"language-bash\\\">git clone https://github.com/mycompany/guestbook-config.git\\ncd guestbook-config\\n\\n# kustomize\\nkustomize edit set imagetag mycompany/guestbook:v2.0\\n\\n# ksonnet\\nks param set guestbook image mycompany/guestbook:v2.0\\n\\n# plain yaml\\nkubectl patch --local -f config-deployment.yaml -p '{\\\"spec\\\":{\\\"template\\\":{\\\"spec\\\":{\\\"containers\\\":[{\\\"name\\\":\\\"guestbook\\\",\\\"image\\\":\\\"mycompany/guestbook:v2.0\\\"}]}}}}' -o yaml\\n\\ngit add . -m \\\"Update guestbook to v2.0\\\"\\ngit push\\n</code></pre>\\n<h2 id=\\\"synchronize-the-app-optional\\\"><a href=\\\"#synchronize-the-app-optional\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Synchronize The App (Optional)</h2>\\n<p>For convenience, the argocd CLI can be downloaded directly from the API server. This is\\nuseful so that the CLI used in the CI pipeline is always kept in-sync and uses argocd binary\\nthat is always compatible with the Argo CD API server.</p>\\n<pre><code class=\\\"language-bash\\\">export ARGOCD_SERVER=argocd.mycompany.com\\nexport ARGOCD_AUTH_TOKEN=&#x3C;JWT token generated from project>\\ncurl -sSL -o /usr/local/bin/argocd https://${ARGOCD_SERVER}/download/argocd-linux-amd64\\nargocd app sync guestbook\\nargocd app wait guestbook\\n</code></pre>\\n<p>If <a href=\\\"auto_sync.html\\\">automated synchronization</a> is configured for the application, this step is\\nunnecessary. The controller will automatically detect the new config (fast tracked using a\\n<a href=\\\"../operator-manual/webhook.html\\\">webhook</a>, or polled every 3 minutes), and automatically sync the new manifests.</p>\",\"docPath\":\"argo-cd/docs/user-guide/ci_automation\",\"proj\":\"argo-cd\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/docs-argo-cd-docs-user-guide-ci-automation-html.json\n// module id = 574\n// module chunks = 177448202977422"],"sourceRoot":""}