{"version":3,"sources":["webpack:///path---docs-argo-ci-node-modules-fsevents-node-modules-http-signature-b5b7deb50149ebc6120a.js","webpack:///./.cache/json/docs-argo-ci-node-modules-fsevents-node-modules-http-signature.json"],"names":["webpackJsonp","2477","module","exports","pathContext","docHtml","docPath","proj"],"mappings":"AAAAA,cAAc,iBAERC,KACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,aAAeC,QAAA,q2DAA4lDC,QAAA,mEAAAC,KAAA","file":"path---docs-argo-ci-node-modules-fsevents-node-modules-http-signature-b5b7deb50149ebc6120a.js","sourcesContent":["webpackJsonp([213504493494911],{\n\n/***/ 2477:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"pathContext\":{\"docHtml\":\"<h1>node-http-signature</h1>\\n<p>node-http-signature is a node.js library that has client and server components\\nfor Joyent's <a href=\\\"http_signing.html\\\">HTTP Signature Scheme</a>.</p>\\n<h2>Usage</h2>\\n<p>Note the example below signs a request with the same key/cert used to start an\\nHTTP server. This is almost certainly not what you actually want, but is just\\nused to illustrate the API calls; you will need to provide your own key\\nmanagement in addition to this library.</p>\\n<h3>Client</h3>\\n<pre><code class=\\\"language-js\\\">var fs = require('fs');\\nvar https = require('https');\\nvar httpSignature = require('http-signature');\\n\\nvar key = fs.readFileSync('./key.pem', 'ascii');\\n\\nvar options = {\\n  host: 'localhost',\\n  port: 8443,\\n  path: '/',\\n  method: 'GET',\\n  headers: {}\\n};\\n\\n// Adds a 'Date' header in, signs it, and adds the\\n// 'Authorization' header in.\\nvar req = https.request(options, function(res) {\\n  console.log(res.statusCode);\\n});\\n\\n\\nhttpSignature.sign(req, {\\n  key: key,\\n  keyId: './cert.pem'\\n});\\n\\nreq.end();\\n</code></pre>\\n<h3>Server</h3>\\n<pre><code class=\\\"language-js\\\">var fs = require('fs');\\nvar https = require('https');\\nvar httpSignature = require('http-signature');\\n\\nvar options = {\\n  key: fs.readFileSync('./key.pem'),\\n  cert: fs.readFileSync('./cert.pem')\\n};\\n\\nhttps.createServer(options, function (req, res) {\\n  var rc = 200;\\n  var parsed = httpSignature.parseRequest(req);\\n  var pub = fs.readFileSync(parsed.keyId, 'ascii');\\n  if (!httpSignature.verifySignature(parsed, pub))\\n    rc = 401;\\n\\n  res.writeHead(rc);\\n  res.end();\\n}).listen(8443);\\n</code></pre>\\n<h2>Installation</h2>\\n<pre><code>npm install http-signature\\n</code></pre>\\n<h2>License</h2>\\n<p>MIT.</p>\\n<h2>Bugs</h2>\\n<p>See <a href=\\\"https://github.com/joyent/node-http-signature/issues\\\">https://github.com/joyent/node-http-signature/issues</a>.</p>\",\"docPath\":\"argo-ci/node_modules/fsevents/node_modules/http-signature/readme\",\"proj\":\"argo-ci\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---docs-argo-ci-node-modules-fsevents-node-modules-http-signature-b5b7deb50149ebc6120a.js","module.exports = {\"pathContext\":{\"docHtml\":\"<h1>node-http-signature</h1>\\n<p>node-http-signature is a node.js library that has client and server components\\nfor Joyent's <a href=\\\"http_signing.html\\\">HTTP Signature Scheme</a>.</p>\\n<h2>Usage</h2>\\n<p>Note the example below signs a request with the same key/cert used to start an\\nHTTP server. This is almost certainly not what you actually want, but is just\\nused to illustrate the API calls; you will need to provide your own key\\nmanagement in addition to this library.</p>\\n<h3>Client</h3>\\n<pre><code class=\\\"language-js\\\">var fs = require('fs');\\nvar https = require('https');\\nvar httpSignature = require('http-signature');\\n\\nvar key = fs.readFileSync('./key.pem', 'ascii');\\n\\nvar options = {\\n  host: 'localhost',\\n  port: 8443,\\n  path: '/',\\n  method: 'GET',\\n  headers: {}\\n};\\n\\n// Adds a 'Date' header in, signs it, and adds the\\n// 'Authorization' header in.\\nvar req = https.request(options, function(res) {\\n  console.log(res.statusCode);\\n});\\n\\n\\nhttpSignature.sign(req, {\\n  key: key,\\n  keyId: './cert.pem'\\n});\\n\\nreq.end();\\n</code></pre>\\n<h3>Server</h3>\\n<pre><code class=\\\"language-js\\\">var fs = require('fs');\\nvar https = require('https');\\nvar httpSignature = require('http-signature');\\n\\nvar options = {\\n  key: fs.readFileSync('./key.pem'),\\n  cert: fs.readFileSync('./cert.pem')\\n};\\n\\nhttps.createServer(options, function (req, res) {\\n  var rc = 200;\\n  var parsed = httpSignature.parseRequest(req);\\n  var pub = fs.readFileSync(parsed.keyId, 'ascii');\\n  if (!httpSignature.verifySignature(parsed, pub))\\n    rc = 401;\\n\\n  res.writeHead(rc);\\n  res.end();\\n}).listen(8443);\\n</code></pre>\\n<h2>Installation</h2>\\n<pre><code>npm install http-signature\\n</code></pre>\\n<h2>License</h2>\\n<p>MIT.</p>\\n<h2>Bugs</h2>\\n<p>See <a href=\\\"https://github.com/joyent/node-http-signature/issues\\\">https://github.com/joyent/node-http-signature/issues</a>.</p>\",\"docPath\":\"argo-ci/node_modules/fsevents/node_modules/http-signature/readme\",\"proj\":\"argo-ci\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/docs-argo-ci-node-modules-fsevents-node-modules-http-signature.json\n// module id = 2477\n// module chunks = 213504493494911"],"sourceRoot":""}