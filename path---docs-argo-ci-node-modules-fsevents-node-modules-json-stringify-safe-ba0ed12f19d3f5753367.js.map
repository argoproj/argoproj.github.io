{"version":3,"sources":["webpack:///path---docs-argo-ci-node-modules-fsevents-node-modules-json-stringify-safe-ba0ed12f19d3f5753367.js","webpack:///./.cache/json/docs-argo-ci-node-modules-fsevents-node-modules-json-stringify-safe.json"],"names":["webpackJsonp","2503","module","exports","pathContext","docHtml","docPath","proj"],"mappings":"AAAAA,cAAc,iBAERC,KACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,aAAeC,QAAA,giDAAsrCC,QAAA,wEAAAC,KAAA","file":"path---docs-argo-ci-node-modules-fsevents-node-modules-json-stringify-safe-ba0ed12f19d3f5753367.js","sourcesContent":["webpackJsonp([111525889071667],{\n\n/***/ 2503:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"pathContext\":{\"docHtml\":\"<h1>json-stringify-safe</h1>\\n<p>Like JSON.stringify, but doesn't throw on circular references.</p>\\n<h2>Usage</h2>\\n<p>Takes the same arguments as <code>JSON.stringify</code>.</p>\\n<pre><code class=\\\"language-javascript\\\">var stringify = require('json-stringify-safe');\\nvar circularObj = {};\\ncircularObj.circularRef = circularObj;\\ncircularObj.list = [ circularObj, circularObj ];\\nconsole.log(stringify(circularObj, null, 2));\\n</code></pre>\\n<p>Output:</p>\\n<pre><code class=\\\"language-json\\\">{\\n  \\\"circularRef\\\": \\\"[Circular]\\\",\\n  \\\"list\\\": [\\n    \\\"[Circular]\\\",\\n    \\\"[Circular]\\\"\\n  ]\\n}\\n</code></pre>\\n<h2>Details</h2>\\n<pre><code>stringify(obj, serializer, indent, decycler)\\n</code></pre>\\n<p>The first three arguments are the same as to JSON.stringify.  The last\\nis an argument that's only used when the object has been seen already.</p>\\n<p>The default <code>decycler</code> function returns the string <code>'[Circular]'</code>.\\nIf, for example, you pass in <code>function(k,v){}</code> (return nothing) then it\\nwill prune cycles.  If you pass in <code>function(k,v){ return {foo: 'bar'}}</code>,\\nthen cyclical objects will always be represented as <code>{\\\"foo\\\":\\\"bar\\\"}</code> in\\nthe result.</p>\\n<pre><code>stringify.getSerialize(serializer, decycler)\\n</code></pre>\\n<p>Returns a serializer that can be used elsewhere.  This is the actual\\nfunction that's passed to JSON.stringify.</p>\\n<p><strong>Note</strong> that the function returned from <code>getSerialize</code> is stateful for now, so\\ndo <strong>not</strong> use it more than once.</p>\",\"docPath\":\"argo-ci/node_modules/fsevents/node_modules/json-stringify-safe/readme\",\"proj\":\"argo-ci\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---docs-argo-ci-node-modules-fsevents-node-modules-json-stringify-safe-ba0ed12f19d3f5753367.js","module.exports = {\"pathContext\":{\"docHtml\":\"<h1>json-stringify-safe</h1>\\n<p>Like JSON.stringify, but doesn't throw on circular references.</p>\\n<h2>Usage</h2>\\n<p>Takes the same arguments as <code>JSON.stringify</code>.</p>\\n<pre><code class=\\\"language-javascript\\\">var stringify = require('json-stringify-safe');\\nvar circularObj = {};\\ncircularObj.circularRef = circularObj;\\ncircularObj.list = [ circularObj, circularObj ];\\nconsole.log(stringify(circularObj, null, 2));\\n</code></pre>\\n<p>Output:</p>\\n<pre><code class=\\\"language-json\\\">{\\n  \\\"circularRef\\\": \\\"[Circular]\\\",\\n  \\\"list\\\": [\\n    \\\"[Circular]\\\",\\n    \\\"[Circular]\\\"\\n  ]\\n}\\n</code></pre>\\n<h2>Details</h2>\\n<pre><code>stringify(obj, serializer, indent, decycler)\\n</code></pre>\\n<p>The first three arguments are the same as to JSON.stringify.  The last\\nis an argument that's only used when the object has been seen already.</p>\\n<p>The default <code>decycler</code> function returns the string <code>'[Circular]'</code>.\\nIf, for example, you pass in <code>function(k,v){}</code> (return nothing) then it\\nwill prune cycles.  If you pass in <code>function(k,v){ return {foo: 'bar'}}</code>,\\nthen cyclical objects will always be represented as <code>{\\\"foo\\\":\\\"bar\\\"}</code> in\\nthe result.</p>\\n<pre><code>stringify.getSerialize(serializer, decycler)\\n</code></pre>\\n<p>Returns a serializer that can be used elsewhere.  This is the actual\\nfunction that's passed to JSON.stringify.</p>\\n<p><strong>Note</strong> that the function returned from <code>getSerialize</code> is stateful for now, so\\ndo <strong>not</strong> use it more than once.</p>\",\"docPath\":\"argo-ci/node_modules/fsevents/node_modules/json-stringify-safe/readme\",\"proj\":\"argo-ci\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/docs-argo-ci-node-modules-fsevents-node-modules-json-stringify-safe.json\n// module id = 2503\n// module chunks = 111525889071667"],"sourceRoot":""}