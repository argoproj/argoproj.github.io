webpackJsonp([0x77d614c09a0d],{2157:function(e,o){e.exports={pathContext:{docHtml:'<h1>co</h1>\n<p><a href="https://gitter.im/tj/co?utm_source=badge&#x26;utm_medium=badge&#x26;utm_campaign=pr-badge&#x26;utm_content=badge"><img src="https://badges.gitter.im/Join%20Chat.svg" alt="Gitter"></a>\n<a href="https://npmjs.org/package/co"><img src="https://img.shields.io/npm/v/co.svg?style=flat-square" alt="NPM version"></a>\n<a href="https://travis-ci.org/tj/co"><img src="https://img.shields.io/travis/tj/co.svg?style=flat-square" alt="Build status"></a>\n<a href="https://coveralls.io/r/tj/co"><img src="https://img.shields.io/coveralls/tj/co.svg?style=flat-square" alt="Test coverage"></a>\n<a href="https://npmjs.org/package/co"><img src="http://img.shields.io/npm/dm/co.svg?style=flat-square" alt="Downloads"></a></p>\n<p>  Generator based control flow goodness for nodejs and the browser,\nusing promises, letting you write non-blocking code in a nice-ish way.</p>\n<h2>Co v4</h2>\n<p>  <code>co@4.0.0</code> has been released, which now relies on promises.\nIt is a stepping stone towards <a href="https://github.com/lukehoban/ecmascript-asyncawait">ES7 async/await</a>.\nThe primary API change is how <code>co()</code> is invoked.\nBefore, <code>co</code> returned a "thunk", which you then called with a callback and optional arguments.\nNow, <code>co()</code> returns a promise.</p>\n<pre><code class="language-js">co(function* () {\n  var result = yield Promise.resolve(true);\n  return result;\n}).then(function (value) {\n  console.log(value);\n}, function (err) {\n  console.error(err.stack);\n});\n</code></pre>\n<p>  If you want to convert a <code>co</code>-generator-function into a regular function that returns a promise,\nyou now use <code>co.wrap(fn*)</code>.</p>\n<pre><code class="language-js">var fn = co.wrap(function* (val) {\n  return yield Promise.resolve(val);\n});\n\nfn(true).then(function (val) {\n\n});\n</code></pre>\n<h2>Platform Compatibility</h2>\n<p>  <code>co@4+</code> requires a <code>Promise</code> implementation.\nFor versions of node <code>&#x3C; 0.11</code> and for many older browsers,\nyou should/must include your own <code>Promise</code> polyfill.</p>\n<p>  When using node 0.11.x or greater, you must use the <code>--harmony-generators</code>\nflag or just <code>--harmony</code> to get access to generators.</p>\n<p>  When using node 0.10.x and lower or browsers without generator support,\nyou must use <a href="https://github.com/TooTallNate/gnode">gnode</a> and/or <a href="http://facebook.github.io/regenerator/">regenerator</a>.</p>\n<p>  io.js is supported out of the box, you can use <code>co</code> without flags or polyfills.</p>\n<h2>Installation</h2>\n<pre><code>$ npm install co\n</code></pre>\n<h2>Associated libraries</h2>\n<p>Any library that returns promises work well with <code>co</code>.</p>\n<ul>\n<li><a href="https://github.com/normalize/mz">mz</a> - wrap all of node\'s code libraries as promises.</li>\n</ul>\n<p>View the <a href="https://github.com/visionmedia/co/wiki">wiki</a> for more libraries.</p>\n<h2>Examples</h2>\n<pre><code class="language-js">var co = require(\'co\');\n\nco(function *(){\n  // yield any promise\n  var result = yield Promise.resolve(true);\n}).catch(onerror);\n\nco(function *(){\n  // resolve multiple promises in parallel\n  var a = Promise.resolve(1);\n  var b = Promise.resolve(2);\n  var c = Promise.resolve(3);\n  var res = yield [a, b, c];\n  console.log(res);\n  // => [1, 2, 3]\n}).catch(onerror);\n\n// errors can be try/catched\nco(function *(){\n  try {\n    yield Promise.reject(new Error(\'boom\'));\n  } catch (err) {\n    console.error(err.message); // "boom"\n }\n}).catch(onerror);\n\nfunction onerror(err) {\n  // log any uncaught errors\n  // co will not throw any errors you do not handle!!!\n  // HANDLE ALL YOUR ERRORS!!!\n  console.error(err.stack);\n}\n</code></pre>\n<h2>Yieldables</h2>\n<p>  The <code>yieldable</code> objects currently supported are:</p>\n<ul>\n<li>promises</li>\n<li>thunks (functions)</li>\n<li>array (parallel execution)</li>\n<li>objects (parallel execution)</li>\n<li>generators (delegation)</li>\n<li>generator functions (delegation)</li>\n</ul>\n<p>Nested <code>yieldable</code> objects are supported, meaning you can nest\npromises within objects within arrays, and so on!</p>\n<h3>Promises</h3>\n<p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise">Read more on promises!</a></p>\n<h3>Thunks</h3>\n<p>Thunks are functions that only have a single argument, a callback.\nThunk support only remains for backwards compatibility and may\nbe removed in future versions of <code>co</code>.</p>\n<h3>Arrays</h3>\n<p><code>yield</code>ing an array will resolve all the <code>yieldables</code> in parallel.</p>\n<pre><code class="language-js">co(function* () {\n  var res = yield [\n    Promise.resolve(1),\n    Promise.resolve(2),\n    Promise.resolve(3),\n  ];\n  console.log(res); // => [1, 2, 3]\n}).catch(onerror);\n</code></pre>\n<h3>Objects</h3>\n<p>Just like arrays, objects resolve all <code>yieldable</code>s in parallel.</p>\n<pre><code class="language-js">co(function* () {\n  var res = yield {\n    1: Promise.resolve(1),\n    2: Promise.resolve(2),\n  };\n  console.log(res); // => { 1: 1, 2: 2 }\n}).catch(onerror);\n</code></pre>\n<h3>Generators and Generator Functions</h3>\n<p>Any generator or generator function you can pass into <code>co</code>\ncan be yielded as well. This should generally be avoided\nas we should be moving towards spec-compliant <code>Promise</code>s instead.</p>\n<h2>API</h2>\n<h3>co(fn*).then( val => )</h3>\n<p>Returns a promise that resolves a generator, generator function,\nor any function that returns a generator.</p>\n<pre><code class="language-js">co(function* () {\n  return yield Promise.resolve(true);\n}).then(function (val) {\n  console.log(val);\n}, function (err) {\n  console.error(err.stack);\n});\n</code></pre>\n<h3>var fn = co.wrap(fn*)</h3>\n<p>Convert a generator into a regular function that returns a <code>Promise</code>.</p>\n<pre><code class="language-js">var fn = co.wrap(function* (val) {\n  return yield Promise.resolve(val);\n});\n\nfn(true).then(function (val) {\n\n});\n</code></pre>\n<h2>License</h2>\n<p>  MIT</p>',docPath:"argo-ci/node_modules/co/readme",proj:"argo-ci"}}}});
//# sourceMappingURL=path---docs-argo-ci-node-modules-co-4a98a813ba7e06804ea9.js.map