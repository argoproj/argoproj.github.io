{"version":3,"sources":["webpack:///path---docs-argo-ci-node-modules-inherits-readme-html-bb9dc43f8e5d09c3ceea.js","webpack:///./.cache/json/docs-argo-ci-node-modules-inherits-readme-html.json"],"names":["webpackJsonp","2714","module","exports","pathContext","docHtml","docPath","proj"],"mappings":"AAAAA,cAAc,iBAERC,KACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,aAAeC,QAAA,s5DAAy4CC,QAAA,uCAAAC,KAAA","file":"path---docs-argo-ci-node-modules-inherits-readme-html-bb9dc43f8e5d09c3ceea.js","sourcesContent":["webpackJsonp([66669390656611],{\n\n/***/ 2714:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"pathContext\":{\"docHtml\":\"<p>Browser-friendly inheritance fully compatible with standard node.js\\n<a href=\\\"http://nodejs.org/api/util.html#util_util_inherits_constructor_superconstructor\\\">inherits</a>.</p>\\n<p>This package exports standard <code>inherits</code> from node.js <code>util</code> module in\\nnode environment, but also provides alternative browser-friendly\\nimplementation through <a href=\\\"https://gist.github.com/shtylman/4339901\\\">browser\\nfield</a>. Alternative\\nimplementation is a literal copy of standard one located in standalone\\nmodule to avoid requiring of <code>util</code>. It also has a shim for old\\nbrowsers with no <code>Object.create</code> support.</p>\\n<p>While keeping you sure you are using standard <code>inherits</code>\\nimplementation in node.js environment, it allows bundlers such as\\n<a href=\\\"https://github.com/substack/node-browserify\\\">browserify</a> to not\\ninclude full <code>util</code> package to your client code if all you need is\\njust <code>inherits</code> function. It worth, because browser shim for <code>util</code>\\npackage is large and <code>inherits</code> is often the single function you need\\nfrom it.</p>\\n<p>It's recommended to use this package instead of\\n<code>require('util').inherits</code> for any code that has chances to be used\\nnot only in node.js but in browser too.</p>\\n<h2>usage</h2>\\n<pre><code class=\\\"language-js\\\">var inherits = require('inherits');\\n// then use exactly as the standard one\\n</code></pre>\\n<h2>note on version ~1.0</h2>\\n<p>Version ~1.0 had completely different motivation and is not compatible\\nneither with 2.0 nor with standard node.js <code>inherits</code>.</p>\\n<p>If you are using version ~1.0 and planning to switch to ~2.0, be\\ncareful:</p>\\n<ul>\\n<li>new version uses <code>super_</code> instead of <code>super</code> for referencing\\nsuperclass</li>\\n<li>new version overwrites current prototype while old one preserves any\\nexisting fields on it</li>\\n</ul>\",\"docPath\":\"argo-ci/node_modules/inherits/readme\",\"proj\":\"argo-ci\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---docs-argo-ci-node-modules-inherits-readme-html-bb9dc43f8e5d09c3ceea.js","module.exports = {\"pathContext\":{\"docHtml\":\"<p>Browser-friendly inheritance fully compatible with standard node.js\\n<a href=\\\"http://nodejs.org/api/util.html#util_util_inherits_constructor_superconstructor\\\">inherits</a>.</p>\\n<p>This package exports standard <code>inherits</code> from node.js <code>util</code> module in\\nnode environment, but also provides alternative browser-friendly\\nimplementation through <a href=\\\"https://gist.github.com/shtylman/4339901\\\">browser\\nfield</a>. Alternative\\nimplementation is a literal copy of standard one located in standalone\\nmodule to avoid requiring of <code>util</code>. It also has a shim for old\\nbrowsers with no <code>Object.create</code> support.</p>\\n<p>While keeping you sure you are using standard <code>inherits</code>\\nimplementation in node.js environment, it allows bundlers such as\\n<a href=\\\"https://github.com/substack/node-browserify\\\">browserify</a> to not\\ninclude full <code>util</code> package to your client code if all you need is\\njust <code>inherits</code> function. It worth, because browser shim for <code>util</code>\\npackage is large and <code>inherits</code> is often the single function you need\\nfrom it.</p>\\n<p>It's recommended to use this package instead of\\n<code>require('util').inherits</code> for any code that has chances to be used\\nnot only in node.js but in browser too.</p>\\n<h2>usage</h2>\\n<pre><code class=\\\"language-js\\\">var inherits = require('inherits');\\n// then use exactly as the standard one\\n</code></pre>\\n<h2>note on version ~1.0</h2>\\n<p>Version ~1.0 had completely different motivation and is not compatible\\nneither with 2.0 nor with standard node.js <code>inherits</code>.</p>\\n<p>If you are using version ~1.0 and planning to switch to ~2.0, be\\ncareful:</p>\\n<ul>\\n<li>new version uses <code>super_</code> instead of <code>super</code> for referencing\\nsuperclass</li>\\n<li>new version overwrites current prototype while old one preserves any\\nexisting fields on it</li>\\n</ul>\",\"docPath\":\"argo-ci/node_modules/inherits/readme\",\"proj\":\"argo-ci\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/docs-argo-ci-node-modules-inherits-readme-html.json\n// module id = 2714\n// module chunks = 66669390656611"],"sourceRoot":""}