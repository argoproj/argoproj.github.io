webpackJsonp([0xfd104bc2b72],{2919:function(e,a){e.exports={pathContext:{docHtml:'<h2>Miscellaneous V8 Helpers</h2>\n<ul>\n<li><a href="#api_nan_utf8_string"><b><code>Nan::Utf8String</code></b></a></li>\n<li><a href="#api_nan_get_current_context"><b><code>Nan::GetCurrentContext()</code></b></a></li>\n<li><a href="#api_nan_set_isolate_data"><b><code>Nan::SetIsolateData()</code></b></a></li>\n<li><a href="#api_nan_get_isolate_data"><b><code>Nan::GetIsolateData()</code></b></a></li>\n<li><a href="#api_nan_typedarray_contents"><b><code>Nan::TypedArrayContents</code></b></a></li>\n</ul>\n<p><a name="api_nan_utf8_string"></a></p>\n<h3>Nan::Utf8String</h3>\n<p>Converts an object to a UTF-8-encoded character array. If conversion to a string fails (e.g. due to an exception in the toString() method of the object) then the length() method returns 0 and the * operator returns NULL. The underlying memory used for this object is managed by the object.</p>\n<p>An implementation of <a href="https://v8docs.nodesource.com/io.js-3.3/d4/d1b/classv8_1_1_string_1_1_utf8_value.html"><code>v8::String::Utf8Value</code></a> that is consistent across all supported versions of V8.</p>\n<p>Definition:</p>\n<pre><code class="language-c++">class Nan::Utf8String {\n public:\n  Nan::Utf8String(v8::Local&#x3C;v8::Value> from);\n\n  int length() const;\n\n  char* operator*();\n  const char* operator*() const;\n};\n</code></pre>\n<p><a name="api_nan_get_current_context"></a></p>\n<h3>Nan::GetCurrentContext()</h3>\n<p>A call to <a href="https://v8docs.nodesource.com/io.js-3.3/d5/dda/classv8_1_1_isolate.html#a81c7a1ed7001ae2a65e89107f75fd053"><code>v8::Isolate::GetCurrent()->GetCurrentContext()</code></a> that works across all supported versions of V8.</p>\n<p>Signature:</p>\n<pre><code class="language-c++">v8::Local&#x3C;v8::Context> Nan::GetCurrentContext()\n</code></pre>\n<p><a name="api_nan_set_isolate_data"></a></p>\n<h3>Nan::SetIsolateData()</h3>\n<p>A helper to provide a consistent API to <a href="https://v8docs.nodesource.com/io.js-3.3/d5/dda/classv8_1_1_isolate.html#a7acadfe7965997e9c386a05f098fbe36"><code>v8::Isolate#SetData()</code></a>.</p>\n<p>Signature:</p>\n<pre><code class="language-c++">void Nan::SetIsolateData(v8::Isolate *isolate, T *data)\n</code></pre>\n<p><a name="api_nan_get_isolate_data"></a></p>\n<h3>Nan::GetIsolateData()</h3>\n<p>A helper to provide a consistent API to <a href="https://v8docs.nodesource.com/io.js-3.3/d5/dda/classv8_1_1_isolate.html#aabd223436bc1100a787dadaa024c6257"><code>v8::Isolate#GetData()</code></a>.</p>\n<p>Signature:</p>\n<pre><code class="language-c++">T *Nan::GetIsolateData(v8::Isolate *isolate)\n</code></pre>\n<p><a name="api_nan_typedarray_contents"></a></p>\n<h3>Nan::TypedArrayContents<T></h3>\n<p>A helper class for accessing the contents of an ArrayBufferView (aka a typedarray) from C++.  If the input array is not a valid typedarray, then the data pointer of TypedArrayContents will default to <code>NULL</code> and the length will be 0.  If the data pointer is not compatible with the alignment requirements of type, an assertion error will fail.</p>\n<p>Note that you must store a reference to the <code>array</code> object while you are accessing its contents.</p>\n<p>Definition:</p>\n<pre><code class="language-c++">template&#x3C;typename T>\nclass Nan::TypedArrayContents {\n public:\n  TypedArrayContents(v8::Local&#x3C;Value> array);\n\n  size_t length() const;\n\n  T* const operator*();\n  const T* const operator*() const;\n};\n</code></pre>',docPath:"argo-ci/node_modules/nan/doc/v8_misc",proj:"argo-ci"}}}});
//# sourceMappingURL=path---docs-argo-ci-node-modules-nan-doc-v-8-misc-html-faf078cb9a2edb1b19f0.js.map