{"version":3,"sources":["webpack:///path---docs-argo-ci-node-modules-accepts-readme-html-4343d81c908f89456e9b.js","webpack:///./.cache/json/docs-argo-ci-node-modules-accepts-readme-html.json"],"names":["webpackJsonp","2000","module","exports","pathContext","docHtml","docPath","proj"],"mappings":"AAAAA,cAAc,eAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,aAAeC,QAAA,inJAAu3IC,QAAA,sCAAAC,KAAA","file":"path---docs-argo-ci-node-modules-accepts-readme-html-4343d81c908f89456e9b.js","sourcesContent":["webpackJsonp([506254941266],{\n\n/***/ 2000:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"pathContext\":{\"docHtml\":\"<h1>accepts</h1>\\n<p><a href=\\\"https://npmjs.org/package/accepts\\\"><img src=\\\"https://img.shields.io/npm/v/accepts.svg\\\" alt=\\\"NPM Version\\\"></a>\\n<a href=\\\"https://npmjs.org/package/accepts\\\"><img src=\\\"https://img.shields.io/npm/dm/accepts.svg\\\" alt=\\\"NPM Downloads\\\"></a>\\n<a href=\\\"https://nodejs.org/en/download/\\\"><img src=\\\"https://img.shields.io/node/v/accepts.svg\\\" alt=\\\"Node.js Version\\\"></a>\\n<a href=\\\"https://travis-ci.org/jshttp/accepts\\\"><img src=\\\"https://img.shields.io/travis/jshttp/accepts/master.svg\\\" alt=\\\"Build Status\\\"></a>\\n<a href=\\\"https://coveralls.io/r/jshttp/accepts\\\"><img src=\\\"https://img.shields.io/coveralls/jshttp/accepts/master.svg\\\" alt=\\\"Test Coverage\\\"></a></p>\\n<p>Higher level content negotiation based on <a href=\\\"https://www.npmjs.com/package/negotiator\\\">negotiator</a>.\\nExtracted from <a href=\\\"https://www.npmjs.com/package/koa\\\">koa</a> for general use.</p>\\n<p>In addition to negotiator, it allows:</p>\\n<ul>\\n<li>Allows types as an array or arguments list, ie <code>(['text/html', 'application/json'])</code>\\nas well as <code>('text/html', 'application/json')</code>.</li>\\n<li>Allows type shorthands such as <code>json</code>.</li>\\n<li>Returns <code>false</code> when no types match</li>\\n<li>Treats non-existent headers as <code>*</code></li>\\n</ul>\\n<h2>Installation</h2>\\n<p>This is a <a href=\\\"https://nodejs.org/en/\\\">Node.js</a> module available through the\\n<a href=\\\"https://www.npmjs.com/\\\">npm registry</a>. Installation is done using the\\n<a href=\\\"https://docs.npmjs.com/getting-started/installing-npm-packages-locally\\\"><code>npm install</code> command</a>:</p>\\n<pre><code class=\\\"language-sh\\\">$ npm install accepts\\n</code></pre>\\n<h2>API</h2>\\n<!-- eslint-disable no-unused-vars -->\\n<pre><code class=\\\"language-js\\\">var accepts = require('accepts')\\n</code></pre>\\n<h3>accepts(req)</h3>\\n<p>Create a new <code>Accepts</code> object for the given <code>req</code>.</p>\\n<h4>.charset(charsets)</h4>\\n<p>Return the first accepted charset. If nothing in <code>charsets</code> is accepted,\\nthen <code>false</code> is returned.</p>\\n<h4>.charsets()</h4>\\n<p>Return the charsets that the request accepts, in the order of the client's\\npreference (most preferred first).</p>\\n<h4>.encoding(encodings)</h4>\\n<p>Return the first accepted encoding. If nothing in <code>encodings</code> is accepted,\\nthen <code>false</code> is returned.</p>\\n<h4>.encodings()</h4>\\n<p>Return the encodings that the request accepts, in the order of the client's\\npreference (most preferred first).</p>\\n<h4>.language(languages)</h4>\\n<p>Return the first accepted language. If nothing in <code>languages</code> is accepted,\\nthen <code>false</code> is returned.</p>\\n<h4>.languages()</h4>\\n<p>Return the languages that the request accepts, in the order of the client's\\npreference (most preferred first).</p>\\n<h4>.type(types)</h4>\\n<p>Return the first accepted type (and it is returned as the same text as what\\nappears in the <code>types</code> array). If nothing in <code>types</code> is accepted, then <code>false</code>\\nis returned.</p>\\n<p>The <code>types</code> array can contain full MIME types or file extensions. Any value\\nthat is not a full MIME types is passed to <code>require('mime-types').lookup</code>.</p>\\n<h4>.types()</h4>\\n<p>Return the types that the request accepts, in the order of the client's\\npreference (most preferred first).</p>\\n<h2>Examples</h2>\\n<h3>Simple type negotiation</h3>\\n<p>This simple example shows how to use <code>accepts</code> to return a different typed\\nrespond body based on what the client wants to accept. The server lists it's\\npreferences in order and will get back the best match between the client and\\nserver.</p>\\n<pre><code class=\\\"language-js\\\">var accepts = require('accepts')\\nvar http = require('http')\\n\\nfunction app (req, res) {\\n  var accept = accepts(req)\\n\\n  // the order of this list is significant; should be server preferred order\\n  switch (accept.type(['json', 'html'])) {\\n    case 'json':\\n      res.setHeader('Content-Type', 'application/json')\\n      res.write('{\\\"hello\\\":\\\"world!\\\"}')\\n      break\\n    case 'html':\\n      res.setHeader('Content-Type', 'text/html')\\n      res.write('&#x3C;b>hello, world!&#x3C;/b>')\\n      break\\n    default:\\n      // the fallback is text/plain, so no need to specify it above\\n      res.setHeader('Content-Type', 'text/plain')\\n      res.write('hello, world!')\\n      break\\n  }\\n\\n  res.end()\\n}\\n\\nhttp.createServer(app).listen(3000)\\n</code></pre>\\n<p>You can test this out with the cURL program:</p>\\n<pre><code class=\\\"language-sh\\\">curl -I -H'Accept: text/html' http://localhost:3000/\\n</code></pre>\\n<h2>License</h2>\\n<p><a href=\\\"LICENSE\\\">MIT</a></p>\",\"docPath\":\"argo-ci/node_modules/accepts/readme\",\"proj\":\"argo-ci\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---docs-argo-ci-node-modules-accepts-readme-html-4343d81c908f89456e9b.js","module.exports = {\"pathContext\":{\"docHtml\":\"<h1>accepts</h1>\\n<p><a href=\\\"https://npmjs.org/package/accepts\\\"><img src=\\\"https://img.shields.io/npm/v/accepts.svg\\\" alt=\\\"NPM Version\\\"></a>\\n<a href=\\\"https://npmjs.org/package/accepts\\\"><img src=\\\"https://img.shields.io/npm/dm/accepts.svg\\\" alt=\\\"NPM Downloads\\\"></a>\\n<a href=\\\"https://nodejs.org/en/download/\\\"><img src=\\\"https://img.shields.io/node/v/accepts.svg\\\" alt=\\\"Node.js Version\\\"></a>\\n<a href=\\\"https://travis-ci.org/jshttp/accepts\\\"><img src=\\\"https://img.shields.io/travis/jshttp/accepts/master.svg\\\" alt=\\\"Build Status\\\"></a>\\n<a href=\\\"https://coveralls.io/r/jshttp/accepts\\\"><img src=\\\"https://img.shields.io/coveralls/jshttp/accepts/master.svg\\\" alt=\\\"Test Coverage\\\"></a></p>\\n<p>Higher level content negotiation based on <a href=\\\"https://www.npmjs.com/package/negotiator\\\">negotiator</a>.\\nExtracted from <a href=\\\"https://www.npmjs.com/package/koa\\\">koa</a> for general use.</p>\\n<p>In addition to negotiator, it allows:</p>\\n<ul>\\n<li>Allows types as an array or arguments list, ie <code>(['text/html', 'application/json'])</code>\\nas well as <code>('text/html', 'application/json')</code>.</li>\\n<li>Allows type shorthands such as <code>json</code>.</li>\\n<li>Returns <code>false</code> when no types match</li>\\n<li>Treats non-existent headers as <code>*</code></li>\\n</ul>\\n<h2>Installation</h2>\\n<p>This is a <a href=\\\"https://nodejs.org/en/\\\">Node.js</a> module available through the\\n<a href=\\\"https://www.npmjs.com/\\\">npm registry</a>. Installation is done using the\\n<a href=\\\"https://docs.npmjs.com/getting-started/installing-npm-packages-locally\\\"><code>npm install</code> command</a>:</p>\\n<pre><code class=\\\"language-sh\\\">$ npm install accepts\\n</code></pre>\\n<h2>API</h2>\\n<!-- eslint-disable no-unused-vars -->\\n<pre><code class=\\\"language-js\\\">var accepts = require('accepts')\\n</code></pre>\\n<h3>accepts(req)</h3>\\n<p>Create a new <code>Accepts</code> object for the given <code>req</code>.</p>\\n<h4>.charset(charsets)</h4>\\n<p>Return the first accepted charset. If nothing in <code>charsets</code> is accepted,\\nthen <code>false</code> is returned.</p>\\n<h4>.charsets()</h4>\\n<p>Return the charsets that the request accepts, in the order of the client's\\npreference (most preferred first).</p>\\n<h4>.encoding(encodings)</h4>\\n<p>Return the first accepted encoding. If nothing in <code>encodings</code> is accepted,\\nthen <code>false</code> is returned.</p>\\n<h4>.encodings()</h4>\\n<p>Return the encodings that the request accepts, in the order of the client's\\npreference (most preferred first).</p>\\n<h4>.language(languages)</h4>\\n<p>Return the first accepted language. If nothing in <code>languages</code> is accepted,\\nthen <code>false</code> is returned.</p>\\n<h4>.languages()</h4>\\n<p>Return the languages that the request accepts, in the order of the client's\\npreference (most preferred first).</p>\\n<h4>.type(types)</h4>\\n<p>Return the first accepted type (and it is returned as the same text as what\\nappears in the <code>types</code> array). If nothing in <code>types</code> is accepted, then <code>false</code>\\nis returned.</p>\\n<p>The <code>types</code> array can contain full MIME types or file extensions. Any value\\nthat is not a full MIME types is passed to <code>require('mime-types').lookup</code>.</p>\\n<h4>.types()</h4>\\n<p>Return the types that the request accepts, in the order of the client's\\npreference (most preferred first).</p>\\n<h2>Examples</h2>\\n<h3>Simple type negotiation</h3>\\n<p>This simple example shows how to use <code>accepts</code> to return a different typed\\nrespond body based on what the client wants to accept. The server lists it's\\npreferences in order and will get back the best match between the client and\\nserver.</p>\\n<pre><code class=\\\"language-js\\\">var accepts = require('accepts')\\nvar http = require('http')\\n\\nfunction app (req, res) {\\n  var accept = accepts(req)\\n\\n  // the order of this list is significant; should be server preferred order\\n  switch (accept.type(['json', 'html'])) {\\n    case 'json':\\n      res.setHeader('Content-Type', 'application/json')\\n      res.write('{\\\"hello\\\":\\\"world!\\\"}')\\n      break\\n    case 'html':\\n      res.setHeader('Content-Type', 'text/html')\\n      res.write('&#x3C;b>hello, world!&#x3C;/b>')\\n      break\\n    default:\\n      // the fallback is text/plain, so no need to specify it above\\n      res.setHeader('Content-Type', 'text/plain')\\n      res.write('hello, world!')\\n      break\\n  }\\n\\n  res.end()\\n}\\n\\nhttp.createServer(app).listen(3000)\\n</code></pre>\\n<p>You can test this out with the cURL program:</p>\\n<pre><code class=\\\"language-sh\\\">curl -I -H'Accept: text/html' http://localhost:3000/\\n</code></pre>\\n<h2>License</h2>\\n<p><a href=\\\"LICENSE\\\">MIT</a></p>\",\"docPath\":\"argo-ci/node_modules/accepts/readme\",\"proj\":\"argo-ci\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/docs-argo-ci-node-modules-accepts-readme-html.json\n// module id = 2000\n// module chunks = 506254941266"],"sourceRoot":""}