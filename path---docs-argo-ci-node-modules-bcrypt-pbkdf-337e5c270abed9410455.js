webpackJsonp([0xab5f040b3fb9],{2088:function(e,o){e.exports={pathContext:{docHtml:'<p>Port of the OpenBSD <code>bcrypt_pbkdf</code> function to pure Javascript. <code>npm</code>-ified\nversion of <a href="https://github.com/devi/tmp/blob/master/js/bcrypt_pbkdf.js">Devi Mandiri\'s port</a>,\nwith some minor performance improvements. The code is copied verbatim (and\nun-styled) from Devi\'s work.</p>\n<p>This product includes software developed by Niels Provos.</p>\n<h2>API</h2>\n<h3><code>bcrypt_pbkdf.pbkdf(pass, passlen, salt, saltlen, key, keylen, rounds)</code></h3>\n<p>Derive a cryptographic key of arbitrary length from a given password and salt,\nusing the OpenBSD <code>bcrypt_pbkdf</code> function. This is a combination of Blowfish and\nSHA-512.</p>\n<p>See <a href="http://www.tedunangst.com/flak/post/bcrypt-pbkdf">this article</a> for\nfurther information.</p>\n<p>Parameters:</p>\n<ul>\n<li><code>pass</code>, a Uint8Array of length <code>passlen</code></li>\n<li><code>passlen</code>, an integer Number</li>\n<li><code>salt</code>, a Uint8Array of length <code>saltlen</code></li>\n<li><code>saltlen</code>, an integer Number</li>\n<li><code>key</code>, a Uint8Array of length <code>keylen</code>, will be filled with output</li>\n<li><code>keylen</code>, an integer Number</li>\n<li><code>rounds</code>, an integer Number, number of rounds of the PBKDF to run</li>\n</ul>\n<h3><code>bcrypt_pbkdf.hash(sha2pass, sha2salt, out)</code></h3>\n<p>Calculate a Blowfish hash, given SHA2-512 output of a password and salt. Used as\npart of the inner round function in the PBKDF.</p>\n<p>Parameters:</p>\n<ul>\n<li><code>sha2pass</code>, a Uint8Array of length 64</li>\n<li><code>sha2salt</code>, a Uint8Array of length 64</li>\n<li><code>out</code>, a Uint8Array of length 32, will be filled with output</li>\n</ul>',docPath:"argo-ci/node_modules/bcrypt-pbkdf/readme",proj:"argo-ci"}}}});
//# sourceMappingURL=path---docs-argo-ci-node-modules-bcrypt-pbkdf-337e5c270abed9410455.js.map