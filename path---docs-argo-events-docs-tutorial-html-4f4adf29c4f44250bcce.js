webpackJsonp([67603604223862],{568:function(e,n){e.exports={pathContext:{docHtml:'<h1>Guide</h1>\n<ol>\n<li><a href="controllers-guide.html">What are sensor and gateway controllers</a></li>\n<li><a href="gateway-guide.html">Learn about gateways</a></li>\n<li><a href="sensor-guide.html">Learn about sensors</a></li>\n<li><a href="trigger-guide.html">Learn about triggers</a></li>\n<li>\n<p><a href="#gands">Install gateways and sensors</a></p>\n<ol>\n<li><a href="#webhook">Webhook</a></li>\n<li><a href="#artifact">Artifact</a></li>\n<li><a href="#calendar">Calendar</a></li>\n<li><a href="#resource">Resource</a></li>\n<li>\n<p><a href="#streams">Streams</a></p>\n<ol>\n<li><a href="#nats">Nats</a></li>\n<li><a href="#kafka">Kafka</a></li>\n<li><a href="#mqtt">MQTT</a></li>\n<li><a href="#amqp">AMQP</a></li>\n</ol>\n</li>\n</ol>\n</li>\n<li><a href="#updating-configurations">Updating gateway configurations dynamically</a></li>\n<li><a href="#passing-payload-from-signal-to-trigger">Passing payload from signal to trigger</a></li>\n<li><a href="#sensor-filters">Sensor filters</a></li>\n<li><a href="custom-gateway.html">Writing custom gateways</a></li>\n</ol>\n<h2><a name="gands">Install gateways and sensors</a></h2>\n<h2><a name="webhook">Webhook</a></h2>\n<p>Webhook gateway is useful when you want to listen to an incoming HTTP request and forward that event to watchers. </p>\n<ol>\n<li>\n<h5>Let\'s have a look at the configuration for our gateway.</h5>\n<pre><code class="language-yaml">apiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: webhook-gateway-configmap\ndata:\n  # run http server on 12000\n  webhook.portConfig: |-\n    port: "12000"\n  # listen to /bar endpoint for POST requests\n  webhook.barConfig: |-\n    endpoint: "/bar"\n    method: "POST"\n  # listen to /foo endpoint for POST requests\n  webhook.fooConfig: |-\n    endpoint: "/foo"\n    method: "POST"\n</code></pre>\n<ol>\n<li>\n<p>This configmap contains multiple configurations. First configuration describes on which port HTTP server should run. Currently, the gateway\ncan only start one HTTP server and all endpoints will be registered with this server. But in future, we plan to add support to\nspin up multiple HTTP servers and give ability to user to register endpoints to different servers.</p>\n</li>\n<li>\n<p>Second configuration describes an endpoint called <code>/bar</code> that will be registered with HTTP server. The <code>method</code> describes which HTTP method\nis allowed for a request. In this case only incoming HTTP POST requests will be accepted on <code>/bar</code>.</p>\n</li>\n<li>\n<p>Third configuration has endpoint <code>/foo</code> and accepts requests with method POST.</p>\n</li>\n</ol>\n<h5>Lets go ahead and create above configmap,</h5>\n<pre><code class="language-bash">kubectl create -n argo-events -f https://raw.githubusercontent.com/argoproj/argo-events/master/examples/gateways/webhook-gateway-configmap.yaml\n</code></pre>\n<pre><code class="language-bash"># Make sure that configmap is created in `argo-events` namespace\n\nkubectl -n argo-events get configmaps webhook-gateway-configmap\n</code></pre>\n</li>\n<li>\n<h5>Next step is to create the webhook gateway,</h5>\n<ol>\n<li>\n<p>Gateway definition,</p>\n<pre><code class="language-yaml">apiVersion: argoproj.io/v1alpha1\nkind: Gateway\nmetadata:\n   # name of the gateway\n  name: webhook-gateway\n  labels:\n    # must match with instance id of one of the gateway controllers. \n    gateways.argoproj.io/gateway-controller-instanceid: argo-events \n    gateway-name: "webhook-gateway"\nspec:\n  # configmap to read configurations from\n  configMap: "webhook-gateway-configmap"\n  # type of gateway\n  type: "webhook"\n  # event dispatch protocol between gateway and it\'s watchers\n  dispatchMechanism: "HTTP"\n  # version of events this gateway is generating. Required for cloudevents specification\n  version: "1.0"\n  # these are pod specifications\n  deploySpec:\n    containers:\n    - name: "webhook-events"\n      image: "argoproj/webhook-gateway"\n      imagePullPolicy: "Always"\n      command: ["/bin/webhook-gateway"]\n    serviceAccountName: "argo-events-sa"\n  # service specifications to expose gateway\n  serviceSpec:\n    selector:\n      gateway-name: "webhook-gateway"\n    ports:\n      - port: 12000\n        targetPort: 12000\n    type: LoadBalancer\n  # watchers are components interested in listening to events produced by this gateway\n  watchers:\n    sensors:\n    - name: "webhook-sensor"\n</code></pre>\n</li>\n<li>\n<p>Run following command,    </p>\n<pre><code class="language-bash">kubectl create -n argo-events -f https://raw.githubusercontent.com/argoproj/argo-events/master/examples/gateways/webhook.yaml\n</code></pre>\n</li>\n<li>\n<p>Check all gateway configurations are in <code>running</code> state</p>\n<pre><code class="language-bash">kubectl get -n argo-events gateways webhook-gateway -o yaml\n</code></pre>\n</li>\n</ol>\n</li>\n<li>\n<h5>Now its time to create webhook sensor.</h5>\n1. Sensor definition,\n    \n    ```yaml\n    apiVersion: argoproj.io/v1alpha1\n    kind: Sensor\n    metadata:\n      # name of sensor\n      name: webhook-sensor\n      labels:\n        # instance-id must match with one of the deployed sensor controller\'s instance-id\n        sensors.argoproj.io/sensor-controller-instanceid: argo-events\n    spec:\n      # make this sensor as long running.\n      repeat: true\n      serviceAccountName: argo-events-sa\n      # signals/notifications this sensor is interested in.\n      signals:\n        # event must be from webhook-gateway and the configuration that produced this event must be\n        # webhook.fooConfig\n        - name: webhook-gateway/webhook.fooConfig\n      triggers:\n        - name: webhook-workflow-trigger\n          resource:\n            namespace: argo-events\n            group: argoproj.io\n            version: v1alpha1\n            kind: Workflow\n            source:\n              inline: |\n                  apiVersion: argoproj.io/v1alpha1\n                  kind: Workflow\n                  metadata:\n                    generateName: hello-world-\n                  spec:\n                    entrypoint: whalesay\n                    templates:\n                      - name: whalesay\n                        container:\n                          args:\n                            - "hello world"\n                          command:\n                            - cowsay\n                          image: "docker/whalesay:latest"\n     ```\n<pre><code>This sensor defines only one signal called `webhook-gateway/webhook.fooConfig`, meaning, it is interested in listening\nevents from `webhook.fooConfig` configuration within `webhook-gateway` gateway.\n</code></pre>\n<ol start="2">\n<li>\n<p>Run following command, </p>\n<pre><code class="language-bash">kubectl create -f https://raw.githubusercontent.com/argoproj/argo-events/master/examples/sensors/webhook.yaml\n</code></pre>\n</li>\n<li>\n<p>Check whether all sensor nodes are initialized,</p>\n<pre><code class="language-bash">kubectl get -n argo-events sensors webhook-sensor   \n</code></pre>\n</li>\n<li>\n<p>Get the service url for gateway,</p>\n<pre><code class="language-bash">minikube service --url webhook-gateway-gateway-svc\n</code></pre>\n</li>\n<li>\n<p>If you face issue getting service url from executing above command, you can use <code>kubectl port-forward</code></p>\n<ol>\n<li>Open another terminal window and enter <code>kubectl port-forward &#x3C;name_of_the_webhook_gateway_pod> 9003:&#x3C;port_on_which_gateway_server_is_running></code></li>\n<li>You can now user <code>localhost:9003</code> to query webhook gateway</li>\n</ol>\n</li>\n<li>\n<p>Send a POST request to the gateway service, and monitor namespace for new workflow</p>\n<pre><code class="language-bash">curl -d \'{"message":"this is my first webhook"}\' -H "Content-Type: application/json" -X POST &#x3C;WEBHOOK_SERVICE_URL>/foo\n</code></pre>\n</li>\n<li>\n<p>List argo workflows</p>\n<pre><code class="language-bash">argo -n argo-events list\n</code></pre>\n</li>\n</ol>\n</li>\n</ol>\n<br/>\n<h2><a name="artifact">Artifact</a></h2>\n<p>Currently framework supports Minio S3 storage for artifact gateway but we plan to add File System and AWS/GCP S3 gateways in future.</p>\n<p>Lets start with deploying Minio server standalone deployment. You can get the K8 deployment from <a href="https://www.minio.io/kubernetes.html">https://www.minio.io/kubernetes.html</a></p>\n<ol>\n<li>\n<p>Minio deployment, store it in <code>minio-deployment.yaml</code>\n`<code></code>yaml\napiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n# This name uniquely identifies the PVC. Will be used in deployment below.\nname: minio-pv-claim\nlabels:\napp: minio-storage-claim\nspec:\n# Read more about access modes here: <a href="http://kubernetes.io/docs/user-guide/persistent-volumes/#access-modes">http://kubernetes.io/docs/user-guide/persistent-volumes/#access-modes</a>\naccessModes:\n- ReadWriteOnce\nresources:\n# This is the request for storage. Should be available in the cluster.\nrequests:\nstorage: 10Gi\n# Uncomment and add storageClass specific to your requirements below. Read more <a href="https://kubernetes.io/docs/concepts/storage/persistent-volumes/#class-1">https://kubernetes.io/docs/concepts/storage/persistent-volumes/#class-1</a>\n#storageClassName:\n---\napiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n# This name uniquely identifies the Deployment\nname: minio-deployment\nspec:\nstrategy:\ntype: Recreate\ntemplate:\nmetadata:\nlabels:\n# Label is used as selector in the service.\napp: minio\nspec:\n# Refer to the PVC created earlier\nvolumes:\n- name: storage\npersistentVolumeClaim:\n# Name of the PVC created earlier\nclaimName: minio-pv-claim\ncontainers:\n- name: minio\n# Pulls the default Minio image from Docker Hub\nimage: minio/minio\nargs:\n- server\n- /storage\nenv:\n# Minio access key and secret key\n- name: MINIO<em>ACCESS</em>KEY\nvalue: "myaccess"\n- name: MINIO<em>SECRET</em>KEY\nvalue: "mysecret"\nports:\n- containerPort: 9000\n# Mount the volume into the pod\nvolumeMounts:\n- name: storage # must match the volume name, above\nmountPath: "/storage"\n---\napiVersion: v1\nkind: Service\nmetadata:\nname: minio-service\nspec:\ntype: LoadBalancer\nports:\n- port: 9000\ntargetPort: 9000\nprotocol: TCP\nselector:\napp: minio</p>\n<pre><code>```\n</code></pre>\n</li>\n<li>\n<p>Install minio,\n<code>bash kubectl create -n argo-events -f minio-deployment.yaml</code> </p>\n</li>\n<li>\n<p>Create the configuration,\n<code>yaml apiVersion: v1 kind: ConfigMap metadata: name: artifact-gateway-configmap data: s3.fooConfig: |- s3EventConfig: bucket: input # name of the bucket we want to listen to endpoint: minio-service.argo-events:9000 # minio service endpoint event: s3:ObjectCreated:Put # type of event filter: # filter on object name if any prefix: "" suffix: "" insecure: true # type of minio server deployment accessKey: key: accesskey # key within below k8 secret whose corresponding value is name of the accessKey name: artifacts-minio # k8 secret name that holds minio creds secretKey: key: secretkey # key within below k8 secret whose corresponding value is name of the secretKey name: artifacts-minio # k8 secret name that holds minio creds</code> </p>\n<pre><code>Read comments on configmap to understand more about each field in configuration\n\nRun,\n```bash\nkubectl create -n argo-events -f https://raw.githubusercontent.com/argoproj/argo-events/master/examples/gateways/artifact-gateway-configmap.yaml\n```\n</code></pre>\n</li>\n<li>\n<p>Artifact gateway definition,\n<code>yaml apiVersion: argoproj.io/v1alpha1 kind: Gateway metadata: name: artifact-gateway labels: gateways.argoproj.io/gateway-controller-instanceid: argo-events gateway-name: "artifact-gateway" spec: deploySpec: containers: - name: "artifact-events" image: "argoproj/artifact-gateway" imagePullPolicy: "Always" command: ["/bin/artifact-gateway"] serviceAccountName: "argo-events-sa" configMap: "artifact-gateway-configmap" version: "1.0" type: "artifact" dispatchMechanism: "HTTP" watchers: sensors: - name: "artifact-sensor"</code>\n<br>\nExecute following command to create artifact gateway,\n<code>bash kubectl -n argo-events create -f https://raw.githubusercontent.com/argoproj/argo-events/master/examples/gateways/artifact.yaml</code></p>\n</li>\n<li>\n<p>Check whether all gateway configurations are active,\n<code>bash kubectl -n argo-events get gateways artifact-gateway -o yaml</code>\n</p>\n</li>\n<li>\n<p>Below is the sensor definition,\n<code>yaml apiVersion: argoproj.io/v1alpha1 kind: Sensor metadata: name: artifact-sensor labels: sensors.argoproj.io/sensor-controller-instanceid: argo-events spec: repeat: true serviceAccountName: argo-events-sa signals: - name: artifact-gateway/s3.fooConfig triggers: - name: artifact-workflow-trigger resource: namespace: argo-events group: argoproj.io version: v1alpha1 kind: Workflow source: inline: | apiVersion: argoproj.io/v1alpha1 kind: Workflow metadata: generateName: hello-world- spec: entrypoint: whalesay templates: - container: args: - "hello world" command: - cowsay image: "docker/whalesay:latest" name: whalesay</code>\n<br>\nRun,\n<code>bash kubectl -n argo-events create -f https://raw.githubusercontent.com/argoproj/argo-events/trigger-param-fix/examples/sensors/s3.yaml</code>\n<br>\nCheck that all signals and triggers are intialized,\n<code>bash kubectl -n argo-events get sensors artifact-sensor -o yaml</code>\n</p>\n</li>\n<li>\n<p>Drop a file into <code>input</code> bucket and monitor namespace for argo workflow.\n<code>bash argo -n argo-events list</code>     </p>\n</li>\n</ol>\n<br/>\n<h2><a name="calendar">Calendar</a></h2>\n<p>Calendar gateway either accepts <code>interval</code> or <code>cron schedules</code> as configuration.</p>\n<ol>\n<li>\n<p>Lets have a look at configuration,</p>\n<pre><code class="language-bash">apiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: calendar-gateway-configmap\ndata:\n  calendar.barConfig: |-\n    interval: 10s\n  calendar.fooConfig: |-\n    interval: 30 * * * *\n</code></pre>\n<p>The <code>barConfig</code> defines an interval of <code>10s</code>, meaning, gateway configuration will run every 10s and send event to watchers.\nThe <code>fooConfig</code> defines a cron schedule <code>30 * * * *</code> meaning, gateway configuration will run every 30 min and send event to watchers.  </p>\n<p>Run,</p>\n<pre><code class="language-bash">kubectl -n argo-events create -f https://raw.githubusercontent.com/argoproj/argo-events/master/examples/gateways/calendar-gateway-configmap.yaml\n</code></pre>\n</li>\n<li>\n<p>Gateway definition,</p>\n<pre><code class="language-yaml">apiVersion: argoproj.io/v1alpha1\nkind: Gateway\nmetadata:\n  name: calendar-gateway\n  labels:\n    gateways.argoproj.io/gateway-controller-instanceid: argo-events\n    gateway-name: "calendar-gateway"\nspec:\n  deploySpec:\n    containers:\n    - name: "calendar-events"\n      image: "argoproj/calendar-gateway"\n      imagePullPolicy: "Always"\n      command: ["/bin/calendar-gateway"]\n    serviceAccountName: "argo-events-sa"\n  configMap: "calendar-gateway-configmap"\n  type: "calendar"\n  dispatchMechanism: "HTTP"\n  version: "1.0"\n  watchers:\n      sensors:\n      - name: "calendar-sensor"\n</code></pre>\n<p>Run,</p>\n<pre><code class="language-bash">kubectl -n argo-events create -f https://raw.githubusercontent.com/argoproj/argo-events/master/examples/gateways/calendar.yaml\n</code></pre>\n<p>Check all configurations are active,</p>\n<pre><code class="language-bash">kubectl -n argo-events get gateways calendar-gateway -o yaml\n</code></pre>\n</li>\n<li>\n<p>Sensor definition,</p>\n<pre><code class="language-yaml">apiVersion: argoproj.io/v1alpha1\nkind: Sensor\nmetadata:\n  name: calendar-sensor\n  labels:\n    sensors.argoproj.io/sensor-controller-instanceid: argo-events\nspec:\n  serviceAccountName: argo-events-sa\n  imagePullPolicy: Always\n  repeat: true\n  signals:\n    - name: calendar-gateway/calendar.fooConfig\n  triggers:\n    - name: calendar-workflow-trigger\n      resource:\n        namespace: argo-events\n        group: argoproj.io\n        version: v1alpha1\n        kind: Workflow\n        source:\n          inline: |\n              apiVersion: argoproj.io/v1alpha1\n              kind: Workflow\n              metadata:\n                generateName: hello-world-\n              spec:\n                entrypoint: whalesay\n                templates:\n                  -\n                    container:\n                      args:\n                        - "hello world"\n                      command:\n                        - cowsay\n                      image: "docker/whalesay:latest"\n                    name: whalesay\n</code></pre>\n<p>Run,</p>\n<pre><code class="language-bash">kubectl -n argo-events create -f  https://raw.githubusercontent.com/argoproj/argo-events/master/examples/sensors/calendar.yaml\n</code></pre>\n</li>\n<li>\n<p>List workflows,</p>\n<pre><code class="language-bash">argo -n argo-events list\n</code></pre>\n</li>\n</ol>\n<br/>\n<h2><a name="resource">Resource</a></h2>\n<p>Resource gateway can monitor any K8 resource and any CRD.</p>\n<ol>\n<li>\n<p>Lets have a look at a configuration,</p>\n<pre><code class="language-yaml">apiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: resource-gateway-configmap\ndata:\n  resource.fooConfig: |-\n    namespace: argo-events\n    group: "argoproj.io"\n    version: "v1alpha1"\n    kind: "Workflow"\n    filter:\n      labels:\n        workflows.argoproj.io/phase: Succeeded\n        name: "my-workflow"\n  resource.barConfig: |-\n    namespace: argo-events\n    group: "argoproj.io"\n    version: "v1alpha1"\n    kind: "Workflow"\n    filter:\n      prefix: scripts-bash\n      labels:\n        workflows.argoproj.io/phase: Failed\n</code></pre>\n<ul>\n<li>\n<p>In configuration <code>resource.fooConfig</code>, gateway will watch resource of type <code>Workflow</code> which is K8 CRD. Whenever a\nworkflow with name  <code>my-workflow</code> is assigned label <code>workflows.argoproj.io/phase: Succeeded</code>, the configuration will\nsend an event to watchers.</p>\n</li>\n<li>\n<p>Gateway configuration <code>resource.barConfig</code> will send event to watchers whenever a sensor label <code>workflows.argoproj.io/phase: Failed</code> is added.</p>\n</li>\n<li>\n<p>You can create more such configurations that watch namespace, configmaps, deployments, pods etc.  </p>\n</li>\n</ul>\n<p>Run,</p>\n<pre><code class="language-bash">kubectl -n argo-events create -f https://raw.githubusercontent.com/argoproj/argo-events/master/examples/gateways/resource-gateway-configmap.yaml\n</code></pre>\n</li>\n<li>\n<p>Gateway definition,</p>\n<pre><code class="language-yaml">apiVersion: argoproj.io/v1alpha1\nkind: Gateway\nmetadata:\n  name: resource-gateway\n  labels:\n    gateways.argoproj.io/gateway-controller-instanceid: argo-events\n    gateway-name: "resource-gateway"\nspec:\n  deploySpec:\n    containers:\n    - name: "resource-events"\n      image: "argoproj/resource-gateway"\n      imagePullPolicy: "Always"\n      command: ["/bin/resource-gateway"]\n    serviceAccountName: "argo-events-sa"\n  configMap: "resource-gateway-configmap"\n  type: "resource"\n  dispatchMechanism: "HTTP"\n  version: "1.0"\n  watchers:\n    sensors:\n    - name: "resource-sensor"\n</code></pre>\n<p>Run,</p>\n<pre><code class="language-bash">kubectl -n argo-events create -f https://raw.githubusercontent.com/argoproj/argo-events/master/examples/gateways/resource.yaml\n</code></pre>\n<p>Check all configurations are active, </p>\n<pre><code class="language-bash">kubectl -n argo-events get gateways resource-gateway -o yaml\n</code></pre>\n</li>\n<li>\n<p>Sensor definition,</p>\n<pre><code class="language-yaml">apiVersion: argoproj.io/v1alpha1\nkind: Sensor\nmetadata:\n  name: resource-sensor\n  labels:\n    sensors.argoproj.io/sensor-controller-instanceid: argo-events\nspec:\n  repeat: true\n  serviceAccountName: argo-events-sa\n  signals:\n    - name: resource-gateway/resource.fooConfig\n  triggers:\n    - name: argo-workflow\n      resource:\n        namespace: argo-events\n        group: argoproj.io\n        version: v1alpha1\n        kind: Workflow\n        source:\n          inline: |\n              apiVersion: argoproj.io/v1alpha1\n              kind: Workflow\n              metadata:\n                generateName: hello-world-\n              spec:\n                entrypoint: whalesay\n                templates:\n                  -\n                    container:\n                      args:\n                        - "hello world"\n                      command:\n                        - cowsay\n                      image: "docker/whalesay:latest"\n                    name: whalesay\n</code></pre>\n<p>Run,</p>\n<pre><code class="language-bash">kubectl -n argo-events create -f https://raw.githubusercontent.com/argoproj/argo-events/master/examples/sensors/resource.yaml\n</code></pre>\n</li>\n<li>\n<p>Create an basic <code>hello-world</code> argo workflow with name  <code>my-workflow</code>. </p>\n<pre><code class="language-yaml">apiVersion: argoproj.io/v1alpha1\nkind: Workflow\nmetadata:\n  generateName: hello-world-\n  namespace: argo-events\n  labels:\n    name: my-workflow\nspec:\n  entrypoint: whalesay\n  serviceAccountName: argo-events-sa\n  templates:\n  - container:\n      args:\n      - "hello world"\n      command:\n      - cowsay\n      image: docker/whalesay:latest\n    name: whalesay\n</code></pre>\n<p>Run</p>\n<pre><code class="language-bash">kubectl -n argo-events -f https://raw.githubusercontent.com/argoproj/argo/master/examples/hello-world.yaml\n</code></pre>\n<p>Once workflow is created, resource sensor will trigger workflow.</p>\n</li>\n<li>\n<p>Run <code>argo -n argo-events list</code></p>\n</li>\n</ol>\n<br/>\n<h2><a name="streams">Streams</a></h2>\n<ul>\n<li>\n<h3><a name="nats">NATS</a></h3>\n<p>Lets start by installing a NATS cluster</p>\n<ol>\n<li>\n<p>Store following NATS deployment in nats-deploy.yaml </p>\n<pre><code class="language-yaml">apiVersion: v1\nkind: Service\nmetadata:\n  name: nats\n  namespace: argo-events\n  labels:\n    component: nats\nspec:\n  selector:\n    component: nats\n  type: ClusterIP\n  ports:\n  - name: client\n    port: 4222\n  - name: cluster\n    port: 6222\n  - name: monitor\n    port: 8222\n---\napiVersion: apps/v1beta1\nkind: StatefulSet\nmetadata:\n  name: nats\n  namespace: argo-events\n  labels:\n    component: nats\nspec:\n  serviceName: nats\n  replicas: 3\n  template:\n    metadata:\n      labels:\n        component: nats\n    spec:\n      serviceAccountName: argo-events-sa\n      containers:\n      - name: nats\n        image: nats:latest\n        ports:\n        - containerPort: 4222\n          name: client\n        - containerPort: 6222\n          name: cluster\n        - containerPort: 8222\n          name: monitor\n        livenessProbe:\n          httpGet:\n            path: /\n            port: 8222\n          initialDelaySeconds: 10\n          timeoutSeconds: 5\n</code></pre>\n<p>Run,</p>\n<pre><code class="language-bash">kubectl -n argo-events create -f nats-deploy.yaml\n</code></pre>\n</li>\n<li>\n<p>Once all pods are up and running, create gateway configmap,</p>\n<pre><code class="language-bash">kubectl -n argo-events create -f https://raw.githubusercontent.com/argoproj/argo-events/master/examples/gateways/nats-gateway-configmap.yaml\n</code></pre>\n</li>\n<li>\n<p>Lets create a sensor,</p>\n<pre><code class="language-bash">kubectl -n argo-events create -f https://raw.githubusercontent.com/argoproj/argo-events/master/examples/sensors/nats.yaml\n</code></pre>\n</li>\n<li>\n<p>Lets create gateway,  </p>\n<pre><code class="language-bash">kubectl -n argo-events create -f https://raw.githubusercontent.com/argoproj/argo-events/master/examples/gateways/nats.yaml\n</code></pre>\n</li>\n<li>\n<p>Use nats client to publish message to subject. To install NATS client, head to <a href="https://github.com/nats-io/go-nats">go-nats</a></p>\n</li>\n<li>\n<p>Once you publish message to a subject the gateway is configured to listen, you will see the argo workflow getting created.</p>\n</li>\n</ol>\n</li>\n<li>\n<h3><a name="kafka">Kafka</a></h3>\n<ol>\n<li>\n<p>If you don\'t already have a Kafka cluster running, follow the <a href="https://github.com/helm/charts/tree/master/incubator/kafka">kafka setup</a> </p>\n</li>\n<li>\n<p>Lets create the configuration for gateway,   </p>\n<pre><code class="language-bash">kubectl -n argo-events create -f https://raw.githubusercontent.com/argoproj/argo-events/master/examples/gateways/kafka-gateway-configmap.yaml\n</code></pre>\n</li>\n<li>\n<p>Once above configmap is created, lets deploy the gateway,</p>\n<pre><code class="language-bash">kubectl -n argo-events create -f https://raw.githubusercontent.com/argoproj/argo-events/master/examples/gateways/kafka.yaml\n</code></pre>\n</li>\n<li>\n<p>To create sensor, run</p>\n<pre><code class="language-bash">kubectl -n argo-events create -f https://raw.githubusercontent.com/argoproj/argo-events/master/examples/sensors/kafka.yaml\n</code></pre>\n</li>\n<li>\n<p>Publish a message to a topic and partition the gateway is configured to listen, you will see the argo workflow getting created.</p>\n</li>\n</ol>\n</li>\n<li>\n<h3><a name="mqtt">MQTT</a></h3>\n<ol>\n<li>\n<p>If you don\'t have MQTT broker installed, use <code>Mosquitto</code>.</p>\n<p>Deployment,</p>\n<pre><code class="language-yaml">apiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n name: mosquitto\n namespace: argo-events\nspec:\n template:\n   spec:\n     serviceAccountName: argo-events-sa\n     containers:\n     - name: mosquitto\n       image: toke/mosquitto\n       ports:\n       - containerPort: 9001\n       - containerPort: 8883\n</code></pre>\n<p>Service,</p>\n<pre><code class="language-yaml">apiVersion: v1\nkind: Service\nmetadata:\n name: mqtt\n namespace: argo-events\nspec:\n ports:\n - name: mosquitto\n   port: 1883\n - name: mosquitto-web\n   port: 80\n   targetPort: 9001\n</code></pre>\n</li>\n<li>\n<p>Create the gateway configuration,</p>\n<pre><code class="language-bash">kubectl -n argo-events create -f https://raw.githubusercontent.com/argoproj/argo-events/master/examples/gateways/mqtt-gateway-configmap.yaml\n</code></pre>\n</li>\n<li>\n<p>Deploy the gateway,</p>\n<pre><code class="language-bash">kubectl -n argo-events create -f https://raw.githubusercontent.com/argoproj/argo-events/master/examples/gateway/mqtt-gateway.yaml\n</code></pre>\n</li>\n<li>\n<p>Deploy the sensor,</p>\n<pre><code class="language-bash">kubectl -n argo-events create -f https://raw.githubusercontent.com/argoproj/argo-events/master/examples/sensors/mqtt-sensor.yaml\n</code></pre>\n</li>\n<li>\n<p>Send a message to correct topic the gateway is configured to listen, you will see the argo workflow getting created.</p>\n</li>\n</ol>\n</li>\n<li>\n<h3><a name="amqp">AMQP</a></h3>\n<ol>\n<li>\n<p>If you haven\'t already setup rabbitmq cluster, follow <a href="https://github.com/binarin/rabbit-on-k8s-standalone">rabbitmq setup</a>  </p>\n</li>\n<li>\n<p>Create gateway configuration,</p>\n<pre><code class="language-bash">kubectl -n argo-events create -f https://raw.githubusercontent.com/argoproj/argo-events/master/examples/gateways/amqp-gateway-configmap.yaml \n</code></pre>\n</li>\n<li>\n<p>Deploy gateway,</p>\n<pre><code class="language-bash">kubectl -n argo-events create -f https://raw.githubusercontent.com/argoproj/argo-events/master/examples/gateways/amqp.yaml\n</code></pre>\n</li>\n<li>\n<p>Deploy sensor,</p>\n<pre><code class="language-bash">kubectl -n argo-events create -f https://raw.githubusercontent.com/argoproj/argo-events/master/examples/sensors/amqp.yaml\n</code></pre>\n</li>\n<li>\n<p>Send a message to exchange name the gateway is configured to listen, you will see the argo workflow getting created.</p>\n</li>\n</ol>\n</li>\n</ul>\n<br/>\n<h2><a name="updating-configurations">Updating gateway configurations dynamically</a></h2>\n<p>  The framework offers ability to add and remove configurations for gateway on the fly.\nLets look at an example of webhook gateway. You already have three configurations running in gateway,\n<code>webhook.portConfig</code>, <code>webhook.fooConfig</code>  and <code>webhook.barConfig</code></p>\n<ol>\n<li>\n<p>Lets add a new configuration to gateway configmap. Update configmap looks like,</p>\n<pre><code class="language-yaml">apiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: webhook-gateway-configmap\ndata:\n  webhook.portConfig: |-\n    port: "12000"\n  webhook.barConfig: |-\n    endpoint: "/bar"\n    method: "POST"\n  webhook.fooConfig: |-\n    endpoint: "/foo"\n    method: "POST"\n  webhook.myNewConfig: |-\n    endpoint: "/my"\n    method: "POST"\n</code></pre>\n<p>  Run <code>kubectl -n argo-events apply -f configmap-file-name</code> on gateway configmap to update the configmap resource.</p>\n</li>\n<li>\n<p>Run <code>kubectl -n argo-events get gateways webhook-gateway -o yaml</code>, you\'ll see gateway now has <code>webhook.myNewConfig</code> running.     </p>\n</li>\n<li>\n<p>Update the webhook sensor or create a new sensor to listen to this new configuration.</p>\n</li>\n<li>\n<p>Test the endpoint by firing a HTTP POST request to <code>/my</code>.</p>\n</li>\n<li>\n<p>Now, lets remove the configuration <code>webhook.myNewConfig</code> from gateway configmap. Run <code>kubectl apply</code> to update the configmap.</p>\n</li>\n<li>\n<p>Check the gateway resource,  <code>kubectl -n argo-events get gateways webhook-gateway -o yaml</code>. You will see <code>webhook.myNewConfig</code> is removed from the gateway.</p>\n</li>\n<li>\n<p>Try sending a POST request to \'/my\' and server will respond with 404.</p>\n</li>\n</ol>\n<br/>\n   \n## <a name="passing-payload-from-signal-to-trigger">Passing payload from signal to trigger</a> \n<ul>\n<li>\n<h3>Complete payload</h3>\n<ol>\n<li>\n<p>Create a webhook sensor,</p>\n<pre><code class="language-yaml">apiVersion: argoproj.io/v1alpha1\nkind: Sensor\nmetadata:\n  name: webhook-with-resource-param-sensor\n  labels:\n    sensors.argoproj.io/sensor-controller-instanceid: argo-events\nspec:\n  repeat: true\n  serviceAccountName: argo-events-sa\n  signals:\n    - name: webhook-gateway/webhook.fooConfig\n  triggers:\n    - name: argo-workflow\n      resource:\n        namespace: argo-events\n        group: argoproj.io\n        version: v1alpha1\n        kind: Workflow\n        parameters:\n          - src:\n              signal: webhook-gateway/webhook.fooConfig\n            # pass payload of webhook-gateway/webhook.fooConfig signal to first parameter value\n            # of arguments.\n            dest: spec.arguments.parameters.0.value\n        source:\n          inline: |\n              apiVersion: argoproj.io/v1alpha1\n              kind: Workflow\n              metadata:\n                name: arguments-via-webhook-event\n              spec:\n                entrypoint: whalesay\n                arguments:\n                  parameters:\n                  - name: message\n                    # this is the value that should be overridden\n                    value: hello world\n                templates:\n                - name: whalesay\n                  inputs:\n                    parameters:\n                    - name: message\n                  container:\n                    image: docker/whalesay:latest\n                    command: [cowsay]\n                    args: ["{{inputs.parameters.message}}"]\n</code></pre>\n<p>Run,</p>\n<pre><code class="language-bash">kubectl create -f https://raw.githubusercontent.com/argoproj/argo-events/trigger-param-fix/examples/sensors/webhook-with-complete-payload.yaml\n</code></pre>\n</li>\n<li>\n<p><b>Note that sensor name is <code>webhook-with-resource-param-sensor</code>. Update your gateway accordingly or create a new one.</b></p>\n</li>\n<li>\n<p>Send a POST request to your webhook gateway</p>\n<pre><code class="language-bash">curl -d \'{"message":"this is my first webhook"}\' -H "Content-Type: application/json" -X POST $WEBHOOK_SERVICE_URL/foo\n</code></pre>\n</li>\n<li>\n<p>List argo workflows,</p>\n<pre><code class="language-bash">argo -n argo-events list\n</code></pre>\n</li>\n<li>\n<p>Check the workflow logs using <code>argo -n argo-events logs &#x3C;your-workflow-pod-name></code></p>\n</li>\n</ol>\n</li>\n</ul>\n<h2>Filter event payload</h2>\n<ol>\n<li>\n<p>Create a webhook sensor,</p>\n<pre><code class="language-yaml">apiVersion: argoproj.io/v1alpha1\nkind: Sensor\nmetadata:\n  name: webhook-with-resource-param-sensor\n  labels:\n    sensors.argoproj.io/sensor-controller-instanceid: argo-events\nspec:\n  repeat: true\n  serviceAccountName: argo-events-sa\n  signals:\n    - name: webhook-gateway/webhook.fooConfig\n  triggers:\n    - name: argo-workflow\n      resource:\n        namespace: argo-events\n        group: argoproj.io\n        version: v1alpha1\n        kind: Workflow\n        # The parameters from the workflow are overridden by the webhook\'s message\n        parameters:\n          - src:\n              signal: webhook-gateway/webhook.fooConfig\n              # extract the object corresponding to `message` key from event payload\n              # of webhook-gateway/webhook.fooConfig signal\n              path: message\n              # if `message` key doesn\'t exists in event payload then default value of payload\n              # passed to trigger will be `hello default`\n              value: hello default\n            # override the value of first parameter in arguments with above payload.\n            dest: spec.arguments.parameters.0.value\n        source:\n          inline: |\n              apiVersion: argoproj.io/v1alpha1\n              kind: Workflow\n              metadata:\n                name: arguments-via-webhook-event\n              spec:\n                entrypoint: whalesay\n                arguments:\n                  parameters:\n                  - name: message\n                    # this is the value that should be overridden\n                    value: hello world\n                templates:\n                - name: whalesay\n                  inputs:\n                    parameters:\n                    - name: message\n                  container:\n                    image: docker/whalesay:latest\n                    command: [cowsay]\n                    args: ["{{inputs.parameters.message}}"]\n</code></pre>\n</li>\n<li>\n<p>Run,</p>\n<pre><code class="language-bash">kubectl apply -f https://raw.githubusercontent.com/argoproj/argo-events/trigger-param-fix/examples/sensors/webhook-with-resource-param.yaml\n</code></pre>\n</li>\n<li>\n<p>Post request to webhook gateway and watch new workflow being created</p>\n</li>\n</ol>\n<br/>\n<h2>Sensor Filters</h2>\n<p> Following are the types of the filter you can apply on signal/event payload,\n<br>\n|   Type   |   Description      |\n|----------|-------------------|\n|   Time            |   Filters the signal based on time constraints     |\n|   EventContext    |   Filters metadata that provides circumstantial information about the signal.      |\n|   Data            |   Describes constraints and filters for payload      |\n</p>\n<h3>Time Filter</h3>\n<pre><code class="language-yaml">filters:\n time:\n  start: "2016-05-10T15:04:05Z07:00"\n  stop: "2020-01-02T15:04:05Z07:00"\n</code></pre>\n<p> Example:<br>\n<a href="https://raw.githubusercontent.com/argoproj/argo-events/master/examples/sensors/time-filter-webhook.yaml">https://raw.githubusercontent.com/argoproj/argo-events/master/examples/sensors/time-filter-webhook.yaml</a></p>\n<h3>EventContext Filter</h3>\n<pre><code>filters:\n context:\n  source:\n   host: amazon.com\n   contentType: application/json\n</code></pre>\n<p>  Example:<br>\n<a href="https://raw.githubusercontent.com/argoproj/argo-events/master/examples/sensors/context-filter-webhook.yaml">https://raw.githubusercontent.com/argoproj/argo-events/master/examples/sensors/context-filter-webhook.yaml</a></p>\n<h3>Data filter</h3>\n<pre><code>filters:\n data:\n - path: bucket\n   type: string\n   value: argo-workflow-input\n</code></pre>\n<p>  Example:<br>\n<a href="https://raw.githubusercontent.com/argoproj/argo-events/master/examples/sensors/data-filter-webhook.yaml">https://raw.githubusercontent.com/argoproj/argo-events/master/examples/sensors/data-filter-webhook.yaml</a></p>',
docPath:"argo-events/docs/tutorial",proj:"argo-events"}}}});
//# sourceMappingURL=path---docs-argo-events-docs-tutorial-html-4f4adf29c4f44250bcce.js.map