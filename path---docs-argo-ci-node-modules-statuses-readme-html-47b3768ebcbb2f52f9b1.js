webpackJsonp([25356149658017],{3189:function(e,s){e.exports={pathContext:{docHtml:'<h1>Statuses</h1>\n<p><a href="https://npmjs.org/package/statuses"><img src="https://img.shields.io/npm/v/statuses.svg" alt="NPM Version"></a>\n<a href="https://npmjs.org/package/statuses"><img src="https://img.shields.io/npm/dm/statuses.svg" alt="NPM Downloads"></a>\n<a href="https://nodejs.org/en/download"><img src="https://img.shields.io/badge/node.js-%3E%3D_0.6-brightgreen.svg" alt="Node.js Version"></a>\n<a href="https://travis-ci.org/jshttp/statuses"><img src="https://img.shields.io/travis/jshttp/statuses.svg" alt="Build Status"></a>\n<a href="https://coveralls.io/r/jshttp/statuses?branch=master"><img src="https://img.shields.io/coveralls/jshttp/statuses.svg" alt="Test Coverage"></a></p>\n<p>HTTP status utility for node.</p>\n<h2>API</h2>\n<pre><code class="language-js">var status = require(\'statuses\')\n</code></pre>\n<h3>var code = status(Integer || String)</h3>\n<p>If <code>Integer</code> or <code>String</code> is a valid HTTP code or status message, then the appropriate <code>code</code> will be returned. Otherwise, an error will be thrown.</p>\n<pre><code class="language-js">status(403) // => 403\nstatus(\'403\') // => 403\nstatus(\'forbidden\') // => 403\nstatus(\'Forbidden\') // => 403\nstatus(306) // throws, as it\'s not supported by node.js\n</code></pre>\n<h3>status.codes</h3>\n<p>Returns an array of all the status codes as <code>Integer</code>s.</p>\n<h3>var msg = status[code]</h3>\n<p>Map of <code>code</code> to <code>status message</code>. <code>undefined</code> for invalid <code>code</code>s.</p>\n<pre><code class="language-js">status[404] // => \'Not Found\'\n</code></pre>\n<h3>var code = status[msg]</h3>\n<p>Map of <code>status message</code> to <code>code</code>. <code>msg</code> can either be title-cased or lower-cased. <code>undefined</code> for invalid <code>status message</code>s.</p>\n<pre><code class="language-js">status[\'not found\'] // => 404\nstatus[\'Not Found\'] // => 404\n</code></pre>\n<h3>status.redirect[code]</h3>\n<p>Returns <code>true</code> if a status code is a valid redirect status.</p>\n<pre><code class="language-js">status.redirect[200] // => undefined\nstatus.redirect[301] // => true\n</code></pre>\n<h3>status.empty[code]</h3>\n<p>Returns <code>true</code> if a status code expects an empty body.</p>\n<pre><code class="language-js">status.empty[200] // => undefined\nstatus.empty[204] // => true\nstatus.empty[304] // => true\n</code></pre>\n<h3>status.retry[code]</h3>\n<p>Returns <code>true</code> if you should retry the rest.</p>\n<pre><code class="language-js">status.retry[501] // => undefined\nstatus.retry[503] // => true\n</code></pre>\n<h2>Adding Status Codes</h2>\n<p>The status codes are primarily sourced from <a href="http://www.iana.org/assignments/http-status-codes/http-status-codes-1.csv">http://www.iana.org/assignments/http-status-codes/http-status-codes-1.csv</a>.\nAdditionally, custom codes are added from <a href="http://en.wikipedia.org/wiki/List_of_HTTP_status_codes">http://en.wikipedia.org/wiki/List<em>of</em>HTTP<em>status</em>codes</a>.\nThese are added manually in the <code>lib/*.json</code> files.\nIf you would like to add a status code, add it to the appropriate JSON file.</p>\n<p>To rebuild <code>codes.json</code>, run the following:</p>\n<pre><code class="language-bash"># update src/iana.json\nnpm run fetch\n# build codes.json\nnpm run build\n</code></pre>',docPath:"argo-ci/node_modules/statuses/readme",proj:"argo-ci"}}}});
//# sourceMappingURL=path---docs-argo-ci-node-modules-statuses-readme-html-47b3768ebcbb2f52f9b1.js.map