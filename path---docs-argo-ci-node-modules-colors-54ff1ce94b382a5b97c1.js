webpackJsonp([0xae49fd012850],{2178:function(e,o){e.exports={pathContext:{docHtml:"<h1>colors.js</h1>\n<p><a href=\"https://travis-ci.org/Marak/colors.js\"><img src=\"https://travis-ci.org/Marak/colors.js.svg?branch=master\" alt=\"Build Status\"></a>\n<a href=\"https://www.npmjs.org/package/colors\"><img src=\"https://img.shields.io/npm/v/colors.svg\" alt=\"version\"></a>\n<a href=\"https://david-dm.org/Marak/colors.js\"><img src=\"https://david-dm.org/Marak/colors.js.svg\" alt=\"dependencies\"></a>\n<a href=\"https://david-dm.org/Marak/colors.js#info=devDependencies\"><img src=\"https://david-dm.org/Marak/colors.js/dev-status.svg\" alt=\"devDependencies\"></a></p>\n<p>Please check out the <a href=\"ROADMAP.html\">roadmap</a> for upcoming features and releases.  Please open Issues to provide feedback, and check the <code>develop</code> branch for the latest bleeding-edge updates.</p>\n<h2>get color and style in your node.js console</h2>\n<p><img src=\"https://raw.githubusercontent.com/Marak/colors.js/master/screenshots/colors.png\" alt=\"Demo\"></p>\n<h2>Installation</h2>\n<pre><code>npm install colors\n</code></pre>\n<h2>colors and styles!</h2>\n<h3>text colors</h3>\n<ul>\n<li>black</li>\n<li>red</li>\n<li>green</li>\n<li>yellow</li>\n<li>blue</li>\n<li>magenta</li>\n<li>cyan</li>\n<li>white</li>\n<li>gray</li>\n<li>grey</li>\n</ul>\n<h3>background colors</h3>\n<ul>\n<li>bgBlack</li>\n<li>bgRed</li>\n<li>bgGreen</li>\n<li>bgYellow</li>\n<li>bgBlue</li>\n<li>bgMagenta</li>\n<li>bgCyan</li>\n<li>bgWhite</li>\n</ul>\n<h3>styles</h3>\n<ul>\n<li>reset</li>\n<li>bold</li>\n<li>dim</li>\n<li>italic</li>\n<li>underline</li>\n<li>inverse</li>\n<li>hidden</li>\n<li>strikethrough</li>\n</ul>\n<h3>extras</h3>\n<ul>\n<li>rainbow</li>\n<li>zebra</li>\n<li>america</li>\n<li>trap</li>\n<li>random</li>\n</ul>\n<h2>Usage</h2>\n<p>By popular demand, <code>colors</code> now ships with two types of usages!</p>\n<p>The super nifty way</p>\n<pre><code class=\"language-js\">var colors = require('colors');\n\nconsole.log('hello'.green); // outputs green text\nconsole.log('i like cake and pies'.underline.red) // outputs red underlined text\nconsole.log('inverse the color'.inverse); // inverses the color\nconsole.log('OMG Rainbows!'.rainbow); // rainbow\nconsole.log('Run the trap'.trap); // Drops the bass\n</code></pre>\n<p>or a slightly less nifty way which doesn't extend <code>String.prototype</code></p>\n<pre><code class=\"language-js\">var colors = require('colors/safe');\n\nconsole.log(colors.green('hello')); // outputs green text\nconsole.log(colors.red.underline('i like cake and pies')) // outputs red underlined text\nconsole.log(colors.inverse('inverse the color')); // inverses the color\nconsole.log(colors.rainbow('OMG Rainbows!')); // rainbow\nconsole.log(colors.trap('Run the trap')); // Drops the bass\n</code></pre>\n<p>I prefer the first way. Some people seem to be afraid of extending <code>String.prototype</code> and prefer the second way. </p>\n<p>If you are writing good code you will never have an issue with the first approach. If you really don't want to touch <code>String.prototype</code>, the second usage will not touch <code>String</code> native object.</p>\n<h2>Disabling Colors</h2>\n<p>To disable colors you can pass the following arguments in the command line to your application:</p>\n<pre><code class=\"language-bash\">node myapp.js --no-color\n</code></pre>\n<h2>Console.log <a href=\"http://nodejs.org/docs/latest/api/console.html#console_console_log_data\">string substitution</a></h2>\n<pre><code class=\"language-js\">var name = 'Marak';\nconsole.log(colors.green('Hello %s'), name);\n// outputs -> 'Hello Marak'\n</code></pre>\n<h2>Custom themes</h2>\n<h3>Using standard API</h3>\n<pre><code class=\"language-js\">var colors = require('colors');\n\ncolors.setTheme({\n  silly: 'rainbow',\n  input: 'grey',\n  verbose: 'cyan',\n  prompt: 'grey',\n  info: 'green',\n  data: 'grey',\n  help: 'cyan',\n  warn: 'yellow',\n  debug: 'blue',\n  error: 'red'\n});\n\n// outputs red text\nconsole.log(\"this is an error\".error);\n\n// outputs yellow text\nconsole.log(\"this is a warning\".warn);\n</code></pre>\n<h3>Using string safe API</h3>\n<pre><code class=\"language-js\">var colors = require('colors/safe');\n\n// set single property\nvar error = colors.red;\nerror('this is red');\n\n// set theme\ncolors.setTheme({\n  silly: 'rainbow',\n  input: 'grey',\n  verbose: 'cyan',\n  prompt: 'grey',\n  info: 'green',\n  data: 'grey',\n  help: 'cyan',\n  warn: 'yellow',\n  debug: 'blue',\n  error: 'red'\n});\n\n// outputs red text\nconsole.log(colors.error(\"this is an error\"));\n\n// outputs yellow text\nconsole.log(colors.warn(\"this is a warning\"));\n</code></pre>\n<h3>Combining Colors</h3>\n<pre><code class=\"language-javascript\">var colors = require('colors');\n\ncolors.setTheme({\n  custom: ['red', 'underline']\n});\n\nconsole.log('test'.custom);\n</code></pre>\n<p><em>Protip: There is a secret undocumented style in <code>colors</code>. If you find the style you can summon him.</em></p>",docPath:"argo-ci/node_modules/colors/readme",proj:"argo-ci"}}}});
//# sourceMappingURL=path---docs-argo-ci-node-modules-colors-54ff1ce94b382a5b97c1.js.map