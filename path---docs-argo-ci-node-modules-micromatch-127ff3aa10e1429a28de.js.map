{"version":3,"sources":["webpack:///path---docs-argo-ci-node-modules-micromatch-127ff3aa10e1429a28de.js","webpack:///./.cache/json/docs-argo-ci-node-modules-micromatch.json"],"names":["webpackJsonp","2876","module","exports","pathContext","docHtml","docPath","proj"],"mappings":"AAAAA,cAAc,iBAERC,KACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,aAAeC,QAAA,45yBAAq0xBC,QAAA,yCAAAC,KAAA","file":"path---docs-argo-ci-node-modules-micromatch-127ff3aa10e1429a28de.js","sourcesContent":["webpackJsonp([218370533909717],{\n\n/***/ 2876:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"pathContext\":{\"docHtml\":\"<h1>micromatch <a href=\\\"https://www.npmjs.com/package/micromatch\\\"><img src=\\\"https://img.shields.io/npm/v/micromatch.svg?style=flat\\\" alt=\\\"NPM version\\\"></a> <a href=\\\"https://npmjs.org/package/micromatch\\\"><img src=\\\"https://img.shields.io/npm/dm/micromatch.svg?style=flat\\\" alt=\\\"NPM downloads\\\"></a> <a href=\\\"https://travis-ci.org/jonschlinkert/micromatch\\\"><img src=\\\"https://img.shields.io/travis/jonschlinkert/micromatch.svg?style=flat\\\" alt=\\\"Build Status\\\"></a></h1>\\n<blockquote>\\n<p>Glob matching for javascript/node.js. A drop-in replacement and faster alternative to minimatch and multimatch.</p>\\n</blockquote>\\n<p>Micromatch supports all of the same matching features as <a href=\\\"https://github.com/isaacs/minimatch\\\">minimatch</a> and <a href=\\\"https://github.com/sindresorhus/multimatch\\\">multimatch</a>.</p>\\n<ul>\\n<li><a href=\\\"#usage\\\">mm()</a> is the same as <a href=\\\"https://github.com/sindresorhus/multimatch\\\">multimatch()</a></li>\\n<li><a href=\\\"#match\\\">mm.match()</a> is the same as <a href=\\\"https://github.com/isaacs/minimatch\\\">minimatch.match()</a></li>\\n<li>use <a href=\\\"#ismatch\\\">mm.isMatch()</a> instead of <a href=\\\"https://github.com/isaacs/minimatch\\\">minimatch()</a></li>\\n</ul>\\n<h2>Install</h2>\\n<p>Install with <a href=\\\"https://www.npmjs.com/\\\">npm</a>:</p>\\n<pre><code class=\\\"language-sh\\\">$ npm install --save micromatch\\n</code></pre>\\n<h2>Start matching!</h2>\\n<pre><code class=\\\"language-js\\\">var mm = require('micromatch');\\nconsole.log(mm(['']))\\n</code></pre>\\n<hr>\\n<h3>Features</h3>\\n<ul>\\n<li><a href=\\\"#switch-from-minimatch\\\">Drop-in replacement</a> for <a href=\\\"https://github.com/isaacs/minimatch\\\">minimatch</a> and <a href=\\\"https://github.com/sindresorhus/multimatch\\\">multimatch</a></li>\\n<li>Built-in support for multiple glob patterns, like <code>['foo/*.js', '!bar.js']</code></li>\\n<li><a href=\\\"https://github.com/jonschlinkert/braces\\\">Brace Expansion</a> (<code>foo/bar-{1..5}.md</code>, <code>one/{two,three}/four.md</code>)</li>\\n<li>Typical glob patterns, like <code>**/*</code>, <code>a/b/*.js</code>, or <code>['foo/*.js', '!bar.js']</code></li>\\n<li>Methods like <code>.isMatch()</code>, <code>.contains()</code> and <code>.any()</code></li>\\n</ul>\\n<p><strong>Extended globbing features:</strong></p>\\n<ul>\\n<li>Logical <code>OR</code> (<code>foo/bar/(abc|xyz).js</code>)</li>\\n<li>Regex character classes (<code>foo/bar/baz-[1-5].js</code>)</li>\\n<li>POSIX <a href=\\\"https://github.com/jonschlinkert/expand-brackets\\\">bracket expressions</a> (<code>**/[[:alpha:][:digit:]]/</code>)</li>\\n<li><a href=\\\"https://github.com/jonschlinkert/extglob\\\">extglobs</a> (<code>**/+(x|y)</code>, <code>!(a|b)</code>, etc).</li>\\n</ul>\\n<p>You can combine these to create whatever matching patterns you need.</p>\\n<p><strong>Example</strong></p>\\n<pre><code class=\\\"language-js\\\">// double-negation!\\nmm(['fa', 'fb', 'f', 'fo'], '!(f!(o))');\\n//=> ['fo']\\n</code></pre>\\n<h2>Why switch to micromatch?</h2>\\n<ul>\\n<li>Native support for multiple glob patterns, no need for wrappers like <a href=\\\"https://github.com/sindresorhus/multimatch\\\">multimatch</a></li>\\n<li><a href=\\\"#benchmarks\\\">10-55x faster</a> and more performant than <a href=\\\"https://github.com/isaacs/minimatch\\\">minimatch</a> and <a href=\\\"https://github.com/sindresorhus/multimatch\\\">multimatch</a>. This is achieved through a combination of caching and regex optimization strategies, a fundamentally different approach than minimatch.</li>\\n<li>More extensive support for the Bash 4.3 specification</li>\\n<li>More complete extglob support</li>\\n<li>Extensive <a href=\\\"./test\\\">unit tests</a> (approx. 1,300 tests). Minimatch fails many of the tests.</li>\\n</ul>\\n<h3>Switch from minimatch</h3>\\n<p>Use <code>mm.isMatch()</code> instead of <code>minimatch()</code>:</p>\\n<pre><code class=\\\"language-js\\\">mm.isMatch('foo', 'b*');\\n//=> false\\n</code></pre>\\n<p>Use <code>mm.match()</code> instead of <code>minimatch.match()</code>:</p>\\n<pre><code class=\\\"language-js\\\">mm.match(['foo', 'bar'], 'b*');\\n//=> 'bar'\\n</code></pre>\\n<h3>Switch from multimatch</h3>\\n<p>Same signature:</p>\\n<pre><code class=\\\"language-js\\\">mm(['foo', 'bar', 'baz'], ['f*', '*z']);\\n//=> ['foo', 'baz']\\n</code></pre>\\n<hr>\\n<h2>Usage</h2>\\n<p>Add micromatch to your node.js project:</p>\\n<pre><code class=\\\"language-js\\\">var mm = require('micromatch');\\n</code></pre>\\n<p><strong>Signature</strong></p>\\n<pre><code class=\\\"language-js\\\">mm(array_of_strings, glob_patterns[, options]);\\n</code></pre>\\n<p><strong>Example</strong></p>\\n<pre><code class=\\\"language-js\\\">mm(['foo', 'bar', 'baz'], 'b*');\\n//=> ['bar', 'baz']\\n</code></pre>\\n<h3>Usage examples</h3>\\n<p><strong>Brace expansion</strong></p>\\n<p>Match files with <code>.js</code> or <code>.txt</code> extensions.</p>\\n<pre><code class=\\\"language-js\\\">mm(['a.js', 'b.md', 'c.txt'], '*.{js,txt}');\\n//=> ['a.js', 'c.txt']\\n</code></pre>\\n<p><strong>Extglobs</strong></p>\\n<p>Match anything except for files with the <code>.md</code> extension.</p>\\n<pre><code class=\\\"language-js\\\">mm(files, '**/*.!(md)');\\n\\n//=> ['a.js', 'c.txt']\\n</code></pre>\\n<p><strong>Multiple patterns</strong></p>\\n<p>Match using an array of patterns.</p>\\n<pre><code class=\\\"language-js\\\">mm(['a.md', 'b.js', 'c.txt', 'd.json'], ['*.md', '*.txt']);\\n//=> ['a.md', 'c.txt']\\n</code></pre>\\n<p><strong>Negation patterns:</strong></p>\\n<p>Behavior is designed to be what users would expect, based on conventions that are already well-established.</p>\\n<ul>\\n<li><a href=\\\"https://github.com/isaacs/minimatch\\\">minimatch</a> behavior is used when the pattern is a string, so patterns are <strong>inclusive by default</strong>.</li>\\n<li><a href=\\\"https://github.com/sindresorhus/multimatch\\\">multimatch</a> behavior is used when an array of patterns is passed, so patterns are <strong>exclusive by default</strong>.</li>\\n</ul>\\n<pre><code class=\\\"language-js\\\">mm(['a.js', 'b.md', 'c.txt'], '!*.{js,txt}');\\n//=> ['b.md']\\n\\nmm(['a.md', 'b.js', 'c.txt', 'd.json'], ['*.*', '!*.{js,txt}']);\\n//=> ['a.md', 'd.json']\\n</code></pre>\\n<hr>\\n<h2>API methods</h2>\\n<pre><code class=\\\"language-js\\\">var mm = require('micromatch');\\n</code></pre>\\n<h3>.match</h3>\\n<pre><code class=\\\"language-js\\\">mm.match(array, globString);\\n</code></pre>\\n<p>Return an array of files that match the given glob pattern. Useful if you only need to use a single glob pattern.</p>\\n<p><strong>Example</strong></p>\\n<pre><code class=\\\"language-js\\\">mm.match(['ab', 'a/b', 'bb', 'b/c'], '?b');\\n//=> ['ab', 'bb']\\n\\nmm.match(['ab', 'a/b', 'bb', 'b/c'], '*/b');\\n//=> ['a/b']\\n</code></pre>\\n<h3>.isMatch</h3>\\n<pre><code class=\\\"language-js\\\">mm.isMatch(filepath, globString);\\n</code></pre>\\n<p>Returns true if a file path matches the given glob pattern.</p>\\n<p><strong>Example</strong></p>\\n<pre><code class=\\\"language-js\\\">mm.isMatch('.verb.md', '*.md');\\n//=> false\\n\\nmm.isMatch('.verb.md', '*.md', {dot: true});\\n//=> true\\n</code></pre>\\n<h3>.contains</h3>\\n<p>Returns true if any part of a file path matches the given glob pattern. Think of this is \\\"has path\\\" versus \\\"is path\\\".</p>\\n<p><strong>Example</strong></p>\\n<p><code>.isMatch()</code> would return false for both of the following:</p>\\n<pre><code class=\\\"language-js\\\">mm.contains('a/b/c', 'a/b');\\n//=> true\\n\\nmm.contains('a/b/c', 'a/*');\\n//=> true\\n</code></pre>\\n<h3>.matcher</h3>\\n<p>Returns a function for matching using the supplied pattern. e.g. create your own \\\"matcher\\\". The advantage of this method is that the pattern can be compiled outside of a loop.</p>\\n<p><strong>Pattern</strong></p>\\n<p>Can be any of the following:</p>\\n<ul>\\n<li><code>glob/string</code></li>\\n<li><code>regex</code></li>\\n<li><code>function</code></li>\\n</ul>\\n<p><strong>Example</strong></p>\\n<pre><code class=\\\"language-js\\\">var isMatch = mm.matcher('*.md');\\nvar files = [];\\n\\n['a.md', 'b.txt', 'c.md'].forEach(function(fp) {\\n  if (isMatch(fp)) {\\n    files.push(fp);\\n  }\\n});\\n</code></pre>\\n<h3>.filter</h3>\\n<p>Returns a function that can be passed to <code>Array#filter()</code>.</p>\\n<p><strong>Params</strong></p>\\n<ul>\\n<li><code>patterns</code> <strong>{String|Array}</strong>:</li>\\n</ul>\\n<p><strong>Examples</strong></p>\\n<p>Single glob:</p>\\n<pre><code class=\\\"language-js\\\">var fn = mm.filter('*.md');\\n['a.js', 'b.txt', 'c.md'].filter(fn);\\n//=> ['c.md']\\n\\nvar fn = mm.filter('[a-c]');\\n['a', 'b', 'c', 'd', 'e'].filter(fn);\\n//=> ['a', 'b', 'c']\\n</code></pre>\\n<p>Array of glob patterns:</p>\\n<pre><code class=\\\"language-js\\\">var arr = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15];\\n\\nvar fn = mm.filter(['{1..10}', '![7-9]', '!{3..4}']);\\narr.filter(fn);\\n//=> [1, 2, 5, 6, 10]\\n</code></pre>\\n<p><em>(Internally this function generates the matching function by using the <a href=\\\"#matcher\\\">matcher</a> method. You can use the <a href=\\\"#matcher\\\">matcher</a> method directly to create your own filter function)</em></p>\\n<h3>.any</h3>\\n<p>Returns true if a file path matches any of the given patterns.</p>\\n<pre><code class=\\\"language-js\\\">mm.any(filepath, patterns, options);\\n</code></pre>\\n<p><strong>Params</strong></p>\\n<ul>\\n<li>filepath <code>{String}</code>: The file path to test.</li>\\n<li>patterns <code>{String|Array}</code>: One or more glob patterns</li>\\n<li>options: <code>{Object}</code>: options to pass to the <code>.matcher()</code> method.</li>\\n</ul>\\n<p><strong>Example</strong></p>\\n<pre><code class=\\\"language-js\\\">mm.any('abc', ['!*z']);\\n//=> true\\nmm.any('abc', ['a*', 'z*']);\\n//=> true\\nmm.any('abc', 'a*');\\n//=> true\\nmm.any('abc', ['z*']);\\n//=> false\\n</code></pre>\\n<h3>.expand</h3>\\n<p>Returns an object with a regex-compatible string and tokens.</p>\\n<pre><code class=\\\"language-js\\\">mm.expand('*.js');\\n\\n// when `track` is enabled (for debugging), the `history` array is used\\n// to record each mutation to the glob pattern as it's converted to regex\\n{ options: { track: false, dot: undefined, makeRe: true, negated: false },\\n  pattern: '(.*\\\\\\\\/|^)bar\\\\\\\\/(?:(?!(?:^|\\\\\\\\/)\\\\\\\\.).)*?',\\n  history: [],\\n  tokens:\\n   { path:\\n      { whole: '**/bar/**',\\n        dirname: '**/bar/',\\n        filename: '**',\\n        basename: '**',\\n        extname: '',\\n        ext: '' },\\n     is:\\n      { glob: true,\\n        negated: false,\\n        globstar: true,\\n        dotfile: false,\\n        dotdir: false },\\n     match: {},\\n     original: '**/bar/**',\\n     pattern: '**/bar/**',\\n     base: '' } }\\n</code></pre>\\n<h3>.makeRe</h3>\\n<p>Create a regular expression for matching file paths based on the given pattern:</p>\\n<pre><code class=\\\"language-js\\\">mm.makeRe('*.js');\\n//=> /^(?:(?!\\\\.)(?=.)[^/]*?\\\\.js)$/\\n</code></pre>\\n<h2>Options</h2>\\n<h3>options.unixify</h3>\\n<p>Normalize slashes in file paths and glob patterns to forward slashes.</p>\\n<p>Type: <code>{Boolean}</code></p>\\n<p>Default: <code>undefined</code> on non-windows, <code>true</code> on windows.</p>\\n<h3>options.dot</h3>\\n<p>Match dotfiles. Same behavior as <a href=\\\"https://github.com/isaacs/minimatch\\\">minimatch</a>.</p>\\n<p>Type: <code>{Boolean}</code></p>\\n<p>Default: <code>false</code></p>\\n<h3>options.unescape</h3>\\n<p>Unescape slashes in glob patterns. Use cautiously, especially on windows.</p>\\n<p>Type: <code>{Boolean}</code></p>\\n<p>Default: <code>undefined</code></p>\\n<p><strong>Example</strong></p>\\n<pre><code class=\\\"language-js\\\">mm.isMatch('abc', '\\\\\\\\a\\\\\\\\b\\\\\\\\c', {unescape: true});\\n//=> true\\n</code></pre>\\n<h3>options.nodupes</h3>\\n<p>Remove duplicate elements from the result array.</p>\\n<p>Type: <code>{Boolean}</code></p>\\n<p>Default: <code>undefined</code></p>\\n<p><strong>Example</strong></p>\\n<p>Example of using the <code>unescape</code> and <code>nodupes</code> options together:</p>\\n<pre><code class=\\\"language-js\\\">mm.match(['abc', '\\\\\\\\a\\\\\\\\b\\\\\\\\c'], '\\\\\\\\a\\\\\\\\b\\\\\\\\c', {unescape: true});\\n//=> ['abc', 'abc']\\n\\nmm.match(['abc', '\\\\\\\\a\\\\\\\\b\\\\\\\\c'], '\\\\\\\\a\\\\\\\\b\\\\\\\\c', {unescape: true, nodupes: true});\\n//=> ['abc']\\n</code></pre>\\n<h3>options.matchBase</h3>\\n<p>Allow glob patterns without slashes to match a file path based on its basename. . Same behavior as <a href=\\\"https://github.com/isaacs/minimatch\\\">minimatch</a>.</p>\\n<p>Type: <code>{Boolean}</code></p>\\n<p>Default: <code>false</code></p>\\n<p><strong>Example</strong></p>\\n<pre><code class=\\\"language-js\\\">mm(['a/b.js', 'a/c.md'], '*.js');\\n//=> []\\n\\nmm(['a/b.js', 'a/c.md'], '*.js', {matchBase: true});\\n//=> ['a/b.js']\\n</code></pre>\\n<h3>options.nobraces</h3>\\n<p>Don't expand braces in glob patterns. Same behavior as <a href=\\\"https://github.com/isaacs/minimatch\\\">minimatch</a> <code>nobrace</code>.</p>\\n<p>Type: <code>{Boolean}</code></p>\\n<p>Default: <code>undefined</code></p>\\n<p>See <a href=\\\"https://github.com/jonschlinkert/braces\\\">braces</a> for more information about extended brace expansion.</p>\\n<h3>options.nobrackets</h3>\\n<p>Don't expand POSIX bracket expressions.</p>\\n<p>Type: <code>{Boolean}</code></p>\\n<p>Default: <code>undefined</code></p>\\n<p>See <a href=\\\"https://github.com/jonschlinkert/expand-brackets\\\">expand-brackets</a> for more information about extended bracket expressions.</p>\\n<h3>options.noextglob</h3>\\n<p>Don't expand extended globs.</p>\\n<p>Type: <code>{Boolean}</code></p>\\n<p>Default: <code>undefined</code></p>\\n<p>See <a href=\\\"https://github.com/jonschlinkert/extglob\\\">extglob</a> for more information about extended globs.</p>\\n<h3>options.nocase</h3>\\n<p>Use a case-insensitive regex for matching files. Same behavior as <a href=\\\"https://github.com/isaacs/minimatch\\\">minimatch</a>.</p>\\n<p>Type: <code>{Boolean}</code></p>\\n<p>Default: <code>false</code></p>\\n<h3>options.nonegate</h3>\\n<p>Disallow negation (<code>!</code>) patterns.</p>\\n<p>Type: <code>{Boolean}</code></p>\\n<p>Default: <code>false</code></p>\\n<h3>options.nonull</h3>\\n<p>If <code>true</code>, when no matches are found the actual (array-ified) glob pattern is returned instead of an empty array. Same behavior as <a href=\\\"https://github.com/isaacs/minimatch\\\">minimatch</a>.</p>\\n<p>Type: <code>{Boolean}</code></p>\\n<p>Default: <code>false</code></p>\\n<h3>options.cache</h3>\\n<p>Cache the platform (e.g. <code>win32</code>) to prevent this from being looked up for every filepath.</p>\\n<p>Type: <code>{Boolean}</code></p>\\n<p>Default: <code>true</code></p>\\n<hr>\\n<h2>Other features</h2>\\n<p>Micromatch also supports the following.</p>\\n<h3>Extended globbing</h3>\\n<h4>extglobs</h4>\\n<p>Extended globbing, as described by the bash man page:</p>\\n<table>\\n<thead>\\n<tr>\\n<th><strong>pattern</strong></th>\\n<th><strong>regex equivalent</strong></th>\\n<th><strong>description</strong></th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><code>?(pattern-list)</code></td>\\n<td><code>(... | ...)?</code></td>\\n<td>Matches zero or one occurrence of the given patterns</td>\\n</tr>\\n<tr>\\n<td><code>*(pattern-list)</code></td>\\n<td><code>(... | ...)*</code></td>\\n<td>Matches zero or more occurrences of the given patterns</td>\\n</tr>\\n<tr>\\n<td><code>+(pattern-list)</code></td>\\n<td><code>(... | ...)+</code></td>\\n<td>Matches one or more occurrences of the given patterns</td>\\n</tr>\\n<tr>\\n<td><code>@(pattern-list)</code></td>\\n<td><code>(... | ...)</code>\\n \\n<sup>\\n*\\n</sup></td>\\n<td>Matches one of the given patterns</td>\\n</tr>\\n<tr>\\n<td><code>!(pattern-list)</code></td>\\n<td>N/A</td>\\n<td>Matches anything except one of the given patterns</td>\\n</tr>\\n</tbody>\\n</table>\\n<p><sup><strong>*</strong></sup> <code>@</code> isn't a RegEx character.</p>\\n<p>Powered by <a href=\\\"https://github.com/jonschlinkert/extglob\\\">extglob</a>. Visit that library for the full range of options or to report extglob related issues.</p>\\n<p>See <a href=\\\"https://github.com/jonschlinkert/extglob\\\">extglob</a> for more information about extended globs.</p>\\n<h4>brace expansion</h4>\\n<p>In simple cases, brace expansion appears to work the same way as the logical <code>OR</code> operator. For example, <code>(a|b)</code> will achieve the same result as <code>{a,b}</code>.</p>\\n<p>Here are some powerful features unique to brace expansion (versus character classes):</p>\\n<ul>\\n<li>range expansion: <code>a{1..3}b/*.js</code> expands to: <code>['a1b/*.js', 'a2b/*.js', 'a3b/*.js']</code></li>\\n<li>nesting: <code>a{c,{d,e}}b/*.js</code> expands to: <code>['acb/*.js', 'adb/*.js', 'aeb/*.js']</code></li>\\n</ul>\\n<p>Visit <a href=\\\"https://github.com/jonschlinkert/braces\\\">braces</a> to ask questions and create an issue related to brace-expansion, or to see the full range of features and options related to brace expansion.</p>\\n<h4>regex character classes</h4>\\n<p>With the exception of brace expansion (<code>{a,b}</code>, <code>{1..5}</code>, etc), most of the special characters convert directly to regex, so you can expect them to follow the same rules and produce the same results as regex.</p>\\n<p>For example, given the list: <code>['a.js', 'b.js', 'c.js', 'd.js', 'E.js']</code>:</p>\\n<ul>\\n<li><code>[ac].js</code>: matches both <code>a</code> and <code>c</code>, returning <code>['a.js', 'c.js']</code></li>\\n<li><code>[b-d].js</code>: matches from <code>b</code> to <code>d</code>, returning <code>['b.js', 'c.js', 'd.js']</code></li>\\n<li><code>[b-d].js</code>: matches from <code>b</code> to <code>d</code>, returning <code>['b.js', 'c.js', 'd.js']</code></li>\\n<li><code>a/[A-Z].js</code>: matches and uppercase letter, returning <code>['a/E.md']</code></li>\\n</ul>\\n<p>Learn about <a href=\\\"http://www.regular-expressions.info/charclass.html\\\">regex character classes</a>.</p>\\n<h4>regex groups</h4>\\n<p>Given <code>['a.js', 'b.js', 'c.js', 'd.js', 'E.js']</code>:</p>\\n<ul>\\n<li><code>(a|c).js</code>: would match either <code>a</code> or <code>c</code>, returning <code>['a.js', 'c.js']</code></li>\\n<li><code>(b|d).js</code>: would match either <code>b</code> or <code>d</code>, returning <code>['b.js', 'd.js']</code></li>\\n<li><code>(b|[A-Z]).js</code>: would match either <code>b</code> or an uppercase letter, returning <code>['b.js', 'E.js']</code></li>\\n</ul>\\n<p>As with regex, parenthese can be nested, so patterns like <code>((a|b)|c)/b</code> will work. But it might be easier to achieve your goal using brace expansion.</p>\\n<h4>POSIX bracket expressions</h4>\\n<p><strong>Example</strong></p>\\n<pre><code class=\\\"language-js\\\">mm.isMatch('a1', '[[:alpha:][:digit:]]');\\n//=> true\\n</code></pre>\\n<p>See <a href=\\\"https://github.com/jonschlinkert/expand-brackets\\\">expand-brackets</a> for more information about extended bracket expressions.</p>\\n<hr>\\n<h2>Notes</h2>\\n<p>Whenever possible parsing behavior for patterns is based on globbing specifications in Bash 4.3. Patterns that aren't described by Bash follow wildmatch spec (used by git).</p>\\n<h2>Benchmarks</h2>\\n<p>Run the <a href=\\\"./benchmark\\\">benchmarks</a>:</p>\\n<pre><code class=\\\"language-bash\\\">node benchmark\\n</code></pre>\\n<p>As of July 15, 2016:</p>\\n<pre><code class=\\\"language-bash\\\">#1: basename-braces\\n  micromatch x 26,420 ops/sec ±0.89% (91 runs sampled)\\n  minimatch x 3,507 ops/sec ±0.64% (97 runs sampled)\\n\\n#2: basename\\n  micromatch x 25,315 ops/sec ±0.82% (93 runs sampled)\\n  minimatch x 4,398 ops/sec ±0.86% (94 runs sampled)\\n\\n#3: braces-no-glob\\n  micromatch x 341,254 ops/sec ±0.78% (93 runs sampled)\\n  minimatch x 30,197 ops/sec ±1.12% (91 runs sampled)\\n\\n#4: braces\\n  micromatch x 54,649 ops/sec ±0.74% (94 runs sampled)\\n  minimatch x 3,095 ops/sec ±0.82% (95 runs sampled)\\n\\n#5: immediate\\n  micromatch x 16,719 ops/sec ±0.79% (95 runs sampled)\\n  minimatch x 4,348 ops/sec ±0.86% (96 runs sampled)\\n\\n#6: large\\n  micromatch x 721 ops/sec ±0.77% (94 runs sampled)\\n  minimatch x 17.73 ops/sec ±1.08% (50 runs sampled)\\n\\n#7: long\\n  micromatch x 5,051 ops/sec ±0.87% (97 runs sampled)\\n  minimatch x 628 ops/sec ±0.83% (94 runs sampled)\\n\\n#8: mid\\n  micromatch x 51,280 ops/sec ±0.80% (95 runs sampled)\\n  minimatch x 1,923 ops/sec ±0.84% (95 runs sampled)\\n\\n#9: multi-patterns\\n  micromatch x 22,440 ops/sec ±0.97% (94 runs sampled)\\n  minimatch x 2,481 ops/sec ±1.10% (94 runs sampled)\\n\\n#10: no-glob\\n  micromatch x 722,823 ops/sec ±1.30% (87 runs sampled)\\n  minimatch x 52,967 ops/sec ±1.09% (94 runs sampled)\\n\\n#11: range\\n  micromatch x 243,471 ops/sec ±0.79% (94 runs sampled)\\n  minimatch x 11,736 ops/sec ±0.82% (96 runs sampled)\\n\\n#12: shallow\\n  micromatch x 190,874 ops/sec ±0.98% (95 runs sampled)\\n  minimatch x 21,699 ops/sec ±0.81% (97 runs sampled)\\n\\n#13: short\\n  micromatch x 496,393 ops/sec ±3.86% (90 runs sampled)\\n  minimatch x 53,765 ops/sec ±0.75% (95 runs sampled)\\n</code></pre>\\n<h2>Tests</h2>\\n<h3>Running tests</h3>\\n<p>Install dev dependencies:</p>\\n<pre><code class=\\\"language-sh\\\">$ npm install -d &#x26;&#x26; npm test\\n</code></pre>\\n<h3>Coverage</h3>\\n<p>As of July 15, 2016:</p>\\n<pre><code class=\\\"language-sh\\\">Statements : 100% (441/441)\\nBranches   : 100% (270/270)\\nFunctions  : 100% (54/54)\\nLines      : 100% (429/429)\\n</code></pre>\\n<h2>Contributing</h2>\\n<p>Pull requests and stars are always welcome. For bugs and feature requests, <a href=\\\"../../issues/new\\\">please create an issue</a>.</p>\\n<p>Please be sure to run the benchmarks before/after any code changes to judge the impact before you do a PR. thanks!</p>\\n<h2>Related</h2>\\n<ul>\\n<li><a href=\\\"https://www.npmjs.com/package/braces\\\">braces</a>: Fastest brace expansion for node.js, with the most complete support for the Bash 4.3 braces… <a href=\\\"https://github.com/jonschlinkert/braces\\\">more</a> | <a href=\\\"https://github.com/jonschlinkert/braces\\\" title=\\\"Fastest brace expansion for node.js, with the most complete support for the Bash 4.3 braces specification.\\\">homepage</a></li>\\n<li><a href=\\\"https://www.npmjs.com/package/expand-brackets\\\">expand-brackets</a>: Expand POSIX bracket expressions (character classes) in glob patterns. | <a href=\\\"https://github.com/jonschlinkert/expand-brackets\\\" title=\\\"Expand POSIX bracket expressions (character classes) in glob patterns.\\\">homepage</a></li>\\n<li><a href=\\\"https://www.npmjs.com/package/expand-range\\\">expand-range</a>: Fast, bash-like range expansion. Expand a range of numbers or letters, uppercase or lowercase. See… <a href=\\\"https://github.com/jonschlinkert/expand-range\\\">more</a> | <a href=\\\"https://github.com/jonschlinkert/expand-range\\\" title=\\\"Fast, bash-like range expansion. Expand a range of numbers or letters, uppercase or lowercase. See the benchmarks. Used by micromatch.\\\">homepage</a></li>\\n<li><a href=\\\"https://www.npmjs.com/package/extglob\\\">extglob</a>: Convert extended globs to regex-compatible strings. Add (almost) the expressive power of regular expressions to… <a href=\\\"https://github.com/jonschlinkert/extglob\\\">more</a> | <a href=\\\"https://github.com/jonschlinkert/extglob\\\" title=\\\"Convert extended globs to regex-compatible strings. Add (almost) the expressive power of regular expressions to glob patterns.\\\">homepage</a></li>\\n<li><a href=\\\"https://www.npmjs.com/package/fill-range\\\">fill-range</a>: Fill in a range of numbers or letters, optionally passing an increment or multiplier to… <a href=\\\"https://github.com/jonschlinkert/fill-range\\\">more</a> | <a href=\\\"https://github.com/jonschlinkert/fill-range\\\" title=\\\"Fill in a range of numbers or letters, optionally passing an increment or multiplier to use.\\\">homepage</a></li>\\n<li><a href=\\\"https://www.npmjs.com/package/gulp-micromatch\\\">gulp-micromatch</a>: Filter vinyl files with glob patterns, string, regexp, array, object or matcher function. micromatch stream. | <a href=\\\"https://github.com/tunnckocore/gulp-micromatch#readme\\\" title=\\\"Filter vinyl files with glob patterns, string, regexp, array, object or matcher function. micromatch stream.\\\">homepage</a></li>\\n<li><a href=\\\"https://www.npmjs.com/package/is-glob\\\">is-glob</a>: Returns <code>true</code> if the given string looks like a glob pattern or an extglob pattern… <a href=\\\"https://github.com/jonschlinkert/is-glob\\\">more</a> | <a href=\\\"https://github.com/jonschlinkert/is-glob\\\" title=\\\"Returns &#x60;true&#x60; if the given string looks like a glob pattern or an extglob pattern. This makes it easy to create code that only uses external modules like node-glob when necessary, resulting in much faster code execution and initialization time, and a bet\\\">homepage</a></li>\\n<li><a href=\\\"https://www.npmjs.com/package/parse-glob\\\">parse-glob</a>: Parse a glob pattern into an object of tokens. | <a href=\\\"https://github.com/jonschlinkert/parse-glob\\\" title=\\\"Parse a glob pattern into an object of tokens.\\\">homepage</a></li>\\n</ul>\\n<h2>Contributing</h2>\\n<p>Pull requests and stars are always welcome. For bugs and feature requests, <a href=\\\"../../issues/new\\\">please create an issue</a>.</p>\\n<h2>Building docs</h2>\\n<p><em>(This document was generated by <a href=\\\"https://github.com/verbose/verb-generate-readme\\\">verb-generate-readme</a> (a <a href=\\\"https://github.com/verbose/verb\\\">verb</a> generator), please don't edit the readme directly. Any changes to the readme must be made in <a href=\\\".verb.html\\\">.verb.md</a>.)</em></p>\\n<p>To generate the readme and API documentation with <a href=\\\"https://github.com/verbose/verb\\\">verb</a>:</p>\\n<pre><code class=\\\"language-sh\\\">$ npm install -g verb verb-generate-readme &#x26;&#x26; verb\\n</code></pre>\\n<h2>Running tests</h2>\\n<p>Install dev dependencies:</p>\\n<pre><code class=\\\"language-sh\\\">$ npm install -d &#x26;&#x26; npm test\\n</code></pre>\\n<h2>Author</h2>\\n<p><strong>Jon Schlinkert</strong></p>\\n<ul>\\n<li><a href=\\\"https://github.com/jonschlinkert\\\">github/jonschlinkert</a></li>\\n<li><a href=\\\"http://twitter.com/jonschlinkert\\\">twitter/jonschlinkert</a></li>\\n</ul>\\n<h2>License</h2>\\n<p>Copyright © 2016, <a href=\\\"https://github.com/jonschlinkert\\\">Jon Schlinkert</a>.\\nReleased under the <a href=\\\"https://github.com/jonschlinkert/micromatch/blob/master/LICENSE\\\">MIT license</a>.</p>\\n<hr>\\n<p><em>This file was generated by <a href=\\\"https://github.com/verbose/verb\\\">verb</a>, v0.9.0, on July 15, 2016.</em></p>\",\"docPath\":\"argo-ci/node_modules/micromatch/readme\",\"proj\":\"argo-ci\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---docs-argo-ci-node-modules-micromatch-127ff3aa10e1429a28de.js","module.exports = {\"pathContext\":{\"docHtml\":\"<h1>micromatch <a href=\\\"https://www.npmjs.com/package/micromatch\\\"><img src=\\\"https://img.shields.io/npm/v/micromatch.svg?style=flat\\\" alt=\\\"NPM version\\\"></a> <a href=\\\"https://npmjs.org/package/micromatch\\\"><img src=\\\"https://img.shields.io/npm/dm/micromatch.svg?style=flat\\\" alt=\\\"NPM downloads\\\"></a> <a href=\\\"https://travis-ci.org/jonschlinkert/micromatch\\\"><img src=\\\"https://img.shields.io/travis/jonschlinkert/micromatch.svg?style=flat\\\" alt=\\\"Build Status\\\"></a></h1>\\n<blockquote>\\n<p>Glob matching for javascript/node.js. A drop-in replacement and faster alternative to minimatch and multimatch.</p>\\n</blockquote>\\n<p>Micromatch supports all of the same matching features as <a href=\\\"https://github.com/isaacs/minimatch\\\">minimatch</a> and <a href=\\\"https://github.com/sindresorhus/multimatch\\\">multimatch</a>.</p>\\n<ul>\\n<li><a href=\\\"#usage\\\">mm()</a> is the same as <a href=\\\"https://github.com/sindresorhus/multimatch\\\">multimatch()</a></li>\\n<li><a href=\\\"#match\\\">mm.match()</a> is the same as <a href=\\\"https://github.com/isaacs/minimatch\\\">minimatch.match()</a></li>\\n<li>use <a href=\\\"#ismatch\\\">mm.isMatch()</a> instead of <a href=\\\"https://github.com/isaacs/minimatch\\\">minimatch()</a></li>\\n</ul>\\n<h2>Install</h2>\\n<p>Install with <a href=\\\"https://www.npmjs.com/\\\">npm</a>:</p>\\n<pre><code class=\\\"language-sh\\\">$ npm install --save micromatch\\n</code></pre>\\n<h2>Start matching!</h2>\\n<pre><code class=\\\"language-js\\\">var mm = require('micromatch');\\nconsole.log(mm(['']))\\n</code></pre>\\n<hr>\\n<h3>Features</h3>\\n<ul>\\n<li><a href=\\\"#switch-from-minimatch\\\">Drop-in replacement</a> for <a href=\\\"https://github.com/isaacs/minimatch\\\">minimatch</a> and <a href=\\\"https://github.com/sindresorhus/multimatch\\\">multimatch</a></li>\\n<li>Built-in support for multiple glob patterns, like <code>['foo/*.js', '!bar.js']</code></li>\\n<li><a href=\\\"https://github.com/jonschlinkert/braces\\\">Brace Expansion</a> (<code>foo/bar-{1..5}.md</code>, <code>one/{two,three}/four.md</code>)</li>\\n<li>Typical glob patterns, like <code>**/*</code>, <code>a/b/*.js</code>, or <code>['foo/*.js', '!bar.js']</code></li>\\n<li>Methods like <code>.isMatch()</code>, <code>.contains()</code> and <code>.any()</code></li>\\n</ul>\\n<p><strong>Extended globbing features:</strong></p>\\n<ul>\\n<li>Logical <code>OR</code> (<code>foo/bar/(abc|xyz).js</code>)</li>\\n<li>Regex character classes (<code>foo/bar/baz-[1-5].js</code>)</li>\\n<li>POSIX <a href=\\\"https://github.com/jonschlinkert/expand-brackets\\\">bracket expressions</a> (<code>**/[[:alpha:][:digit:]]/</code>)</li>\\n<li><a href=\\\"https://github.com/jonschlinkert/extglob\\\">extglobs</a> (<code>**/+(x|y)</code>, <code>!(a|b)</code>, etc).</li>\\n</ul>\\n<p>You can combine these to create whatever matching patterns you need.</p>\\n<p><strong>Example</strong></p>\\n<pre><code class=\\\"language-js\\\">// double-negation!\\nmm(['fa', 'fb', 'f', 'fo'], '!(f!(o))');\\n//=> ['fo']\\n</code></pre>\\n<h2>Why switch to micromatch?</h2>\\n<ul>\\n<li>Native support for multiple glob patterns, no need for wrappers like <a href=\\\"https://github.com/sindresorhus/multimatch\\\">multimatch</a></li>\\n<li><a href=\\\"#benchmarks\\\">10-55x faster</a> and more performant than <a href=\\\"https://github.com/isaacs/minimatch\\\">minimatch</a> and <a href=\\\"https://github.com/sindresorhus/multimatch\\\">multimatch</a>. This is achieved through a combination of caching and regex optimization strategies, a fundamentally different approach than minimatch.</li>\\n<li>More extensive support for the Bash 4.3 specification</li>\\n<li>More complete extglob support</li>\\n<li>Extensive <a href=\\\"./test\\\">unit tests</a> (approx. 1,300 tests). Minimatch fails many of the tests.</li>\\n</ul>\\n<h3>Switch from minimatch</h3>\\n<p>Use <code>mm.isMatch()</code> instead of <code>minimatch()</code>:</p>\\n<pre><code class=\\\"language-js\\\">mm.isMatch('foo', 'b*');\\n//=> false\\n</code></pre>\\n<p>Use <code>mm.match()</code> instead of <code>minimatch.match()</code>:</p>\\n<pre><code class=\\\"language-js\\\">mm.match(['foo', 'bar'], 'b*');\\n//=> 'bar'\\n</code></pre>\\n<h3>Switch from multimatch</h3>\\n<p>Same signature:</p>\\n<pre><code class=\\\"language-js\\\">mm(['foo', 'bar', 'baz'], ['f*', '*z']);\\n//=> ['foo', 'baz']\\n</code></pre>\\n<hr>\\n<h2>Usage</h2>\\n<p>Add micromatch to your node.js project:</p>\\n<pre><code class=\\\"language-js\\\">var mm = require('micromatch');\\n</code></pre>\\n<p><strong>Signature</strong></p>\\n<pre><code class=\\\"language-js\\\">mm(array_of_strings, glob_patterns[, options]);\\n</code></pre>\\n<p><strong>Example</strong></p>\\n<pre><code class=\\\"language-js\\\">mm(['foo', 'bar', 'baz'], 'b*');\\n//=> ['bar', 'baz']\\n</code></pre>\\n<h3>Usage examples</h3>\\n<p><strong>Brace expansion</strong></p>\\n<p>Match files with <code>.js</code> or <code>.txt</code> extensions.</p>\\n<pre><code class=\\\"language-js\\\">mm(['a.js', 'b.md', 'c.txt'], '*.{js,txt}');\\n//=> ['a.js', 'c.txt']\\n</code></pre>\\n<p><strong>Extglobs</strong></p>\\n<p>Match anything except for files with the <code>.md</code> extension.</p>\\n<pre><code class=\\\"language-js\\\">mm(files, '**/*.!(md)');\\n\\n//=> ['a.js', 'c.txt']\\n</code></pre>\\n<p><strong>Multiple patterns</strong></p>\\n<p>Match using an array of patterns.</p>\\n<pre><code class=\\\"language-js\\\">mm(['a.md', 'b.js', 'c.txt', 'd.json'], ['*.md', '*.txt']);\\n//=> ['a.md', 'c.txt']\\n</code></pre>\\n<p><strong>Negation patterns:</strong></p>\\n<p>Behavior is designed to be what users would expect, based on conventions that are already well-established.</p>\\n<ul>\\n<li><a href=\\\"https://github.com/isaacs/minimatch\\\">minimatch</a> behavior is used when the pattern is a string, so patterns are <strong>inclusive by default</strong>.</li>\\n<li><a href=\\\"https://github.com/sindresorhus/multimatch\\\">multimatch</a> behavior is used when an array of patterns is passed, so patterns are <strong>exclusive by default</strong>.</li>\\n</ul>\\n<pre><code class=\\\"language-js\\\">mm(['a.js', 'b.md', 'c.txt'], '!*.{js,txt}');\\n//=> ['b.md']\\n\\nmm(['a.md', 'b.js', 'c.txt', 'd.json'], ['*.*', '!*.{js,txt}']);\\n//=> ['a.md', 'd.json']\\n</code></pre>\\n<hr>\\n<h2>API methods</h2>\\n<pre><code class=\\\"language-js\\\">var mm = require('micromatch');\\n</code></pre>\\n<h3>.match</h3>\\n<pre><code class=\\\"language-js\\\">mm.match(array, globString);\\n</code></pre>\\n<p>Return an array of files that match the given glob pattern. Useful if you only need to use a single glob pattern.</p>\\n<p><strong>Example</strong></p>\\n<pre><code class=\\\"language-js\\\">mm.match(['ab', 'a/b', 'bb', 'b/c'], '?b');\\n//=> ['ab', 'bb']\\n\\nmm.match(['ab', 'a/b', 'bb', 'b/c'], '*/b');\\n//=> ['a/b']\\n</code></pre>\\n<h3>.isMatch</h3>\\n<pre><code class=\\\"language-js\\\">mm.isMatch(filepath, globString);\\n</code></pre>\\n<p>Returns true if a file path matches the given glob pattern.</p>\\n<p><strong>Example</strong></p>\\n<pre><code class=\\\"language-js\\\">mm.isMatch('.verb.md', '*.md');\\n//=> false\\n\\nmm.isMatch('.verb.md', '*.md', {dot: true});\\n//=> true\\n</code></pre>\\n<h3>.contains</h3>\\n<p>Returns true if any part of a file path matches the given glob pattern. Think of this is \\\"has path\\\" versus \\\"is path\\\".</p>\\n<p><strong>Example</strong></p>\\n<p><code>.isMatch()</code> would return false for both of the following:</p>\\n<pre><code class=\\\"language-js\\\">mm.contains('a/b/c', 'a/b');\\n//=> true\\n\\nmm.contains('a/b/c', 'a/*');\\n//=> true\\n</code></pre>\\n<h3>.matcher</h3>\\n<p>Returns a function for matching using the supplied pattern. e.g. create your own \\\"matcher\\\". The advantage of this method is that the pattern can be compiled outside of a loop.</p>\\n<p><strong>Pattern</strong></p>\\n<p>Can be any of the following:</p>\\n<ul>\\n<li><code>glob/string</code></li>\\n<li><code>regex</code></li>\\n<li><code>function</code></li>\\n</ul>\\n<p><strong>Example</strong></p>\\n<pre><code class=\\\"language-js\\\">var isMatch = mm.matcher('*.md');\\nvar files = [];\\n\\n['a.md', 'b.txt', 'c.md'].forEach(function(fp) {\\n  if (isMatch(fp)) {\\n    files.push(fp);\\n  }\\n});\\n</code></pre>\\n<h3>.filter</h3>\\n<p>Returns a function that can be passed to <code>Array#filter()</code>.</p>\\n<p><strong>Params</strong></p>\\n<ul>\\n<li><code>patterns</code> <strong>{String|Array}</strong>:</li>\\n</ul>\\n<p><strong>Examples</strong></p>\\n<p>Single glob:</p>\\n<pre><code class=\\\"language-js\\\">var fn = mm.filter('*.md');\\n['a.js', 'b.txt', 'c.md'].filter(fn);\\n//=> ['c.md']\\n\\nvar fn = mm.filter('[a-c]');\\n['a', 'b', 'c', 'd', 'e'].filter(fn);\\n//=> ['a', 'b', 'c']\\n</code></pre>\\n<p>Array of glob patterns:</p>\\n<pre><code class=\\\"language-js\\\">var arr = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15];\\n\\nvar fn = mm.filter(['{1..10}', '![7-9]', '!{3..4}']);\\narr.filter(fn);\\n//=> [1, 2, 5, 6, 10]\\n</code></pre>\\n<p><em>(Internally this function generates the matching function by using the <a href=\\\"#matcher\\\">matcher</a> method. You can use the <a href=\\\"#matcher\\\">matcher</a> method directly to create your own filter function)</em></p>\\n<h3>.any</h3>\\n<p>Returns true if a file path matches any of the given patterns.</p>\\n<pre><code class=\\\"language-js\\\">mm.any(filepath, patterns, options);\\n</code></pre>\\n<p><strong>Params</strong></p>\\n<ul>\\n<li>filepath <code>{String}</code>: The file path to test.</li>\\n<li>patterns <code>{String|Array}</code>: One or more glob patterns</li>\\n<li>options: <code>{Object}</code>: options to pass to the <code>.matcher()</code> method.</li>\\n</ul>\\n<p><strong>Example</strong></p>\\n<pre><code class=\\\"language-js\\\">mm.any('abc', ['!*z']);\\n//=> true\\nmm.any('abc', ['a*', 'z*']);\\n//=> true\\nmm.any('abc', 'a*');\\n//=> true\\nmm.any('abc', ['z*']);\\n//=> false\\n</code></pre>\\n<h3>.expand</h3>\\n<p>Returns an object with a regex-compatible string and tokens.</p>\\n<pre><code class=\\\"language-js\\\">mm.expand('*.js');\\n\\n// when `track` is enabled (for debugging), the `history` array is used\\n// to record each mutation to the glob pattern as it's converted to regex\\n{ options: { track: false, dot: undefined, makeRe: true, negated: false },\\n  pattern: '(.*\\\\\\\\/|^)bar\\\\\\\\/(?:(?!(?:^|\\\\\\\\/)\\\\\\\\.).)*?',\\n  history: [],\\n  tokens:\\n   { path:\\n      { whole: '**/bar/**',\\n        dirname: '**/bar/',\\n        filename: '**',\\n        basename: '**',\\n        extname: '',\\n        ext: '' },\\n     is:\\n      { glob: true,\\n        negated: false,\\n        globstar: true,\\n        dotfile: false,\\n        dotdir: false },\\n     match: {},\\n     original: '**/bar/**',\\n     pattern: '**/bar/**',\\n     base: '' } }\\n</code></pre>\\n<h3>.makeRe</h3>\\n<p>Create a regular expression for matching file paths based on the given pattern:</p>\\n<pre><code class=\\\"language-js\\\">mm.makeRe('*.js');\\n//=> /^(?:(?!\\\\.)(?=.)[^/]*?\\\\.js)$/\\n</code></pre>\\n<h2>Options</h2>\\n<h3>options.unixify</h3>\\n<p>Normalize slashes in file paths and glob patterns to forward slashes.</p>\\n<p>Type: <code>{Boolean}</code></p>\\n<p>Default: <code>undefined</code> on non-windows, <code>true</code> on windows.</p>\\n<h3>options.dot</h3>\\n<p>Match dotfiles. Same behavior as <a href=\\\"https://github.com/isaacs/minimatch\\\">minimatch</a>.</p>\\n<p>Type: <code>{Boolean}</code></p>\\n<p>Default: <code>false</code></p>\\n<h3>options.unescape</h3>\\n<p>Unescape slashes in glob patterns. Use cautiously, especially on windows.</p>\\n<p>Type: <code>{Boolean}</code></p>\\n<p>Default: <code>undefined</code></p>\\n<p><strong>Example</strong></p>\\n<pre><code class=\\\"language-js\\\">mm.isMatch('abc', '\\\\\\\\a\\\\\\\\b\\\\\\\\c', {unescape: true});\\n//=> true\\n</code></pre>\\n<h3>options.nodupes</h3>\\n<p>Remove duplicate elements from the result array.</p>\\n<p>Type: <code>{Boolean}</code></p>\\n<p>Default: <code>undefined</code></p>\\n<p><strong>Example</strong></p>\\n<p>Example of using the <code>unescape</code> and <code>nodupes</code> options together:</p>\\n<pre><code class=\\\"language-js\\\">mm.match(['abc', '\\\\\\\\a\\\\\\\\b\\\\\\\\c'], '\\\\\\\\a\\\\\\\\b\\\\\\\\c', {unescape: true});\\n//=> ['abc', 'abc']\\n\\nmm.match(['abc', '\\\\\\\\a\\\\\\\\b\\\\\\\\c'], '\\\\\\\\a\\\\\\\\b\\\\\\\\c', {unescape: true, nodupes: true});\\n//=> ['abc']\\n</code></pre>\\n<h3>options.matchBase</h3>\\n<p>Allow glob patterns without slashes to match a file path based on its basename. . Same behavior as <a href=\\\"https://github.com/isaacs/minimatch\\\">minimatch</a>.</p>\\n<p>Type: <code>{Boolean}</code></p>\\n<p>Default: <code>false</code></p>\\n<p><strong>Example</strong></p>\\n<pre><code class=\\\"language-js\\\">mm(['a/b.js', 'a/c.md'], '*.js');\\n//=> []\\n\\nmm(['a/b.js', 'a/c.md'], '*.js', {matchBase: true});\\n//=> ['a/b.js']\\n</code></pre>\\n<h3>options.nobraces</h3>\\n<p>Don't expand braces in glob patterns. Same behavior as <a href=\\\"https://github.com/isaacs/minimatch\\\">minimatch</a> <code>nobrace</code>.</p>\\n<p>Type: <code>{Boolean}</code></p>\\n<p>Default: <code>undefined</code></p>\\n<p>See <a href=\\\"https://github.com/jonschlinkert/braces\\\">braces</a> for more information about extended brace expansion.</p>\\n<h3>options.nobrackets</h3>\\n<p>Don't expand POSIX bracket expressions.</p>\\n<p>Type: <code>{Boolean}</code></p>\\n<p>Default: <code>undefined</code></p>\\n<p>See <a href=\\\"https://github.com/jonschlinkert/expand-brackets\\\">expand-brackets</a> for more information about extended bracket expressions.</p>\\n<h3>options.noextglob</h3>\\n<p>Don't expand extended globs.</p>\\n<p>Type: <code>{Boolean}</code></p>\\n<p>Default: <code>undefined</code></p>\\n<p>See <a href=\\\"https://github.com/jonschlinkert/extglob\\\">extglob</a> for more information about extended globs.</p>\\n<h3>options.nocase</h3>\\n<p>Use a case-insensitive regex for matching files. Same behavior as <a href=\\\"https://github.com/isaacs/minimatch\\\">minimatch</a>.</p>\\n<p>Type: <code>{Boolean}</code></p>\\n<p>Default: <code>false</code></p>\\n<h3>options.nonegate</h3>\\n<p>Disallow negation (<code>!</code>) patterns.</p>\\n<p>Type: <code>{Boolean}</code></p>\\n<p>Default: <code>false</code></p>\\n<h3>options.nonull</h3>\\n<p>If <code>true</code>, when no matches are found the actual (array-ified) glob pattern is returned instead of an empty array. Same behavior as <a href=\\\"https://github.com/isaacs/minimatch\\\">minimatch</a>.</p>\\n<p>Type: <code>{Boolean}</code></p>\\n<p>Default: <code>false</code></p>\\n<h3>options.cache</h3>\\n<p>Cache the platform (e.g. <code>win32</code>) to prevent this from being looked up for every filepath.</p>\\n<p>Type: <code>{Boolean}</code></p>\\n<p>Default: <code>true</code></p>\\n<hr>\\n<h2>Other features</h2>\\n<p>Micromatch also supports the following.</p>\\n<h3>Extended globbing</h3>\\n<h4>extglobs</h4>\\n<p>Extended globbing, as described by the bash man page:</p>\\n<table>\\n<thead>\\n<tr>\\n<th><strong>pattern</strong></th>\\n<th><strong>regex equivalent</strong></th>\\n<th><strong>description</strong></th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><code>?(pattern-list)</code></td>\\n<td><code>(... | ...)?</code></td>\\n<td>Matches zero or one occurrence of the given patterns</td>\\n</tr>\\n<tr>\\n<td><code>*(pattern-list)</code></td>\\n<td><code>(... | ...)*</code></td>\\n<td>Matches zero or more occurrences of the given patterns</td>\\n</tr>\\n<tr>\\n<td><code>+(pattern-list)</code></td>\\n<td><code>(... | ...)+</code></td>\\n<td>Matches one or more occurrences of the given patterns</td>\\n</tr>\\n<tr>\\n<td><code>@(pattern-list)</code></td>\\n<td><code>(... | ...)</code>\\n \\n<sup>\\n*\\n</sup></td>\\n<td>Matches one of the given patterns</td>\\n</tr>\\n<tr>\\n<td><code>!(pattern-list)</code></td>\\n<td>N/A</td>\\n<td>Matches anything except one of the given patterns</td>\\n</tr>\\n</tbody>\\n</table>\\n<p><sup><strong>*</strong></sup> <code>@</code> isn't a RegEx character.</p>\\n<p>Powered by <a href=\\\"https://github.com/jonschlinkert/extglob\\\">extglob</a>. Visit that library for the full range of options or to report extglob related issues.</p>\\n<p>See <a href=\\\"https://github.com/jonschlinkert/extglob\\\">extglob</a> for more information about extended globs.</p>\\n<h4>brace expansion</h4>\\n<p>In simple cases, brace expansion appears to work the same way as the logical <code>OR</code> operator. For example, <code>(a|b)</code> will achieve the same result as <code>{a,b}</code>.</p>\\n<p>Here are some powerful features unique to brace expansion (versus character classes):</p>\\n<ul>\\n<li>range expansion: <code>a{1..3}b/*.js</code> expands to: <code>['a1b/*.js', 'a2b/*.js', 'a3b/*.js']</code></li>\\n<li>nesting: <code>a{c,{d,e}}b/*.js</code> expands to: <code>['acb/*.js', 'adb/*.js', 'aeb/*.js']</code></li>\\n</ul>\\n<p>Visit <a href=\\\"https://github.com/jonschlinkert/braces\\\">braces</a> to ask questions and create an issue related to brace-expansion, or to see the full range of features and options related to brace expansion.</p>\\n<h4>regex character classes</h4>\\n<p>With the exception of brace expansion (<code>{a,b}</code>, <code>{1..5}</code>, etc), most of the special characters convert directly to regex, so you can expect them to follow the same rules and produce the same results as regex.</p>\\n<p>For example, given the list: <code>['a.js', 'b.js', 'c.js', 'd.js', 'E.js']</code>:</p>\\n<ul>\\n<li><code>[ac].js</code>: matches both <code>a</code> and <code>c</code>, returning <code>['a.js', 'c.js']</code></li>\\n<li><code>[b-d].js</code>: matches from <code>b</code> to <code>d</code>, returning <code>['b.js', 'c.js', 'd.js']</code></li>\\n<li><code>[b-d].js</code>: matches from <code>b</code> to <code>d</code>, returning <code>['b.js', 'c.js', 'd.js']</code></li>\\n<li><code>a/[A-Z].js</code>: matches and uppercase letter, returning <code>['a/E.md']</code></li>\\n</ul>\\n<p>Learn about <a href=\\\"http://www.regular-expressions.info/charclass.html\\\">regex character classes</a>.</p>\\n<h4>regex groups</h4>\\n<p>Given <code>['a.js', 'b.js', 'c.js', 'd.js', 'E.js']</code>:</p>\\n<ul>\\n<li><code>(a|c).js</code>: would match either <code>a</code> or <code>c</code>, returning <code>['a.js', 'c.js']</code></li>\\n<li><code>(b|d).js</code>: would match either <code>b</code> or <code>d</code>, returning <code>['b.js', 'd.js']</code></li>\\n<li><code>(b|[A-Z]).js</code>: would match either <code>b</code> or an uppercase letter, returning <code>['b.js', 'E.js']</code></li>\\n</ul>\\n<p>As with regex, parenthese can be nested, so patterns like <code>((a|b)|c)/b</code> will work. But it might be easier to achieve your goal using brace expansion.</p>\\n<h4>POSIX bracket expressions</h4>\\n<p><strong>Example</strong></p>\\n<pre><code class=\\\"language-js\\\">mm.isMatch('a1', '[[:alpha:][:digit:]]');\\n//=> true\\n</code></pre>\\n<p>See <a href=\\\"https://github.com/jonschlinkert/expand-brackets\\\">expand-brackets</a> for more information about extended bracket expressions.</p>\\n<hr>\\n<h2>Notes</h2>\\n<p>Whenever possible parsing behavior for patterns is based on globbing specifications in Bash 4.3. Patterns that aren't described by Bash follow wildmatch spec (used by git).</p>\\n<h2>Benchmarks</h2>\\n<p>Run the <a href=\\\"./benchmark\\\">benchmarks</a>:</p>\\n<pre><code class=\\\"language-bash\\\">node benchmark\\n</code></pre>\\n<p>As of July 15, 2016:</p>\\n<pre><code class=\\\"language-bash\\\">#1: basename-braces\\n  micromatch x 26,420 ops/sec ±0.89% (91 runs sampled)\\n  minimatch x 3,507 ops/sec ±0.64% (97 runs sampled)\\n\\n#2: basename\\n  micromatch x 25,315 ops/sec ±0.82% (93 runs sampled)\\n  minimatch x 4,398 ops/sec ±0.86% (94 runs sampled)\\n\\n#3: braces-no-glob\\n  micromatch x 341,254 ops/sec ±0.78% (93 runs sampled)\\n  minimatch x 30,197 ops/sec ±1.12% (91 runs sampled)\\n\\n#4: braces\\n  micromatch x 54,649 ops/sec ±0.74% (94 runs sampled)\\n  minimatch x 3,095 ops/sec ±0.82% (95 runs sampled)\\n\\n#5: immediate\\n  micromatch x 16,719 ops/sec ±0.79% (95 runs sampled)\\n  minimatch x 4,348 ops/sec ±0.86% (96 runs sampled)\\n\\n#6: large\\n  micromatch x 721 ops/sec ±0.77% (94 runs sampled)\\n  minimatch x 17.73 ops/sec ±1.08% (50 runs sampled)\\n\\n#7: long\\n  micromatch x 5,051 ops/sec ±0.87% (97 runs sampled)\\n  minimatch x 628 ops/sec ±0.83% (94 runs sampled)\\n\\n#8: mid\\n  micromatch x 51,280 ops/sec ±0.80% (95 runs sampled)\\n  minimatch x 1,923 ops/sec ±0.84% (95 runs sampled)\\n\\n#9: multi-patterns\\n  micromatch x 22,440 ops/sec ±0.97% (94 runs sampled)\\n  minimatch x 2,481 ops/sec ±1.10% (94 runs sampled)\\n\\n#10: no-glob\\n  micromatch x 722,823 ops/sec ±1.30% (87 runs sampled)\\n  minimatch x 52,967 ops/sec ±1.09% (94 runs sampled)\\n\\n#11: range\\n  micromatch x 243,471 ops/sec ±0.79% (94 runs sampled)\\n  minimatch x 11,736 ops/sec ±0.82% (96 runs sampled)\\n\\n#12: shallow\\n  micromatch x 190,874 ops/sec ±0.98% (95 runs sampled)\\n  minimatch x 21,699 ops/sec ±0.81% (97 runs sampled)\\n\\n#13: short\\n  micromatch x 496,393 ops/sec ±3.86% (90 runs sampled)\\n  minimatch x 53,765 ops/sec ±0.75% (95 runs sampled)\\n</code></pre>\\n<h2>Tests</h2>\\n<h3>Running tests</h3>\\n<p>Install dev dependencies:</p>\\n<pre><code class=\\\"language-sh\\\">$ npm install -d &#x26;&#x26; npm test\\n</code></pre>\\n<h3>Coverage</h3>\\n<p>As of July 15, 2016:</p>\\n<pre><code class=\\\"language-sh\\\">Statements : 100% (441/441)\\nBranches   : 100% (270/270)\\nFunctions  : 100% (54/54)\\nLines      : 100% (429/429)\\n</code></pre>\\n<h2>Contributing</h2>\\n<p>Pull requests and stars are always welcome. For bugs and feature requests, <a href=\\\"../../issues/new\\\">please create an issue</a>.</p>\\n<p>Please be sure to run the benchmarks before/after any code changes to judge the impact before you do a PR. thanks!</p>\\n<h2>Related</h2>\\n<ul>\\n<li><a href=\\\"https://www.npmjs.com/package/braces\\\">braces</a>: Fastest brace expansion for node.js, with the most complete support for the Bash 4.3 braces… <a href=\\\"https://github.com/jonschlinkert/braces\\\">more</a> | <a href=\\\"https://github.com/jonschlinkert/braces\\\" title=\\\"Fastest brace expansion for node.js, with the most complete support for the Bash 4.3 braces specification.\\\">homepage</a></li>\\n<li><a href=\\\"https://www.npmjs.com/package/expand-brackets\\\">expand-brackets</a>: Expand POSIX bracket expressions (character classes) in glob patterns. | <a href=\\\"https://github.com/jonschlinkert/expand-brackets\\\" title=\\\"Expand POSIX bracket expressions (character classes) in glob patterns.\\\">homepage</a></li>\\n<li><a href=\\\"https://www.npmjs.com/package/expand-range\\\">expand-range</a>: Fast, bash-like range expansion. Expand a range of numbers or letters, uppercase or lowercase. See… <a href=\\\"https://github.com/jonschlinkert/expand-range\\\">more</a> | <a href=\\\"https://github.com/jonschlinkert/expand-range\\\" title=\\\"Fast, bash-like range expansion. Expand a range of numbers or letters, uppercase or lowercase. See the benchmarks. Used by micromatch.\\\">homepage</a></li>\\n<li><a href=\\\"https://www.npmjs.com/package/extglob\\\">extglob</a>: Convert extended globs to regex-compatible strings. Add (almost) the expressive power of regular expressions to… <a href=\\\"https://github.com/jonschlinkert/extglob\\\">more</a> | <a href=\\\"https://github.com/jonschlinkert/extglob\\\" title=\\\"Convert extended globs to regex-compatible strings. Add (almost) the expressive power of regular expressions to glob patterns.\\\">homepage</a></li>\\n<li><a href=\\\"https://www.npmjs.com/package/fill-range\\\">fill-range</a>: Fill in a range of numbers or letters, optionally passing an increment or multiplier to… <a href=\\\"https://github.com/jonschlinkert/fill-range\\\">more</a> | <a href=\\\"https://github.com/jonschlinkert/fill-range\\\" title=\\\"Fill in a range of numbers or letters, optionally passing an increment or multiplier to use.\\\">homepage</a></li>\\n<li><a href=\\\"https://www.npmjs.com/package/gulp-micromatch\\\">gulp-micromatch</a>: Filter vinyl files with glob patterns, string, regexp, array, object or matcher function. micromatch stream. | <a href=\\\"https://github.com/tunnckocore/gulp-micromatch#readme\\\" title=\\\"Filter vinyl files with glob patterns, string, regexp, array, object or matcher function. micromatch stream.\\\">homepage</a></li>\\n<li><a href=\\\"https://www.npmjs.com/package/is-glob\\\">is-glob</a>: Returns <code>true</code> if the given string looks like a glob pattern or an extglob pattern… <a href=\\\"https://github.com/jonschlinkert/is-glob\\\">more</a> | <a href=\\\"https://github.com/jonschlinkert/is-glob\\\" title=\\\"Returns &#x60;true&#x60; if the given string looks like a glob pattern or an extglob pattern. This makes it easy to create code that only uses external modules like node-glob when necessary, resulting in much faster code execution and initialization time, and a bet\\\">homepage</a></li>\\n<li><a href=\\\"https://www.npmjs.com/package/parse-glob\\\">parse-glob</a>: Parse a glob pattern into an object of tokens. | <a href=\\\"https://github.com/jonschlinkert/parse-glob\\\" title=\\\"Parse a glob pattern into an object of tokens.\\\">homepage</a></li>\\n</ul>\\n<h2>Contributing</h2>\\n<p>Pull requests and stars are always welcome. For bugs and feature requests, <a href=\\\"../../issues/new\\\">please create an issue</a>.</p>\\n<h2>Building docs</h2>\\n<p><em>(This document was generated by <a href=\\\"https://github.com/verbose/verb-generate-readme\\\">verb-generate-readme</a> (a <a href=\\\"https://github.com/verbose/verb\\\">verb</a> generator), please don't edit the readme directly. Any changes to the readme must be made in <a href=\\\".verb.html\\\">.verb.md</a>.)</em></p>\\n<p>To generate the readme and API documentation with <a href=\\\"https://github.com/verbose/verb\\\">verb</a>:</p>\\n<pre><code class=\\\"language-sh\\\">$ npm install -g verb verb-generate-readme &#x26;&#x26; verb\\n</code></pre>\\n<h2>Running tests</h2>\\n<p>Install dev dependencies:</p>\\n<pre><code class=\\\"language-sh\\\">$ npm install -d &#x26;&#x26; npm test\\n</code></pre>\\n<h2>Author</h2>\\n<p><strong>Jon Schlinkert</strong></p>\\n<ul>\\n<li><a href=\\\"https://github.com/jonschlinkert\\\">github/jonschlinkert</a></li>\\n<li><a href=\\\"http://twitter.com/jonschlinkert\\\">twitter/jonschlinkert</a></li>\\n</ul>\\n<h2>License</h2>\\n<p>Copyright © 2016, <a href=\\\"https://github.com/jonschlinkert\\\">Jon Schlinkert</a>.\\nReleased under the <a href=\\\"https://github.com/jonschlinkert/micromatch/blob/master/LICENSE\\\">MIT license</a>.</p>\\n<hr>\\n<p><em>This file was generated by <a href=\\\"https://github.com/verbose/verb\\\">verb</a>, v0.9.0, on July 15, 2016.</em></p>\",\"docPath\":\"argo-ci/node_modules/micromatch/readme\",\"proj\":\"argo-ci\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/docs-argo-ci-node-modules-micromatch.json\n// module id = 2876\n// module chunks = 218370533909717"],"sourceRoot":""}