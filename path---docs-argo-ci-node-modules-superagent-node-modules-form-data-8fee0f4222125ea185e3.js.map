{"version":3,"sources":["webpack:///path---docs-argo-ci-node-modules-superagent-node-modules-form-data-8fee0f4222125ea185e3.js","webpack:///./.cache/json/docs-argo-ci-node-modules-superagent-node-modules-form-data.json"],"names":["webpackJsonp","3218","module","exports","pathContext","docHtml","docPath","proj"],"mappings":"AAAAA,cAAc,iBAERC,KACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,aAAeC,QAAA,ykPAAqmOC,QAAA,gEAAAC,KAAA","file":"path---docs-argo-ci-node-modules-superagent-node-modules-form-data-8fee0f4222125ea185e3.js","sourcesContent":["webpackJsonp([69873499513929],{\n\n/***/ 3218:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"pathContext\":{\"docHtml\":\"<h1>Form-Data <a href=\\\"https://www.npmjs.com/package/form-data\\\"><img src=\\\"https://img.shields.io/npm/v/form-data.svg\\\" alt=\\\"NPM Module\\\"></a> <a href=\\\"https://gitter.im/form-data/form-data\\\"><img src=\\\"http://form-data.github.io/images/gitterbadge.svg\\\" alt=\\\"Join the chat at https://gitter.im/form-data/form-data\\\"></a></h1>\\n<p>A library to create readable <code>\\\"multipart/form-data\\\"</code> streams. Can be used to submit forms and file uploads to other web applications.</p>\\n<p>The API of this library is inspired by the <a href=\\\"http://dev.w3.org/2006/webapi/XMLHttpRequest-2/Overview.html#the-formdata-interface\\\">XMLHttpRequest-2 FormData Interface</a>.</p>\\n<p><a href=\\\"https://travis-ci.org/form-data/form-data\\\"><img src=\\\"https://img.shields.io/travis/form-data/form-data/master.svg?label=linux:0.10-5.x\\\" alt=\\\"Linux Build\\\"></a>\\n<a href=\\\"https://ci.appveyor.com/project/alexindigo/form-data\\\"><img src=\\\"https://img.shields.io/appveyor/ci/alexindigo/form-data/master.svg?label=windows:0.10-5.x\\\" alt=\\\"Windows Build\\\"></a>\\n<a href=\\\"https://coveralls.io/github/form-data/form-data?branch=master\\\"><img src=\\\"https://img.shields.io/coveralls/form-data/form-data/master.svg?label=code+coverage\\\" alt=\\\"Coverage Status\\\"></a></p>\\n<p><a href=\\\"https://david-dm.org/form-data/form-data\\\"><img src=\\\"https://img.shields.io/david/form-data/form-data.svg\\\" alt=\\\"Dependency Status\\\"></a>\\n<a href=\\\"https://www.codacy.com/app/form-data/form-data\\\"><img src=\\\"https://img.shields.io/codacy/43ece80331c246179695e41f81eeffe2.svg\\\" alt=\\\"Codacy Badge\\\"></a>\\n<a href=\\\"https://www.bithound.io/github/form-data/form-data\\\"><img src=\\\"https://www.bithound.io/github/form-data/form-data/badges/score.svg\\\" alt=\\\"bitHound Overall Score\\\"></a></p>\\n<h2>Install</h2>\\n<pre><code>npm install form-data\\n</code></pre>\\n<h2>Usage</h2>\\n<p>In this example we are constructing a form with 3 fields that contain a string,\\na buffer and a file stream.</p>\\n<pre><code class=\\\"language-javascript\\\">var FormData = require('form-data');\\nvar fs = require('fs');\\n\\nvar form = new FormData();\\nform.append('my_field', 'my value');\\nform.append('my_buffer', new Buffer(10));\\nform.append('my_file', fs.createReadStream('/foo/bar.jpg'));\\n</code></pre>\\n<p>Also you can use http-response stream:</p>\\n<pre><code class=\\\"language-javascript\\\">var FormData = require('form-data');\\nvar http = require('http');\\n\\nvar form = new FormData();\\n\\nhttp.request('http://nodejs.org/images/logo.png', function(response) {\\n  form.append('my_field', 'my value');\\n  form.append('my_buffer', new Buffer(10));\\n  form.append('my_logo', response);\\n});\\n</code></pre>\\n<p>Or @mikeal's <a href=\\\"https://github.com/request/request\\\">request</a> stream:</p>\\n<pre><code class=\\\"language-javascript\\\">var FormData = require('form-data');\\nvar request = require('request');\\n\\nvar form = new FormData();\\n\\nform.append('my_field', 'my value');\\nform.append('my_buffer', new Buffer(10));\\nform.append('my_logo', request('http://nodejs.org/images/logo.png'));\\n</code></pre>\\n<p>In order to submit this form to a web application, call <code>submit(url, [callback])</code> method:</p>\\n<pre><code class=\\\"language-javascript\\\">form.submit('http://example.org/', function(err, res) {\\n  // res â€“ response object (http.IncomingMessage)  //\\n  res.resume();\\n});\\n</code></pre>\\n<p>For more advanced request manipulations <code>submit()</code> method returns <code>http.ClientRequest</code> object, or you can choose from one of the alternative submission methods.</p>\\n<h3>Alternative submission methods</h3>\\n<p>You can use node's http client interface:</p>\\n<pre><code class=\\\"language-javascript\\\">var http = require('http');\\n\\nvar request = http.request({\\n  method: 'post',\\n  host: 'example.org',\\n  path: '/upload',\\n  headers: form.getHeaders()\\n});\\n\\nform.pipe(request);\\n\\nrequest.on('response', function(res) {\\n  console.log(res.statusCode);\\n});\\n</code></pre>\\n<p>Or if you would prefer the <code>'Content-Length'</code> header to be set for you:</p>\\n<pre><code class=\\\"language-javascript\\\">form.submit('example.org/upload', function(err, res) {\\n  console.log(res.statusCode);\\n});\\n</code></pre>\\n<p>To use custom headers and pre-known length in parts:</p>\\n<pre><code class=\\\"language-javascript\\\">var CRLF = '\\\\r\\\\n';\\nvar form = new FormData();\\n\\nvar options = {\\n  header: CRLF + '--' + form.getBoundary() + CRLF + 'X-Custom-Header: 123' + CRLF + CRLF,\\n  knownLength: 1\\n};\\n\\nform.append('my_buffer', buffer, options);\\n\\nform.submit('http://example.com/', function(err, res) {\\n  if (err) throw err;\\n  console.log('Done');\\n});\\n</code></pre>\\n<p>Form-Data can recognize and fetch all the required information from common types of streams (<code>fs.readStream</code>, <code>http.response</code> and <code>mikeal's request</code>), for some other types of streams you'd need to provide \\\"file\\\"-related information manually:</p>\\n<pre><code class=\\\"language-javascript\\\">someModule.stream(function(err, stdout, stderr) {\\n  if (err) throw err;\\n\\n  var form = new FormData();\\n\\n  form.append('file', stdout, {\\n    filename: 'unicycle.jpg',\\n    contentType: 'image/jpg',\\n    knownLength: 19806\\n  });\\n\\n  form.submit('http://example.com/', function(err, res) {\\n    if (err) throw err;\\n    console.log('Done');\\n  });\\n});\\n</code></pre>\\n<p>For edge cases, like POST request to URL with query string or to pass HTTP auth credentials, object can be passed to <code>form.submit()</code> as first parameter:</p>\\n<pre><code class=\\\"language-javascript\\\">form.submit({\\n  host: 'example.com',\\n  path: '/probably.php?extra=params',\\n  auth: 'username:password'\\n}, function(err, res) {\\n  console.log(res.statusCode);\\n});\\n</code></pre>\\n<p>In case you need to also send custom HTTP headers with the POST request, you can use the <code>headers</code> key in first parameter of <code>form.submit()</code>:</p>\\n<pre><code class=\\\"language-javascript\\\">form.submit({\\n  host: 'example.com',\\n  path: '/surelynot.php',\\n  headers: {'x-test-header': 'test-header-value'}\\n}, function(err, res) {\\n  console.log(res.statusCode);\\n});\\n</code></pre>\\n<h3>Integration with other libraries</h3>\\n<h4>Request</h4>\\n<p>Form submission using  <a href=\\\"https://github.com/request/request\\\">request</a>:</p>\\n<pre><code class=\\\"language-javascript\\\">var formData = {\\n  my_field: 'my_value',\\n  my_file: fs.createReadStream(__dirname + '/unicycle.jpg'),\\n};\\n\\nrequest.post({url:'http://service.com/upload', formData: formData}, function(err, httpResponse, body) {\\n  if (err) {\\n    return console.error('upload failed:', err);\\n  }\\n  console.log('Upload successful!  Server responded with:', body);\\n});\\n</code></pre>\\n<p>For more details see <a href=\\\"https://github.com/request/request#multipartform-data-multipart-form-uploads\\\">request readme</a>.</p>\\n<h4>node-fetch</h4>\\n<p>You can also submit a form using <a href=\\\"https://github.com/bitinn/node-fetch\\\">node-fetch</a>:</p>\\n<pre><code class=\\\"language-javascript\\\">var form = new FormData();\\n\\nform.append('a', 1);\\n\\nfetch('http://example.com', { method: 'POST', body: form })\\n    .then(function(res) {\\n        return res.json();\\n    }).then(function(json) {\\n        console.log(json);\\n    });\\n</code></pre>\\n<h2>Notes</h2>\\n<ul>\\n<li><code>getLengthSync()</code> method DOESN'T calculate length for streams, use <code>knownLength</code> options as workaround.</li>\\n<li>If it feels like FormData hangs after submit and you're on <code>node-0.10</code>, please check <a href=\\\"http://nodejs.org/api/stream.html#stream_compatibility_with_older_node_versions\\\">Compatibility with Older Node Versions</a></li>\\n</ul>\\n<h2>License</h2>\\n<p>Form-Data is licensed under the MIT license.</p>\",\"docPath\":\"argo-ci/node_modules/superagent/node_modules/form-data/readme\",\"proj\":\"argo-ci\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---docs-argo-ci-node-modules-superagent-node-modules-form-data-8fee0f4222125ea185e3.js","module.exports = {\"pathContext\":{\"docHtml\":\"<h1>Form-Data <a href=\\\"https://www.npmjs.com/package/form-data\\\"><img src=\\\"https://img.shields.io/npm/v/form-data.svg\\\" alt=\\\"NPM Module\\\"></a> <a href=\\\"https://gitter.im/form-data/form-data\\\"><img src=\\\"http://form-data.github.io/images/gitterbadge.svg\\\" alt=\\\"Join the chat at https://gitter.im/form-data/form-data\\\"></a></h1>\\n<p>A library to create readable <code>\\\"multipart/form-data\\\"</code> streams. Can be used to submit forms and file uploads to other web applications.</p>\\n<p>The API of this library is inspired by the <a href=\\\"http://dev.w3.org/2006/webapi/XMLHttpRequest-2/Overview.html#the-formdata-interface\\\">XMLHttpRequest-2 FormData Interface</a>.</p>\\n<p><a href=\\\"https://travis-ci.org/form-data/form-data\\\"><img src=\\\"https://img.shields.io/travis/form-data/form-data/master.svg?label=linux:0.10-5.x\\\" alt=\\\"Linux Build\\\"></a>\\n<a href=\\\"https://ci.appveyor.com/project/alexindigo/form-data\\\"><img src=\\\"https://img.shields.io/appveyor/ci/alexindigo/form-data/master.svg?label=windows:0.10-5.x\\\" alt=\\\"Windows Build\\\"></a>\\n<a href=\\\"https://coveralls.io/github/form-data/form-data?branch=master\\\"><img src=\\\"https://img.shields.io/coveralls/form-data/form-data/master.svg?label=code+coverage\\\" alt=\\\"Coverage Status\\\"></a></p>\\n<p><a href=\\\"https://david-dm.org/form-data/form-data\\\"><img src=\\\"https://img.shields.io/david/form-data/form-data.svg\\\" alt=\\\"Dependency Status\\\"></a>\\n<a href=\\\"https://www.codacy.com/app/form-data/form-data\\\"><img src=\\\"https://img.shields.io/codacy/43ece80331c246179695e41f81eeffe2.svg\\\" alt=\\\"Codacy Badge\\\"></a>\\n<a href=\\\"https://www.bithound.io/github/form-data/form-data\\\"><img src=\\\"https://www.bithound.io/github/form-data/form-data/badges/score.svg\\\" alt=\\\"bitHound Overall Score\\\"></a></p>\\n<h2>Install</h2>\\n<pre><code>npm install form-data\\n</code></pre>\\n<h2>Usage</h2>\\n<p>In this example we are constructing a form with 3 fields that contain a string,\\na buffer and a file stream.</p>\\n<pre><code class=\\\"language-javascript\\\">var FormData = require('form-data');\\nvar fs = require('fs');\\n\\nvar form = new FormData();\\nform.append('my_field', 'my value');\\nform.append('my_buffer', new Buffer(10));\\nform.append('my_file', fs.createReadStream('/foo/bar.jpg'));\\n</code></pre>\\n<p>Also you can use http-response stream:</p>\\n<pre><code class=\\\"language-javascript\\\">var FormData = require('form-data');\\nvar http = require('http');\\n\\nvar form = new FormData();\\n\\nhttp.request('http://nodejs.org/images/logo.png', function(response) {\\n  form.append('my_field', 'my value');\\n  form.append('my_buffer', new Buffer(10));\\n  form.append('my_logo', response);\\n});\\n</code></pre>\\n<p>Or @mikeal's <a href=\\\"https://github.com/request/request\\\">request</a> stream:</p>\\n<pre><code class=\\\"language-javascript\\\">var FormData = require('form-data');\\nvar request = require('request');\\n\\nvar form = new FormData();\\n\\nform.append('my_field', 'my value');\\nform.append('my_buffer', new Buffer(10));\\nform.append('my_logo', request('http://nodejs.org/images/logo.png'));\\n</code></pre>\\n<p>In order to submit this form to a web application, call <code>submit(url, [callback])</code> method:</p>\\n<pre><code class=\\\"language-javascript\\\">form.submit('http://example.org/', function(err, res) {\\n  // res â€“ response object (http.IncomingMessage)  //\\n  res.resume();\\n});\\n</code></pre>\\n<p>For more advanced request manipulations <code>submit()</code> method returns <code>http.ClientRequest</code> object, or you can choose from one of the alternative submission methods.</p>\\n<h3>Alternative submission methods</h3>\\n<p>You can use node's http client interface:</p>\\n<pre><code class=\\\"language-javascript\\\">var http = require('http');\\n\\nvar request = http.request({\\n  method: 'post',\\n  host: 'example.org',\\n  path: '/upload',\\n  headers: form.getHeaders()\\n});\\n\\nform.pipe(request);\\n\\nrequest.on('response', function(res) {\\n  console.log(res.statusCode);\\n});\\n</code></pre>\\n<p>Or if you would prefer the <code>'Content-Length'</code> header to be set for you:</p>\\n<pre><code class=\\\"language-javascript\\\">form.submit('example.org/upload', function(err, res) {\\n  console.log(res.statusCode);\\n});\\n</code></pre>\\n<p>To use custom headers and pre-known length in parts:</p>\\n<pre><code class=\\\"language-javascript\\\">var CRLF = '\\\\r\\\\n';\\nvar form = new FormData();\\n\\nvar options = {\\n  header: CRLF + '--' + form.getBoundary() + CRLF + 'X-Custom-Header: 123' + CRLF + CRLF,\\n  knownLength: 1\\n};\\n\\nform.append('my_buffer', buffer, options);\\n\\nform.submit('http://example.com/', function(err, res) {\\n  if (err) throw err;\\n  console.log('Done');\\n});\\n</code></pre>\\n<p>Form-Data can recognize and fetch all the required information from common types of streams (<code>fs.readStream</code>, <code>http.response</code> and <code>mikeal's request</code>), for some other types of streams you'd need to provide \\\"file\\\"-related information manually:</p>\\n<pre><code class=\\\"language-javascript\\\">someModule.stream(function(err, stdout, stderr) {\\n  if (err) throw err;\\n\\n  var form = new FormData();\\n\\n  form.append('file', stdout, {\\n    filename: 'unicycle.jpg',\\n    contentType: 'image/jpg',\\n    knownLength: 19806\\n  });\\n\\n  form.submit('http://example.com/', function(err, res) {\\n    if (err) throw err;\\n    console.log('Done');\\n  });\\n});\\n</code></pre>\\n<p>For edge cases, like POST request to URL with query string or to pass HTTP auth credentials, object can be passed to <code>form.submit()</code> as first parameter:</p>\\n<pre><code class=\\\"language-javascript\\\">form.submit({\\n  host: 'example.com',\\n  path: '/probably.php?extra=params',\\n  auth: 'username:password'\\n}, function(err, res) {\\n  console.log(res.statusCode);\\n});\\n</code></pre>\\n<p>In case you need to also send custom HTTP headers with the POST request, you can use the <code>headers</code> key in first parameter of <code>form.submit()</code>:</p>\\n<pre><code class=\\\"language-javascript\\\">form.submit({\\n  host: 'example.com',\\n  path: '/surelynot.php',\\n  headers: {'x-test-header': 'test-header-value'}\\n}, function(err, res) {\\n  console.log(res.statusCode);\\n});\\n</code></pre>\\n<h3>Integration with other libraries</h3>\\n<h4>Request</h4>\\n<p>Form submission using  <a href=\\\"https://github.com/request/request\\\">request</a>:</p>\\n<pre><code class=\\\"language-javascript\\\">var formData = {\\n  my_field: 'my_value',\\n  my_file: fs.createReadStream(__dirname + '/unicycle.jpg'),\\n};\\n\\nrequest.post({url:'http://service.com/upload', formData: formData}, function(err, httpResponse, body) {\\n  if (err) {\\n    return console.error('upload failed:', err);\\n  }\\n  console.log('Upload successful!  Server responded with:', body);\\n});\\n</code></pre>\\n<p>For more details see <a href=\\\"https://github.com/request/request#multipartform-data-multipart-form-uploads\\\">request readme</a>.</p>\\n<h4>node-fetch</h4>\\n<p>You can also submit a form using <a href=\\\"https://github.com/bitinn/node-fetch\\\">node-fetch</a>:</p>\\n<pre><code class=\\\"language-javascript\\\">var form = new FormData();\\n\\nform.append('a', 1);\\n\\nfetch('http://example.com', { method: 'POST', body: form })\\n    .then(function(res) {\\n        return res.json();\\n    }).then(function(json) {\\n        console.log(json);\\n    });\\n</code></pre>\\n<h2>Notes</h2>\\n<ul>\\n<li><code>getLengthSync()</code> method DOESN'T calculate length for streams, use <code>knownLength</code> options as workaround.</li>\\n<li>If it feels like FormData hangs after submit and you're on <code>node-0.10</code>, please check <a href=\\\"http://nodejs.org/api/stream.html#stream_compatibility_with_older_node_versions\\\">Compatibility with Older Node Versions</a></li>\\n</ul>\\n<h2>License</h2>\\n<p>Form-Data is licensed under the MIT license.</p>\",\"docPath\":\"argo-ci/node_modules/superagent/node_modules/form-data/readme\",\"proj\":\"argo-ci\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/docs-argo-ci-node-modules-superagent-node-modules-form-data.json\n// module id = 3218\n// module chunks = 69873499513929"],"sourceRoot":""}