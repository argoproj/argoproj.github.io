{"version":3,"sources":["webpack:///path---docs-argo-ci-node-modules-node-pre-gyp-node-modules-nopt-readme-html-de678d71e4ada32edc0f.js","webpack:///./.cache/json/docs-argo-ci-node-modules-node-pre-gyp-node-modules-nopt-readme-html.json"],"names":["webpackJsonp","2950","module","exports","pathContext","docHtml","docPath","proj"],"mappings":"AAAAA,cAAc,gBAERC,KACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,aAAeC,QAAA,igRAAwiPC,QAAA,6DAAAC,KAAA","file":"path---docs-argo-ci-node-modules-node-pre-gyp-node-modules-nopt-readme-html-de678d71e4ada32edc0f.js","sourcesContent":["webpackJsonp([8258294982728],{\n\n/***/ 2950:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"pathContext\":{\"docHtml\":\"<p>If you want to write an option parser, and have it be good, there are\\ntwo ways to do it.  The Right Way, and the Wrong Way.</p>\\n<p>The Wrong Way is to sit down and write an option parser.  We've all done\\nthat.</p>\\n<p>The Right Way is to write some complex configurable program with so many\\noptions that you hit the limit of your frustration just trying to\\nmanage them all, and defer it with duct-tape solutions until you see\\nexactly to the core of the problem, and finally snap and write an\\nawesome option parser.</p>\\n<p>If you want to write an option parser, don't write an option parser.\\nWrite a package manager, or a source control system, or a service\\nrestarter, or an operating system.  You probably won't end up with a\\ngood one of those, but if you don't give up, and you are relentless and\\ndiligent enough in your procrastination, you may just end up with a very\\nnice option parser.</p>\\n<h2>USAGE</h2>\\n<pre><code class=\\\"language-javascript\\\">// my-program.js\\nvar nopt = require(\\\"nopt\\\")\\n  , Stream = require(\\\"stream\\\").Stream\\n  , path = require(\\\"path\\\")\\n  , knownOpts = { \\\"foo\\\" : [String, null]\\n                , \\\"bar\\\" : [Stream, Number]\\n                , \\\"baz\\\" : path\\n                , \\\"bloo\\\" : [ \\\"big\\\", \\\"medium\\\", \\\"small\\\" ]\\n                , \\\"flag\\\" : Boolean\\n                , \\\"pick\\\" : Boolean\\n                , \\\"many1\\\" : [String, Array]\\n                , \\\"many2\\\" : [path, Array]\\n                }\\n  , shortHands = { \\\"foofoo\\\" : [\\\"--foo\\\", \\\"Mr. Foo\\\"]\\n                 , \\\"b7\\\" : [\\\"--bar\\\", \\\"7\\\"]\\n                 , \\\"m\\\" : [\\\"--bloo\\\", \\\"medium\\\"]\\n                 , \\\"p\\\" : [\\\"--pick\\\"]\\n                 , \\\"f\\\" : [\\\"--flag\\\"]\\n                 }\\n             // everything is optional.\\n             // knownOpts and shorthands default to {}\\n             // arg list defaults to process.argv\\n             // slice defaults to 2\\n  , parsed = nopt(knownOpts, shortHands, process.argv, 2)\\nconsole.log(parsed)\\n</code></pre>\\n<p>This would give you support for any of the following:</p>\\n<pre><code class=\\\"language-console\\\">$ node my-program.js --foo \\\"blerp\\\" --no-flag\\n{ \\\"foo\\\" : \\\"blerp\\\", \\\"flag\\\" : false }\\n\\n$ node my-program.js ---bar 7 --foo \\\"Mr. Hand\\\" --flag\\n{ bar: 7, foo: \\\"Mr. Hand\\\", flag: true }\\n\\n$ node my-program.js --foo \\\"blerp\\\" -f -----p\\n{ foo: \\\"blerp\\\", flag: true, pick: true }\\n\\n$ node my-program.js -fp --foofoo\\n{ foo: \\\"Mr. Foo\\\", flag: true, pick: true }\\n\\n$ node my-program.js --foofoo -- -fp  # -- stops the flag parsing.\\n{ foo: \\\"Mr. Foo\\\", argv: { remain: [\\\"-fp\\\"] } }\\n\\n$ node my-program.js --blatzk -fp # unknown opts are ok.\\n{ blatzk: true, flag: true, pick: true }\\n\\n$ node my-program.js --blatzk=1000 -fp # but you need to use = if they have a value\\n{ blatzk: 1000, flag: true, pick: true }\\n\\n$ node my-program.js --no-blatzk -fp # unless they start with \\\"no-\\\"\\n{ blatzk: false, flag: true, pick: true }\\n\\n$ node my-program.js --baz b/a/z # known paths are resolved.\\n{ baz: \\\"/Users/isaacs/b/a/z\\\" }\\n\\n# if Array is one of the types, then it can take many\\n# values, and will always be an array.  The other types provided\\n# specify what types are allowed in the list.\\n\\n$ node my-program.js --many1 5 --many1 null --many1 foo\\n{ many1: [\\\"5\\\", \\\"null\\\", \\\"foo\\\"] }\\n\\n$ node my-program.js --many2 foo --many2 bar\\n{ many2: [\\\"/path/to/foo\\\", \\\"path/to/bar\\\"] }\\n</code></pre>\\n<p>Read the tests at the bottom of <code>lib/nopt.js</code> for more examples of\\nwhat this puppy can do.</p>\\n<h2>Types</h2>\\n<p>The following types are supported, and defined on <code>nopt.typeDefs</code></p>\\n<ul>\\n<li>String: A normal string.  No parsing is done.</li>\\n<li>path: A file system path.  Gets resolved against cwd if not absolute.</li>\\n<li>url: A url.  If it doesn't parse, it isn't accepted.</li>\\n<li>Number: Must be numeric.</li>\\n<li>Date: Must parse as a date. If it does, and <code>Date</code> is one of the options,\\nthen it will return a Date object, not a string.</li>\\n<li>Boolean: Must be either <code>true</code> or <code>false</code>.  If an option is a boolean,\\nthen it does not need a value, and its presence will imply <code>true</code> as\\nthe value.  To negate boolean flags, do <code>--no-whatever</code> or <code>--whatever false</code></li>\\n<li>NaN: Means that the option is strictly not allowed.  Any value will\\nfail.</li>\\n<li>Stream: An object matching the \\\"Stream\\\" class in node.  Valuable\\nfor use when validating programmatically.  (npm uses this to let you\\nsupply any WriteStream on the <code>outfd</code> and <code>logfd</code> config options.)</li>\\n<li>Array: If <code>Array</code> is specified as one of the types, then the value\\nwill be parsed as a list of options.  This means that multiple values\\ncan be specified, and that the value will always be an array.</li>\\n</ul>\\n<p>If a type is an array of values not on this list, then those are\\nconsidered valid values.  For instance, in the example above, the\\n<code>--bloo</code> option can only be one of <code>\\\"big\\\"</code>, <code>\\\"medium\\\"</code>, or <code>\\\"small\\\"</code>,\\nand any other value will be rejected.</p>\\n<p>When parsing unknown fields, <code>\\\"true\\\"</code>, <code>\\\"false\\\"</code>, and <code>\\\"null\\\"</code> will be\\ninterpreted as their JavaScript equivalents.</p>\\n<p>You can also mix types and values, or multiple types, in a list.  For\\ninstance <code>{ blah: [Number, null] }</code> would allow a value to be set to\\neither a Number or null.  When types are ordered, this implies a\\npreference, and the first type that can be used to properly interpret\\nthe value will be used.</p>\\n<p>To define a new type, add it to <code>nopt.typeDefs</code>.  Each item in that\\nhash is an object with a <code>type</code> member and a <code>validate</code> method.  The\\n<code>type</code> member is an object that matches what goes in the type list.  The\\n<code>validate</code> method is a function that gets called with <code>validate(data, key, val)</code>.  Validate methods should assign <code>data[key]</code> to the valid\\nvalue of <code>val</code> if it can be handled properly, or return boolean\\n<code>false</code> if it cannot.</p>\\n<p>You can also call <code>nopt.clean(data, types, typeDefs)</code> to clean up a\\nconfig object and remove its invalid properties.</p>\\n<h2>Error Handling</h2>\\n<p>By default, nopt outputs a warning to standard error when invalid values for\\nknown options are found.  You can change this behavior by assigning a method\\nto <code>nopt.invalidHandler</code>.  This method will be called with\\nthe offending <code>nopt.invalidHandler(key, val, types)</code>.</p>\\n<p>If no <code>nopt.invalidHandler</code> is assigned, then it will console.error\\nits whining.  If it is assigned to boolean <code>false</code> then the warning is\\nsuppressed.</p>\\n<h2>Abbreviations</h2>\\n<p>Yes, they are supported.  If you define options like this:</p>\\n<pre><code class=\\\"language-javascript\\\">{ \\\"foolhardyelephants\\\" : Boolean\\n, \\\"pileofmonkeys\\\" : Boolean }\\n</code></pre>\\n<p>Then this will work:</p>\\n<pre><code class=\\\"language-bash\\\">node program.js --foolhar --pil\\nnode program.js --no-f --pileofmon\\n# etc.\\n</code></pre>\\n<h2>Shorthands</h2>\\n<p>Shorthands are a hash of shorter option names to a snippet of args that\\nthey expand to.</p>\\n<p>If multiple one-character shorthands are all combined, and the\\ncombination does not unambiguously match any other option or shorthand,\\nthen they will be broken up into their constituent parts.  For example:</p>\\n<pre><code class=\\\"language-json\\\">{ \\\"s\\\" : [\\\"--loglevel\\\", \\\"silent\\\"]\\n, \\\"g\\\" : \\\"--global\\\"\\n, \\\"f\\\" : \\\"--force\\\"\\n, \\\"p\\\" : \\\"--parseable\\\"\\n, \\\"l\\\" : \\\"--long\\\"\\n}\\n</code></pre>\\n<pre><code class=\\\"language-bash\\\">npm ls -sgflp\\n# just like doing this:\\nnpm ls --loglevel silent --global --force --long --parseable\\n</code></pre>\\n<h2>The Rest of the args</h2>\\n<p>The config object returned by nopt is given a special member called\\n<code>argv</code>, which is an object with the following fields:</p>\\n<ul>\\n<li><code>remain</code>: The remaining args after all the parsing has occurred.</li>\\n<li><code>original</code>: The args as they originally appeared.</li>\\n<li><code>cooked</code>: The args after flags and shorthands are expanded.</li>\\n</ul>\\n<h2>Slicing</h2>\\n<p>Node programs are called with more or less the exact argv as it appears\\nin C land, after the v8 and node-specific options have been plucked off.\\nAs such, <code>argv[0]</code> is always <code>node</code> and <code>argv[1]</code> is always the\\nJavaScript program being run.</p>\\n<p>That's usually not very useful to you.  So they're sliced off by\\ndefault.  If you want them, then you can pass in <code>0</code> as the last\\nargument, or any other number that you'd like to slice off the start of\\nthe list.</p>\",\"docPath\":\"argo-ci/node_modules/node-pre-gyp/node_modules/nopt/readme\",\"proj\":\"argo-ci\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---docs-argo-ci-node-modules-node-pre-gyp-node-modules-nopt-readme-html-de678d71e4ada32edc0f.js","module.exports = {\"pathContext\":{\"docHtml\":\"<p>If you want to write an option parser, and have it be good, there are\\ntwo ways to do it.  The Right Way, and the Wrong Way.</p>\\n<p>The Wrong Way is to sit down and write an option parser.  We've all done\\nthat.</p>\\n<p>The Right Way is to write some complex configurable program with so many\\noptions that you hit the limit of your frustration just trying to\\nmanage them all, and defer it with duct-tape solutions until you see\\nexactly to the core of the problem, and finally snap and write an\\nawesome option parser.</p>\\n<p>If you want to write an option parser, don't write an option parser.\\nWrite a package manager, or a source control system, or a service\\nrestarter, or an operating system.  You probably won't end up with a\\ngood one of those, but if you don't give up, and you are relentless and\\ndiligent enough in your procrastination, you may just end up with a very\\nnice option parser.</p>\\n<h2>USAGE</h2>\\n<pre><code class=\\\"language-javascript\\\">// my-program.js\\nvar nopt = require(\\\"nopt\\\")\\n  , Stream = require(\\\"stream\\\").Stream\\n  , path = require(\\\"path\\\")\\n  , knownOpts = { \\\"foo\\\" : [String, null]\\n                , \\\"bar\\\" : [Stream, Number]\\n                , \\\"baz\\\" : path\\n                , \\\"bloo\\\" : [ \\\"big\\\", \\\"medium\\\", \\\"small\\\" ]\\n                , \\\"flag\\\" : Boolean\\n                , \\\"pick\\\" : Boolean\\n                , \\\"many1\\\" : [String, Array]\\n                , \\\"many2\\\" : [path, Array]\\n                }\\n  , shortHands = { \\\"foofoo\\\" : [\\\"--foo\\\", \\\"Mr. Foo\\\"]\\n                 , \\\"b7\\\" : [\\\"--bar\\\", \\\"7\\\"]\\n                 , \\\"m\\\" : [\\\"--bloo\\\", \\\"medium\\\"]\\n                 , \\\"p\\\" : [\\\"--pick\\\"]\\n                 , \\\"f\\\" : [\\\"--flag\\\"]\\n                 }\\n             // everything is optional.\\n             // knownOpts and shorthands default to {}\\n             // arg list defaults to process.argv\\n             // slice defaults to 2\\n  , parsed = nopt(knownOpts, shortHands, process.argv, 2)\\nconsole.log(parsed)\\n</code></pre>\\n<p>This would give you support for any of the following:</p>\\n<pre><code class=\\\"language-console\\\">$ node my-program.js --foo \\\"blerp\\\" --no-flag\\n{ \\\"foo\\\" : \\\"blerp\\\", \\\"flag\\\" : false }\\n\\n$ node my-program.js ---bar 7 --foo \\\"Mr. Hand\\\" --flag\\n{ bar: 7, foo: \\\"Mr. Hand\\\", flag: true }\\n\\n$ node my-program.js --foo \\\"blerp\\\" -f -----p\\n{ foo: \\\"blerp\\\", flag: true, pick: true }\\n\\n$ node my-program.js -fp --foofoo\\n{ foo: \\\"Mr. Foo\\\", flag: true, pick: true }\\n\\n$ node my-program.js --foofoo -- -fp  # -- stops the flag parsing.\\n{ foo: \\\"Mr. Foo\\\", argv: { remain: [\\\"-fp\\\"] } }\\n\\n$ node my-program.js --blatzk -fp # unknown opts are ok.\\n{ blatzk: true, flag: true, pick: true }\\n\\n$ node my-program.js --blatzk=1000 -fp # but you need to use = if they have a value\\n{ blatzk: 1000, flag: true, pick: true }\\n\\n$ node my-program.js --no-blatzk -fp # unless they start with \\\"no-\\\"\\n{ blatzk: false, flag: true, pick: true }\\n\\n$ node my-program.js --baz b/a/z # known paths are resolved.\\n{ baz: \\\"/Users/isaacs/b/a/z\\\" }\\n\\n# if Array is one of the types, then it can take many\\n# values, and will always be an array.  The other types provided\\n# specify what types are allowed in the list.\\n\\n$ node my-program.js --many1 5 --many1 null --many1 foo\\n{ many1: [\\\"5\\\", \\\"null\\\", \\\"foo\\\"] }\\n\\n$ node my-program.js --many2 foo --many2 bar\\n{ many2: [\\\"/path/to/foo\\\", \\\"path/to/bar\\\"] }\\n</code></pre>\\n<p>Read the tests at the bottom of <code>lib/nopt.js</code> for more examples of\\nwhat this puppy can do.</p>\\n<h2>Types</h2>\\n<p>The following types are supported, and defined on <code>nopt.typeDefs</code></p>\\n<ul>\\n<li>String: A normal string.  No parsing is done.</li>\\n<li>path: A file system path.  Gets resolved against cwd if not absolute.</li>\\n<li>url: A url.  If it doesn't parse, it isn't accepted.</li>\\n<li>Number: Must be numeric.</li>\\n<li>Date: Must parse as a date. If it does, and <code>Date</code> is one of the options,\\nthen it will return a Date object, not a string.</li>\\n<li>Boolean: Must be either <code>true</code> or <code>false</code>.  If an option is a boolean,\\nthen it does not need a value, and its presence will imply <code>true</code> as\\nthe value.  To negate boolean flags, do <code>--no-whatever</code> or <code>--whatever false</code></li>\\n<li>NaN: Means that the option is strictly not allowed.  Any value will\\nfail.</li>\\n<li>Stream: An object matching the \\\"Stream\\\" class in node.  Valuable\\nfor use when validating programmatically.  (npm uses this to let you\\nsupply any WriteStream on the <code>outfd</code> and <code>logfd</code> config options.)</li>\\n<li>Array: If <code>Array</code> is specified as one of the types, then the value\\nwill be parsed as a list of options.  This means that multiple values\\ncan be specified, and that the value will always be an array.</li>\\n</ul>\\n<p>If a type is an array of values not on this list, then those are\\nconsidered valid values.  For instance, in the example above, the\\n<code>--bloo</code> option can only be one of <code>\\\"big\\\"</code>, <code>\\\"medium\\\"</code>, or <code>\\\"small\\\"</code>,\\nand any other value will be rejected.</p>\\n<p>When parsing unknown fields, <code>\\\"true\\\"</code>, <code>\\\"false\\\"</code>, and <code>\\\"null\\\"</code> will be\\ninterpreted as their JavaScript equivalents.</p>\\n<p>You can also mix types and values, or multiple types, in a list.  For\\ninstance <code>{ blah: [Number, null] }</code> would allow a value to be set to\\neither a Number or null.  When types are ordered, this implies a\\npreference, and the first type that can be used to properly interpret\\nthe value will be used.</p>\\n<p>To define a new type, add it to <code>nopt.typeDefs</code>.  Each item in that\\nhash is an object with a <code>type</code> member and a <code>validate</code> method.  The\\n<code>type</code> member is an object that matches what goes in the type list.  The\\n<code>validate</code> method is a function that gets called with <code>validate(data, key, val)</code>.  Validate methods should assign <code>data[key]</code> to the valid\\nvalue of <code>val</code> if it can be handled properly, or return boolean\\n<code>false</code> if it cannot.</p>\\n<p>You can also call <code>nopt.clean(data, types, typeDefs)</code> to clean up a\\nconfig object and remove its invalid properties.</p>\\n<h2>Error Handling</h2>\\n<p>By default, nopt outputs a warning to standard error when invalid values for\\nknown options are found.  You can change this behavior by assigning a method\\nto <code>nopt.invalidHandler</code>.  This method will be called with\\nthe offending <code>nopt.invalidHandler(key, val, types)</code>.</p>\\n<p>If no <code>nopt.invalidHandler</code> is assigned, then it will console.error\\nits whining.  If it is assigned to boolean <code>false</code> then the warning is\\nsuppressed.</p>\\n<h2>Abbreviations</h2>\\n<p>Yes, they are supported.  If you define options like this:</p>\\n<pre><code class=\\\"language-javascript\\\">{ \\\"foolhardyelephants\\\" : Boolean\\n, \\\"pileofmonkeys\\\" : Boolean }\\n</code></pre>\\n<p>Then this will work:</p>\\n<pre><code class=\\\"language-bash\\\">node program.js --foolhar --pil\\nnode program.js --no-f --pileofmon\\n# etc.\\n</code></pre>\\n<h2>Shorthands</h2>\\n<p>Shorthands are a hash of shorter option names to a snippet of args that\\nthey expand to.</p>\\n<p>If multiple one-character shorthands are all combined, and the\\ncombination does not unambiguously match any other option or shorthand,\\nthen they will be broken up into their constituent parts.  For example:</p>\\n<pre><code class=\\\"language-json\\\">{ \\\"s\\\" : [\\\"--loglevel\\\", \\\"silent\\\"]\\n, \\\"g\\\" : \\\"--global\\\"\\n, \\\"f\\\" : \\\"--force\\\"\\n, \\\"p\\\" : \\\"--parseable\\\"\\n, \\\"l\\\" : \\\"--long\\\"\\n}\\n</code></pre>\\n<pre><code class=\\\"language-bash\\\">npm ls -sgflp\\n# just like doing this:\\nnpm ls --loglevel silent --global --force --long --parseable\\n</code></pre>\\n<h2>The Rest of the args</h2>\\n<p>The config object returned by nopt is given a special member called\\n<code>argv</code>, which is an object with the following fields:</p>\\n<ul>\\n<li><code>remain</code>: The remaining args after all the parsing has occurred.</li>\\n<li><code>original</code>: The args as they originally appeared.</li>\\n<li><code>cooked</code>: The args after flags and shorthands are expanded.</li>\\n</ul>\\n<h2>Slicing</h2>\\n<p>Node programs are called with more or less the exact argv as it appears\\nin C land, after the v8 and node-specific options have been plucked off.\\nAs such, <code>argv[0]</code> is always <code>node</code> and <code>argv[1]</code> is always the\\nJavaScript program being run.</p>\\n<p>That's usually not very useful to you.  So they're sliced off by\\ndefault.  If you want them, then you can pass in <code>0</code> as the last\\nargument, or any other number that you'd like to slice off the start of\\nthe list.</p>\",\"docPath\":\"argo-ci/node_modules/node-pre-gyp/node_modules/nopt/readme\",\"proj\":\"argo-ci\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/docs-argo-ci-node-modules-node-pre-gyp-node-modules-nopt-readme-html.json\n// module id = 2950\n// module chunks = 8258294982728"],"sourceRoot":""}