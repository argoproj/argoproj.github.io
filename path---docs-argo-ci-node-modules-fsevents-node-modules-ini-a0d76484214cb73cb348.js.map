{"version":3,"sources":["webpack:///path---docs-argo-ci-node-modules-fsevents-node-modules-ini-a0d76484214cb73cb348.js","webpack:///./.cache/json/docs-argo-ci-node-modules-fsevents-node-modules-ini.json"],"names":["webpackJsonp","2483","module","exports","pathContext","docHtml","docPath","proj"],"mappings":"AAAAA,cAAc,iBAERC,KACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,aAAeC,QAAA,yiGAAigCC,QAAA,wDAAAC,KAAA","file":"path---docs-argo-ci-node-modules-fsevents-node-modules-ini-a0d76484214cb73cb348.js","sourcesContent":["webpackJsonp([79698020883315],{\n\n/***/ 2483:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"pathContext\":{\"docHtml\":\"<p>An ini format parser and serializer for node.</p>\\n<p>Sections are treated as nested objects.  Items before the first\\nheading are saved on the object directly.</p>\\n<h2>Usage</h2>\\n<p>Consider an ini-file <code>config.ini</code> that looks like this:</p>\\n<pre><code>; this comment is being ignored\\nscope = global\\n\\n[database]\\nuser = dbuser\\npassword = dbpassword\\ndatabase = use_this_database\\n\\n[paths.default]\\ndatadir = /var/lib/data\\narray[] = first value\\narray[] = second value\\narray[] = third value\\n</code></pre>\\n<p>You can read, manipulate and write the ini-file like so:</p>\\n<pre><code>var fs = require('fs')\\n  , ini = require('ini')\\n\\nvar config = ini.parse(fs.readFileSync('./config.ini', 'utf-8'))\\n\\nconfig.scope = 'local'\\nconfig.database.database = 'use_another_database'\\nconfig.paths.default.tmpdir = '/tmp'\\ndelete config.paths.default.datadir\\nconfig.paths.default.array.push('fourth value')\\n\\nfs.writeFileSync('./config_modified.ini', ini.stringify(config, { section: 'section' }))\\n</code></pre>\\n<p>This will result in a file called <code>config_modified.ini</code> being written\\nto the filesystem with the following content:</p>\\n<pre><code>[section]\\nscope=local\\n[section.database]\\nuser=dbuser\\npassword=dbpassword\\ndatabase=use_another_database\\n[section.paths.default]\\ntmpdir=/tmp\\narray[]=first value\\narray[]=second value\\narray[]=third value\\narray[]=fourth value\\n</code></pre>\\n<h2>API</h2>\\n<h3>decode(inistring)</h3>\\n<p>Decode the ini-style formatted <code>inistring</code> into a nested object.</p>\\n<h3>parse(inistring)</h3>\\n<p>Alias for <code>decode(inistring)</code></p>\\n<h3>encode(object, [options])</h3>\\n<p>Encode the object <code>object</code> into an ini-style formatted string. If the\\noptional parameter <code>section</code> is given, then all top-level properties\\nof the object are put into this section and the <code>section</code>-string is\\nprepended to all sub-sections, see the usage example above.</p>\\n<p>The <code>options</code> object may contain the following:</p>\\n<ul>\\n<li><code>section</code> A string which will be the first <code>section</code> in the encoded\\nini data.  Defaults to none.</li>\\n<li><code>whitespace</code> Boolean to specify whether to put whitespace around the\\n<code>=</code> character.  By default, whitespace is omitted, to be friendly to\\nsome persnickety old parsers that don't tolerate it well.  But some\\nfind that it's more human-readable and pretty with the whitespace.</li>\\n</ul>\\n<p>For backwards compatibility reasons, if a <code>string</code> options is passed\\nin, then it is assumed to be the <code>section</code> value.</p>\\n<h3>stringify(object, [options])</h3>\\n<p>Alias for <code>encode(object, [options])</code></p>\\n<h3>safe(val)</h3>\\n<p>Escapes the string <code>val</code> such that it is safe to be used as a key or\\nvalue in an ini-file. Basically escapes quotes. For example</p>\\n<pre><code>ini.safe('\\\"unsafe string\\\"')\\n</code></pre>\\n<p>would result in</p>\\n<pre><code>\\\"\\\\\\\"unsafe string\\\\\\\"\\\"\\n</code></pre>\\n<h3>unsafe(val)</h3>\\n<p>Unescapes the string <code>val</code></p>\",\"docPath\":\"argo-ci/node_modules/fsevents/node_modules/ini/readme\",\"proj\":\"argo-ci\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---docs-argo-ci-node-modules-fsevents-node-modules-ini-a0d76484214cb73cb348.js","module.exports = {\"pathContext\":{\"docHtml\":\"<p>An ini format parser and serializer for node.</p>\\n<p>Sections are treated as nested objects.  Items before the first\\nheading are saved on the object directly.</p>\\n<h2>Usage</h2>\\n<p>Consider an ini-file <code>config.ini</code> that looks like this:</p>\\n<pre><code>; this comment is being ignored\\nscope = global\\n\\n[database]\\nuser = dbuser\\npassword = dbpassword\\ndatabase = use_this_database\\n\\n[paths.default]\\ndatadir = /var/lib/data\\narray[] = first value\\narray[] = second value\\narray[] = third value\\n</code></pre>\\n<p>You can read, manipulate and write the ini-file like so:</p>\\n<pre><code>var fs = require('fs')\\n  , ini = require('ini')\\n\\nvar config = ini.parse(fs.readFileSync('./config.ini', 'utf-8'))\\n\\nconfig.scope = 'local'\\nconfig.database.database = 'use_another_database'\\nconfig.paths.default.tmpdir = '/tmp'\\ndelete config.paths.default.datadir\\nconfig.paths.default.array.push('fourth value')\\n\\nfs.writeFileSync('./config_modified.ini', ini.stringify(config, { section: 'section' }))\\n</code></pre>\\n<p>This will result in a file called <code>config_modified.ini</code> being written\\nto the filesystem with the following content:</p>\\n<pre><code>[section]\\nscope=local\\n[section.database]\\nuser=dbuser\\npassword=dbpassword\\ndatabase=use_another_database\\n[section.paths.default]\\ntmpdir=/tmp\\narray[]=first value\\narray[]=second value\\narray[]=third value\\narray[]=fourth value\\n</code></pre>\\n<h2>API</h2>\\n<h3>decode(inistring)</h3>\\n<p>Decode the ini-style formatted <code>inistring</code> into a nested object.</p>\\n<h3>parse(inistring)</h3>\\n<p>Alias for <code>decode(inistring)</code></p>\\n<h3>encode(object, [options])</h3>\\n<p>Encode the object <code>object</code> into an ini-style formatted string. If the\\noptional parameter <code>section</code> is given, then all top-level properties\\nof the object are put into this section and the <code>section</code>-string is\\nprepended to all sub-sections, see the usage example above.</p>\\n<p>The <code>options</code> object may contain the following:</p>\\n<ul>\\n<li><code>section</code> A string which will be the first <code>section</code> in the encoded\\nini data.  Defaults to none.</li>\\n<li><code>whitespace</code> Boolean to specify whether to put whitespace around the\\n<code>=</code> character.  By default, whitespace is omitted, to be friendly to\\nsome persnickety old parsers that don't tolerate it well.  But some\\nfind that it's more human-readable and pretty with the whitespace.</li>\\n</ul>\\n<p>For backwards compatibility reasons, if a <code>string</code> options is passed\\nin, then it is assumed to be the <code>section</code> value.</p>\\n<h3>stringify(object, [options])</h3>\\n<p>Alias for <code>encode(object, [options])</code></p>\\n<h3>safe(val)</h3>\\n<p>Escapes the string <code>val</code> such that it is safe to be used as a key or\\nvalue in an ini-file. Basically escapes quotes. For example</p>\\n<pre><code>ini.safe('\\\"unsafe string\\\"')\\n</code></pre>\\n<p>would result in</p>\\n<pre><code>\\\"\\\\\\\"unsafe string\\\\\\\"\\\"\\n</code></pre>\\n<h3>unsafe(val)</h3>\\n<p>Unescapes the string <code>val</code></p>\",\"docPath\":\"argo-ci/node_modules/fsevents/node_modules/ini/readme\",\"proj\":\"argo-ci\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/docs-argo-ci-node-modules-fsevents-node-modules-ini.json\n// module id = 2483\n// module chunks = 79698020883315"],"sourceRoot":""}