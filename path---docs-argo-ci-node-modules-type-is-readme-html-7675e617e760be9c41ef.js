webpackJsonp([0xe40e686aa2dc],{3272:function(e,n){e.exports={pathContext:{docHtml:"<h1>type-is</h1>\n<p><a href=\"https://npmjs.org/package/type-is\"><img src=\"https://img.shields.io/npm/v/type-is.svg\" alt=\"NPM Version\"></a>\n<a href=\"https://npmjs.org/package/type-is\"><img src=\"https://img.shields.io/npm/dm/type-is.svg\" alt=\"NPM Downloads\"></a>\n<a href=\"https://nodejs.org/en/download/\"><img src=\"https://img.shields.io/node/v/type-is.svg\" alt=\"Node.js Version\"></a>\n<a href=\"https://travis-ci.org/jshttp/type-is\"><img src=\"https://img.shields.io/travis/jshttp/type-is/master.svg\" alt=\"Build Status\"></a>\n<a href=\"https://coveralls.io/r/jshttp/type-is?branch=master\"><img src=\"https://img.shields.io/coveralls/jshttp/type-is/master.svg\" alt=\"Test Coverage\"></a></p>\n<p>Infer the content-type of a request.</p>\n<h3>Install</h3>\n<p>This is a <a href=\"https://nodejs.org/en/\">Node.js</a> module available through the\n<a href=\"https://www.npmjs.com/\">npm registry</a>. Installation is done using the\n<a href=\"https://docs.npmjs.com/getting-started/installing-npm-packages-locally\"><code>npm install</code> command</a>:</p>\n<pre><code class=\"language-sh\">$ npm install type-is\n</code></pre>\n<h2>API</h2>\n<pre><code class=\"language-js\">var http = require('http')\nvar typeis = require('type-is')\n\nhttp.createServer(function (req, res) {\n  var istext = typeis(req, ['text/*'])\n  res.end('you ' + (istext ? 'sent' : 'did not send') + ' me text')\n})\n</code></pre>\n<h3>type = typeis(request, types)</h3>\n<p><code>request</code> is the node HTTP request. <code>types</code> is an array of types.</p>\n<!-- eslint-disable no-undef -->\n<pre><code class=\"language-js\">// req.headers.content-type = 'application/json'\n\ntypeis(req, ['json'])             // 'json'\ntypeis(req, ['html', 'json'])     // 'json'\ntypeis(req, ['application/*'])    // 'application/json'\ntypeis(req, ['application/json']) // 'application/json'\n\ntypeis(req, ['html']) // false\n</code></pre>\n<h3>typeis.hasBody(request)</h3>\n<p>Returns a Boolean if the given <code>request</code> has a body, regardless of the\n<code>Content-Type</code> header.</p>\n<p>Having a body has no relation to how large the body is (it may be 0 bytes).\nThis is similar to how file existence works. If a body does exist, then this\nindicates that there is data to read from the Node.js request stream.</p>\n<!-- eslint-disable no-undef -->\n<pre><code class=\"language-js\">if (typeis.hasBody(req)) {\n  // read the body, since there is one\n\n  req.on('data', function (chunk) {\n    // ...\n  })\n}\n</code></pre>\n<h3>type = typeis.is(mediaType, types)</h3>\n<p><code>mediaType</code> is the <a href=\"https://tools.ietf.org/html/rfc6838\">media type</a> string. <code>types</code> is an array of types.</p>\n<!-- eslint-disable no-undef -->\n<pre><code class=\"language-js\">var mediaType = 'application/json'\n\ntypeis.is(mediaType, ['json'])             // 'json'\ntypeis.is(mediaType, ['html', 'json'])     // 'json'\ntypeis.is(mediaType, ['application/*'])    // 'application/json'\ntypeis.is(mediaType, ['application/json']) // 'application/json'\n\ntypeis.is(mediaType, ['html']) // false\n</code></pre>\n<h3>Each type can be:</h3>\n<ul>\n<li>An extension name such as <code>json</code>. This name will be returned if matched.</li>\n<li>A mime type such as <code>application/json</code>.</li>\n<li>A mime type with a wildcard such as <code>*/*</code> or <code>*/json</code> or <code>application/*</code>. The full mime type will be returned if matched.</li>\n<li>A suffix such as <code>+json</code>. This can be combined with a wildcard such as <code>*/vnd+json</code> or <code>application/*+json</code>. The full mime type will be returned if matched.</li>\n</ul>\n<p><code>false</code> will be returned if no type matches or the content type is invalid.</p>\n<p><code>null</code> will be returned if the request does not have a body.</p>\n<h2>Examples</h2>\n<h3>Example body parser</h3>\n<pre><code class=\"language-js\">var express = require('express')\nvar typeis = require('type-is')\n\nvar app = express()\n\napp.use(function bodyParser (req, res, next) {\n  if (!typeis.hasBody(req)) {\n    return next()\n  }\n\n  switch (typeis(req, ['urlencoded', 'json', 'multipart'])) {\n    case 'urlencoded':\n      // parse urlencoded body\n      throw new Error('implement urlencoded body parsing')\n    case 'json':\n      // parse json body\n      throw new Error('implement json body parsing')\n    case 'multipart':\n      // parse multipart body\n      throw new Error('implement multipart body parsing')\n    default:\n      // 415 error code\n      res.statusCode = 415\n      res.end()\n      break\n  }\n})\n</code></pre>\n<h2>License</h2>\n<p><a href=\"LICENSE\">MIT</a></p>",docPath:"argo-ci/node_modules/type-is/readme",proj:"argo-ci"}}}});
//# sourceMappingURL=path---docs-argo-ci-node-modules-type-is-readme-html-7675e617e760be9c41ef.js.map