webpackJsonp([0xea157b3c95d6],{3357:function(e,n){e.exports={pathContext:{docHtml:'<h1>uuid <a href="http://travis-ci.org/kelektiv/node-uuid"><img src="https://secure.travis-ci.org/kelektiv/node-uuid.svg?branch=master" alt="Build Status"></a></h1>\n<p>Simple, fast generation of <a href="http://www.ietf.org/rfc/rfc4122.txt">RFC4122</a> UUIDS.</p>\n<p>Features:</p>\n<ul>\n<li>Support for version 1, 4 and 5 UUIDs</li>\n<li>Cross-platform</li>\n<li>Uses cryptographically-strong random number APIs (when available)</li>\n<li>Zero-dependency, small footprint (... but not <a href="https://gist.github.com/982883">this small</a>)</li>\n</ul>\n<h2>Quickstart - CommonJS (Recommended)</h2>\n<pre><code class="language-shell">npm install uuid\n</code></pre>\n<p>Then generate your uuid version of choice ...</p>\n<p>Version 1 (timestamp):</p>\n<pre><code class="language-javascript">const uuidv1 = require(\'uuid/v1\');\nuuidv1(); // -> \'6c84fb90-12c4-11e1-840d-7b25c5ee775a\'\n</code></pre>\n<p>Version 4 (random):</p>\n<pre><code class="language-javascript">const uuidv4 = require(\'uuid/v4\');\nuuidv4(); // -> \'110ec58a-a0f2-4ac4-8393-c866d813b8d1\'\n</code></pre>\n<p>Version 5 (namespace):</p>\n<pre><code class="language-javascript">const uuidv5 = require(\'uuid/v5\');\n\n// ... using predefined DNS namespace (for domain names)\nuuidv5(\'hello.example.com\', uuidv5.DNS)); // -> \'fdda765f-fc57-5604-a269-52a7df8164ec\'\n\n// ... using predefined URL namespace (for, well, URLs)\nuuidv5(\'http://example.com/hello\', uuidv5.URL); // -> \'3bbcee75-cecc-5b56-8031-b6641c1ed1f1\'\n\n// ... using a custom namespace\nconst MY_NAMESPACE = \'&#x3C;UUID string you previously generated elsewhere>\';\nuuidv5(\'Hello, World!\', MY_NAMESPACE); // -> \'90123e1c-7512-523e-bb28-76fab9f2f73d\'\n</code></pre>\n<h2>Quickstart - Browser-ready Versions</h2>\n<p>Browser-ready versions of this module are available via <a href="https://github.com/jfhbrook/wzrd.in">wzrd.in</a>.</p>\n<p>For version 1 uuids:</p>\n<pre><code class="language-html">&#x3C;script src="http://wzrd.in/standalone/uuid%2Fv1@latest">&#x3C;/script>\n&#x3C;script>\nuuidv1(); // -> v1 UUID\n&#x3C;/script>\n</code></pre>\n<p>For version 4 uuids:</p>\n<pre><code class="language-html">&#x3C;script src="http://wzrd.in/standalone/uuid%2Fv4@latest">&#x3C;/script>\n&#x3C;script>\nuuidv4(); // -> v4 UUID\n&#x3C;/script>\n</code></pre>\n<p>For version 5 uuids:</p>\n<pre><code class="language-html">&#x3C;script src="http://wzrd.in/standalone/uuid%2Fv5@latest">&#x3C;/script>\n&#x3C;script>\nuuidv5(\'http://example.com/hello\', uuidv5.URL); // -> v5 UUID\n&#x3C;/script>\n</code></pre>\n<h2>API</h2>\n<h3>Version 1</h3>\n<pre><code class="language-javascript">const uuidv1 = require(\'uuid/v1\');\n\n// Allowed arguments\nuuidv1();\nuuidv1(options);\nuuidv1(options, buffer, offset);\n</code></pre>\n<p>Generate and return a RFC4122 v1 (timestamp-based) UUID.</p>\n<ul>\n<li>\n<p><code>options</code> - (Object) Optional uuid state to apply. Properties may include:</p>\n<ul>\n<li><code>node</code> - (Array) Node id as Array of 6 bytes (per 4.1.6). Default: Randomly generated ID.  See note 1.</li>\n<li><code>clockseq</code> - (Number between 0 - 0x3fff) RFC clock sequence.  Default: An internally maintained clockseq is used.</li>\n<li><code>msecs</code> - (Number | Date) Time in milliseconds since unix Epoch.  Default: The current time is used.</li>\n<li><code>nsecs</code> - (Number between 0-9999) additional time, in 100-nanosecond units. Ignored if <code>msecs</code> is unspecified. Default: internal uuid counter is used, as per 4.2.1.2.</li>\n</ul>\n</li>\n<li>\n<p><code>buffer</code> - (Array | Buffer) Array or buffer where UUID bytes are to be written.</p>\n</li>\n<li>\n<p><code>offset</code> - (Number) Starting index in <code>buffer</code> at which to begin writing.</p>\n</li>\n</ul>\n<p>Returns <code>buffer</code>, if specified, otherwise the string form of the UUID</p>\n<p>Note: The <node> id is generated guaranteed to stay constant for the lifetime of the current JS runtime. (Future versions of this module may use persistent storage mechanisms to extend this guarantee.)</p>\n<p>Example: Generate string UUID with fully-specified options</p>\n<pre><code class="language-javascript">uuidv1({\n  node: [0x01, 0x23, 0x45, 0x67, 0x89, 0xab],\n  clockseq: 0x1234,\n  msecs: new Date(\'2011-11-01\').getTime(),\n  nsecs: 5678\n});   // -> "710b962e-041c-11e1-9234-0123456789ab"\n</code></pre>\n<p>Example: In-place generation of two binary IDs</p>\n<pre><code class="language-javascript">// Generate two ids in an array\nconst arr = new Array(32); // -> []\nuuidv1(null, arr, 0);   // -> [02 a2 ce 90 14 32 11 e1 85 58 0b 48 8e 4f c1 15]\nuuidv1(null, arr, 16);  // -> [02 a2 ce 90 14 32 11 e1 85 58 0b 48 8e 4f c1 15 02 a3 1c b0 14 32 11 e1 85 58 0b 48 8e 4f c1 15]\n</code></pre>\n<h3>Version 4</h3>\n<pre><code class="language-javascript">const uuidv4 = require(\'uuid/v4\')\n\n// Allowed arguments\nuuidv4();\nuuidv4(options);\nuuidv4(options, buffer, offset);\n</code></pre>\n<p>Generate and return a RFC4122 v4 UUID.</p>\n<ul>\n<li>\n<p><code>options</code> - (Object) Optional uuid state to apply. Properties may include:</p>\n<ul>\n<li><code>random</code> - (Number[16]) Array of 16 numbers (0-255) to use in place of randomly generated values</li>\n<li><code>rng</code> - (Function) Random # generator function that returns an Array[16] of byte values (0-255)</li>\n</ul>\n</li>\n<li><code>buffer</code> - (Array | Buffer) Array or buffer where UUID bytes are to be written.</li>\n<li><code>offset</code> - (Number) Starting index in <code>buffer</code> at which to begin writing.</li>\n</ul>\n<p>Returns <code>buffer</code>, if specified, otherwise the string form of the UUID</p>\n<p>Example: Generate string UUID with fully-specified options</p>\n<pre><code class="language-javascript">uuid.v4({\n  random: [\n    0x10, 0x91, 0x56, 0xbe, 0xc4, 0xfb, 0xc1, 0xea,\n    0x71, 0xb4, 0xef, 0xe1, 0x67, 0x1c, 0x58, 0x36\n  ]\n});\n// -> "109156be-c4fb-41ea-b1b4-efe1671c5836"\n</code></pre>\n<p>Example: Generate two IDs in a single buffer</p>\n<pre><code class="language-javascript">const buffer = new Array(32); // (or \'new Buffer\' in node.js)\nuuid.v4(null, buffer, 0);\nuuid.v4(null, buffer, 16);\n</code></pre>\n<h3>Version 5</h3>\n<pre><code class="language-javascript">const uuidv5 = require(\'uuid/v4\');\n\n// Allowed arguments\nuuidv5(name, namespace);\nuuidv5(name, namespace, buffer);\nuuidv5(name, namespace, buffer, offset);\n</code></pre>\n<p>Generate and return a RFC4122 v4 UUID.</p>\n<ul>\n<li><code>name</code> - (String | Array[]) "name" to create UUID with</li>\n<li><code>namespace</code> - (String | Array[]) "namespace" UUID either as a String or Array[16] of byte values</li>\n<li><code>buffer</code> - (Array | Buffer) Array or buffer where UUID bytes are to be written.</li>\n<li><code>offset</code> - (Number) Starting index in <code>buffer</code> at which to begin writing. Default = 0</li>\n</ul>\n<p>Returns <code>buffer</code>, if specified, otherwise the string form of the UUID</p>\n<p>Example:</p>\n<pre><code class="language-javascript">// Generate a unique  namespace (typically you would do this once, outside of\n// your project, then bake this value into your code)\nconst uuidv4 = require(\'uuid/v4\');\nconst MY_NAMESPACE = uuidv4();  //\n\n// Generate a couple namespace uuids\nconst uuidv5 = require(\'uuid/v5\');\nuuidv5(\'hello\', MY_NAMESPACE);\nuuidv5(\'world\', MY_NAMESPACE);\n</code></pre>\n<h2>Testing</h2>\n<pre><code class="language-shell">npm test\n</code></pre>\n<h2>Deprecated / Browser-ready API</h2>\n<p>The API below is available for legacy purposes and is not expected to be available post-3.X</p>\n<pre><code class="language-javascript">const uuid = require(\'uuid\');\n\nuuid.v1(...); // alias of uuid/v1\nuuid.v4(...); // alias of uuid/v4\nuuid(...);    // alias of uuid/v4\n\n// uuid.v5() is not supported in this API\n</code></pre>\n<h2>Legacy node-uuid package</h2>\n<p>The code for the legacy node-uuid package is available in the <code>node-uuid</code> branch.</p>',docPath:"argo-ci/node_modules/uuid/readme",proj:"argo-ci"}}}});
//# sourceMappingURL=path---docs-argo-ci-node-modules-uuid-readme-html-17629618843126be5388.js.map