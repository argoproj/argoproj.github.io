webpackJsonp([55937149511592],{2427:function(e,a){e.exports={pathContext:{docHtml:"<h1>delayed-stream</h1>\n<p>Buffers events from a stream until you are ready to handle them.</p>\n<h2>Installation</h2>\n<pre><code class=\"language-bash\">npm install delayed-stream\n</code></pre>\n<h2>Usage</h2>\n<p>The following example shows how to write a http echo server that delays its\nresponse by 1000 ms.</p>\n<pre><code class=\"language-javascript\">var DelayedStream = require('delayed-stream');\nvar http = require('http');\n\nhttp.createServer(function(req, res) {\n  var delayed = DelayedStream.create(req);\n\n  setTimeout(function() {\n    res.writeHead(200);\n    delayed.pipe(res);\n  }, 1000);\n});\n</code></pre>\n<p>If you are not using <code>Stream#pipe</code>, you can also manually release the buffered\nevents by calling <code>delayedStream.resume()</code>:</p>\n<pre><code class=\"language-javascript\">var delayed = DelayedStream.create(req);\n\nsetTimeout(function() {\n  // Emit all buffered events and resume underlaying source\n  delayed.resume();\n}, 1000);\n</code></pre>\n<h2>Implementation</h2>\n<p>In order to use this meta stream properly, here are a few things you should\nknow about the implementation.</p>\n<h3>Event Buffering / Proxying</h3>\n<p>All events of the <code>source</code> stream are hijacked by overwriting the <code>source.emit</code>\nmethod. Until node implements a catch-all event listener, this is the only way.</p>\n<p>However, delayed-stream still continues to emit all events it captures on the\n<code>source</code>, regardless of whether you have released the delayed stream yet or\nnot.</p>\n<p>Upon creation, delayed-stream captures all <code>source</code> events and stores them in\nan internal event buffer. Once <code>delayedStream.release()</code> is called, all\nbuffered events are emitted on the <code>delayedStream</code>, and the event buffer is\ncleared. After that, delayed-stream merely acts as a proxy for the underlaying\nsource.</p>\n<h3>Error handling</h3>\n<p>Error events on <code>source</code> are buffered / proxied just like any other events.\nHowever, <code>delayedStream.create</code> attaches a no-op <code>'error'</code> listener to the\n<code>source</code>. This way you only have to handle errors on the <code>delayedStream</code>\nobject, rather than in two places.</p>\n<h3>Buffer limits</h3>\n<p>delayed-stream provides a <code>maxDataSize</code> property that can be used to limit\nthe amount of data being buffered. In order to protect you from bad <code>source</code>\nstreams that don't react to <code>source.pause()</code>, this feature is enabled by\ndefault.</p>\n<h2>API</h2>\n<h3>DelayedStream.create(source, [options])</h3>\n<p>Returns a new <code>delayedStream</code>. Available options are:</p>\n<ul>\n<li><code>pauseStream</code></li>\n<li><code>maxDataSize</code></li>\n</ul>\n<p>The description for those properties can be found below.</p>\n<h3>delayedStream.source</h3>\n<p>The <code>source</code> stream managed by this object. This is useful if you are\npassing your <code>delayedStream</code> around, and you still want to access properties\non the <code>source</code> object.</p>\n<h3>delayedStream.pauseStream = true</h3>\n<p>Whether to pause the underlaying <code>source</code> when calling\n<code>DelayedStream.create()</code>. Modifying this property afterwards has no effect.</p>\n<h3>delayedStream.maxDataSize = 1024 * 1024</h3>\n<p>The amount of data to buffer before emitting an <code>error</code>.</p>\n<p>If the underlaying source is emitting <code>Buffer</code> objects, the <code>maxDataSize</code>\nrefers to bytes.</p>\n<p>If the underlaying source is emitting JavaScript strings, the size refers to\ncharacters.</p>\n<p>If you know what you are doing, you can set this property to <code>Infinity</code> to\ndisable this feature. You can also modify this property during runtime.</p>\n<h3>delayedStream.dataSize = 0</h3>\n<p>The amount of data buffered so far.</p>\n<h3>delayedStream.readable</h3>\n<p>An ECMA5 getter that returns the value of <code>source.readable</code>.</p>\n<h3>delayedStream.resume()</h3>\n<p>If the <code>delayedStream</code> has not been released so far, <code>delayedStream.release()</code>\nis called.</p>\n<p>In either case, <code>source.resume()</code> is called.</p>\n<h3>delayedStream.pause()</h3>\n<p>Calls <code>source.pause()</code>.</p>\n<h3>delayedStream.pipe(dest)</h3>\n<p>Calls <code>delayedStream.resume()</code> and then proxies the arguments to <code>source.pipe</code>.</p>\n<h3>delayedStream.release()</h3>\n<p>Emits and clears all events that have been buffered up so far. This does not\nresume the underlaying source, use <code>delayedStream.resume()</code> instead.</p>\n<h2>License</h2>\n<p>delayed-stream is licensed under the MIT license.</p>",docPath:"argo-ci/node_modules/fsevents/node_modules/delayed-stream/readme",proj:"argo-ci"}}}});
//# sourceMappingURL=path---docs-argo-ci-node-modules-fsevents-node-modules-delayed-stream-76d9e80b009dce33f616.js.map