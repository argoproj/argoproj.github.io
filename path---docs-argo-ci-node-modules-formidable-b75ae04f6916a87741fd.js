webpackJsonp([0x69e2bce86e82],{2350:function(e,n){e.exports={pathContext:{docHtml:'<h1>Formidable</h1>\n<p><a href="https://travis-ci.org/felixge/node-formidable"><img src="https://travis-ci.org/felixge/node-formidable.svg?branch=master" alt="Build Status"></a></p>\n<h2>Purpose</h2>\n<p>A Node.js module for parsing form data, especially file uploads.</p>\n<h2>Current status</h2>\n<p><strong>Maintainers Wanted:</strong> Please see <a href="https://github.com/felixge/node-formidable/issues/412">https://github.com/felixge/node-formidable/issues/412</a></p>\n<p>This module was developed for <a href="http://transloadit.com/">Transloadit</a>, a service focused on uploading\nand encoding images and videos. It has been battle-tested against hundreds of GB of file uploads from\na large variety of clients and is considered production-ready.</p>\n<h2>Features</h2>\n<ul>\n<li>Fast (~500mb/sec), non-buffering multipart parser</li>\n<li>Automatically writing file uploads to disk</li>\n<li>Low memory footprint</li>\n<li>Graceful error handling</li>\n<li>Very high test coverage</li>\n</ul>\n<h2>Installation</h2>\n<pre><code class="language-sh">npm i -S formidable\n</code></pre>\n<p>This is a low level package, and if you\'re using a high level framework such as Express, chances are it\'s already included in it. You can <a href="http://stackoverflow.com/questions/11295554/how-to-disable-express-bodyparser-for-file-uploads-node-js">read this discussion</a> about how Formidable is integrated with Express.</p>\n<p>Note: Formidable requires <a href="http://github.com/felixge/node-gently">gently</a> to run the unit tests, but you won\'t need it for just using the library.</p>\n<h2>Example</h2>\n<p>Parse an incoming file upload.</p>\n<pre><code class="language-javascript">var formidable = require(\'formidable\'),\n    http = require(\'http\'),\n    util = require(\'util\');\n\nhttp.createServer(function(req, res) {\n  if (req.url == \'/upload\' &#x26;&#x26; req.method.toLowerCase() == \'post\') {\n    // parse a file upload\n    var form = new formidable.IncomingForm();\n\n    form.parse(req, function(err, fields, files) {\n      res.writeHead(200, {\'content-type\': \'text/plain\'});\n      res.write(\'received upload:\\n\\n\');\n      res.end(util.inspect({fields: fields, files: files}));\n    });\n\n    return;\n  }\n\n  // show a file upload form\n  res.writeHead(200, {\'content-type\': \'text/html\'});\n  res.end(\n    \'&#x3C;form action="/upload" enctype="multipart/form-data" method="post">\'+\n    \'&#x3C;input type="text" name="title">&#x3C;br>\'+\n    \'&#x3C;input type="file" name="upload" multiple="multiple">&#x3C;br>\'+\n    \'&#x3C;input type="submit" value="Upload">\'+\n    \'&#x3C;/form>\'\n  );\n}).listen(8080);\n</code></pre>\n<h2>API</h2>\n<h3>Formidable.IncomingForm</h3>\n<pre><code class="language-javascript">var form = new formidable.IncomingForm()\n</code></pre>\n<p>Creates a new incoming form.</p>\n<pre><code class="language-javascript">form.encoding = \'utf-8\';\n</code></pre>\n<p>Sets encoding for incoming form fields.</p>\n<pre><code class="language-javascript">form.uploadDir = "/my/dir";\n</code></pre>\n<p>Sets the directory for placing file uploads in. You can move them later on using\n<code>fs.rename()</code>. The default is <code>os.tmpdir()</code>.</p>\n<pre><code class="language-javascript">form.keepExtensions = false;\n</code></pre>\n<p>If you want the files written to <code>form.uploadDir</code> to include the extensions of the original files, set this property to <code>true</code>.</p>\n<pre><code class="language-javascript">form.type\n</code></pre>\n<p>Either \'multipart\' or \'urlencoded\' depending on the incoming request.</p>\n<pre><code class="language-javascript">form.maxFieldsSize = 2 * 1024 * 1024;\n</code></pre>\n<p>Limits the amount of memory all fields together (except files) can allocate in bytes.\nIf this value is exceeded, an <code>\'error\'</code> event is emitted. The default\nsize is 2MB.</p>\n<pre><code class="language-javascript">form.maxFields = 1000;\n</code></pre>\n<p>Limits the number of fields that the querystring parser will decode. Defaults\nto 1000 (0 for unlimited).</p>\n<pre><code class="language-javascript">form.hash = false;\n</code></pre>\n<p>If you want checksums calculated for incoming files, set this to either <code>\'sha1\'</code> or <code>\'md5\'</code>.</p>\n<pre><code class="language-javascript">form.multiples = false;\n</code></pre>\n<p>If this option is enabled, when you call <code>form.parse</code>, the <code>files</code> argument will contain arrays of files for inputs which submit multiple files using the HTML5 <code>multiple</code> attribute.</p>\n<pre><code class="language-javascript">form.bytesReceived\n</code></pre>\n<p>The amount of bytes received for this form so far.</p>\n<pre><code class="language-javascript">form.bytesExpected\n</code></pre>\n<p>The expected number of bytes in this form.</p>\n<pre><code class="language-javascript">form.parse(request, [cb]);\n</code></pre>\n<p>Parses an incoming node.js <code>request</code> containing form data. If <code>cb</code> is provided, all fields and files are collected and passed to the callback:</p>\n<pre><code class="language-javascript">form.parse(req, function(err, fields, files) {\n  // ...\n});\n\nform.onPart(part);\n</code></pre>\n<p>You may overwrite this method if you are interested in directly accessing the multipart stream. Doing so will disable any <code>\'field\'</code> / <code>\'file\'</code> events  processing which would occur otherwise, making you fully responsible for handling the processing.</p>\n<pre><code class="language-javascript">form.onPart = function(part) {\n  part.addListener(\'data\', function() {\n    // ...\n  });\n}\n</code></pre>\n<p>If you want to use formidable to only handle certain parts for you, you can do so:</p>\n<pre><code class="language-javascript">form.onPart = function(part) {\n  if (!part.filename) {\n    // let formidable handle all non-file parts\n    form.handlePart(part);\n  }\n}\n</code></pre>\n<p>Check the code in this method for further inspiration.</p>\n<h3>Formidable.File</h3>\n<pre><code class="language-javascript">file.size = 0\n</code></pre>\n<p>The size of the uploaded file in bytes. If the file is still being uploaded (see <code>\'fileBegin\'</code> event), this property says how many bytes of the file have been written to disk yet.</p>\n<pre><code class="language-javascript">file.path = null\n</code></pre>\n<p>The path this file is being written to. You can modify this in the <code>\'fileBegin\'</code> event in\ncase you are unhappy with the way formidable generates a temporary path for your files.</p>\n<pre><code class="language-javascript">file.name = null\n</code></pre>\n<p>The name this file had according to the uploading client.</p>\n<pre><code class="language-javascript">file.type = null\n</code></pre>\n<p>The mime type of this file, according to the uploading client.</p>\n<pre><code class="language-javascript">file.lastModifiedDate = null\n</code></pre>\n<p>A date object (or <code>null</code>) containing the time this file was last written to. Mostly\nhere for compatibility with the <a href="http://dev.w3.org/2006/webapi/FileAPI/">W3C File API Draft</a>.</p>\n<pre><code class="language-javascript">file.hash = null\n</code></pre>\n<p>If hash calculation was set, you can read the hex digest out of this var.</p>\n<h4>Formidable.File#toJSON()</h4>\n<p>  This method returns a JSON-representation of the file, allowing you to\n<code>JSON.stringify()</code> the file which is useful for logging and responding\nto requests.</p>\n<h3>Events</h3>\n<h4>\'progress\'</h4>\n<p>Emitted after each incoming chunk of data that has been parsed. Can be used to roll your own progress bar.</p>\n<pre><code class="language-javascript">form.on(\'progress\', function(bytesReceived, bytesExpected) {\n});\n</code></pre>\n<h4>\'field\'</h4>\n<p>Emitted whenever a field / value pair has been received.</p>\n<pre><code class="language-javascript">form.on(\'field\', function(name, value) {\n});\n</code></pre>\n<h4>\'fileBegin\'</h4>\n<p>Emitted whenever a new file is detected in the upload stream. Use this event if\nyou want to stream the file to somewhere else while buffering the upload on\nthe file system.</p>\n<pre><code class="language-javascript">form.on(\'fileBegin\', function(name, file) {\n});\n</code></pre>\n<h4>\'file\'</h4>\n<p>Emitted whenever a field / file pair has been received. <code>file</code> is an instance of <code>File</code>.</p>\n<pre><code class="language-javascript">form.on(\'file\', function(name, file) {\n});\n</code></pre>\n<h4>\'error\'</h4>\n<p>Emitted when there is an error processing the incoming form. A request that experiences an error is automatically paused, you will have to manually call <code>request.resume()</code> if you want the request to continue firing <code>\'data\'</code> events.</p>\n<pre><code class="language-javascript">form.on(\'error\', function(err) {\n});\n</code></pre>\n<h4>\'aborted\'</h4>\n<p>Emitted when the request was aborted by the user. Right now this can be due to a \'timeout\' or \'close\' event on the socket. After this event is emitted, an <code>error</code> event will follow. In the future there will be a separate \'timeout\' event (needs a change in the node core).</p>\n<pre><code class="language-javascript">form.on(\'aborted\', function() {\n});\n</code></pre>\n<h5>\'end\'</h5>\n<pre><code class="language-javascript">form.on(\'end\', function() {\n});\n</code></pre>\n<p>Emitted when the entire request has been received, and all contained files have finished flushing to disk. This is a great place for you to send your response.</p>\n<h2>Changelog</h2>\n<h3>v1.1.1 (2017-01-15)</h3>\n<ul>\n<li>Fix DeprecationWarning about os.tmpDir() (Christian)</li>\n<li>Update <code>buffer.write</code> order of arguments for Node 7 (Kornel Lesi≈Ñski)</li>\n<li>JSON Parser emits error events to the IncomingForm (alessio.montagnani)</li>\n<li>Improved Content-Disposition parsing (Sebastien)</li>\n<li>Access WriteStream of fs during runtime instead of include time (Jonas Amundsen)</li>\n<li>Use built-in toString to convert buffer to hex (Charmander)</li>\n<li>Add hash to json if present (Nick Stamas)</li>\n<li>Add license to package.json (Simen Bekkhus)</li>\n</ul>\n<h3>v1.0.14 (2013-05-03)</h3>\n<ul>\n<li>Add failing hash tests. (Ben Trask)</li>\n<li>Enable hash calculation again (Eugene Girshov)</li>\n<li>Test for immediate data events (Tim Smart)</li>\n<li>Re-arrange IncomingForm#parse (Tim Smart)</li>\n</ul>\n<h3>v1.0.13</h3>\n<ul>\n<li>Only update hash if update method exists (Sven Lito)</li>\n<li>According to travis v0.10 needs to go quoted (Sven Lito)</li>\n<li>Bumping build node versions (Sven Lito)</li>\n<li>Additional fix for empty requests (Eugene Girshov)</li>\n<li>Change the default to 1000, to match the new Node behaviour. (OrangeDog)</li>\n<li>Add ability to control maxKeys in the querystring parser. (OrangeDog)</li>\n<li>Adjust test case to work with node 0.9.x (Eugene Girshov)</li>\n<li>Update package.json (Sven Lito)</li>\n<li>Path adjustment according to eb4468b (Markus Ast)</li>\n</ul>\n<h3>v1.0.12</h3>\n<ul>\n<li>Emit error on aborted connections (Eugene Girshov)</li>\n<li>Add support for empty requests (Eugene Girshov)</li>\n<li>Fix name/filename handling in Content-Disposition (jesperp)</li>\n<li>Tolerate malformed closing boundary in multipart (Eugene Girshov)</li>\n<li>Ignore preamble in multipart messages (Eugene Girshov)</li>\n<li>Add support for application/json (Mike Frey, Carlos Rodriguez)</li>\n<li>Add support for Base64 encoding (Elmer Bulthuis)</li>\n<li>Add File#toJSON (TJ Holowaychuk)</li>\n<li>Remove support for Node.js 0.4 &#x26; 0.6 (Andrew Kelley)</li>\n<li>Documentation improvements (Sven Lito, Andre Azevedo)</li>\n<li>Add support for application/octet-stream (Ion Lupascu, Chris Scribner)</li>\n<li>Use os.tmpdir() to get tmp directory (Andrew Kelley)</li>\n<li>Improve package.json (Andrew Kelley, Sven Lito)</li>\n<li>Fix benchmark script (Andrew Kelley)</li>\n<li>Fix scope issue in incoming_forms (Sven Lito)</li>\n<li>Fix file handle leak on error (OrangeDog)</li>\n</ul>\n<h2>License</h2>\n<p>Formidable is licensed under the MIT license.</p>\n<h2>Ports</h2>\n<ul>\n<li><a href="http://github.com/FooBarWidget/multipart-parser">multipart-parser</a>: a C++ parser based on formidable</li>\n</ul>\n<h2>Credits</h2>\n<ul>\n<li><a href="http://twitter.com/ryah">Ryan Dahl</a> for his work on <a href="http://github.com/ry/http-parser">http-parser</a> which heavily inspired multipart_parser.js</li>\n</ul>',docPath:"argo-ci/node_modules/formidable/readme",proj:"argo-ci"}}}});
//# sourceMappingURL=path---docs-argo-ci-node-modules-formidable-b75ae04f6916a87741fd.js.map