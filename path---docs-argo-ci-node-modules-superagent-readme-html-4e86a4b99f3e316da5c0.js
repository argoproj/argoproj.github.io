webpackJsonp([0x6ae31a148024],{3222:function(e,n){e.exports={pathContext:{docHtml:'<h1>SuperAgent</h1>\n<p>SuperAgent is a small progressive <strong>client-side</strong> HTTP request library, and <strong>Node.js</strong> module with the same API, sporting many high-level HTTP client features. View the <a href="http://visionmedia.github.io/superagent/">docs</a>.</p>\n<p><img src="http://f.cl.ly/items/3d282n3A0h0Z0K2w0q2a/Screenshot.png" alt="super agent"></p>\n<h2>Installation</h2>\n<p>node:</p>\n<pre><code>$ npm install superagent\n</code></pre>\n<p>component:</p>\n<pre><code>$ component install visionmedia/superagent\n</code></pre>\n<p>Works with <a href="https://github.com/substack/node-browserify">browserify</a> and should work with <a href="https://github.com/visionmedia/superagent/wiki/SuperAgent-for-Webpack">webpack</a></p>\n<pre><code class="language-js">request\n  .post(\'/api/pet\')\n  .send({ name: \'Manny\', species: \'cat\' })\n  .set(\'X-API-Key\', \'foobar\')\n  .set(\'Accept\', \'application/json\')\n  .end(function(err, res){\n    // Calling the end function will send the request\n  });\n</code></pre>\n<h2>Supported browsers</h2>\n<p>Tested browsers:</p>\n<ul>\n<li>Latest Android</li>\n<li>Latest Firefox</li>\n<li>Latest Chrome</li>\n<li>IE10 through latest. IE9 with polyfills.</li>\n<li>Latest iPhone</li>\n<li>Latest Safari</li>\n</ul>\n<p>Even though IE9 is supported, a polyfill for <code>window.FormData</code> is required for <code>.field()</code>, and <code>window.btoa</code> is needed to use basic auth.</p>\n<h1>Plugins</h1>\n<p>SuperAgent is easily extended via plugins.</p>\n<pre><code class="language-js">var nocache = require(\'superagent-no-cache\');\nvar request = require(\'superagent\');\nvar prefix = require(\'superagent-prefix\')(\'/static\');\n\nrequest\n.get(\'/some-url\')\n.use(prefix) // Prefixes *only* this request\n.use(nocache) // Prevents caching of *only* this request\n.end(function(err, res){\n    // Do something\n});\n</code></pre>\n<p>Existing plugins:</p>\n<ul>\n<li><a href="https://github.com/johntron/superagent-no-cache">superagent-no-cache</a> - prevents caching by including Cache-Control header</li>\n<li><a href="https://github.com/johntron/superagent-prefix">superagent-prefix</a> - prefixes absolute URLs (useful in test environment)</li>\n<li><a href="https://github.com/timneutkens1/superagent-suffix">superagent-suffix</a> - suffix URLs with a given path</li>\n<li><a href="https://github.com/M6Web/superagent-mock">superagent-mock</a> - simulate HTTP calls by returning data fixtures based on the requested URL</li>\n<li><a href="https://github.com/shuvalov-anton/superagent-mocker">superagent-mocker</a> â€” simulate REST API</li>\n<li><a href="https://github.com/jpodwys/superagent-cache">superagent-cache</a> - SuperAgent with built-in, flexible caching (compatible with SuperAgent <code>1.x</code>)</li>\n<li><a href="https://github.com/alex94puchades/superagent-jsonapify">superagent-jsonapify</a> - A lightweight <a href="http://jsonapi.org/format/">json-api</a> client addon for superagent</li>\n<li><a href="https://github.com/zzarcon/superagent-serializer">superagent-serializer</a> - Converts server payload into different cases</li>\n<li><a href="https://github.com/koenpunt/superagent-use">superagent-use</a> - A client addon to apply plugins to all requests.</li>\n<li><a href="https://www.npmjs.com/package/superagent-httpbackend">superagent-httpbackend</a> - stub out requests using AngularJS\' $httpBackend syntax</li>\n<li><a href="https://github.com/leviwheatcroft/superagent-throttle">superagent-throttle</a> - queues and intelligently throttles requests</li>\n<li><a href="https://github.com/magicdawn/superagent-charset">superagent-charset</a> - add charset support for node\'s SuperAgent</li>\n</ul>\n<p>Please prefix your plugin with <code>superagent-*</code> so that it can easily be found by others.</p>\n<p>For SuperAgent extensions such as couchdb and oauth visit the <a href="https://github.com/visionmedia/superagent/wiki">wiki</a>.</p>\n<h2>Running node tests</h2>\n<p>Install dependencies:</p>\n<pre><code class="language-shell">$ npm install\n</code></pre>\n<p>Run em!</p>\n<pre><code class="language-shell">$ make test\n</code></pre>\n<h2>Running browser tests</h2>\n<p>Install dependencies:</p>\n<pre><code class="language-shell">$ npm install\n</code></pre>\n<p>Start the test runner:</p>\n<pre><code class="language-shell">$ make test-browser-local\n</code></pre>\n<p>Visit <code>http://localhost:4000/__zuul</code> in your browser.</p>\n<p>Edit tests and refresh your browser. You do not have to restart the test runner.</p>\n<h2>Packaging Notes for Developers</h2>\n<p><strong>npm (for node)</strong> is configured via the <code>package.json</code> file and the <code>.npmignore</code> file. Key metadata in the <code>package.json</code> file is the <code>version</code> field which should be changed according to semantic versioning and have a 1-1 correspondence with git tags. So for example, if you were to <code>git show v1.5.0:package.json | grep version</code>, you should see <code>"version": "1.5.0",</code> and this should hold true for every release. This can be handled via the <code>npm version</code> command. Be aware that when publishing, npm will presume the version being published should also be tagged in npm as <code>latest</code>, which is OK for normal incremental releases. For betas and minor/patch releases to older versions, be sure to include <code>--tag</code> appropriately to avoid an older release getting tagged as <code>latest</code>.</p>\n<p><strong>npm (for browser standalone)</strong> When we publish versions to npm, we run <code>make superagent.js</code> which generates the standalone <code>superagent.js</code> file via <code>browserify</code>, and this file is included in the package published to npm (but this file is never checked into the git repository). If users want to install via npm but serve a single <code>.js</code> file directly to the browser, the <code>node_modules/superagent/superagent.js</code> is a standalone browserified file ready to go for that purpose. It is not minified.</p>\n<p><strong>npm (for browserify)</strong> is handled via the <code>package.json</code> <code>browser</code> field which allows users to install SuperAgent via npm, reference it from their browser code with <code>require(\'superagent\')</code>, and then build their own application bundle via <code>browserify</code>, which will use <code>lib/client.js</code> as the SuperAgent entrypoint.</p>\n<p><strong>bower</strong> is configured via the <code>bower.json</code> file. Bower installs files directly from git/github without any transformation.</p>\n<p><strong>component</strong> is configured via the <code>component.json</code> file.</p>\n<h2>License</h2>\n<p>MIT</p>',docPath:"argo-ci/node_modules/superagent/readme",proj:"argo-ci"}}}});
//# sourceMappingURL=path---docs-argo-ci-node-modules-superagent-readme-html-4e86a4b99f3e316da5c0.js.map