webpackJsonp([0xe5690a2d8189],{2999:function(e,n){e.exports={pathContext:{docHtml:'<h1>on-finished</h1>\n<p><a href="https://npmjs.org/package/on-finished"><img src="https://img.shields.io/npm/v/on-finished.svg" alt="NPM Version"></a>\n<a href="https://npmjs.org/package/on-finished"><img src="https://img.shields.io/npm/dm/on-finished.svg" alt="NPM Downloads"></a>\n<a href="http://nodejs.org/download/"><img src="https://img.shields.io/node/v/on-finished.svg" alt="Node.js Version"></a>\n<a href="https://travis-ci.org/jshttp/on-finished"><img src="https://img.shields.io/travis/jshttp/on-finished/master.svg" alt="Build Status"></a>\n<a href="https://coveralls.io/r/jshttp/on-finished?branch=master"><img src="https://img.shields.io/coveralls/jshttp/on-finished/master.svg" alt="Test Coverage"></a></p>\n<p>Execute a callback when a HTTP request closes, finishes, or errors.</p>\n<h2>Install</h2>\n<pre><code class="language-sh">$ npm install on-finished\n</code></pre>\n<h2>API</h2>\n<pre><code class="language-js">var onFinished = require(\'on-finished\')\n</code></pre>\n<h3>onFinished(res, listener)</h3>\n<p>Attach a listener to listen for the response to finish. The listener will\nbe invoked only once when the response finished. If the response finished\nto an error, the first argument will contain the error. If the response\nhas already finished, the listener will be invoked.</p>\n<p>Listening to the end of a response would be used to close things associated\nwith the response, like open files.</p>\n<p>Listener is invoked as <code>listener(err, res)</code>.</p>\n<pre><code class="language-js">onFinished(res, function (err, res) {\n  // clean up open fds, etc.\n  // err contains the error is request error\'d\n})\n</code></pre>\n<h3>onFinished(req, listener)</h3>\n<p>Attach a listener to listen for the request to finish. The listener will\nbe invoked only once when the request finished. If the request finished\nto an error, the first argument will contain the error. If the request\nhas already finished, the listener will be invoked.</p>\n<p>Listening to the end of a request would be used to know when to continue\nafter reading the data.</p>\n<p>Listener is invoked as <code>listener(err, req)</code>.</p>\n<pre><code class="language-js">var data = \'\'\n\nreq.setEncoding(\'utf8\')\nres.on(\'data\', function (str) {\n  data += str\n})\n\nonFinished(req, function (err, req) {\n  // data is read unless there is err\n})\n</code></pre>\n<h3>onFinished.isFinished(res)</h3>\n<p>Determine if <code>res</code> is already finished. This would be useful to check and\nnot even start certain operations if the response has already finished.</p>\n<h3>onFinished.isFinished(req)</h3>\n<p>Determine if <code>req</code> is already finished. This would be useful to check and\nnot even start certain operations if the request has already finished.</p>\n<h2>Special Node.js requests</h2>\n<h3>HTTP CONNECT method</h3>\n<p>The meaning of the <code>CONNECT</code> method from RFC 7231, section 4.3.6:</p>\n<blockquote>\n<p>The CONNECT method requests that the recipient establish a tunnel to\nthe destination origin server identified by the request-target and,\nif successful, thereafter restrict its behavior to blind forwarding\nof packets, in both directions, until the tunnel is closed.  Tunnels\nare commonly used to create an end-to-end virtual connection, through\none or more proxies, which can then be secured using TLS (Transport\nLayer Security, [RFC5246]).</p>\n</blockquote>\n<p>In Node.js, these request objects come from the <code>\'connect\'</code> event on\nthe HTTP server.</p>\n<p>When this module is used on a HTTP <code>CONNECT</code> request, the request is\nconsidered "finished" immediately, <strong>due to limitations in the Node.js\ninterface</strong>. This means if the <code>CONNECT</code> request contains a request entity,\nthe request will be considered "finished" even before it has been read.</p>\n<p>There is no such thing as a response object to a <code>CONNECT</code> request in\nNode.js, so there is no support for for one.</p>\n<h3>HTTP Upgrade request</h3>\n<p>The meaning of the <code>Upgrade</code> header from RFC 7230, section 6.1:</p>\n<blockquote>\n<p>The "Upgrade" header field is intended to provide a simple mechanism\nfor transitioning from HTTP/1.1 to some other protocol on the same\nconnection.</p>\n</blockquote>\n<p>In Node.js, these request objects come from the <code>\'upgrade\'</code> event on\nthe HTTP server.</p>\n<p>When this module is used on a HTTP request with an <code>Upgrade</code> header, the\nrequest is considered "finished" immediately, <strong>due to limitations in the\nNode.js interface</strong>. This means if the <code>Upgrade</code> request contains a request\nentity, the request will be considered "finished" even before it has been\nread.</p>\n<p>There is no such thing as a response object to a <code>Upgrade</code> request in\nNode.js, so there is no support for for one.</p>\n<h2>Example</h2>\n<p>The following code ensures that file descriptors are always closed\nonce the response finishes.</p>\n<pre><code class="language-js">var destroy = require(\'destroy\')\nvar http = require(\'http\')\nvar onFinished = require(\'on-finished\')\n\nhttp.createServer(function onRequest(req, res) {\n  var stream = fs.createReadStream(\'package.json\')\n  stream.pipe(res)\n  onFinished(res, function (err) {\n    destroy(stream)\n  })\n})\n</code></pre>\n<h2>License</h2>\n<p><a href="LICENSE">MIT</a></p>',docPath:"argo-ci/node_modules/on-finished/readme",proj:"argo-ci"}}}});
//# sourceMappingURL=path---docs-argo-ci-node-modules-on-finished-da60d2bb6f17d6c0e196.js.map