{"version":3,"sources":["webpack:///path---docs-argo-getting-started-html-5e9291bd8f727d539cbf.js","webpack:///./.cache/json/docs-argo-getting-started-html.json"],"names":["webpackJsonp","480","module","exports","pathContext","docHtml","docPath","proj"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,aAAeC,QAAA,sxjBAAsnjBC,QAAA,uBAAAC,KAAA","file":"path---docs-argo-getting-started-html-5e9291bd8f727d539cbf.js","sourcesContent":["webpackJsonp([194162838348372],{\n\n/***/ 480:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"pathContext\":{\"docHtml\":\"<h1 id=\\\"getting-started\\\"><a href=\\\"#getting-started\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Getting Started</h1>\\n<p>To see how Argo works, you can run examples of simple workflows and workflows that use artifacts.\\nFor the latter, you'll set up an artifact repository for storing the artifacts that are passed in\\nthe workflows. Here are the requirements and steps to run the workflows.</p>\\n<h2 id=\\\"0-requirements\\\"><a href=\\\"#0-requirements\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>0. Requirements</h2>\\n<ul>\\n<li>Kubernetes 1.9 or later</li>\\n<li><a href=\\\"https://kubernetes.io/docs/tasks/tools/install-kubectl/\\\">kubectl</a></li>\\n<li>Have a <a href=\\\"https://kubernetes.io/docs/tasks/access-application-cluster/configure-access-multiple-clusters/\\\">kubeconfig</a> file (default location is <code>~/.kube/config</code>)</li>\\n</ul>\\n<h2 id=\\\"1-download-the-argo-cli\\\"><a href=\\\"#1-download-the-argo-cli\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>1. Download the Argo CLI</h2>\\n<p>Download the latest Argo CLI from our <a href=\\\"https://github.com/argoproj/argo/releases\\\">releases page</a>.</p>\\n<h2 id=\\\"2-install-the-controller\\\"><a href=\\\"#2-install-the-controller\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>2. Install the Controller</h2>\\n<pre><code class=\\\"language-sh\\\">kubectl create namespace argo\\nkubectl apply -n argo -f https://raw.githubusercontent.com/argoproj/argo/stable/manifests/install.yaml\\n</code></pre>\\n<p>Namespaced installs as well as installs with MinIO and/or a database built in <a href=\\\"https://github.com/argoproj/argo/tree/stable/manifests\\\">are also available</a>. </p>\\n<p>Examples below will assume you've installed argo in the <code>argo</code> namespace. If you have not, adjust\\nthe commands accordingly.</p>\\n<p>NOTE: On GKE, you may need to grant your account the ability to create new <code>clusterrole</code>s</p>\\n<pre><code class=\\\"language-sh\\\">kubectl create clusterrolebinding YOURNAME-cluster-admin-binding --clusterrole=cluster-admin --user=YOUREMAIL@gmail.com\\n</code></pre>\\n<h2 id=\\\"3-configure-the-service-account-to-run-workflows\\\"><a href=\\\"#3-configure-the-service-account-to-run-workflows\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>3. Configure the service account to run Workflows</h2>\\n<h3 id=\\\"roles-rolebindings-and-serviceaccounts\\\"><a href=\\\"#roles-rolebindings-and-serviceaccounts\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Roles, RoleBindings, and ServiceAccounts</h3>\\n<p>In order for Argo to support features such as artifacts, outputs, access to secrets, etc. it needs to communicate with Kubernetes resources\\nusing the Kubernetes API. To communicate with the Kubernetes API, Argo uses a <code>ServiceAccount</code> to authenticate itself to the Kubernetes API.\\nYou can specify which <code>Role</code> (i.e. which permissions) the <code>ServiceAccount</code> that Argo uses by binding a <code>Role</code> to a <code>ServiceAccount</code> using a <code>RoleBinding</code></p>\\n<p>Then, when submitting Workflows you can specify which <code>ServiceAccount</code> Argo uses using:</p>\\n<pre><code class=\\\"language-sh\\\">argo submit --serviceaccount &#x3C;name>\\n</code></pre>\\n<p>When no <code>ServiceAccount</code> is provided, Argo will use the <code>default</code> <code>ServiceAccount</code> from the namespace from which it is run, which will almost always have insufficient privileges by default.</p>\\n<p>For more information about granting Argo the necessary permissions for your use case see <a href=\\\"workflow-rbac.html\\\">Workflow RBAC</a>.</p>\\n<h3 id=\\\"granting-admin-privileges\\\"><a href=\\\"#granting-admin-privileges\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Granting admin privileges</h3>\\n<p>For the purposes of this demo, we will grant the <code>default</code> <code>ServiceAccount</code> admin privileges (i.e., we will bind the <code>admin</code> <code>Role</code> to the <code>default</code> <code>ServiceAccount</code> of the current namespace):</p>\\n<pre><code class=\\\"language-sh\\\">kubectl create rolebinding default-admin --clusterrole=admin --serviceaccount=default:default\\n</code></pre>\\n<p><strong>Note that this will grant admin privileges to the <code>default</code> <code>ServiceAccount</code> in the namespace that the command is run from, so you will only be able to\\nrun Workflows in the namespace where the <code>RoleBinding</code> was made.</strong></p>\\n<h2 id=\\\"4-run-sample-workflows\\\"><a href=\\\"#4-run-sample-workflows\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>4. Run Sample Workflows</h2>\\n<pre><code class=\\\"language-sh\\\">argo submit --watch https://raw.githubusercontent.com/argoproj/argo/master/examples/hello-world.yaml\\nargo submit --watch https://raw.githubusercontent.com/argoproj/argo/master/examples/coinflip.yaml\\nargo submit --watch https://raw.githubusercontent.com/argoproj/argo/master/examples/loops-maps.yaml\\nargo list\\nargo get xxx-workflow-name-xxx\\nargo logs xxx-pod-name-xxx #from get command above\\n</code></pre>\\n<p>Additional examples and more information about the CLI are available on the <a href=\\\"../examples/README.html\\\">Argo Workflows by Example</a> page.</p>\\n<p>You can also create Workflows directly with <code>kubectl</code>. However, the Argo CLI offers extra features\\nthat <code>kubectl</code> does not, such as YAML validation, workflow visualization, parameter passing, retries\\nand resubmits, suspend and resume, and more.</p>\\n<pre><code class=\\\"language-sh\\\">kubectl create -f https://raw.githubusercontent.com/argoproj/argo/master/examples/hello-world.yaml\\nkubectl get wf\\nkubectl get wf hello-world-xxx\\nkubectl get po --selector=workflows.argoproj.io/workflow=hello-world-xxx --show-all\\nkubectl logs hello-world-yyy -c main\\n</code></pre>\\n<h2 id=\\\"5-install-an-artifact-repository\\\"><a href=\\\"#5-install-an-artifact-repository\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>5. Install an Artifact Repository</h2>\\n<p>Argo supports S3 (AWS, GCS, Minio) and Artifactory as artifact repositories. Instructions on how to configure artifact repositories are available on the <a href=\\\"configure-artifact-repository.html\\\">Configuring your Artifact Repository</a> page.</p>\\n<p>This tutorial uses Minio for the sake of portability.</p>\\n<p>Install Minio:</p>\\n<pre><code class=\\\"language-sh\\\">helm install argo-artifacts stable/minio \\\\\\n  --set service.type=LoadBalancer \\\\\\n  --set defaultBucket.enabled=true \\\\\\n  --set defaultBucket.name=my-bucket \\\\\\n  --set persistence.enabled=false \\\\\\n  --set fullnameOverride=argo-artifacts\\n</code></pre>\\n<p>Login to the Minio UI using a web browser (port 9000) after exposing obtaining the external IP using <code>kubectl</code>.</p>\\n<pre><code class=\\\"language-sh\\\">kubectl -n argo get service argo-artifacts -o wide\\n</code></pre>\\n<p>On Minikube:</p>\\n<pre><code class=\\\"language-sh\\\">minikube -n argo service --url argo-artifacts\\n</code></pre>\\n<p>NOTE: When minio is installed via Helm, it uses the following hard-wired default credentials,\\nwhich you will use to login to the UI:</p>\\n<ul>\\n<li>AccessKey: <code>AKIAIOSFODNN7EXAMPLE</code></li>\\n<li>SecretKey: <code>wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY</code></li>\\n</ul>\\n<p>Create a bucket named <code>my-bucket</code> from the Minio UI.</p>\\n<h2 id=\\\"6-reconfigure-the-workflow-controller-to-use-the-minio-artifact-repository\\\"><a href=\\\"#6-reconfigure-the-workflow-controller-to-use-the-minio-artifact-repository\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>6. Reconfigure the workflow controller to use the Minio artifact repository</h2>\\n<p>Edit the <code>workflow-controller</code> <code>ConfigMap</code> to reference the service name (<code>argo-artifacts</code>) and\\nsecret (<code>argo-artifacts</code>) created by the Helm install:</p>\\n<p>Edit the <code>workflow-controller</code> <code>ConfigMap</code>:</p>\\n<pre><code class=\\\"language-sh\\\">kubectl edit cm -n argo workflow-controller-configmap\\n</code></pre>\\n<p>Add the following:</p>\\n<pre><code class=\\\"language-yaml\\\">data:\\n  config: |\\n    artifactRepository: |\\n      s3:\\n        bucket: my-bucket\\n        endpoint: argo-artifacts:9000\\n        insecure: true\\n        # accessKeySecret and secretKeySecret are secret selectors.\\n        # It references the k8s secret named 'argo-artifacts'\\n        # which was created during the minio helm install. The keys,\\n        # 'accesskey' and 'secretkey', inside that secret are where the\\n        # actual minio credentials are stored.\\n        accessKeySecret:\\n          name: argo-artifacts\\n          key: accesskey\\n        secretKeySecret:\\n          name: argo-artifacts\\n          key: secretkey\\n</code></pre>\\n<p>NOTE: the Minio secret is retrieved from the namespace you use to run Workflows. If Minio is\\ninstalled in a different namespace then you will need to create a copy of its secret in the\\nnamespace you use for Workflows.</p>\\n<h2 id=\\\"7-run-a-workflow-which-uses-artifacts\\\"><a href=\\\"#7-run-a-workflow-which-uses-artifacts\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>7. Run a workflow which uses artifacts</h2>\\n<pre><code class=\\\"language-sh\\\">argo submit https://raw.githubusercontent.com/argoproj/argo/master/examples/artifact-passing.yaml\\n</code></pre>\\n<h2 id=\\\"8-access-the-argo-ui\\\"><a href=\\\"#8-access-the-argo-ui\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>8. Access the Argo UI</h2>\\n<blockquote>\\n<p>v2.5 and after</p>\\n</blockquote>\\n<pre><code>kubectl -n argo port-forward deployment/argo-server 2746:2746\\n</code></pre>\\n<p>Then visit: <a href=\\\"http://127.0.0.1:2746\\\">http://127.0.0.1:2746</a></p>\\n<p>See the <a href=\\\"./argo-server.html\\\">Argo Server documentation</a> for config options, authentication,\\nmanaged namespaces, etc.</p>\\n<blockquote>\\n<p>v2.4 and before</p>\\n</blockquote>\\n<p>By default, the Argo UI service is not exposed with an external IP. To access the UI, use one of the\\nfollowing:</p>\\n<h3 id=\\\"method-1-kubectl-port-forward\\\"><a href=\\\"#method-1-kubectl-port-forward\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Method 1: kubectl port-forward</h3>\\n<pre><code>kubectl -n argo port-forward deployment/argo-ui 8001:8001\\n</code></pre>\\n<p>Then visit: <a href=\\\"http://127.0.0.1:8001\\\">http://127.0.0.1:8001</a></p>\\n<h3 id=\\\"method-2-kubectl-proxy\\\"><a href=\\\"#method-2-kubectl-proxy\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Method 2: kubectl proxy</h3>\\n<pre><code>kubectl proxy\\n</code></pre>\\n<p>Then visit: <a href=\\\"http://127.0.0.1:8001/api/v1/namespaces/argo/services/argo-ui/proxy/\\\">http://127.0.0.1:8001/api/v1/namespaces/argo/services/argo-ui/proxy/</a></p>\\n<p>NOTE: artifact download and webconsole is not supported using this method</p>\\n<h3 id=\\\"method-3-expose-a-loadbalancer\\\"><a href=\\\"#method-3-expose-a-loadbalancer\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Method 3: Expose a LoadBalancer</h3>\\n<p>Update the argo-ui service to be of type <code>LoadBalancer</code>.</p>\\n<pre><code>kubectl patch svc argo-ui -n argo -p '{\\\"spec\\\": {\\\"type\\\": \\\"LoadBalancer\\\"}}'\\n</code></pre>\\n<p>Then wait for the external IP to be made available:</p>\\n<pre><code>kubectl get svc argo-ui -n argo\\nNAME      TYPE           CLUSTER-IP      EXTERNAL-IP     PORT(S)        AGE\\nargo-ui   LoadBalancer   10.19.255.205   35.197.49.167   80:30999/TCP   1m\\n</code></pre>\\n<p>NOTE: On Minikube, you won't get an external IP after updating the service -- it will always show\\n<code>pending</code>. Run the following command to determine the Argo UI URL:</p>\\n<pre><code>minikube service -n argo --url argo-ui\\n</code></pre>\",\"docPath\":\"argo/getting-started\",\"proj\":\"argo\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---docs-argo-getting-started-html-5e9291bd8f727d539cbf.js","module.exports = {\"pathContext\":{\"docHtml\":\"<h1 id=\\\"getting-started\\\"><a href=\\\"#getting-started\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Getting Started</h1>\\n<p>To see how Argo works, you can run examples of simple workflows and workflows that use artifacts.\\nFor the latter, you'll set up an artifact repository for storing the artifacts that are passed in\\nthe workflows. Here are the requirements and steps to run the workflows.</p>\\n<h2 id=\\\"0-requirements\\\"><a href=\\\"#0-requirements\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>0. Requirements</h2>\\n<ul>\\n<li>Kubernetes 1.9 or later</li>\\n<li><a href=\\\"https://kubernetes.io/docs/tasks/tools/install-kubectl/\\\">kubectl</a></li>\\n<li>Have a <a href=\\\"https://kubernetes.io/docs/tasks/access-application-cluster/configure-access-multiple-clusters/\\\">kubeconfig</a> file (default location is <code>~/.kube/config</code>)</li>\\n</ul>\\n<h2 id=\\\"1-download-the-argo-cli\\\"><a href=\\\"#1-download-the-argo-cli\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>1. Download the Argo CLI</h2>\\n<p>Download the latest Argo CLI from our <a href=\\\"https://github.com/argoproj/argo/releases\\\">releases page</a>.</p>\\n<h2 id=\\\"2-install-the-controller\\\"><a href=\\\"#2-install-the-controller\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>2. Install the Controller</h2>\\n<pre><code class=\\\"language-sh\\\">kubectl create namespace argo\\nkubectl apply -n argo -f https://raw.githubusercontent.com/argoproj/argo/stable/manifests/install.yaml\\n</code></pre>\\n<p>Namespaced installs as well as installs with MinIO and/or a database built in <a href=\\\"https://github.com/argoproj/argo/tree/stable/manifests\\\">are also available</a>. </p>\\n<p>Examples below will assume you've installed argo in the <code>argo</code> namespace. If you have not, adjust\\nthe commands accordingly.</p>\\n<p>NOTE: On GKE, you may need to grant your account the ability to create new <code>clusterrole</code>s</p>\\n<pre><code class=\\\"language-sh\\\">kubectl create clusterrolebinding YOURNAME-cluster-admin-binding --clusterrole=cluster-admin --user=YOUREMAIL@gmail.com\\n</code></pre>\\n<h2 id=\\\"3-configure-the-service-account-to-run-workflows\\\"><a href=\\\"#3-configure-the-service-account-to-run-workflows\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>3. Configure the service account to run Workflows</h2>\\n<h3 id=\\\"roles-rolebindings-and-serviceaccounts\\\"><a href=\\\"#roles-rolebindings-and-serviceaccounts\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Roles, RoleBindings, and ServiceAccounts</h3>\\n<p>In order for Argo to support features such as artifacts, outputs, access to secrets, etc. it needs to communicate with Kubernetes resources\\nusing the Kubernetes API. To communicate with the Kubernetes API, Argo uses a <code>ServiceAccount</code> to authenticate itself to the Kubernetes API.\\nYou can specify which <code>Role</code> (i.e. which permissions) the <code>ServiceAccount</code> that Argo uses by binding a <code>Role</code> to a <code>ServiceAccount</code> using a <code>RoleBinding</code></p>\\n<p>Then, when submitting Workflows you can specify which <code>ServiceAccount</code> Argo uses using:</p>\\n<pre><code class=\\\"language-sh\\\">argo submit --serviceaccount &#x3C;name>\\n</code></pre>\\n<p>When no <code>ServiceAccount</code> is provided, Argo will use the <code>default</code> <code>ServiceAccount</code> from the namespace from which it is run, which will almost always have insufficient privileges by default.</p>\\n<p>For more information about granting Argo the necessary permissions for your use case see <a href=\\\"workflow-rbac.html\\\">Workflow RBAC</a>.</p>\\n<h3 id=\\\"granting-admin-privileges\\\"><a href=\\\"#granting-admin-privileges\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Granting admin privileges</h3>\\n<p>For the purposes of this demo, we will grant the <code>default</code> <code>ServiceAccount</code> admin privileges (i.e., we will bind the <code>admin</code> <code>Role</code> to the <code>default</code> <code>ServiceAccount</code> of the current namespace):</p>\\n<pre><code class=\\\"language-sh\\\">kubectl create rolebinding default-admin --clusterrole=admin --serviceaccount=default:default\\n</code></pre>\\n<p><strong>Note that this will grant admin privileges to the <code>default</code> <code>ServiceAccount</code> in the namespace that the command is run from, so you will only be able to\\nrun Workflows in the namespace where the <code>RoleBinding</code> was made.</strong></p>\\n<h2 id=\\\"4-run-sample-workflows\\\"><a href=\\\"#4-run-sample-workflows\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>4. Run Sample Workflows</h2>\\n<pre><code class=\\\"language-sh\\\">argo submit --watch https://raw.githubusercontent.com/argoproj/argo/master/examples/hello-world.yaml\\nargo submit --watch https://raw.githubusercontent.com/argoproj/argo/master/examples/coinflip.yaml\\nargo submit --watch https://raw.githubusercontent.com/argoproj/argo/master/examples/loops-maps.yaml\\nargo list\\nargo get xxx-workflow-name-xxx\\nargo logs xxx-pod-name-xxx #from get command above\\n</code></pre>\\n<p>Additional examples and more information about the CLI are available on the <a href=\\\"../examples/README.html\\\">Argo Workflows by Example</a> page.</p>\\n<p>You can also create Workflows directly with <code>kubectl</code>. However, the Argo CLI offers extra features\\nthat <code>kubectl</code> does not, such as YAML validation, workflow visualization, parameter passing, retries\\nand resubmits, suspend and resume, and more.</p>\\n<pre><code class=\\\"language-sh\\\">kubectl create -f https://raw.githubusercontent.com/argoproj/argo/master/examples/hello-world.yaml\\nkubectl get wf\\nkubectl get wf hello-world-xxx\\nkubectl get po --selector=workflows.argoproj.io/workflow=hello-world-xxx --show-all\\nkubectl logs hello-world-yyy -c main\\n</code></pre>\\n<h2 id=\\\"5-install-an-artifact-repository\\\"><a href=\\\"#5-install-an-artifact-repository\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>5. Install an Artifact Repository</h2>\\n<p>Argo supports S3 (AWS, GCS, Minio) and Artifactory as artifact repositories. Instructions on how to configure artifact repositories are available on the <a href=\\\"configure-artifact-repository.html\\\">Configuring your Artifact Repository</a> page.</p>\\n<p>This tutorial uses Minio for the sake of portability.</p>\\n<p>Install Minio:</p>\\n<pre><code class=\\\"language-sh\\\">helm install argo-artifacts stable/minio \\\\\\n  --set service.type=LoadBalancer \\\\\\n  --set defaultBucket.enabled=true \\\\\\n  --set defaultBucket.name=my-bucket \\\\\\n  --set persistence.enabled=false \\\\\\n  --set fullnameOverride=argo-artifacts\\n</code></pre>\\n<p>Login to the Minio UI using a web browser (port 9000) after exposing obtaining the external IP using <code>kubectl</code>.</p>\\n<pre><code class=\\\"language-sh\\\">kubectl -n argo get service argo-artifacts -o wide\\n</code></pre>\\n<p>On Minikube:</p>\\n<pre><code class=\\\"language-sh\\\">minikube -n argo service --url argo-artifacts\\n</code></pre>\\n<p>NOTE: When minio is installed via Helm, it uses the following hard-wired default credentials,\\nwhich you will use to login to the UI:</p>\\n<ul>\\n<li>AccessKey: <code>AKIAIOSFODNN7EXAMPLE</code></li>\\n<li>SecretKey: <code>wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY</code></li>\\n</ul>\\n<p>Create a bucket named <code>my-bucket</code> from the Minio UI.</p>\\n<h2 id=\\\"6-reconfigure-the-workflow-controller-to-use-the-minio-artifact-repository\\\"><a href=\\\"#6-reconfigure-the-workflow-controller-to-use-the-minio-artifact-repository\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>6. Reconfigure the workflow controller to use the Minio artifact repository</h2>\\n<p>Edit the <code>workflow-controller</code> <code>ConfigMap</code> to reference the service name (<code>argo-artifacts</code>) and\\nsecret (<code>argo-artifacts</code>) created by the Helm install:</p>\\n<p>Edit the <code>workflow-controller</code> <code>ConfigMap</code>:</p>\\n<pre><code class=\\\"language-sh\\\">kubectl edit cm -n argo workflow-controller-configmap\\n</code></pre>\\n<p>Add the following:</p>\\n<pre><code class=\\\"language-yaml\\\">data:\\n  config: |\\n    artifactRepository: |\\n      s3:\\n        bucket: my-bucket\\n        endpoint: argo-artifacts:9000\\n        insecure: true\\n        # accessKeySecret and secretKeySecret are secret selectors.\\n        # It references the k8s secret named 'argo-artifacts'\\n        # which was created during the minio helm install. The keys,\\n        # 'accesskey' and 'secretkey', inside that secret are where the\\n        # actual minio credentials are stored.\\n        accessKeySecret:\\n          name: argo-artifacts\\n          key: accesskey\\n        secretKeySecret:\\n          name: argo-artifacts\\n          key: secretkey\\n</code></pre>\\n<p>NOTE: the Minio secret is retrieved from the namespace you use to run Workflows. If Minio is\\ninstalled in a different namespace then you will need to create a copy of its secret in the\\nnamespace you use for Workflows.</p>\\n<h2 id=\\\"7-run-a-workflow-which-uses-artifacts\\\"><a href=\\\"#7-run-a-workflow-which-uses-artifacts\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>7. Run a workflow which uses artifacts</h2>\\n<pre><code class=\\\"language-sh\\\">argo submit https://raw.githubusercontent.com/argoproj/argo/master/examples/artifact-passing.yaml\\n</code></pre>\\n<h2 id=\\\"8-access-the-argo-ui\\\"><a href=\\\"#8-access-the-argo-ui\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>8. Access the Argo UI</h2>\\n<blockquote>\\n<p>v2.5 and after</p>\\n</blockquote>\\n<pre><code>kubectl -n argo port-forward deployment/argo-server 2746:2746\\n</code></pre>\\n<p>Then visit: <a href=\\\"http://127.0.0.1:2746\\\">http://127.0.0.1:2746</a></p>\\n<p>See the <a href=\\\"./argo-server.html\\\">Argo Server documentation</a> for config options, authentication,\\nmanaged namespaces, etc.</p>\\n<blockquote>\\n<p>v2.4 and before</p>\\n</blockquote>\\n<p>By default, the Argo UI service is not exposed with an external IP. To access the UI, use one of the\\nfollowing:</p>\\n<h3 id=\\\"method-1-kubectl-port-forward\\\"><a href=\\\"#method-1-kubectl-port-forward\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Method 1: kubectl port-forward</h3>\\n<pre><code>kubectl -n argo port-forward deployment/argo-ui 8001:8001\\n</code></pre>\\n<p>Then visit: <a href=\\\"http://127.0.0.1:8001\\\">http://127.0.0.1:8001</a></p>\\n<h3 id=\\\"method-2-kubectl-proxy\\\"><a href=\\\"#method-2-kubectl-proxy\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Method 2: kubectl proxy</h3>\\n<pre><code>kubectl proxy\\n</code></pre>\\n<p>Then visit: <a href=\\\"http://127.0.0.1:8001/api/v1/namespaces/argo/services/argo-ui/proxy/\\\">http://127.0.0.1:8001/api/v1/namespaces/argo/services/argo-ui/proxy/</a></p>\\n<p>NOTE: artifact download and webconsole is not supported using this method</p>\\n<h3 id=\\\"method-3-expose-a-loadbalancer\\\"><a href=\\\"#method-3-expose-a-loadbalancer\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Method 3: Expose a LoadBalancer</h3>\\n<p>Update the argo-ui service to be of type <code>LoadBalancer</code>.</p>\\n<pre><code>kubectl patch svc argo-ui -n argo -p '{\\\"spec\\\": {\\\"type\\\": \\\"LoadBalancer\\\"}}'\\n</code></pre>\\n<p>Then wait for the external IP to be made available:</p>\\n<pre><code>kubectl get svc argo-ui -n argo\\nNAME      TYPE           CLUSTER-IP      EXTERNAL-IP     PORT(S)        AGE\\nargo-ui   LoadBalancer   10.19.255.205   35.197.49.167   80:30999/TCP   1m\\n</code></pre>\\n<p>NOTE: On Minikube, you won't get an external IP after updating the service -- it will always show\\n<code>pending</code>. Run the following command to determine the Argo UI URL:</p>\\n<pre><code>minikube service -n argo --url argo-ui\\n</code></pre>\",\"docPath\":\"argo/getting-started\",\"proj\":\"argo\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/docs-argo-getting-started-html.json\n// module id = 480\n// module chunks = 194162838348372"],"sourceRoot":""}