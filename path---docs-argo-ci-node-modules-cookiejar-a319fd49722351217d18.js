webpackJsonp([0xeff24733254f],{2207:function(e,i){e.exports={pathContext:{docHtml:"<h1>CookieJar</h1>\n<p>Simple robust cookie library</p>\n<h2>Exports</h2>\n<h3>CookieAccessInfo(domain,path,secure,script)</h3>\n<pre><code>class to determine matching qualities of a cookie\n</code></pre>\n<h5>Properties</h5>\n<ul>\n<li>String domain - domain to match</li>\n<li>String path - path to match</li>\n<li>Boolean secure - access is secure (ssl generally)</li>\n<li>Boolean script - access is from a script</li>\n</ul>\n<h3>Cookie(cookiestr<em>or</em>cookie, request<em>domain, request</em>path)</h3>\n<pre><code>turns input into a Cookie (singleton if given a Cookie)\nthe `request_domain` argument is used to default the domain if it is not explicit in the cookie string \nthe `request_path` argument is used to set the path if it is not explicit in a cookie String.\n\nexplicit domains/paths will cascade, implied domains/paths must *exactly* match (see http://en.wikipedia.org/wiki/HTTP_cookie#Domain_and_Pat)\n</code></pre>\n<h5>Properties</h5>\n<ul>\n<li>String name - name of the cookie</li>\n<li>String value - string associated with the cookie</li>\n<li>String domain - domain to match (on a cookie a '.' at the start means a wildcard matching anything ending in the rest)</li>\n<li>Boolean explicit_domain - if the domain was explicitly set via the cookie string</li>\n<li>String path - base path to match (matches any path starting with this '/' is root)</li>\n<li>Boolean explicit_path - if the path was explicitly set via the cookie string</li>\n<li>Boolean noscript - if it should be kept from scripts</li>\n<li>Boolean secure - should it only be transmitted over secure means</li>\n<li>Number expiration_date - number of millis since 1970 at which this should be removed</li>\n</ul>\n<h5>Methods</h5>\n<ul>\n<li>String toString() - the <strong>set-cookie:</strong> string for this cookie</li>\n<li>String toValueString() - the <strong>cookie:</strong> string for this cookie</li>\n<li>Cookie parse(cookiestr, request<em>domain, request</em>path) - parses the string onto this cookie or a new one if called directly</li>\n<li>Boolean matches(access<em>info) - returns true if the access</em>info allows retrieval of this cookie</li>\n<li>Boolean collidesWith(cookie) - returns true if the cookies cannot exist in the same space (domain and path match)</li>\n</ul>\n<h3>CookieJar()</h3>\n<pre><code>class to hold numerous cookies from multiple domains correctly\n</code></pre>\n<h5>Methods</h5>\n<ul>\n<li>Cookie setCookie(cookie, request<em>domain, request</em>path) - add a cookie to the jar</li>\n<li>Cookie[] setCookies(cookiestr<em>or</em>list, request<em>domain, request</em>path) - add a large number of cookies to the jar</li>\n<li>Cookie getCookie(cookie<em>name,access</em>info) - get a cookie with the name and access_info matching</li>\n<li>Cookie[] getCookies(access<em>info) - grab all cookies matching this access</em>info</li>\n</ul>",docPath:"argo-ci/node_modules/cookiejar/readme",proj:"argo-ci"}}}});
//# sourceMappingURL=path---docs-argo-ci-node-modules-cookiejar-a319fd49722351217d18.js.map