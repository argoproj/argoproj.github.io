webpackJsonp([0xe423104eca68],{3148:function(e,t){e.exports={pathContext:{docHtml:"<h1>serve-static</h1>\n<p><a href=\"https://npmjs.org/package/serve-static\"><img src=\"https://img.shields.io/npm/v/serve-static.svg\" alt=\"NPM Version\"></a>\n<a href=\"https://npmjs.org/package/serve-static\"><img src=\"https://img.shields.io/npm/dm/serve-static.svg\" alt=\"NPM Downloads\"></a>\n<a href=\"https://travis-ci.org/expressjs/serve-static\"><img src=\"https://img.shields.io/travis/expressjs/serve-static/master.svg?label=linux\" alt=\"Linux Build\"></a>\n<a href=\"https://ci.appveyor.com/project/dougwilson/serve-static\"><img src=\"https://img.shields.io/appveyor/ci/dougwilson/serve-static/master.svg?label=windows\" alt=\"Windows Build\"></a>\n<a href=\"https://coveralls.io/r/expressjs/serve-static\"><img src=\"https://img.shields.io/coveralls/expressjs/serve-static/master.svg\" alt=\"Test Coverage\"></a>\n<a href=\"https://gratipay.com/dougwilson/\"><img src=\"https://img.shields.io/gratipay/dougwilson.svg\" alt=\"Gratipay\"></a></p>\n<h2>Install</h2>\n<p>This is a <a href=\"https://nodejs.org/en/\">Node.js</a> module available through the\n<a href=\"https://www.npmjs.com/\">npm registry</a>. Installation is done using the\n<a href=\"https://docs.npmjs.com/getting-started/installing-npm-packages-locally\"><code>npm install</code> command</a>:</p>\n<pre><code class=\"language-sh\">$ npm install serve-static\n</code></pre>\n<h2>API</h2>\n<!-- eslint-disable no-unused-vars -->\n<pre><code class=\"language-js\">var serveStatic = require('serve-static')\n</code></pre>\n<h3>serveStatic(root, options)</h3>\n<p>Create a new middleware function to serve files from within a given root\ndirectory. The file to serve will be determined by combining <code>req.url</code>\nwith the provided root directory. When a file is not found, instead of\nsending a 404 response, this module will instead call <code>next()</code> to move on\nto the next middleware, allowing for stacking and fall-backs.</p>\n<h4>Options</h4>\n<h5>acceptRanges</h5>\n<p>Enable or disable accepting ranged requests, defaults to true.\nDisabling this will not send <code>Accept-Ranges</code> and ignore the contents\nof the <code>Range</code> request header.</p>\n<h5>cacheControl</h5>\n<p>Enable or disable setting <code>Cache-Control</code> response header, defaults to\ntrue. Disabling this will ignore the <code>immutable</code> and <code>maxAge</code> options.</p>\n<h5>dotfiles</h5>\n<p> Set how \"dotfiles\" are treated when encountered. A dotfile is a file\nor directory that begins with a dot (\".\"). Note this check is done on\nthe path itself without checking if the path actually exists on the\ndisk. If <code>root</code> is specified, only the dotfiles above the root are\nchecked (i.e. the root itself can be within a dotfile when set\nto \"deny\").</p>\n<ul>\n<li><code>'allow'</code> No special treatment for dotfiles.</li>\n<li><code>'deny'</code> Deny a request for a dotfile and 403/<code>next()</code>.</li>\n<li><code>'ignore'</code> Pretend like the dotfile does not exist and 404/<code>next()</code>.</li>\n</ul>\n<p>The default value is similar to <code>'ignore'</code>, with the exception that this\ndefault will not ignore the files within a directory that begins with a dot.</p>\n<h5>etag</h5>\n<p>Enable or disable etag generation, defaults to true.</p>\n<h5>extensions</h5>\n<p>Set file extension fallbacks. When set, if a file is not found, the given\nextensions will be added to the file name and search for. The first that\nexists will be served. Example: <code>['html', 'htm']</code>.</p>\n<p>The default value is <code>false</code>.</p>\n<h5>fallthrough</h5>\n<p>Set the middleware to have client errors fall-through as just unhandled\nrequests, otherwise forward a client error. The difference is that client\nerrors like a bad request or a request to a non-existent file will cause\nthis middleware to simply <code>next()</code> to your next middleware when this value\nis <code>true</code>. When this value is <code>false</code>, these errors (even 404s), will invoke\n<code>next(err)</code>.</p>\n<p>Typically <code>true</code> is desired such that multiple physical directories can be\nmapped to the same web address or for routes to fill in non-existent files.</p>\n<p>The value <code>false</code> can be used if this middleware is mounted at a path that\nis designed to be strictly a single file system directory, which allows for\nshort-circuiting 404s for less overhead. This middleware will also reply to\nall methods.</p>\n<p>The default value is <code>true</code>.</p>\n<h5>immutable</h5>\n<p>Enable or diable the <code>immutable</code> directive in the <code>Cache-Control</code> response\nheader, defaults to <code>false</code>. If set to <code>true</code>, the <code>maxAge</code> option should\nalso be specified to enable caching. The <code>immutable</code> directive will prevent\nsupported clients from making conditional requests during the life of the\n<code>maxAge</code> option to check if the file has changed.</p>\n<h5>index</h5>\n<p>By default this module will send \"index.html\" files in response to a request\non a directory. To disable this set <code>false</code> or to supply a new index pass a\nstring or an array in preferred order.</p>\n<h5>lastModified</h5>\n<p>Enable or disable <code>Last-Modified</code> header, defaults to true. Uses the file\nsystem's last modified value.</p>\n<h5>maxAge</h5>\n<p>Provide a max-age in milliseconds for http caching, defaults to 0. This\ncan also be a string accepted by the <a href=\"https://www.npmjs.org/package/ms#readme\">ms</a>\nmodule.</p>\n<h5>redirect</h5>\n<p>Redirect to trailing \"/\" when the pathname is a dir. Defaults to <code>true</code>.</p>\n<h5>setHeaders</h5>\n<p>Function to set custom headers on response. Alterations to the headers need to\noccur synchronously. The function is called as <code>fn(res, path, stat)</code>, where\nthe arguments are:</p>\n<ul>\n<li><code>res</code> the response object</li>\n<li><code>path</code> the file path that is being sent</li>\n<li><code>stat</code> the stat object of the file that is being sent</li>\n</ul>\n<h2>Examples</h2>\n<h3>Serve files with vanilla node.js http server</h3>\n<pre><code class=\"language-js\">var finalhandler = require('finalhandler')\nvar http = require('http')\nvar serveStatic = require('serve-static')\n\n// Serve up public/ftp folder\nvar serve = serveStatic('public/ftp', {'index': ['index.html', 'index.htm']})\n\n// Create server\nvar server = http.createServer(function onRequest (req, res) {\n  serve(req, res, finalhandler(req, res))\n})\n\n// Listen\nserver.listen(3000)\n</code></pre>\n<h3>Serve all files as downloads</h3>\n<pre><code class=\"language-js\">var contentDisposition = require('content-disposition')\nvar finalhandler = require('finalhandler')\nvar http = require('http')\nvar serveStatic = require('serve-static')\n\n// Serve up public/ftp folder\nvar serve = serveStatic('public/ftp', {\n  'index': false,\n  'setHeaders': setHeaders\n})\n\n// Set header to force download\nfunction setHeaders (res, path) {\n  res.setHeader('Content-Disposition', contentDisposition(path))\n}\n\n// Create server\nvar server = http.createServer(function onRequest (req, res) {\n  serve(req, res, finalhandler(req, res))\n})\n\n// Listen\nserver.listen(3000)\n</code></pre>\n<h3>Serving using express</h3>\n<h4>Simple</h4>\n<p>This is a simple example of using Express.</p>\n<pre><code class=\"language-js\">var express = require('express')\nvar serveStatic = require('serve-static')\n\nvar app = express()\n\napp.use(serveStatic('public/ftp', {'index': ['default.html', 'default.htm']}))\napp.listen(3000)\n</code></pre>\n<h4>Multiple roots</h4>\n<p>This example shows a simple way to search through multiple directories.\nFiles are look for in <code>public-optimized/</code> first, then <code>public/</code> second as\na fallback.</p>\n<pre><code class=\"language-js\">var express = require('express')\nvar path = require('path')\nvar serveStatic = require('serve-static')\n\nvar app = express()\n\napp.use(serveStatic(path.join(__dirname, 'public-optimized')))\napp.use(serveStatic(path.join(__dirname, 'public')))\napp.listen(3000)\n</code></pre>\n<h4>Different settings for paths</h4>\n<p>This example shows how to set a different max age depending on the served\nfile type. In this example, HTML files are not cached, while everything else\nis for 1 day.</p>\n<pre><code class=\"language-js\">var express = require('express')\nvar path = require('path')\nvar serveStatic = require('serve-static')\n\nvar app = express()\n\napp.use(serveStatic(path.join(__dirname, 'public'), {\n  maxAge: '1d',\n  setHeaders: setCustomCacheControl\n}))\n\napp.listen(3000)\n\nfunction setCustomCacheControl (res, path) {\n  if (serveStatic.mime.lookup(path) === 'text/html') {\n    // Custom Cache-Control for HTML files\n    res.setHeader('Cache-Control', 'public, max-age=0')\n  }\n}\n</code></pre>\n<h2>License</h2>\n<p><a href=\"LICENSE\">MIT</a></p>",docPath:"argo-ci/node_modules/serve-static/readme",proj:"argo-ci"}}}});
//# sourceMappingURL=path---docs-argo-ci-node-modules-serve-static-readme-html-cec02e7fcad7dc031405.js.map