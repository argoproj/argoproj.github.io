{"version":3,"sources":["webpack:///path---docs-argo-cd-docs-operator-manual-custom-tools-html-9f45ef030e34bf0fdc61.js","webpack:///./.cache/json/docs-argo-cd-docs-operator-manual-custom-tools-html.json"],"names":["webpackJsonp","559","module","exports","pathContext","docHtml","docPath","proj"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,aAAeC,QAAA,quJAAgtJC,QAAA,4CAAAC,KAAA","file":"path---docs-argo-cd-docs-operator-manual-custom-tools-html-9f45ef030e34bf0fdc61.js","sourcesContent":["webpackJsonp([43919806109780],{\n\n/***/ 559:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"pathContext\":{\"docHtml\":\"<h1 id=\\\"custom-tooling\\\"><a href=\\\"#custom-tooling\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Custom Tooling</h1>\\n<p>Argo CD bundles preferred versions of its supported templating tools (helm, kustomize, ks, jsonnet)\\nas part of its container images. Sometimes, it may be desired to use a specific version of a tool\\nother than what Argo CD bundles. Some reasons to do this might be:</p>\\n<ul>\\n<li>To upgrade/downgrade to a specific version of a tool due to bugs or bug fixes.</li>\\n<li>To install additional dependencies which to be used by kustomize's configmap/secret generators\\n(e.g. curl, vault, gpg, AWS CLI)</li>\\n<li>To install a <a href=\\\"../user-guide/application_sources.md#config-management-plugins\\\">config management plugin</a></li>\\n</ul>\\n<p>As the Argo CD repo-server is the single service responsible for generating Kubernetes manifests, it\\ncan be customized to use alternative toolchain required by your environment.</p>\\n<h2 id=\\\"adding-tools-via-volume-mounts\\\"><a href=\\\"#adding-tools-via-volume-mounts\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Adding Tools Via Volume Mounts</h2>\\n<p>The first technique is to use an <code>init</code> container and a <code>volumeMount</code> to copy a different verison of\\na tool into the repo-server container. In the following example, an init container is overwriting\\nthe helm binary with a different version than what is bundled in Argo CD:</p>\\n<pre><code class=\\\"language-yaml\\\">    spec:\\n      # 1. Define an emptyDir volume which will hold the custom binaries\\n      volumes:\\n      - name: custom-tools\\n        emptyDir: {}\\n      # 2. Use an init container to download/copy custom binaries into the emptyDir\\n      initContainers:\\n      - name: download-tools\\n        image: alpine:3.8\\n        command: [sh, -c]\\n        args:\\n        - wget -qO- https://storage.googleapis.com/kubernetes-helm/helm-v2.12.3-linux-amd64.tar.gz | tar -xvzf - &#x26;&#x26;\\n          mv linux-amd64/helm /custom-tools/\\n        volumeMounts:\\n        - mountPath: /custom-tools\\n          name: custom-tools\\n      # 3. Volume mount the custom binary to the bin directory (overriding the existing version)\\n      containers:\\n      - name: argocd-repo-server\\n        volumeMounts:\\n        - mountPath: /usr/local/bin/helm\\n          name: custom-tools\\n          subPath: helm\\n</code></pre>\\n<h2 id=\\\"byoi-build-your-own-image\\\"><a href=\\\"#byoi-build-your-own-image\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>BYOI (Build Your Own Image)</h2>\\n<p>Sometimes replacing a binary isn't sufficient and you need to install other dependencies. The\\nfollowing example builds an entirely customized repo-server from a Dockerfile, installing extra\\ndependencies that may be needed for generating manifests.</p>\\n<pre><code class=\\\"language-Dockerfile\\\">FROM argoproj/argocd:latest\\n\\n# Switch to root for the ability to perform install\\nUSER root\\n\\n# Install tools needed for your repo-server to retrieve &#x26; decrypt secrets, render manifests \\n# (e.g. curl, awscli, gpg, sops)\\nRUN apt-get update &#x26;&#x26; \\\\\\n    apt-get install -y \\\\\\n        curl \\\\\\n        awscli \\\\\\n        gpg &#x26;&#x26; \\\\\\n    apt-get clean &#x26;&#x26; \\\\\\n    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* &#x26;&#x26; \\\\\\n    curl -o /usr/local/bin/sops -L https://github.com/mozilla/sops/releases/download/3.2.0/sops-3.2.0.linux &#x26;&#x26; \\\\\\n    chmod +x /usr/local/bin/sops\\n\\n# Switch back to non-root user\\nUSER argocd\\n</code></pre>\",\"docPath\":\"argo-cd/docs/operator-manual/custom_tools\",\"proj\":\"argo-cd\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---docs-argo-cd-docs-operator-manual-custom-tools-html-9f45ef030e34bf0fdc61.js","module.exports = {\"pathContext\":{\"docHtml\":\"<h1 id=\\\"custom-tooling\\\"><a href=\\\"#custom-tooling\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Custom Tooling</h1>\\n<p>Argo CD bundles preferred versions of its supported templating tools (helm, kustomize, ks, jsonnet)\\nas part of its container images. Sometimes, it may be desired to use a specific version of a tool\\nother than what Argo CD bundles. Some reasons to do this might be:</p>\\n<ul>\\n<li>To upgrade/downgrade to a specific version of a tool due to bugs or bug fixes.</li>\\n<li>To install additional dependencies which to be used by kustomize's configmap/secret generators\\n(e.g. curl, vault, gpg, AWS CLI)</li>\\n<li>To install a <a href=\\\"../user-guide/application_sources.md#config-management-plugins\\\">config management plugin</a></li>\\n</ul>\\n<p>As the Argo CD repo-server is the single service responsible for generating Kubernetes manifests, it\\ncan be customized to use alternative toolchain required by your environment.</p>\\n<h2 id=\\\"adding-tools-via-volume-mounts\\\"><a href=\\\"#adding-tools-via-volume-mounts\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Adding Tools Via Volume Mounts</h2>\\n<p>The first technique is to use an <code>init</code> container and a <code>volumeMount</code> to copy a different verison of\\na tool into the repo-server container. In the following example, an init container is overwriting\\nthe helm binary with a different version than what is bundled in Argo CD:</p>\\n<pre><code class=\\\"language-yaml\\\">    spec:\\n      # 1. Define an emptyDir volume which will hold the custom binaries\\n      volumes:\\n      - name: custom-tools\\n        emptyDir: {}\\n      # 2. Use an init container to download/copy custom binaries into the emptyDir\\n      initContainers:\\n      - name: download-tools\\n        image: alpine:3.8\\n        command: [sh, -c]\\n        args:\\n        - wget -qO- https://storage.googleapis.com/kubernetes-helm/helm-v2.12.3-linux-amd64.tar.gz | tar -xvzf - &#x26;&#x26;\\n          mv linux-amd64/helm /custom-tools/\\n        volumeMounts:\\n        - mountPath: /custom-tools\\n          name: custom-tools\\n      # 3. Volume mount the custom binary to the bin directory (overriding the existing version)\\n      containers:\\n      - name: argocd-repo-server\\n        volumeMounts:\\n        - mountPath: /usr/local/bin/helm\\n          name: custom-tools\\n          subPath: helm\\n</code></pre>\\n<h2 id=\\\"byoi-build-your-own-image\\\"><a href=\\\"#byoi-build-your-own-image\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>BYOI (Build Your Own Image)</h2>\\n<p>Sometimes replacing a binary isn't sufficient and you need to install other dependencies. The\\nfollowing example builds an entirely customized repo-server from a Dockerfile, installing extra\\ndependencies that may be needed for generating manifests.</p>\\n<pre><code class=\\\"language-Dockerfile\\\">FROM argoproj/argocd:latest\\n\\n# Switch to root for the ability to perform install\\nUSER root\\n\\n# Install tools needed for your repo-server to retrieve &#x26; decrypt secrets, render manifests \\n# (e.g. curl, awscli, gpg, sops)\\nRUN apt-get update &#x26;&#x26; \\\\\\n    apt-get install -y \\\\\\n        curl \\\\\\n        awscli \\\\\\n        gpg &#x26;&#x26; \\\\\\n    apt-get clean &#x26;&#x26; \\\\\\n    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* &#x26;&#x26; \\\\\\n    curl -o /usr/local/bin/sops -L https://github.com/mozilla/sops/releases/download/3.2.0/sops-3.2.0.linux &#x26;&#x26; \\\\\\n    chmod +x /usr/local/bin/sops\\n\\n# Switch back to non-root user\\nUSER argocd\\n</code></pre>\",\"docPath\":\"argo-cd/docs/operator-manual/custom_tools\",\"proj\":\"argo-cd\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/docs-argo-cd-docs-operator-manual-custom-tools-html.json\n// module id = 559\n// module chunks = 43919806109780"],"sourceRoot":""}