{"version":3,"sources":["webpack:///path---docs-argo-ci-node-modules-superagent-node-modules-async-changelog-html-99d7a5c308a4b59ba040.js","webpack:///./.cache/json/docs-argo-ci-node-modules-superagent-node-modules-async-changelog-html.json"],"names":["webpackJsonp","3212","module","exports","pathContext","docHtml","docPath","proj"],"mappings":"AAAAA,cAAc,iBAERC,KACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,aAAeC,QAAA,6kOAAAC,QAAA,+DAAAC,KAAA","file":"path---docs-argo-ci-node-modules-superagent-node-modules-async-changelog-html-99d7a5c308a4b59ba040.js","sourcesContent":["webpackJsonp([217306684104874],{\n\n/***/ 3212:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"pathContext\":{\"docHtml\":\"<h1>v1.5.2</h1>\\n<ul>\\n<li>Allow using <code>\\\"consructor\\\"</code> as an argument in <code>memoize</code> (#998)</li>\\n<li>Give a better error messsage when <code>auto</code> dependency checking fails (#994)</li>\\n<li>Various doc updates (#936, #956, #979, #1002)</li>\\n</ul>\\n<h1>v1.5.1</h1>\\n<ul>\\n<li>Fix issue with <code>pause</code> in <code>queue</code> with concurrency enabled (#946)</li>\\n<li><code>while</code> and <code>until</code> now pass the final result to callback (#963)</li>\\n<li><code>auto</code> will properly handle concurrency when there is no callback (#966)</li>\\n<li><code>auto</code> will now  properly stop execution when an error occurs (#988, #993)</li>\\n<li>Various doc fixes (#971, #980)</li>\\n</ul>\\n<h1>v1.5.0</h1>\\n<ul>\\n<li>Added <code>transform</code>, analogous to <a href=\\\"http://lodash.com/docs#transform\\\"><code>_.transform</code></a> (#892)</li>\\n<li><code>map</code> now returns an object when an object is passed in, rather than array with non-numeric keys. <code>map</code> will begin always returning an array with numeric indexes in the next major release. (#873)</li>\\n<li><code>auto</code> now accepts an optional <code>concurrency</code> argument to limit the number of  running tasks (#637)</li>\\n<li>Added <code>queue#workersList()</code>, to retrieve the list  of currently running tasks. (#891)</li>\\n<li>Various code simplifications (#896, #904)</li>\\n<li>Various doc fixes :scroll: (#890, #894, #903, #905, #912)</li>\\n</ul>\\n<h1>v1.4.2</h1>\\n<ul>\\n<li>Ensure coverage files don't get published on npm (#879)</li>\\n</ul>\\n<h1>v1.4.1</h1>\\n<ul>\\n<li>Add in overlooked <code>detectLimit</code> method (#866)</li>\\n<li>Removed unnecessary files from npm releases (#861)</li>\\n<li>Removed usage of a reserved word to prevent :boom: in older environments (#870)</li>\\n</ul>\\n<h1>v1.4.0</h1>\\n<ul>\\n<li><code>asyncify</code> now supports promises (#840)</li>\\n<li>Added <code>Limit</code> versions of <code>filter</code> and <code>reject</code> (#836)</li>\\n<li>Add <code>Limit</code> versions of <code>detect</code>, <code>some</code> and <code>every</code> (#828, #829)</li>\\n<li><code>some</code>, <code>every</code> and <code>detect</code> now short circuit early (#828, #829)</li>\\n<li>Improve detection of the global object (#804), enabling use in WebWorkers</li>\\n<li><code>whilst</code> now called with arguments from iterator (#823)</li>\\n<li><code>during</code> now gets called with arguments from iterator (#824)</li>\\n<li>Code simplifications and optimizations aplenty (<a href=\\\"https://github.com/caolan/async/compare/v1.3.0...v1.4.0\\\">diff</a>)</li>\\n</ul>\\n<h1>v1.3.0</h1>\\n<p>New Features:</p>\\n<ul>\\n<li>Added <code>constant</code></li>\\n<li>Added <code>asyncify</code>/<code>wrapSync</code> for making sync functions work with callbacks. (#671, #806)</li>\\n<li>Added <code>during</code> and <code>doDuring</code>, which are like <code>whilst</code> with an async truth test. (#800)</li>\\n<li><code>retry</code> now accepts an <code>interval</code> parameter to specify a delay between retries. (#793)</li>\\n<li><code>async</code> should work better in Web Workers due to better <code>root</code> detection (#804)</li>\\n<li>Callbacks are now optional in <code>whilst</code>, <code>doWhilst</code>, <code>until</code>, and <code>doUntil</code> (#642)</li>\\n<li>Various internal updates (#786, #801, #802, #803)</li>\\n<li>Various doc fixes (#790, #794)</li>\\n</ul>\\n<p>Bug Fixes:</p>\\n<ul>\\n<li><code>cargo</code> now exposes the <code>payload</code> size, and <code>cargo.payload</code> can be changed on the fly after the <code>cargo</code> is created. (#740, #744, #783)</li>\\n</ul>\\n<h1>v1.2.1</h1>\\n<p>Bug Fix:</p>\\n<ul>\\n<li>Small regression with synchronous iterator behavior in <code>eachSeries</code> with a 1-element array.  Before 1.1.0, <code>eachSeries</code>'s callback was called on the same tick, which this patch restores.  In 2.0.0, it will be called on the next tick.  (#782)</li>\\n</ul>\\n<h1>v1.2.0</h1>\\n<p>New Features:</p>\\n<ul>\\n<li>Added <code>timesLimit</code> (#743)</li>\\n<li><code>concurrency</code> can be changed after initialization in <code>queue</code> by setting <code>q.concurrency</code>.  The new concurrency will be reflected the next time a task is processed. (#747, #772)</li>\\n</ul>\\n<p>Bug Fixes:</p>\\n<ul>\\n<li>Fixed a regression in <code>each</code> and family with empty arrays that have additional properties. (#775, #777)</li>\\n</ul>\\n<h1>v1.1.1</h1>\\n<p>Bug Fix:</p>\\n<ul>\\n<li>Small regression with synchronous iterator behavior in <code>eachSeries</code> with a 1-element array.  Before 1.1.0, <code>eachSeries</code>'s callback was called on the same tick, which this patch restores.  In 2.0.0, it will be called on the next tick.  (#782) </li>\\n</ul>\\n<h1>v1.1.0</h1>\\n<p>New Features:</p>\\n<ul>\\n<li><code>cargo</code> now supports all of the same methods and event callbacks as <code>queue</code>.</li>\\n<li>Added <code>ensureAsync</code> - A wrapper that ensures an async function calls its callback on a later tick. (#769)</li>\\n<li>Optimized <code>map</code>, <code>eachOf</code>, and <code>waterfall</code> families of functions</li>\\n<li>Passing a <code>null</code> or <code>undefined</code> array to <code>map</code>, <code>each</code>, <code>parallel</code> and families will be treated as an empty array (#667).</li>\\n<li>The callback is now optional for the composed results of <code>compose</code> and <code>seq</code>. (#618)</li>\\n<li>Reduced file size by 4kb, (minified version by 1kb) </li>\\n<li>Added code coverage through <code>nyc</code> and <code>coveralls</code> (#768)</li>\\n</ul>\\n<p>Bug Fixes:</p>\\n<ul>\\n<li><code>forever</code> will no longer stack overflow with a synchronous iterator (#622)</li>\\n<li><code>eachLimit</code> and other limit functions will stop iterating once an error occurs (#754)</li>\\n<li>Always pass <code>null</code> in callbacks when there is no error (#439)</li>\\n<li>Ensure proper conditions when calling <code>drain()</code> after pushing an empty data set to a queue (#668)</li>\\n<li><code>each</code> and family will properly handle an empty array (#578)</li>\\n<li><code>eachSeries</code> and family will finish if the underlying array is modified during execution (#557)</li>\\n<li><code>queue</code> will throw if a non-function is passed to <code>q.push()</code> (#593)</li>\\n<li>Doc fixes (#629, #766)</li>\\n</ul>\\n<h1>v1.0.0</h1>\\n<p>No known breaking changes, we are simply complying with semver from here on out.</p>\\n<p>Changes:</p>\\n<ul>\\n<li>Start using a changelog!</li>\\n<li>Add <code>forEachOf</code> for iterating over Objects (or to iterate Arrays with indexes available) (#168 #704 #321)</li>\\n<li>Detect deadlocks in <code>auto</code> (#663)</li>\\n<li>Better support for require.js (#527)</li>\\n<li>Throw if queue created with concurrency <code>0</code> (#714)</li>\\n<li>Fix unneeded iteration in <code>queue.resume()</code> (#758)</li>\\n<li>Guard against timer mocking overriding <code>setImmediate</code> (#609 #611)</li>\\n<li>Miscellaneous doc fixes (#542 #596 #615 #628 #631 #690 #729)</li>\\n<li>Use single noop function internally (#546)</li>\\n<li>Optimize internal <code>_each</code>, <code>_map</code> and <code>_keys</code> functions.</li>\\n</ul>\",\"docPath\":\"argo-ci/node_modules/superagent/node_modules/async/changelog\",\"proj\":\"argo-ci\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---docs-argo-ci-node-modules-superagent-node-modules-async-changelog-html-99d7a5c308a4b59ba040.js","module.exports = {\"pathContext\":{\"docHtml\":\"<h1>v1.5.2</h1>\\n<ul>\\n<li>Allow using <code>\\\"consructor\\\"</code> as an argument in <code>memoize</code> (#998)</li>\\n<li>Give a better error messsage when <code>auto</code> dependency checking fails (#994)</li>\\n<li>Various doc updates (#936, #956, #979, #1002)</li>\\n</ul>\\n<h1>v1.5.1</h1>\\n<ul>\\n<li>Fix issue with <code>pause</code> in <code>queue</code> with concurrency enabled (#946)</li>\\n<li><code>while</code> and <code>until</code> now pass the final result to callback (#963)</li>\\n<li><code>auto</code> will properly handle concurrency when there is no callback (#966)</li>\\n<li><code>auto</code> will now  properly stop execution when an error occurs (#988, #993)</li>\\n<li>Various doc fixes (#971, #980)</li>\\n</ul>\\n<h1>v1.5.0</h1>\\n<ul>\\n<li>Added <code>transform</code>, analogous to <a href=\\\"http://lodash.com/docs#transform\\\"><code>_.transform</code></a> (#892)</li>\\n<li><code>map</code> now returns an object when an object is passed in, rather than array with non-numeric keys. <code>map</code> will begin always returning an array with numeric indexes in the next major release. (#873)</li>\\n<li><code>auto</code> now accepts an optional <code>concurrency</code> argument to limit the number of  running tasks (#637)</li>\\n<li>Added <code>queue#workersList()</code>, to retrieve the list  of currently running tasks. (#891)</li>\\n<li>Various code simplifications (#896, #904)</li>\\n<li>Various doc fixes :scroll: (#890, #894, #903, #905, #912)</li>\\n</ul>\\n<h1>v1.4.2</h1>\\n<ul>\\n<li>Ensure coverage files don't get published on npm (#879)</li>\\n</ul>\\n<h1>v1.4.1</h1>\\n<ul>\\n<li>Add in overlooked <code>detectLimit</code> method (#866)</li>\\n<li>Removed unnecessary files from npm releases (#861)</li>\\n<li>Removed usage of a reserved word to prevent :boom: in older environments (#870)</li>\\n</ul>\\n<h1>v1.4.0</h1>\\n<ul>\\n<li><code>asyncify</code> now supports promises (#840)</li>\\n<li>Added <code>Limit</code> versions of <code>filter</code> and <code>reject</code> (#836)</li>\\n<li>Add <code>Limit</code> versions of <code>detect</code>, <code>some</code> and <code>every</code> (#828, #829)</li>\\n<li><code>some</code>, <code>every</code> and <code>detect</code> now short circuit early (#828, #829)</li>\\n<li>Improve detection of the global object (#804), enabling use in WebWorkers</li>\\n<li><code>whilst</code> now called with arguments from iterator (#823)</li>\\n<li><code>during</code> now gets called with arguments from iterator (#824)</li>\\n<li>Code simplifications and optimizations aplenty (<a href=\\\"https://github.com/caolan/async/compare/v1.3.0...v1.4.0\\\">diff</a>)</li>\\n</ul>\\n<h1>v1.3.0</h1>\\n<p>New Features:</p>\\n<ul>\\n<li>Added <code>constant</code></li>\\n<li>Added <code>asyncify</code>/<code>wrapSync</code> for making sync functions work with callbacks. (#671, #806)</li>\\n<li>Added <code>during</code> and <code>doDuring</code>, which are like <code>whilst</code> with an async truth test. (#800)</li>\\n<li><code>retry</code> now accepts an <code>interval</code> parameter to specify a delay between retries. (#793)</li>\\n<li><code>async</code> should work better in Web Workers due to better <code>root</code> detection (#804)</li>\\n<li>Callbacks are now optional in <code>whilst</code>, <code>doWhilst</code>, <code>until</code>, and <code>doUntil</code> (#642)</li>\\n<li>Various internal updates (#786, #801, #802, #803)</li>\\n<li>Various doc fixes (#790, #794)</li>\\n</ul>\\n<p>Bug Fixes:</p>\\n<ul>\\n<li><code>cargo</code> now exposes the <code>payload</code> size, and <code>cargo.payload</code> can be changed on the fly after the <code>cargo</code> is created. (#740, #744, #783)</li>\\n</ul>\\n<h1>v1.2.1</h1>\\n<p>Bug Fix:</p>\\n<ul>\\n<li>Small regression with synchronous iterator behavior in <code>eachSeries</code> with a 1-element array.  Before 1.1.0, <code>eachSeries</code>'s callback was called on the same tick, which this patch restores.  In 2.0.0, it will be called on the next tick.  (#782)</li>\\n</ul>\\n<h1>v1.2.0</h1>\\n<p>New Features:</p>\\n<ul>\\n<li>Added <code>timesLimit</code> (#743)</li>\\n<li><code>concurrency</code> can be changed after initialization in <code>queue</code> by setting <code>q.concurrency</code>.  The new concurrency will be reflected the next time a task is processed. (#747, #772)</li>\\n</ul>\\n<p>Bug Fixes:</p>\\n<ul>\\n<li>Fixed a regression in <code>each</code> and family with empty arrays that have additional properties. (#775, #777)</li>\\n</ul>\\n<h1>v1.1.1</h1>\\n<p>Bug Fix:</p>\\n<ul>\\n<li>Small regression with synchronous iterator behavior in <code>eachSeries</code> with a 1-element array.  Before 1.1.0, <code>eachSeries</code>'s callback was called on the same tick, which this patch restores.  In 2.0.0, it will be called on the next tick.  (#782) </li>\\n</ul>\\n<h1>v1.1.0</h1>\\n<p>New Features:</p>\\n<ul>\\n<li><code>cargo</code> now supports all of the same methods and event callbacks as <code>queue</code>.</li>\\n<li>Added <code>ensureAsync</code> - A wrapper that ensures an async function calls its callback on a later tick. (#769)</li>\\n<li>Optimized <code>map</code>, <code>eachOf</code>, and <code>waterfall</code> families of functions</li>\\n<li>Passing a <code>null</code> or <code>undefined</code> array to <code>map</code>, <code>each</code>, <code>parallel</code> and families will be treated as an empty array (#667).</li>\\n<li>The callback is now optional for the composed results of <code>compose</code> and <code>seq</code>. (#618)</li>\\n<li>Reduced file size by 4kb, (minified version by 1kb) </li>\\n<li>Added code coverage through <code>nyc</code> and <code>coveralls</code> (#768)</li>\\n</ul>\\n<p>Bug Fixes:</p>\\n<ul>\\n<li><code>forever</code> will no longer stack overflow with a synchronous iterator (#622)</li>\\n<li><code>eachLimit</code> and other limit functions will stop iterating once an error occurs (#754)</li>\\n<li>Always pass <code>null</code> in callbacks when there is no error (#439)</li>\\n<li>Ensure proper conditions when calling <code>drain()</code> after pushing an empty data set to a queue (#668)</li>\\n<li><code>each</code> and family will properly handle an empty array (#578)</li>\\n<li><code>eachSeries</code> and family will finish if the underlying array is modified during execution (#557)</li>\\n<li><code>queue</code> will throw if a non-function is passed to <code>q.push()</code> (#593)</li>\\n<li>Doc fixes (#629, #766)</li>\\n</ul>\\n<h1>v1.0.0</h1>\\n<p>No known breaking changes, we are simply complying with semver from here on out.</p>\\n<p>Changes:</p>\\n<ul>\\n<li>Start using a changelog!</li>\\n<li>Add <code>forEachOf</code> for iterating over Objects (or to iterate Arrays with indexes available) (#168 #704 #321)</li>\\n<li>Detect deadlocks in <code>auto</code> (#663)</li>\\n<li>Better support for require.js (#527)</li>\\n<li>Throw if queue created with concurrency <code>0</code> (#714)</li>\\n<li>Fix unneeded iteration in <code>queue.resume()</code> (#758)</li>\\n<li>Guard against timer mocking overriding <code>setImmediate</code> (#609 #611)</li>\\n<li>Miscellaneous doc fixes (#542 #596 #615 #628 #631 #690 #729)</li>\\n<li>Use single noop function internally (#546)</li>\\n<li>Optimize internal <code>_each</code>, <code>_map</code> and <code>_keys</code> functions.</li>\\n</ul>\",\"docPath\":\"argo-ci/node_modules/superagent/node_modules/async/changelog\",\"proj\":\"argo-ci\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/docs-argo-ci-node-modules-superagent-node-modules-async-changelog-html.json\n// module id = 3212\n// module chunks = 217306684104874"],"sourceRoot":""}