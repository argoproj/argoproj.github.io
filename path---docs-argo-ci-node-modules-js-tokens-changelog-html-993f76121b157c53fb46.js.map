{"version":3,"sources":["webpack:///path---docs-argo-ci-node-modules-js-tokens-changelog-html-993f76121b157c53fb46.js","webpack:///./.cache/json/docs-argo-ci-node-modules-js-tokens-changelog-html.json"],"names":["webpackJsonp","2790","module","exports","pathContext","docHtml","docPath","proj"],"mappings":"AAAAA,cAAc,iBAERC,KACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,aAAeC,QAAA,64IAA6kHC,QAAA,2CAAAC,KAAA","file":"path---docs-argo-ci-node-modules-js-tokens-changelog-html-993f76121b157c53fb46.js","sourcesContent":["webpackJsonp([245507704501563],{\n\n/***/ 2790:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"pathContext\":{\"docHtml\":\"<h3>Version 3.0.2 (2017-06-28)</h3>\\n<ul>\\n<li>No code changes. Just updates to the readme.</li>\\n</ul>\\n<h3>Version 3.0.1 (2017-01-30)</h3>\\n<ul>\\n<li>Fixed: ES2015 unicode escapes with more than 6 hex digits are now matched\\ncorrectly.</li>\\n</ul>\\n<h3>Version 3.0.0 (2017-01-11)</h3>\\n<p>This release contains one breaking change, that should <a href=\\\"http://v8project.blogspot.se/2017/01/speeding-up-v8-regular-expressions.html\\\">improve performance in\\nV8</a>:</p>\\n<blockquote>\\n<p>So how can you, as a JavaScript developer, ensure that your RegExps are fast?\\nIf you are not interested in hooking into RegExp internals, make sure that\\nneither the RegExp instance, nor its prototype is modified in order to get the\\nbest performance:</p>\\n<pre><code class=\\\"language-js\\\">var re = /./g;\\nre.exec('');  // Fast path.\\nre.new_property = 'slow';\\n</code></pre>\\n</blockquote>\\n<p>This module used to export a single regex, with <code>.matchToToken</code> bolted\\non, just like in the above example. This release changes the exports of\\nthe module to avoid this issue.</p>\\n<p>Before:</p>\\n<pre><code class=\\\"language-js\\\">import jsTokens from \\\"js-tokens\\\"\\n// or:\\nvar jsTokens = require(\\\"js-tokens\\\")\\nvar matchToToken = jsTokens.matchToToken\\n</code></pre>\\n<p>After:</p>\\n<pre><code class=\\\"language-js\\\">import jsTokens, {matchToToken} from \\\"js-tokens\\\"\\n// or:\\nvar jsTokens = require(\\\"js-tokens\\\").default\\nvar matchToToken = require(\\\"js-tokens\\\").matchToToken\\n</code></pre>\\n<h3>Version 2.0.0 (2016-06-19)</h3>\\n<ul>\\n<li>Added: Support for ES2016. In other words, support for the <code>**</code> exponentiation\\noperator.</li>\\n</ul>\\n<p>These are the breaking changes:</p>\\n<ul>\\n<li><code>'**'.match(jsTokens)</code> no longer returns <code>['*', '*']</code>, but <code>['**']</code>.</li>\\n<li><code>'**='.match(jsTokens)</code> no longer returns <code>['*', '*=']</code>, but <code>['**=']</code>.</li>\\n</ul>\\n<h3>Version 1.0.3 (2016-03-27)</h3>\\n<ul>\\n<li>Improved: Made the regex ever so slightly smaller.</li>\\n<li>Updated: The readme.</li>\\n</ul>\\n<h3>Version 1.0.2 (2015-10-18)</h3>\\n<ul>\\n<li>Improved: Limited npm package contents for a smaller download. Thanks to\\n@zertosh!</li>\\n</ul>\\n<h3>Version 1.0.1 (2015-06-20)</h3>\\n<ul>\\n<li>Fixed: Declared an undeclared variable.</li>\\n</ul>\\n<h3>Version 1.0.0 (2015-02-26)</h3>\\n<ul>\\n<li>Changed: Merged the 'operator' and 'punctuation' types into 'punctuator'. That\\ntype is now equivalent to the Punctuator token in the ECMAScript\\nspecification. (Backwards-incompatible change.)</li>\\n<li>Fixed: A <code>-</code> followed by a number is now correctly matched as a punctuator\\nfollowed by a number. It used to be matched as just a number, but there is no\\nsuch thing as negative number literals. (Possibly backwards-incompatible\\nchange.)</li>\\n</ul>\\n<h3>Version 0.4.1 (2015-02-21)</h3>\\n<ul>\\n<li>Added: Support for the regex <code>u</code> flag.</li>\\n</ul>\\n<h3>Version 0.4.0 (2015-02-21)</h3>\\n<ul>\\n<li>Improved: <code>jsTokens.matchToToken</code> performance.</li>\\n<li>Added: Support for octal and binary number literals.</li>\\n<li>Added: Support for template strings.</li>\\n</ul>\\n<h3>Version 0.3.1 (2015-01-06)</h3>\\n<ul>\\n<li>Fixed: Support for unicode spaces. They used to be allowed in names (which is\\nvery confusing), and some unicode newlines were wrongly allowed in strings and\\nregexes.</li>\\n</ul>\\n<h3>Version 0.3.0 (2014-12-19)</h3>\\n<ul>\\n<li>Changed: The <code>jsTokens.names</code> array has been replaced with the\\n<code>jsTokens.matchToToken</code> function. The capturing groups of <code>jsTokens</code> are no\\nlonger part of the public API; instead use said function. See this <a href=\\\"https://gist.github.com/lydell/be49dbf80c382c473004\\\">gist</a> for\\nan example. (Backwards-incompatible change.)</li>\\n<li>Changed: The empty string is now considered an “invalid” token, instead an\\n“empty” token (its own group). (Backwards-incompatible change.)</li>\\n<li>Removed: component support. (Backwards-incompatible change.)</li>\\n</ul>\\n<h3>Version 0.2.0 (2014-06-19)</h3>\\n<ul>\\n<li>Changed: Match ES6 function arrows (<code>=></code>) as an operator, instead of its own\\ncategory (“functionArrow”), for simplicity. (Backwards-incompatible change.)</li>\\n<li>Added: ES6 splats (<code>...</code>) are now matched as an operator (instead of three\\npunctuations). (Backwards-incompatible change.)</li>\\n</ul>\\n<h3>Version 0.1.0 (2014-03-08)</h3>\\n<ul>\\n<li>Initial release.</li>\\n</ul>\",\"docPath\":\"argo-ci/node_modules/js-tokens/changelog\",\"proj\":\"argo-ci\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---docs-argo-ci-node-modules-js-tokens-changelog-html-993f76121b157c53fb46.js","module.exports = {\"pathContext\":{\"docHtml\":\"<h3>Version 3.0.2 (2017-06-28)</h3>\\n<ul>\\n<li>No code changes. Just updates to the readme.</li>\\n</ul>\\n<h3>Version 3.0.1 (2017-01-30)</h3>\\n<ul>\\n<li>Fixed: ES2015 unicode escapes with more than 6 hex digits are now matched\\ncorrectly.</li>\\n</ul>\\n<h3>Version 3.0.0 (2017-01-11)</h3>\\n<p>This release contains one breaking change, that should <a href=\\\"http://v8project.blogspot.se/2017/01/speeding-up-v8-regular-expressions.html\\\">improve performance in\\nV8</a>:</p>\\n<blockquote>\\n<p>So how can you, as a JavaScript developer, ensure that your RegExps are fast?\\nIf you are not interested in hooking into RegExp internals, make sure that\\nneither the RegExp instance, nor its prototype is modified in order to get the\\nbest performance:</p>\\n<pre><code class=\\\"language-js\\\">var re = /./g;\\nre.exec('');  // Fast path.\\nre.new_property = 'slow';\\n</code></pre>\\n</blockquote>\\n<p>This module used to export a single regex, with <code>.matchToToken</code> bolted\\non, just like in the above example. This release changes the exports of\\nthe module to avoid this issue.</p>\\n<p>Before:</p>\\n<pre><code class=\\\"language-js\\\">import jsTokens from \\\"js-tokens\\\"\\n// or:\\nvar jsTokens = require(\\\"js-tokens\\\")\\nvar matchToToken = jsTokens.matchToToken\\n</code></pre>\\n<p>After:</p>\\n<pre><code class=\\\"language-js\\\">import jsTokens, {matchToToken} from \\\"js-tokens\\\"\\n// or:\\nvar jsTokens = require(\\\"js-tokens\\\").default\\nvar matchToToken = require(\\\"js-tokens\\\").matchToToken\\n</code></pre>\\n<h3>Version 2.0.0 (2016-06-19)</h3>\\n<ul>\\n<li>Added: Support for ES2016. In other words, support for the <code>**</code> exponentiation\\noperator.</li>\\n</ul>\\n<p>These are the breaking changes:</p>\\n<ul>\\n<li><code>'**'.match(jsTokens)</code> no longer returns <code>['*', '*']</code>, but <code>['**']</code>.</li>\\n<li><code>'**='.match(jsTokens)</code> no longer returns <code>['*', '*=']</code>, but <code>['**=']</code>.</li>\\n</ul>\\n<h3>Version 1.0.3 (2016-03-27)</h3>\\n<ul>\\n<li>Improved: Made the regex ever so slightly smaller.</li>\\n<li>Updated: The readme.</li>\\n</ul>\\n<h3>Version 1.0.2 (2015-10-18)</h3>\\n<ul>\\n<li>Improved: Limited npm package contents for a smaller download. Thanks to\\n@zertosh!</li>\\n</ul>\\n<h3>Version 1.0.1 (2015-06-20)</h3>\\n<ul>\\n<li>Fixed: Declared an undeclared variable.</li>\\n</ul>\\n<h3>Version 1.0.0 (2015-02-26)</h3>\\n<ul>\\n<li>Changed: Merged the 'operator' and 'punctuation' types into 'punctuator'. That\\ntype is now equivalent to the Punctuator token in the ECMAScript\\nspecification. (Backwards-incompatible change.)</li>\\n<li>Fixed: A <code>-</code> followed by a number is now correctly matched as a punctuator\\nfollowed by a number. It used to be matched as just a number, but there is no\\nsuch thing as negative number literals. (Possibly backwards-incompatible\\nchange.)</li>\\n</ul>\\n<h3>Version 0.4.1 (2015-02-21)</h3>\\n<ul>\\n<li>Added: Support for the regex <code>u</code> flag.</li>\\n</ul>\\n<h3>Version 0.4.0 (2015-02-21)</h3>\\n<ul>\\n<li>Improved: <code>jsTokens.matchToToken</code> performance.</li>\\n<li>Added: Support for octal and binary number literals.</li>\\n<li>Added: Support for template strings.</li>\\n</ul>\\n<h3>Version 0.3.1 (2015-01-06)</h3>\\n<ul>\\n<li>Fixed: Support for unicode spaces. They used to be allowed in names (which is\\nvery confusing), and some unicode newlines were wrongly allowed in strings and\\nregexes.</li>\\n</ul>\\n<h3>Version 0.3.0 (2014-12-19)</h3>\\n<ul>\\n<li>Changed: The <code>jsTokens.names</code> array has been replaced with the\\n<code>jsTokens.matchToToken</code> function. The capturing groups of <code>jsTokens</code> are no\\nlonger part of the public API; instead use said function. See this <a href=\\\"https://gist.github.com/lydell/be49dbf80c382c473004\\\">gist</a> for\\nan example. (Backwards-incompatible change.)</li>\\n<li>Changed: The empty string is now considered an “invalid” token, instead an\\n“empty” token (its own group). (Backwards-incompatible change.)</li>\\n<li>Removed: component support. (Backwards-incompatible change.)</li>\\n</ul>\\n<h3>Version 0.2.0 (2014-06-19)</h3>\\n<ul>\\n<li>Changed: Match ES6 function arrows (<code>=></code>) as an operator, instead of its own\\ncategory (“functionArrow”), for simplicity. (Backwards-incompatible change.)</li>\\n<li>Added: ES6 splats (<code>...</code>) are now matched as an operator (instead of three\\npunctuations). (Backwards-incompatible change.)</li>\\n</ul>\\n<h3>Version 0.1.0 (2014-03-08)</h3>\\n<ul>\\n<li>Initial release.</li>\\n</ul>\",\"docPath\":\"argo-ci/node_modules/js-tokens/changelog\",\"proj\":\"argo-ci\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/docs-argo-ci-node-modules-js-tokens-changelog-html.json\n// module id = 2790\n// module chunks = 245507704501563"],"sourceRoot":""}