webpackJsonp([0x75994f8cd9ff],{2275:function(e,o){e.exports={pathContext:{docHtml:'<h1>ES6-Promise (subset of <a href="https://github.com/tildeio/rsvp.js">rsvp.js</a>) <a href="https://travis-ci.org/stefanpenner/es6-promise"><img src="https://travis-ci.org/stefanpenner/es6-promise.svg?branch=master" alt="Build Status"></a></h1>\n<p>This is a polyfill of the <a href="http://people.mozilla.org/~jorendorff/es6-draft.html#sec-promise-constructor">ES6 Promise</a>. The implementation is a subset of <a href="https://github.com/tildeio/rsvp.js">rsvp.js</a> extracted by @jakearchibald, if you\'re wanting extra features and more debugging options, check out the <a href="https://github.com/tildeio/rsvp.js">full library</a>.</p>\n<p>For API details and how to use promises, see the <a href="http://www.html5rocks.com/en/tutorials/es6/promises/">JavaScript Promises HTML5Rocks article</a>.</p>\n<h2>Downloads</h2>\n<ul>\n<li><a href="https://raw.githubusercontent.com/stefanpenner/es6-promise/master/dist/es6-promise.js">es6-promise 27.86 KB (7.33 KB gzipped)</a></li>\n<li><a href="https://raw.githubusercontent.com/stefanpenner/es6-promise/master/dist/es6-promise.min.js">es6-promise-min 6.17 KB (2.4 KB gzipped)</a></li>\n</ul>\n<h2>Node.js</h2>\n<p>To install:</p>\n<pre><code class="language-sh">npm install es6-promise\n</code></pre>\n<p>To use:</p>\n<pre><code class="language-js">var Promise = require(\'es6-promise\').Promise;\n</code></pre>\n<h2>Bower</h2>\n<p>To install:</p>\n<pre><code class="language-sh">bower install es6-promise --save\n</code></pre>\n<h2>Usage in IE&#x3C;9</h2>\n<p><code>catch</code> is a reserved word in IE&#x3C;9, meaning <code>promise.catch(func)</code> throws a syntax error. To work around this, you can use a string to access the property as shown in the following example.</p>\n<p>However, please remember that such technique is already provided by most common minifiers, making the resulting code safe for old browsers and production:</p>\n<pre><code class="language-js">promise[\'catch\'](function(err) {\n  // ...\n});\n</code></pre>\n<p>Or use <code>.then</code> instead:</p>\n<pre><code class="language-js">promise.then(undefined, function(err) {\n  // ...\n});\n</code></pre>\n<h2>Auto-polyfill</h2>\n<p>To polyfill the global environment (either in Node or in the browser via CommonJS) use the following code snippet:</p>\n<pre><code class="language-js">require(\'es6-promise\').polyfill();\n</code></pre>\n<p>Notice that we don\'t assign the result of <code>polyfill()</code> to any variable. The <code>polyfill()</code> method will patch the global environment (in this case to the <code>Promise</code> name) when called.</p>\n<h2>Building &#x26; Testing</h2>\n<p>You will need to have PhantomJS installed globally in order to run the tests.</p>\n<p><code>npm install -g phantomjs</code></p>\n<ul>\n<li><code>npm run build</code> to build</li>\n<li><code>npm test</code> to run tests</li>\n<li><code>npm start</code> to run a build watcher, and webserver to test</li>\n<li><code>npm run test:server</code> for a testem test runner and watching builder</li>\n</ul>',docPath:"argo-ci/node_modules/es6-promise/readme",proj:"argo-ci"}}}});
//# sourceMappingURL=path---docs-argo-ci-node-modules-es-6-promise-2fb9398dea8920782146.js.map