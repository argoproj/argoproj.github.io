webpackJsonp([0x858c17ca9b74],{2127:function(t,n){t.exports={pathContext:{docHtml:'<h1>Bytes utility</h1>\n<p><a href="https://npmjs.org/package/bytes"><img src="https://img.shields.io/npm/v/bytes.svg" alt="NPM Version"></a>\n<a href="https://npmjs.org/package/bytes"><img src="https://img.shields.io/npm/dm/bytes.svg" alt="NPM Downloads"></a>\n<a href="https://travis-ci.org/visionmedia/bytes.js"><img src="https://img.shields.io/travis/visionmedia/bytes.js/master.svg" alt="Build Status"></a>\n<a href="https://coveralls.io/r/visionmedia/bytes.js?branch=master"><img src="https://img.shields.io/coveralls/visionmedia/bytes.js/master.svg" alt="Test Coverage"></a></p>\n<p>Utility to parse a string bytes (ex: <code>1TB</code>) to bytes (<code>1099511627776</code>) and vice-versa.</p>\n<h2>Installation</h2>\n<p>This is a <a href="https://nodejs.org/en/">Node.js</a> module available through the\n<a href="https://www.npmjs.com/">npm registry</a>. Installation is done using the\n<a href="https://docs.npmjs.com/getting-started/installing-npm-packages-locally"><code>npm install</code> command</a>:</p>\n<pre><code class="language-bash">$ npm install bytes\n</code></pre>\n<h2>Usage</h2>\n<pre><code class="language-js">var bytes = require(\'bytes\');\n</code></pre>\n<h4>bytes.format(number value, [options]): string｜null</h4>\n<p>Format the given value in bytes into a string. If the value is negative, it is kept as such. If it is a float, it is\nrounded.</p>\n<p><strong>Arguments</strong></p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>value</td>\n<td><code>number</code></td>\n<td>Value in bytes</td>\n</tr>\n<tr>\n<td>options</td>\n<td><code>Object</code></td>\n<td>Conversion options</td>\n</tr>\n</tbody>\n</table>\n<p><strong>Options</strong></p>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>decimalPlaces</td>\n<td><code>number</code>\n｜\n<code>null</code></td>\n<td>Maximum number of decimal places to include in output. Default value to \n<code>2</code>\n.</td>\n</tr>\n<tr>\n<td>fixedDecimals</td>\n<td><code>boolean</code>\n｜\n<code>null</code></td>\n<td>Whether to always display the maximum number of decimal places. Default value to \n<code>false</code></td>\n</tr>\n<tr>\n<td>thousandsSeparator</td>\n<td><code>string</code>\n｜\n<code>null</code></td>\n<td>Example of values: \n<code>\' \'</code>\n, \n<code>\',\'</code>\n and \n<code>.</code>\n... Default value to \n<code>\'\'</code>\n.</td>\n</tr>\n<tr>\n<td>unit</td>\n<td><code>string</code>\n｜\n<code>null</code></td>\n<td>The unit in which the result will be returned (B/KB/MB/GB/TB). Default value to \n<code>\'\'</code>\n (which means auto detect).</td>\n</tr>\n<tr>\n<td>unitSeparator</td>\n<td><code>string</code>\n｜\n<code>null</code></td>\n<td>Separator to use between number and unit. Default value to \n<code>\'\'</code>\n.</td>\n</tr>\n</tbody>\n</table>\n<p><strong>Returns</strong></p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>results</td>\n<td><code>string</code>\n｜\n<code>null</code></td>\n<td>Return null upon error. String value otherwise.</td>\n</tr>\n</tbody>\n</table>\n<p><strong>Example</strong></p>\n<pre><code class="language-js">bytes(1024);\n// output: \'1KB\'\n\nbytes(1000);\n// output: \'1000B\'\n\nbytes(1000, {thousandsSeparator: \' \'});\n// output: \'1 000B\'\n\nbytes(1024 * 1.7, {decimalPlaces: 0});\n// output: \'2KB\'\n\nbytes(1024, {unitSeparator: \' \'});\n// output: \'1 KB\'\n</code></pre>\n<h4>bytes.parse(string｜number value): number｜null</h4>\n<p>Parse the string value into an integer in bytes. If no unit is given, or <code>value</code>\nis a number, it is assumed the value is in bytes.</p>\n<p>Supported units and abbreviations are as follows and are case-insensitive:</p>\n<ul>\n<li><code>b</code> for bytes</li>\n<li><code>kb</code> for kilobytes</li>\n<li><code>mb</code> for megabytes</li>\n<li><code>gb</code> for gigabytes</li>\n<li><code>tb</code> for terabytes</li>\n</ul>\n<p>The units are in powers of two, not ten. This means 1kb = 1024b according to this parser.</p>\n<p><strong>Arguments</strong></p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>value</td>\n<td><code>string</code>\n｜\n<code>number</code></td>\n<td>String to parse, or number in bytes.</td>\n</tr>\n</tbody>\n</table>\n<p><strong>Returns</strong></p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>results</td>\n<td><code>number</code>\n｜\n<code>null</code></td>\n<td>Return null upon error. Value in bytes otherwise.</td>\n</tr>\n</tbody>\n</table>\n<p><strong>Example</strong></p>\n<pre><code class="language-js">bytes(\'1KB\');\n// output: 1024\n\nbytes(\'1024\');\n// output: 1024\n\nbytes(1024);\n// output: 1024\n</code></pre>\n<h2>License</h2>\n<p><a href="LICENSE">MIT</a></p>',docPath:"argo-ci/node_modules/bytes/readme",proj:"argo-ci"}}}});
//# sourceMappingURL=path---docs-argo-ci-node-modules-bytes-29209864d0e21a115bac.js.map