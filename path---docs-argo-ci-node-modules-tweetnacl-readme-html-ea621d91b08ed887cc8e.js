webpackJsonp([0x9e3b40dadc5b],{3267:function(e,n){e.exports={pathContext:{docHtml:'<h1>TweetNaCl.js</h1>\n<p>Port of <a href="http://tweetnacl.cr.yp.to">TweetNaCl</a> / <a href="http://nacl.cr.yp.to/">NaCl</a>\nto JavaScript for modern browsers and Node.js. Public domain.</p>\n<p><a href="https://travis-ci.org/dchest/tweetnacl-js"><img src="https://travis-ci.org/dchest/tweetnacl-js.svg?branch=master" alt="Build Status">\n</a></p>\n<p>Demo: <a href="https://tweetnacl.js.org">https://tweetnacl.js.org</a></p>\n<p><strong>:warning: The library is stable and API is frozen, however it has not been\nindependently reviewed. If you can help reviewing it, please <a href="mailto:dmitry@codingrobots.com">contact\nme</a>.</strong></p>\n<h1>Documentation</h1>\n<ul>\n<li><a href="#overview">Overview</a></li>\n<li><a href="#installation">Installation</a></li>\n<li>\n<p><a href="#usage">Usage</a></p>\n<ul>\n<li><a href="#public-key-authenticated-encryption-box">Public-key authenticated encryption (box)</a></li>\n<li><a href="#secret-key-authenticated-encryption-secretbox">Secret-key authenticated encryption (secretbox)</a></li>\n<li><a href="#scalar-multiplication">Scalar multiplication</a></li>\n<li><a href="#signatures">Signatures</a></li>\n<li><a href="#hashing">Hashing</a></li>\n<li><a href="#random-bytes-generation">Random bytes generation</a></li>\n<li><a href="#constant-time-comparison">Constant-time comparison</a></li>\n</ul>\n</li>\n<li><a href="#system-requirements">System requirements</a></li>\n<li><a href="#development-and-testing">Development and testing</a></li>\n<li><a href="#benchmarks">Benchmarks</a></li>\n<li><a href="#contributors">Contributors</a></li>\n<li><a href="#who-uses-it">Who uses it</a></li>\n</ul>\n<h2>Overview</h2>\n<p>The primary goal of this project is to produce a translation of TweetNaCl to\nJavaScript which is as close as possible to the original C implementation, plus\na thin layer of idiomatic high-level API on top of it.</p>\n<p>There are two versions, you can use either of them:</p>\n<ul>\n<li>\n<p><code>nacl.js</code> is the port of TweetNaCl with minimum differences from the\noriginal + high-level API.</p>\n</li>\n<li>\n<p><code>nacl-fast.js</code> is like <code>nacl.js</code>, but with some functions replaced with\nfaster versions.</p>\n</li>\n</ul>\n<h2>Installation</h2>\n<p>You can install TweetNaCl.js via a package manager:</p>\n<p><a href="http://bower.io">Bower</a>:</p>\n<pre><code>$ bower install tweetnacl\n</code></pre>\n<p><a href="https://www.npmjs.org/">NPM</a>:</p>\n<pre><code>$ npm install tweetnacl\n</code></pre>\n<p>or <a href="https://github.com/dchest/tweetnacl-js/releases">download source code</a>.</p>\n<h2>Usage</h2>\n<p>All API functions accept and return bytes as <code>Uint8Array</code>s.  If you need to\nencode or decode strings, use functions from\n<a href="https://github.com/dchest/tweetnacl-util-js">https://github.com/dchest/tweetnacl-util-js</a> or one of the more robust codec\npackages.</p>\n<p>In Node.js v4 and later <code>Buffer</code> objects are backed by <code>Uint8Array</code>s, so you\ncan freely pass them to TweetNaCl.js functions as arguments. The returned\nobjects are still <code>Uint8Array</code>s, so if you need <code>Buffer</code>s, you\'ll have to\nconvert them manually; make sure to convert using copying: <code>new Buffer(array)</code>,\ninstead of sharing: <code>new Buffer(array.buffer)</code>, because some functions return\nsubarrays of their buffers.</p>\n<h3>Public-key authenticated encryption (box)</h3>\n<p>Implements <em>curve25519-xsalsa20-poly1305</em>.</p>\n<h4>nacl.box.keyPair()</h4>\n<p>Generates a new random key pair for box and returns it as an object with\n<code>publicKey</code> and <code>secretKey</code> members:</p>\n<pre><code>{\n   publicKey: ...,  // Uint8Array with 32-byte public key\n   secretKey: ...   // Uint8Array with 32-byte secret key\n}\n</code></pre>\n<h4>nacl.box.keyPair.fromSecretKey(secretKey)</h4>\n<p>Returns a key pair for box with public key corresponding to the given secret\nkey.</p>\n<h4>nacl.box(message, nonce, theirPublicKey, mySecretKey)</h4>\n<p>Encrypt and authenticates message using peer\'s public key, our secret key, and\nthe given nonce, which must be unique for each distinct message for a key pair.</p>\n<p>Returns an encrypted and authenticated message, which is\n<code>nacl.box.overheadLength</code> longer than the original message.</p>\n<h4>nacl.box.open(box, nonce, theirPublicKey, mySecretKey)</h4>\n<p>Authenticates and decrypts the given box with peer\'s public key, our secret\nkey, and the given nonce.</p>\n<p>Returns the original message, or <code>false</code> if authentication fails.</p>\n<h4>nacl.box.before(theirPublicKey, mySecretKey)</h4>\n<p>Returns a precomputed shared key which can be used in <code>nacl.box.after</code> and\n<code>nacl.box.open.after</code>.</p>\n<h4>nacl.box.after(message, nonce, sharedKey)</h4>\n<p>Same as <code>nacl.box</code>, but uses a shared key precomputed with <code>nacl.box.before</code>.</p>\n<h4>nacl.box.open.after(box, nonce, sharedKey)</h4>\n<p>Same as <code>nacl.box.open</code>, but uses a shared key precomputed with <code>nacl.box.before</code>.</p>\n<h4>nacl.box.publicKeyLength = 32</h4>\n<p>Length of public key in bytes.</p>\n<h4>nacl.box.secretKeyLength = 32</h4>\n<p>Length of secret key in bytes.</p>\n<h4>nacl.box.sharedKeyLength = 32</h4>\n<p>Length of precomputed shared key in bytes.</p>\n<h4>nacl.box.nonceLength = 24</h4>\n<p>Length of nonce in bytes.</p>\n<h4>nacl.box.overheadLength = 16</h4>\n<p>Length of overhead added to box compared to original message.</p>\n<h3>Secret-key authenticated encryption (secretbox)</h3>\n<p>Implements <em>xsalsa20-poly1305</em>.</p>\n<h4>nacl.secretbox(message, nonce, key)</h4>\n<p>Encrypt and authenticates message using the key and the nonce. The nonce must\nbe unique for each distinct message for this key.</p>\n<p>Returns an encrypted and authenticated message, which is\n<code>nacl.secretbox.overheadLength</code> longer than the original message.</p>\n<h4>nacl.secretbox.open(box, nonce, key)</h4>\n<p>Authenticates and decrypts the given secret box using the key and the nonce.</p>\n<p>Returns the original message, or <code>false</code> if authentication fails.</p>\n<h4>nacl.secretbox.keyLength = 32</h4>\n<p>Length of key in bytes.</p>\n<h4>nacl.secretbox.nonceLength = 24</h4>\n<p>Length of nonce in bytes.</p>\n<h4>nacl.secretbox.overheadLength = 16</h4>\n<p>Length of overhead added to secret box compared to original message.</p>\n<h3>Scalar multiplication</h3>\n<p>Implements <em>curve25519</em>.</p>\n<h4>nacl.scalarMult(n, p)</h4>\n<p>Multiplies an integer <code>n</code> by a group element <code>p</code> and returns the resulting\ngroup element.</p>\n<h4>nacl.scalarMult.base(n)</h4>\n<p>Multiplies an integer <code>n</code> by a standard group element and returns the resulting\ngroup element.</p>\n<h4>nacl.scalarMult.scalarLength = 32</h4>\n<p>Length of scalar in bytes.</p>\n<h4>nacl.scalarMult.groupElementLength = 32</h4>\n<p>Length of group element in bytes.</p>\n<h3>Signatures</h3>\n<p>Implements <a href="http://ed25519.cr.yp.to">ed25519</a>.</p>\n<h4>nacl.sign.keyPair()</h4>\n<p>Generates new random key pair for signing and returns it as an object with\n<code>publicKey</code> and <code>secretKey</code> members:</p>\n<pre><code>{\n   publicKey: ...,  // Uint8Array with 32-byte public key\n   secretKey: ...   // Uint8Array with 64-byte secret key\n}\n</code></pre>\n<h4>nacl.sign.keyPair.fromSecretKey(secretKey)</h4>\n<p>Returns a signing key pair with public key corresponding to the given\n64-byte secret key. The secret key must have been generated by\n<code>nacl.sign.keyPair</code> or <code>nacl.sign.keyPair.fromSeed</code>.</p>\n<h4>nacl.sign.keyPair.fromSeed(seed)</h4>\n<p>Returns a new signing key pair generated deterministically from a 32-byte seed.\nThe seed must contain enough entropy to be secure. This method is not\nrecommended for general use: instead, use <code>nacl.sign.keyPair</code> to generate a new\nkey pair from a random seed.</p>\n<h4>nacl.sign(message, secretKey)</h4>\n<p>Signs the message using the secret key and returns a signed message.</p>\n<h4>nacl.sign.open(signedMessage, publicKey)</h4>\n<p>Verifies the signed message and returns the message without signature.</p>\n<p>Returns <code>null</code> if verification failed.</p>\n<h4>nacl.sign.detached(message, secretKey)</h4>\n<p>Signs the message using the secret key and returns a signature.</p>\n<h4>nacl.sign.detached.verify(message, signature, publicKey)</h4>\n<p>Verifies the signature for the message and returns <code>true</code> if verification\nsucceeded or <code>false</code> if it failed.</p>\n<h4>nacl.sign.publicKeyLength = 32</h4>\n<p>Length of signing public key in bytes.</p>\n<h4>nacl.sign.secretKeyLength = 64</h4>\n<p>Length of signing secret key in bytes.</p>\n<h4>nacl.sign.seedLength = 32</h4>\n<p>Length of seed for <code>nacl.sign.keyPair.fromSeed</code> in bytes.</p>\n<h4>nacl.sign.signatureLength = 64</h4>\n<p>Length of signature in bytes.</p>\n<h3>Hashing</h3>\n<p>Implements <em>SHA-512</em>.</p>\n<h4>nacl.hash(message)</h4>\n<p>Returns SHA-512 hash of the message.</p>\n<h4>nacl.hash.hashLength = 64</h4>\n<p>Length of hash in bytes.</p>\n<h3>Random bytes generation</h3>\n<h4>nacl.randomBytes(length)</h4>\n<p>Returns a <code>Uint8Array</code> of the given length containing random bytes of\ncryptographic quality.</p>\n<p><strong>Implementation note</strong></p>\n<p>TweetNaCl.js uses the following methods to generate random bytes,\ndepending on the platform it runs on:</p>\n<ul>\n<li><code>window.crypto.getRandomValues</code> (WebCrypto standard)</li>\n<li><code>window.msCrypto.getRandomValues</code> (Internet Explorer 11)</li>\n<li><code>crypto.randomBytes</code> (Node.js)</li>\n</ul>\n<p>If the platform doesn\'t provide a suitable PRNG, the following functions,\nwhich require random numbers, will throw exception:</p>\n<ul>\n<li><code>nacl.randomBytes</code></li>\n<li><code>nacl.box.keyPair</code></li>\n<li><code>nacl.sign.keyPair</code></li>\n</ul>\n<p>Other functions are deterministic and will continue working.</p>\n<p>If a platform you are targeting doesn\'t implement secure random number\ngenerator, but you somehow have a cryptographically-strong source of entropy\n(not <code>Math.random</code>!), and you know what you are doing, you can plug it into\nTweetNaCl.js like this:</p>\n<pre><code>nacl.setPRNG(function(x, n) {\n  // ... copy n random bytes into x ...\n});\n</code></pre>\n<p>Note that <code>nacl.setPRNG</code> <em>completely replaces</em> internal random byte generator\nwith the one provided.</p>\n<h3>Constant-time comparison</h3>\n<h4>nacl.verify(x, y)</h4>\n<p>Compares <code>x</code> and <code>y</code> in constant time and returns <code>true</code> if their lengths are\nnon-zero and equal, and their contents are equal.</p>\n<p>Returns <code>false</code> if either of the arguments has zero length, or arguments have\ndifferent lengths, or their contents differ.</p>\n<h2>System requirements</h2>\n<p>TweetNaCl.js supports modern browsers that have a cryptographically secure\npseudorandom number generator and typed arrays, including the latest versions\nof:</p>\n<ul>\n<li>Chrome</li>\n<li>Firefox</li>\n<li>Safari (Mac, iOS)</li>\n<li>Internet Explorer 11</li>\n</ul>\n<p>Other systems:</p>\n<ul>\n<li>Node.js</li>\n</ul>\n<h2>Development and testing</h2>\n<p>Install NPM modules needed for development:</p>\n<pre><code>$ npm install\n</code></pre>\n<p>To build minified versions:</p>\n<pre><code>$ npm run build\n</code></pre>\n<p>Tests use minified version, so make sure to rebuild it every time you change\n<code>nacl.js</code> or <code>nacl-fast.js</code>.</p>\n<h3>Testing</h3>\n<p>To run tests in Node.js:</p>\n<pre><code>$ npm run test-node\n</code></pre>\n<p>By default all tests described here work on <code>nacl.min.js</code>. To test other\nversions, set environment variable <code>NACL_SRC</code> to the file name you want to test.\nFor example, the following command will test fast minified version:</p>\n<pre><code>$ NACL_SRC=nacl-fast.min.js npm run test-node\n</code></pre>\n<p>To run full suite of tests in Node.js, including comparing outputs of\nJavaScript port to outputs of the original C version:</p>\n<pre><code>$ npm run test-node-all\n</code></pre>\n<p>To prepare tests for browsers:</p>\n<pre><code>$ npm run build-test-browser\n</code></pre>\n<p>and then open <code>test/browser/test.html</code> (or <code>test/browser/test-fast.html</code>) to\nrun them.</p>\n<p>To run headless browser tests with <code>tape-run</code> (powered by Electron):</p>\n<pre><code>$ npm run test-browser\n</code></pre>\n<p>(If you get <code>Error: spawn ENOENT</code>, install <em>xvfb</em>: <code>sudo apt-get install xvfb</code>.)</p>\n<p>To run tests in both Node and Electron:</p>\n<pre><code>$ npm test\n</code></pre>\n<h3>Benchmarking</h3>\n<p>To run benchmarks in Node.js:</p>\n<pre><code>$ npm run bench\n$ NACL_SRC=nacl-fast.min.js npm run bench\n</code></pre>\n<p>To run benchmarks in a browser, open <code>test/benchmark/bench.html</code> (or\n<code>test/benchmark/bench-fast.html</code>).</p>\n<h2>Benchmarks</h2>\n<p>For reference, here are benchmarks from MacBook Pro (Retina, 13-inch, Mid 2014)\nlaptop with 2.6 GHz Intel Core i5 CPU (Intel) in Chrome 53/OS X and Xiaomi Redmi\nNote 3 smartphone with 1.8 GHz Qualcomm Snapdragon 650 64-bit CPU (ARM) in\nChrome 52/Android:</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th align="center">nacl.js Intel</th>\n<th align="center">nacl-fast.js Intel</th>\n<th align="center">nacl.js ARM</th>\n<th align="center">nacl-fast.js ARM</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>salsa20</td>\n<td align="center">1.3 MB/s</td>\n<td align="center">128 MB/s</td>\n<td align="center">0.4 MB/s</td>\n<td align="center">43 MB/s</td>\n</tr>\n<tr>\n<td>poly1305</td>\n<td align="center">13 MB/s</td>\n<td align="center">171 MB/s</td>\n<td align="center">4 MB/s</td>\n<td align="center">52 MB/s</td>\n</tr>\n<tr>\n<td>hash</td>\n<td align="center">4 MB/s</td>\n<td align="center">34 MB/s</td>\n<td align="center">0.9 MB/s</td>\n<td align="center">12 MB/s</td>\n</tr>\n<tr>\n<td>secretbox 1K</td>\n<td align="center">1113 op/s</td>\n<td align="center">57583 op/s</td>\n<td align="center">334 op/s</td>\n<td align="center">14227 op/s</td>\n</tr>\n<tr>\n<td>box 1K</td>\n<td align="center">145 op/s</td>\n<td align="center">718 op/s</td>\n<td align="center">37 op/s</td>\n<td align="center">368 op/s</td>\n</tr>\n<tr>\n<td>scalarMult</td>\n<td align="center">171 op/s</td>\n<td align="center">733 op/s</td>\n<td align="center">56 op/s</td>\n<td align="center">380 op/s</td>\n</tr>\n<tr>\n<td>sign</td>\n<td align="center">77  op/s</td>\n<td align="center">200 op/s</td>\n<td align="center">20 op/s</td>\n<td align="center">61 op/s</td>\n</tr>\n<tr>\n<td>sign.open</td>\n<td align="center">39  op/s</td>\n<td align="center">102  op/s</td>\n<td align="center">11 op/s</td>\n<td align="center">31 op/s</td>\n</tr>\n</tbody>\n</table>\n<p>(You can run benchmarks on your devices by clicking on the links at the bottom\nof the <a href="https://tweetnacl.js.org">home page</a>).</p>\n<p>In short, with <em>nacl-fast.js</em> and 1024-byte messages you can expect to encrypt and\nauthenticate more than 57000 messages per second on a typical laptop or more than\n14000 messages per second on a $170 smartphone, sign about 200 and verify 100\nmessages per second on a laptop or 60 and 30 messages per second on a smartphone,\nper CPU core (with Web Workers you can do these operations in parallel),\nwhich is good enough for most applications.</p>\n<h2>Contributors</h2>\n<p>See AUTHORS.md file.</p>\n<h2>Third-party libraries based on TweetNaCl.js</h2>\n<ul>\n<li><a href="https://github.com/alax/forward-secrecy">forward-secrecy</a> — Axolotl ratchet implementation</li>\n<li><a href="https://github.com/dchest/nacl-stream-js">nacl-stream</a> - streaming encryption</li>\n<li><a href="https://github.com/dchest/tweetnacl-auth-js">tweetnacl-auth-js</a> — implementation of <a href="http://nacl.cr.yp.to/auth.html"><code>crypto_auth</code></a></li>\n<li><a href="https://github.com/dominictarr/chloride">chloride</a> - unified API for various NaCl modules</li>\n</ul>\n<h2>Who uses it</h2>\n<p>Some notable users of TweetNaCl.js:</p>\n<ul>\n<li><a href="http://minilock.io/">miniLock</a></li>\n<li><a href="https://www.stellar.org/">Stellar</a></li>\n</ul>',docPath:"argo-ci/node_modules/tweetnacl/readme",proj:"argo-ci"}}}});
//# sourceMappingURL=path---docs-argo-ci-node-modules-tweetnacl-readme-html-ea621d91b08ed887cc8e.js.map