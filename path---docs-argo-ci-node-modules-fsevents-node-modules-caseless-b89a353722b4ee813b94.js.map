{"version":3,"sources":["webpack:///path---docs-argo-ci-node-modules-fsevents-node-modules-caseless-b89a353722b4ee813b94.js","webpack:///./.cache/json/docs-argo-ci-node-modules-fsevents-node-modules-caseless.json"],"names":["webpackJsonp","2400","module","exports","pathContext","docHtml","docPath","proj"],"mappings":"AAAAA,cAAc,iBAERC,KACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,aAAeC,QAAA,g4CAAy3CC,QAAA,6DAAAC,KAAA","file":"path---docs-argo-ci-node-modules-fsevents-node-modules-caseless-b89a353722b4ee813b94.js","sourcesContent":["webpackJsonp([152539617252512],{\n\n/***/ 2400:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"pathContext\":{\"docHtml\":\"<h2>Caseless -- wrap an object to set and get property with caseless semantics but also preserve caseing.</h2>\\n<p>This library is incredibly useful when working with HTTP headers. It allows you to get/set/check for headers in a caseless manner while also preserving the caseing of headers the first time they are set.</p>\\n<h2>Usage</h2>\\n<pre><code class=\\\"language-javascript\\\">var headers = {}\\n  , c = caseless(headers)\\n  ;\\nc.set('a-Header', 'asdf')\\nc.get('a-header') === 'asdf'\\n</code></pre>\\n<h2>has(key)</h2>\\n<p>Has takes a name and if it finds a matching header will return that header name with the preserved caseing it was set with.</p>\\n<pre><code class=\\\"language-javascript\\\">c.has('a-header') === 'a-Header'\\n</code></pre>\\n<h2>set(key, value[, clobber=true])</h2>\\n<p>Set is fairly straight forward except that if the header exists and clobber is disabled it will add <code>','+value</code> to the existing header.</p>\\n<pre><code class=\\\"language-javascript\\\">c.set('a-Header', 'fdas')\\nc.set('a-HEADER', 'more', false)\\nc.get('a-header') === 'fdsa,more'\\n</code></pre>\\n<h2>swap(key)</h2>\\n<p>Swaps the casing of a header with the new one that is passed in.</p>\\n<pre><code class=\\\"language-javascript\\\">var headers = {}\\n  , c = caseless(headers)\\n  ;\\nc.set('a-Header', 'fdas')\\nc.swap('a-HEADER')\\nc.has('a-header') === 'a-HEADER'\\nheaders === {'a-HEADER': 'fdas'}\\n</code></pre>\",\"docPath\":\"argo-ci/node_modules/fsevents/node_modules/caseless/readme\",\"proj\":\"argo-ci\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---docs-argo-ci-node-modules-fsevents-node-modules-caseless-b89a353722b4ee813b94.js","module.exports = {\"pathContext\":{\"docHtml\":\"<h2>Caseless -- wrap an object to set and get property with caseless semantics but also preserve caseing.</h2>\\n<p>This library is incredibly useful when working with HTTP headers. It allows you to get/set/check for headers in a caseless manner while also preserving the caseing of headers the first time they are set.</p>\\n<h2>Usage</h2>\\n<pre><code class=\\\"language-javascript\\\">var headers = {}\\n  , c = caseless(headers)\\n  ;\\nc.set('a-Header', 'asdf')\\nc.get('a-header') === 'asdf'\\n</code></pre>\\n<h2>has(key)</h2>\\n<p>Has takes a name and if it finds a matching header will return that header name with the preserved caseing it was set with.</p>\\n<pre><code class=\\\"language-javascript\\\">c.has('a-header') === 'a-Header'\\n</code></pre>\\n<h2>set(key, value[, clobber=true])</h2>\\n<p>Set is fairly straight forward except that if the header exists and clobber is disabled it will add <code>','+value</code> to the existing header.</p>\\n<pre><code class=\\\"language-javascript\\\">c.set('a-Header', 'fdas')\\nc.set('a-HEADER', 'more', false)\\nc.get('a-header') === 'fdsa,more'\\n</code></pre>\\n<h2>swap(key)</h2>\\n<p>Swaps the casing of a header with the new one that is passed in.</p>\\n<pre><code class=\\\"language-javascript\\\">var headers = {}\\n  , c = caseless(headers)\\n  ;\\nc.set('a-Header', 'fdas')\\nc.swap('a-HEADER')\\nc.has('a-header') === 'a-HEADER'\\nheaders === {'a-HEADER': 'fdas'}\\n</code></pre>\",\"docPath\":\"argo-ci/node_modules/fsevents/node_modules/caseless/readme\",\"proj\":\"argo-ci\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/docs-argo-ci-node-modules-fsevents-node-modules-caseless.json\n// module id = 2400\n// module chunks = 152539617252512"],"sourceRoot":""}