{"version":3,"sources":["webpack:///path---docs-argo-ci-node-modules-finalhandler-readme-html-312fd47d601b0bbb42f4.js","webpack:///./.cache/json/docs-argo-ci-node-modules-finalhandler-readme-html.json"],"names":["webpackJsonp","2335","module","exports","pathContext","docHtml","docPath","proj"],"mappings":"AAAAA,cAAc,iBAERC,KACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,aAAeC,QAAA,++IAA47IC,QAAA,2CAAAC,KAAA","file":"path---docs-argo-ci-node-modules-finalhandler-readme-html-312fd47d601b0bbb42f4.js","sourcesContent":["webpackJsonp([220464166477962],{\n\n/***/ 2335:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"pathContext\":{\"docHtml\":\"<h1>finalhandler</h1>\\n<p><a href=\\\"https://npmjs.org/package/finalhandler\\\"><img src=\\\"https://img.shields.io/npm/v/finalhandler.svg\\\" alt=\\\"NPM Version\\\"></a>\\n<a href=\\\"https://npmjs.org/package/finalhandler\\\"><img src=\\\"https://img.shields.io/npm/dm/finalhandler.svg\\\" alt=\\\"NPM Downloads\\\"></a>\\n<a href=\\\"https://nodejs.org/en/download\\\"><img src=\\\"https://img.shields.io/node/v/finalhandler.svg\\\" alt=\\\"Node.js Version\\\"></a>\\n<a href=\\\"https://travis-ci.org/pillarjs/finalhandler\\\"><img src=\\\"https://img.shields.io/travis/pillarjs/finalhandler.svg\\\" alt=\\\"Build Status\\\"></a>\\n<a href=\\\"https://coveralls.io/r/pillarjs/finalhandler?branch=master\\\"><img src=\\\"https://img.shields.io/coveralls/pillarjs/finalhandler.svg\\\" alt=\\\"Test Coverage\\\"></a></p>\\n<p>Node.js function to invoke as the final step to respond to HTTP request.</p>\\n<h2>Installation</h2>\\n<p>This is a <a href=\\\"https://nodejs.org/en/\\\">Node.js</a> module available through the\\n<a href=\\\"https://www.npmjs.com/\\\">npm registry</a>. Installation is done using the\\n<a href=\\\"https://docs.npmjs.com/getting-started/installing-npm-packages-locally\\\"><code>npm install</code> command</a>:</p>\\n<pre><code class=\\\"language-sh\\\">$ npm install finalhandler\\n</code></pre>\\n<h2>API</h2>\\n<!-- eslint-disable no-unused-vars -->\\n<pre><code class=\\\"language-js\\\">var finalhandler = require('finalhandler')\\n</code></pre>\\n<h3>finalhandler(req, res, [options])</h3>\\n<p>Returns function to be invoked as the final step for the given <code>req</code> and <code>res</code>.\\nThis function is to be invoked as <code>fn(err)</code>. If <code>err</code> is falsy, the handler will\\nwrite out a 404 response to the <code>res</code>. If it is truthy, an error response will\\nbe written out to the <code>res</code>.</p>\\n<p>When an error is written, the following information is added to the response:</p>\\n<ul>\\n<li>The <code>res.statusCode</code> is set from <code>err.status</code> (or <code>err.statusCode</code>). If\\nthis value is outside the 4xx or 5xx range, it will be set to 500.</li>\\n<li>The <code>res.statusMessage</code> is set according to the status code.</li>\\n<li>The body will be the HTML of the status code message if <code>env</code> is\\n<code>'production'</code>, otherwise will be <code>err.stack</code>.</li>\\n<li>Any headers specified in an <code>err.headers</code> object.</li>\\n</ul>\\n<p>The final handler will also unpipe anything from <code>req</code> when it is invoked.</p>\\n<h4>options.env</h4>\\n<p>By default, the environment is determined by <code>NODE_ENV</code> variable, but it can be\\noverridden by this option.</p>\\n<h4>options.onerror</h4>\\n<p>Provide a function to be called with the <code>err</code> when it exists. Can be used for\\nwriting errors to a central location without excessive function generation. Called\\nas <code>onerror(err, req, res)</code>.</p>\\n<h2>Examples</h2>\\n<h3>always 404</h3>\\n<pre><code class=\\\"language-js\\\">var finalhandler = require('finalhandler')\\nvar http = require('http')\\n\\nvar server = http.createServer(function (req, res) {\\n  var done = finalhandler(req, res)\\n  done()\\n})\\n\\nserver.listen(3000)\\n</code></pre>\\n<h3>perform simple action</h3>\\n<pre><code class=\\\"language-js\\\">var finalhandler = require('finalhandler')\\nvar fs = require('fs')\\nvar http = require('http')\\n\\nvar server = http.createServer(function (req, res) {\\n  var done = finalhandler(req, res)\\n\\n  fs.readFile('index.html', function (err, buf) {\\n    if (err) return done(err)\\n    res.setHeader('Content-Type', 'text/html')\\n    res.end(buf)\\n  })\\n})\\n\\nserver.listen(3000)\\n</code></pre>\\n<h3>use with middleware-style functions</h3>\\n<pre><code class=\\\"language-js\\\">var finalhandler = require('finalhandler')\\nvar http = require('http')\\nvar serveStatic = require('serve-static')\\n\\nvar serve = serveStatic('public')\\n\\nvar server = http.createServer(function (req, res) {\\n  var done = finalhandler(req, res)\\n  serve(req, res, done)\\n})\\n\\nserver.listen(3000)\\n</code></pre>\\n<h3>keep log of all errors</h3>\\n<pre><code class=\\\"language-js\\\">var finalhandler = require('finalhandler')\\nvar fs = require('fs')\\nvar http = require('http')\\n\\nvar server = http.createServer(function (req, res) {\\n  var done = finalhandler(req, res, {onerror: logerror})\\n\\n  fs.readFile('index.html', function (err, buf) {\\n    if (err) return done(err)\\n    res.setHeader('Content-Type', 'text/html')\\n    res.end(buf)\\n  })\\n})\\n\\nserver.listen(3000)\\n\\nfunction logerror (err) {\\n  console.error(err.stack || err.toString())\\n}\\n</code></pre>\\n<h2>License</h2>\\n<p><a href=\\\"LICENSE\\\">MIT</a></p>\",\"docPath\":\"argo-ci/node_modules/finalhandler/readme\",\"proj\":\"argo-ci\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---docs-argo-ci-node-modules-finalhandler-readme-html-312fd47d601b0bbb42f4.js","module.exports = {\"pathContext\":{\"docHtml\":\"<h1>finalhandler</h1>\\n<p><a href=\\\"https://npmjs.org/package/finalhandler\\\"><img src=\\\"https://img.shields.io/npm/v/finalhandler.svg\\\" alt=\\\"NPM Version\\\"></a>\\n<a href=\\\"https://npmjs.org/package/finalhandler\\\"><img src=\\\"https://img.shields.io/npm/dm/finalhandler.svg\\\" alt=\\\"NPM Downloads\\\"></a>\\n<a href=\\\"https://nodejs.org/en/download\\\"><img src=\\\"https://img.shields.io/node/v/finalhandler.svg\\\" alt=\\\"Node.js Version\\\"></a>\\n<a href=\\\"https://travis-ci.org/pillarjs/finalhandler\\\"><img src=\\\"https://img.shields.io/travis/pillarjs/finalhandler.svg\\\" alt=\\\"Build Status\\\"></a>\\n<a href=\\\"https://coveralls.io/r/pillarjs/finalhandler?branch=master\\\"><img src=\\\"https://img.shields.io/coveralls/pillarjs/finalhandler.svg\\\" alt=\\\"Test Coverage\\\"></a></p>\\n<p>Node.js function to invoke as the final step to respond to HTTP request.</p>\\n<h2>Installation</h2>\\n<p>This is a <a href=\\\"https://nodejs.org/en/\\\">Node.js</a> module available through the\\n<a href=\\\"https://www.npmjs.com/\\\">npm registry</a>. Installation is done using the\\n<a href=\\\"https://docs.npmjs.com/getting-started/installing-npm-packages-locally\\\"><code>npm install</code> command</a>:</p>\\n<pre><code class=\\\"language-sh\\\">$ npm install finalhandler\\n</code></pre>\\n<h2>API</h2>\\n<!-- eslint-disable no-unused-vars -->\\n<pre><code class=\\\"language-js\\\">var finalhandler = require('finalhandler')\\n</code></pre>\\n<h3>finalhandler(req, res, [options])</h3>\\n<p>Returns function to be invoked as the final step for the given <code>req</code> and <code>res</code>.\\nThis function is to be invoked as <code>fn(err)</code>. If <code>err</code> is falsy, the handler will\\nwrite out a 404 response to the <code>res</code>. If it is truthy, an error response will\\nbe written out to the <code>res</code>.</p>\\n<p>When an error is written, the following information is added to the response:</p>\\n<ul>\\n<li>The <code>res.statusCode</code> is set from <code>err.status</code> (or <code>err.statusCode</code>). If\\nthis value is outside the 4xx or 5xx range, it will be set to 500.</li>\\n<li>The <code>res.statusMessage</code> is set according to the status code.</li>\\n<li>The body will be the HTML of the status code message if <code>env</code> is\\n<code>'production'</code>, otherwise will be <code>err.stack</code>.</li>\\n<li>Any headers specified in an <code>err.headers</code> object.</li>\\n</ul>\\n<p>The final handler will also unpipe anything from <code>req</code> when it is invoked.</p>\\n<h4>options.env</h4>\\n<p>By default, the environment is determined by <code>NODE_ENV</code> variable, but it can be\\noverridden by this option.</p>\\n<h4>options.onerror</h4>\\n<p>Provide a function to be called with the <code>err</code> when it exists. Can be used for\\nwriting errors to a central location without excessive function generation. Called\\nas <code>onerror(err, req, res)</code>.</p>\\n<h2>Examples</h2>\\n<h3>always 404</h3>\\n<pre><code class=\\\"language-js\\\">var finalhandler = require('finalhandler')\\nvar http = require('http')\\n\\nvar server = http.createServer(function (req, res) {\\n  var done = finalhandler(req, res)\\n  done()\\n})\\n\\nserver.listen(3000)\\n</code></pre>\\n<h3>perform simple action</h3>\\n<pre><code class=\\\"language-js\\\">var finalhandler = require('finalhandler')\\nvar fs = require('fs')\\nvar http = require('http')\\n\\nvar server = http.createServer(function (req, res) {\\n  var done = finalhandler(req, res)\\n\\n  fs.readFile('index.html', function (err, buf) {\\n    if (err) return done(err)\\n    res.setHeader('Content-Type', 'text/html')\\n    res.end(buf)\\n  })\\n})\\n\\nserver.listen(3000)\\n</code></pre>\\n<h3>use with middleware-style functions</h3>\\n<pre><code class=\\\"language-js\\\">var finalhandler = require('finalhandler')\\nvar http = require('http')\\nvar serveStatic = require('serve-static')\\n\\nvar serve = serveStatic('public')\\n\\nvar server = http.createServer(function (req, res) {\\n  var done = finalhandler(req, res)\\n  serve(req, res, done)\\n})\\n\\nserver.listen(3000)\\n</code></pre>\\n<h3>keep log of all errors</h3>\\n<pre><code class=\\\"language-js\\\">var finalhandler = require('finalhandler')\\nvar fs = require('fs')\\nvar http = require('http')\\n\\nvar server = http.createServer(function (req, res) {\\n  var done = finalhandler(req, res, {onerror: logerror})\\n\\n  fs.readFile('index.html', function (err, buf) {\\n    if (err) return done(err)\\n    res.setHeader('Content-Type', 'text/html')\\n    res.end(buf)\\n  })\\n})\\n\\nserver.listen(3000)\\n\\nfunction logerror (err) {\\n  console.error(err.stack || err.toString())\\n}\\n</code></pre>\\n<h2>License</h2>\\n<p><a href=\\\"LICENSE\\\">MIT</a></p>\",\"docPath\":\"argo-ci/node_modules/finalhandler/readme\",\"proj\":\"argo-ci\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/docs-argo-ci-node-modules-finalhandler-readme-html.json\n// module id = 2335\n// module chunks = 220464166477962"],"sourceRoot":""}