webpackJsonp([0x81c49ed9f6dd],{2475:function(e,n){e.exports={pathContext:{docHtml:'<h1>Abstract</h1>\n<p>This document describes a way to add origin authentication, message integrity,\nand replay resistance to HTTP REST requests.  It is intended to be used over\nthe HTTPS protocol.</p>\n<h1>Copyright Notice</h1>\n<p>Copyright (c) 2011 Joyent, Inc. and the persons identified as document authors.\nAll rights reserved.</p>\n<p>Code Components extracted from this document must include MIT License text.</p>\n<h1>Introduction</h1>\n<p>This protocol is intended to provide a standard way for clients to sign HTTP\nrequests.  RFC2617 (HTTP Authentication) defines Basic and Digest authentication\nmechanisms, and RFC5246 (TLS 1.2) defines client-auth, both of which are widely\nemployed on the Internet today.  However, it is common place that the burdens of\nPKI prevent web service operators from deploying that methodology, and so many\nfall back to Basic authentication, which has poor security characteristics.</p>\n<p>Additionally, OAuth provides a fully-specified alternative for authorization\nof web service requests, but is not (always) ideal for machine to machine\ncommunication, as the key acquisition steps (generally) imply a fixed\ninfrastructure that may not make sense to a service provider (e.g., symmetric\nkeys).</p>\n<p>Several web service providers have invented their own schemes for signing\nHTTP requests, but to date, none have been placed in the public domain as a\nstandard.  This document serves that purpose.  There are no techniques in this\nproposal that are novel beyond previous art, however, this aims to be a simple\nmechanism for signing these requests.</p>\n<h1>Signature Authentication Scheme</h1>\n<p>The "signature" authentication scheme is based on the model that the client must\nauthenticate itself with a digital signature produced by either a private\nasymmetric key (e.g., RSA) or a shared symmetric key (e.g., HMAC).  The scheme\nis parameterized enough such that it is not bound to any particular key type or\nsigning algorithm.  However, it does explicitly assume that clients can send an\nHTTP <code>Date</code> header.</p>\n<h2>Authorization Header</h2>\n<p>The client is expected to send an Authorization header (as defined in RFC 2617)\nwith the following parameterization:</p>\n<pre><code>credentials := "Signature" params\nparams := 1#(keyId | algorithm | [headers] | [ext] | signature)\ndigitalSignature := plain-string\n\nkeyId := "keyId" "=" &#x3C;"> plain-string &#x3C;">\nalgorithm := "algorithm" "=" &#x3C;"> plain-string &#x3C;">\nheaders := "headers" "=" &#x3C;"> 1#headers-value &#x3C;">\next := "ext" "=" &#x3C;"> plain-string &#x3C;">\nsignature := "signature" "=" &#x3C;"> plain-string &#x3C;">\n\nheaders-value := plain-string\nplain-string   = 1*( %x20-21 / %x23-5B / %x5D-7E )\n</code></pre>\n<h3>Signature Parameters</h3>\n<h4>keyId</h4>\n<p>REQUIRED.  The <code>keyId</code> field is an opaque string that the server can use to look\nup the component they need to validate the signature.  It could be an SSH key\nfingerprint, an LDAP DN, etc.  Management of keys and assignment of <code>keyId</code> is\nout of scope for this document.</p>\n<h4>algorithm</h4>\n<p>REQUIRED. The <code>algorithm</code> parameter is used if the client and server agree on a\nnon-standard digital signature algorithm.  The full list of supported signature\nmechanisms is listed below.</p>\n<h4>headers</h4>\n<p>OPTIONAL.  The <code>headers</code> parameter is used to specify the list of HTTP headers\nused to sign the request.  If specified, it should be a quoted list of HTTP\nheader names, separated by a single space character.  By default, only one\nHTTP header is signed, which is the <code>Date</code> header.  Note that the list MUST be\nspecified in the order the values are concatenated together during signing. To\ninclude the HTTP request line in the signature calculation, use the special\n<code>request-line</code> value.  While this is overloading the definition of <code>headers</code> in\nHTTP linguism, the request-line is defined in RFC 2616, and as the outlier from\nheaders in useful signature calculation, it is deemed simpler to simply use\n<code>request-line</code> than to add a separate parameter for it.</p>\n<h4>extensions</h4>\n<p>OPTIONAL.  The <code>extensions</code> parameter is used to include additional information\nwhich is covered by the request.  The content and format of the string is out of\nscope for this document, and expected to be specified by implementors.</p>\n<h4>signature</h4>\n<p>REQUIRED.  The <code>signature</code> parameter is a <code>Base64</code> encoded digital signature\ngenerated by the client. The client uses the <code>algorithm</code> and <code>headers</code> request\nparameters to form a canonicalized <code>signing string</code>.  This <code>signing string</code> is\nthen signed with the key associated with <code>keyId</code> and the algorithm\ncorresponding to <code>algorithm</code>.  The <code>signature</code> parameter is then set to the\n<code>Base64</code> encoding of the signature.</p>\n<h3>Signing String Composition</h3>\n<p>In order to generate the string that is signed with a key, the client MUST take\nthe values of each HTTP header specified by <code>headers</code> in the order they appear.</p>\n<ol>\n<li>If the header name is not <code>request-line</code> then append the lowercased header\nname followed with an ASCII colon <code>:</code> and an ASCII space <code></code>.</li>\n<li>If the header name is <code>request-line</code> then append the HTTP request line,\notherwise append the header value.</li>\n<li>If value is not the last value then append an ASCII newline <code>\\n</code>. The string\nMUST NOT include a trailing ASCII newline.</li>\n</ol>\n<h1>Example Requests</h1>\n<p>All requests refer to the following request (body omitted):</p>\n<pre><code>POST /foo HTTP/1.1\nHost: example.org\nDate: Tue, 07 Jun 2014 20:51:35 GMT\nContent-Type: application/json\nDigest: SHA-256=X48E9qOokqqrvdts8nOJRJN3OWDUoyWxBf7kbu9DBPE=\nContent-Length: 18\n</code></pre>\n<p>The "rsa-key-1" keyId refers to a private key known to the client and a public\nkey known to the server. The "hmac-key-1" keyId refers to key known to the\nclient and server.</p>\n<h2>Default parameterization</h2>\n<p>The authorization header and signature would be generated as:</p>\n<pre><code>Authorization: Signature keyId="rsa-key-1",algorithm="rsa-sha256",signature="Base64(RSA-SHA256(signing string))"\n</code></pre>\n<p>The client would compose the signing string as:</p>\n<pre><code>date: Tue, 07 Jun 2014 20:51:35 GMT\n</code></pre>\n<h2>Header List</h2>\n<p>The authorization header and signature would be generated as:</p>\n<pre><code>Authorization: Signature keyId="rsa-key-1",algorithm="rsa-sha256",headers="(request-target) date content-type digest",signature="Base64(RSA-SHA256(signing string))"\n</code></pre>\n<p>The client would compose the signing string as (<code>+ "\\n"</code> inserted for\nreadability):</p>\n<pre><code>(request-target) post /foo + "\\n"\ndate: Tue, 07 Jun 2011 20:51:35 GMT + "\\n"\ncontent-type: application/json + "\\n"\ndigest: SHA-256=Base64(SHA256(Body))\n</code></pre>\n<h2>Algorithm</h2>\n<p>The authorization header and signature would be generated as:</p>\n<pre><code>Authorization: Signature keyId="hmac-key-1",algorithm="hmac-sha1",signature="Base64(HMAC-SHA1(signing string))"\n</code></pre>\n<p>The client would compose the signing string as:</p>\n<pre><code>date: Tue, 07 Jun 2011 20:51:35 GMT\n</code></pre>\n<h1>Signing Algorithms</h1>\n<p>Currently supported algorithm names are:</p>\n<ul>\n<li>rsa-sha1</li>\n<li>rsa-sha256</li>\n<li>rsa-sha512</li>\n<li>dsa-sha1</li>\n<li>hmac-sha1</li>\n<li>hmac-sha256</li>\n<li>hmac-sha512</li>\n</ul>\n<h1>Security Considerations</h1>\n<h2>Default Parameters</h2>\n<p>Note the default parameterization of the <code>Signature</code> scheme is only safe if all\nrequests are carried over a secure transport (i.e., TLS).  Sending the default\nscheme over a non-secure transport will leave the request vulnerable to\nspoofing, tampering, replay/repudiation, and integrity violations (if using the\nSTRIDE threat-modeling methodology).</p>\n<h2>Insecure Transports</h2>\n<p>If sending the request over plain HTTP, service providers SHOULD require clients\nto sign ALL HTTP headers, and the <code>request-line</code>.  Additionally, service\nproviders SHOULD require <code>Content-MD5</code> calculations to be performed to ensure\nagainst any tampering from clients.</p>\n<h2>Nonces</h2>\n<p>Nonces are out of scope for this document simply because many service providers\nfail to implement them correctly, or do not adopt security specifications\nbecause of the infrastructure complexity.  Given the <code>header</code> parameterization,\na service provider is fully enabled to add nonce semantics into this scheme by\nusing something like an <code>x-request-nonce</code> header, and ensuring it is signed\nwith the <code>Date</code> header.</p>\n<h2>Clock Skew</h2>\n<p>As the default scheme is to sign the <code>Date</code> header, service providers SHOULD\nprotect against logged replay attacks by enforcing a clock skew.  The server\nSHOULD be synchronized with NTP, and the recommendation in this specification\nis to allow 300s of clock skew (in either direction).</p>\n<h2>Required Headers to Sign</h2>\n<p>It is out of scope for this document to dictate what headers a service provider\nwill want to enforce, but service providers SHOULD at minimum include the\n<code>Date</code> header.</p>\n<h1>References</h1>\n<h2>Normative References</h2>\n<ul>\n<li>[RFC2616] Hypertext Transfer Protocol -- HTTP/1.1</li>\n<li>[RFC2617] HTTP Authentication: Basic and Digest Access Authentication</li>\n<li>[RFC5246] The Transport Layer Security (TLS) Protocol Version 1.2</li>\n</ul>\n<h2>Informative References</h2>\n<pre><code>Name: Mark Cavage (editor)\nCompany: Joyent, Inc.\nEmail: mark.cavage@joyent.com\nURI: http://www.joyent.com\n</code></pre>\n<h1>Appendix A - Test Values</h1>\n<p>The following test data uses the RSA (1024b) keys, which we will refer\nto as <code>keyId=Test</code> in the following samples:</p>\n<pre><code>-----BEGIN PUBLIC KEY-----\nMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDCFENGw33yGihy92pDjZQhl0C3\n6rPJj+CvfSC8+q28hxA161QFNUd13wuCTUcq0Qd2qsBe/2hFyc2DCJJg0h1L78+6\nZ4UMR7EOcpfdUE9Hf3m/hs+FUR45uBJeDK1HSFHD8bHKD6kv8FPGfJTotc+2xjJw\noYi+1hqp1fIekaxsyQIDAQAB\n-----END PUBLIC KEY-----\n\n-----BEGIN RSA PRIVATE KEY-----\nMIICXgIBAAKBgQDCFENGw33yGihy92pDjZQhl0C36rPJj+CvfSC8+q28hxA161QF\nNUd13wuCTUcq0Qd2qsBe/2hFyc2DCJJg0h1L78+6Z4UMR7EOcpfdUE9Hf3m/hs+F\nUR45uBJeDK1HSFHD8bHKD6kv8FPGfJTotc+2xjJwoYi+1hqp1fIekaxsyQIDAQAB\nAoGBAJR8ZkCUvx5kzv+utdl7T5MnordT1TvoXXJGXK7ZZ+UuvMNUCdN2QPc4sBiA\nQWvLw1cSKt5DsKZ8UETpYPy8pPYnnDEz2dDYiaew9+xEpubyeW2oH4Zx71wqBtOK\nkqwrXa/pzdpiucRRjk6vE6YY7EBBs/g7uanVpGibOVAEsqH1AkEA7DkjVH28WDUg\nf1nqvfn2Kj6CT7nIcE3jGJsZZ7zlZmBmHFDONMLUrXR/Zm3pR5m0tCmBqa5RK95u\n412jt1dPIwJBANJT3v8pnkth48bQo/fKel6uEYyboRtA5/uHuHkZ6FQF7OUkGogc\nmSJluOdc5t6hI1VsLn0QZEjQZMEOWr+wKSMCQQCC4kXJEsHAve77oP6HtG/IiEn7\nkpyUXRNvFsDE0czpJJBvL/aRFUJxuRK91jhjC68sA7NsKMGg5OXb5I5Jj36xAkEA\ngIT7aFOYBFwGgQAQkWNKLvySgKbAZRTeLBacpHMuQdl1DfdntvAyqpAZ0lY0RKmW\nG6aFKaqQfOXKCyWoUiVknQJAXrlgySFci/2ueKlIE1QqIiLSZ8V8OlpFLRnb1pzI\n7U1yQXnTAEFYM560yJlzUpOb1V4cScGd365tiSMvxLOvTA==\n-----END RSA PRIVATE KEY-----\n</code></pre>\n<p>And all examples use this request:</p>\n<!-- httpreq -->\n<pre><code>POST /foo?param=value&#x26;pet=dog HTTP/1.1\nHost: example.com\nDate: Thu, 05 Jan 2014 21:31:40 GMT\nContent-Type: application/json\nDigest: SHA-256=X48E9qOokqqrvdts8nOJRJN3OWDUoyWxBf7kbu9DBPE=\nContent-Length: 18\n\n{"hello": "world"}\n</code></pre>\n<!-- /httpreq -->\n<h3>Default</h3>\n<p>The string to sign would be:</p>\n<!-- sign {"name": "Default", "options": {"keyId":"Test", "algorithm": "rsa-sha256"}} -->\n<!-- signstring -->\n<pre><code>date: Thu, 05 Jan 2014 21:31:40 GMT\n</code></pre>\n<!-- /signstring -->\n<p>The Authorization header would be:</p>\n<!-- authz -->\n<pre><code>Authorization: Signature keyId="Test",algorithm="rsa-sha256",headers="date",signature="jKyvPcxB4JbmYY4mByyBY7cZfNl4OW9HpFQlG7N4YcJPteKTu4MWCLyk+gIr0wDgqtLWf9NLpMAMimdfsH7FSWGfbMFSrsVTHNTk0rK3usrfFnti1dxsM4jl0kYJCKTGI/UWkqiaxwNiKqGcdlEDrTcUhhsFsOIo8VhddmZTZ8w="\n</code></pre>\n<!-- /authz -->\n<h3>All Headers</h3>\n<p>Parameterized to include all headers, the string to sign would be (<code>+ "\\n"</code>\ninserted for readability):</p>\n<!-- sign {"name": "All Headers", "options": {"keyId":"Test", "algorithm": "rsa-sha256", "headers": ["(request-target)", "host", "date", "content-type", "digest", "content-length"]}} -->\n<!-- signstring -->\n<pre><code>(request-target): post /foo?param=value&#x26;pet=dog\nhost: example.com\ndate: Thu, 05 Jan 2014 21:31:40 GMT\ncontent-type: application/json\ndigest: SHA-256=X48E9qOokqqrvdts8nOJRJN3OWDUoyWxBf7kbu9DBPE=\ncontent-length: 18\n</code></pre>\n<!-- /signstring -->\n<p>The Authorization header would be:</p>\n<!-- authz -->\n<pre><code>Authorization: Signature keyId="Test",algorithm="rsa-sha256",headers="(request-target) host date content-type digest content-length",signature="Ef7MlxLXoBovhil3AlyjtBwAL9g4TN3tibLj7uuNB3CROat/9KaeQ4hW2NiJ+pZ6HQEOx9vYZAyi+7cmIkmJszJCut5kQLAwuX+Ms/mUFvpKlSo9StS2bMXDBNjOh4Auj774GFj4gwjS+3NhFeoqyr/MuN6HsEnkvn6zdgfE2i0="\n</code></pre>\n<!-- /authz -->\n<h2>Generating and verifying signatures using <code>openssl</code></h2>\n<p>The <code>openssl</code> commandline tool can be used to generate or verify the signatures listed above.</p>\n<p>Compose the signing string as usual, and pipe it into the the <code>openssl dgst</code> command, then into <code>openssl enc -base64</code>, as follows:</p>\n<pre><code>$ printf \'date: Thu, 05 Jan 2014 21:31:40 GMT\' | \\\n  openssl dgst -binary -sign /path/to/private.pem -sha256 | \\\n  openssl enc -base64\njKyvPcxB4JbmYY4mByyBY7cZfNl4OW9Hp...\n$\n</code></pre>\n<p>The <code>-sha256</code> option is necessary to produce an <code>rsa-sha256</code> signature. You can select other hash algorithms such as <code>sha1</code> by changing this argument.</p>\n<p>To verify a signature, first save the signature data, Base64-decoded, into a file, then use <code>openssl dgst</code> again with the <code>-verify</code> option:</p>\n<pre><code>$ echo \'jKyvPcxB4JbmYY4mByy...\' | openssl enc -A -d -base64 > signature\n$ printf \'date: Thu, 05 Jan 2014 21:31:40 GMT\' | \\\n  openssl dgst -sha256 -verify /path/to/public.pem -signature ./signature\nVerified OK\n$\n</code></pre>\n<h2>Generating and verifying signatures using <code>sshpk-sign</code></h2>\n<p>You can also generate and check signatures using the <code>sshpk-sign</code> tool which is\nincluded with the <code>sshpk</code> package in <code>npm</code>.</p>\n<p>Compose the signing string as above, and pipe it into <code>sshpk-sign</code> as follows:</p>\n<pre><code>$ printf \'date: Thu, 05 Jan 2014 21:31:40 GMT\' | \\\n  sshpk-sign -i /path/to/private.pem\njKyvPcxB4JbmYY4mByyBY7cZfNl4OW9Hp...\n$\n</code></pre>\n<p>This will produce an <code>rsa-sha256</code> signature by default, as you can see using\nthe <code>-v</code> option:</p>\n<pre><code>sshpk-sign: using rsa-sha256 with a 1024 bit key\n</code></pre>\n<p>You can also use <code>sshpk-verify</code> in a similar manner:</p>\n<pre><code>$ printf \'date: Thu, 05 Jan 2014 21:31:40 GMT\' | \\\n  sshpk-verify -i ./public.pem -s \'jKyvPcxB4JbmYY...\'\nOK\n$\n</code></pre>',docPath:"argo-ci/node_modules/fsevents/node_modules/http-signature/http_signing",proj:"argo-ci"}}}});
//# sourceMappingURL=path---docs-argo-ci-node-modules-fsevents-node-modules-http-signature-http-signing-html-28e1da648a715ce4a4db.js.map