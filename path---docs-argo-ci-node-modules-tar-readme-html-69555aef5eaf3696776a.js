webpackJsonp([63837780488820],{3231:function(e,t){e.exports={pathContext:{docHtml:'<h1>node-tar</h1>\n<p>Tar for Node.js.</p>\n<p><a href="https://nodei.co/npm/tar/"><img src="https://nodei.co/npm/tar.png" alt="NPM"></a></p>\n<h2>API</h2>\n<p>See <code>examples/</code> for usage examples.</p>\n<h3>var tar = require(\'tar\')</h3>\n<p>Returns an object with <code>.Pack</code>, <code>.Extract</code> and <code>.Parse</code> methods.</p>\n<h3>tar.Pack([properties])</h3>\n<p>Returns a through stream. Use\n<a href="https://npmjs.org/package/fstream">fstream</a> to write files into the\npack stream and you will receive tar archive data from the pack\nstream.</p>\n<p>This only works with directories, it does not work with individual files.</p>\n<p>The optional <code>properties</code> object are used to set properties in the tar\n\'Global Extended Header\'. If the <code>fromBase</code> property is set to true,\nthe tar will contain files relative to the path passed, and not with\nthe path included.</p>\n<h3>tar.Extract([options])</h3>\n<p>Returns a through stream. Write tar data to the stream and the files\nin the tarball will be extracted onto the filesystem.</p>\n<p><code>options</code> can be:</p>\n<pre><code class="language-js">{\n  path: \'/path/to/extract/tar/into\',\n  strip: 0, // how many path segments to strip from the root when extracting\n}\n</code></pre>\n<p><code>options</code> also get passed to the <code>fstream.Writer</code> instance that <code>tar</code>\nuses internally.</p>\n<h3>tar.Parse()</h3>\n<p>Returns a writable stream. Write tar data to it and it will emit\n<code>entry</code> events for each entry parsed from the tarball. This is used by\n<code>tar.Extract</code>.</p>',docPath:"argo-ci/node_modules/tar/readme",proj:"argo-ci"}}}});
//# sourceMappingURL=path---docs-argo-ci-node-modules-tar-readme-html-69555aef5eaf3696776a.js.map