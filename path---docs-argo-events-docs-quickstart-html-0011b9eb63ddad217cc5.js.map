{"version":3,"sources":["webpack:///path---docs-argo-events-docs-quickstart-html-0011b9eb63ddad217cc5.js","webpack:///./.cache/json/docs-argo-events-docs-quickstart-html.json"],"names":["webpackJsonp","552","module","exports","pathContext","docHtml","docPath","proj"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,aAAeC,QAAA,o+GAA23FC,QAAA,8BAAAC,KAAA","file":"path---docs-argo-events-docs-quickstart-html-0011b9eb63ddad217cc5.js","sourcesContent":["webpackJsonp([267626992867886],{\n\n/***/ 552:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"pathContext\":{\"docHtml\":\"<h1>Getting Started - Quickstart</h1>\\n<p>This is a guide to getting started with Argo Events.</p>\\n<h2>Requirements</h2>\\n<ul>\\n<li>Kubernetes cluster >v1.9</li>\\n<li>Installed the <a href=\\\"https://kubernetes.io/docs/tasks/tools/install-kubectl/\\\">kubectl</a> command-line tool >v1.9.0</li>\\n<li>Installed Go >1.9 and properly setup the <a href=\\\"https://golang.org/doc/install\\\">GOPATH</a> environment variable</li>\\n<li>Installed <a href=\\\"https://golang.github.io/dep/docs/installation.html\\\">dep</a>, Go's dependency tool</li>\\n</ul>\\n<h2>1. Get the project</h2>\\n<pre><code>go get github.com/argoproj/argo-events\\ncd $GOPATH/src/github.com/argoproj/argo-events\\n</code></pre>\\n<h2>2. Deploy Argo Events SA, ClusterRoles, ConfigMap, and Sensor Controller</h2>\\n<p>Note 1: This process is manual right now, but we're working on providing a Helm chart or integrating as a Ksonnet application.\\nNote 2: Modify the <a href=\\\"../hack/k8s/manifests/argo-events-cluster-roles.yaml\\\">argo-events-cluster-roles.yaml</a> file to use the correct namespace that you wish to deploy the sensor controller + signal microservices.</p>\\n<pre><code>kubectl apply -f hack/k8s/manifests/argo-events-sa.yaml\\nkubectl apply -f hack/k8s/manifests/argo-events-cluster-roles.yaml\\nkubectl apply -f hack/k8s/manifests/sensor-crd.yaml\\nkubectl apply -f hack/k8s/manifests/sensor-controller-configmap.yaml\\nkubectl apply -f hack/k8s/manifests/sensor-controller-deployment.yaml\\n</code></pre>\\n<h2>3. Deploy Argo Events Webhook Signal Microservice</h2>\\n<p>Note: In order to have a useful cluster for Argo Events, you will need to separately deploy the various signal services that you wish to support. This command installs the webhook signal service.</p>\\n<pre><code>kubectl apply -f hack/k8s/manifests/services/webhook.yaml\\n</code></pre>\\n<h2>4. Install Argo</h2>\\n<p>Follow instructions from <a href=\\\"https://github.com/argoproj/argo/blob/master/demo.md\\\">https://github.com/argoproj/argo/blob/master/demo.md</a></p>\\n<h2>5. Create a webhook sensor</h2>\\n<pre><code>kubectl apply -f examples/webhook-with-resource-param.yaml\\n</code></pre>\\n<p>Verify that the sensor was created.</p>\\n<pre><code>kubectl get sensors -n default\\n</code></pre>\\n<p>Verify that the signal microservice is listening for signals and the sensor is active.</p>\\n<pre><code>kubectl logs signal-webhook-xxx -f\\nkubectl get sensor webhook-with-resource-param -n default -o yaml\\n</code></pre>\\n<h2>6. Trigger the webhook &#x26; corresponding Argo workflow</h2>\\n<p>Trigger the webhook via sending a POST with a JSON with a \\\"message\\\" key and value.\\nEnsure that you set the header \\\"Content-Type\\\" to \\\"application/json\\\" or this event will be ignored.\\nNote: the <code>WEBHOOK_SERVICE_URL</code> will differ based on the Kubernetes cluster.</p>\\n<pre><code>export WEBHOOK_SERVICE_URL=$(minikube service --url webhook)\\ncurl -d '{\\\"message\\\":\\\"this is my first webhook\\\"}' -H \\\"Content-Type: application/json\\\" -X POST $WEBHOOK_SERVICE_URL/hello\\n</code></pre>\\n<p>Verify that the Argo workflow was run when the trigger was executed.</p>\\n<pre><code>argo list\\n</code></pre>\\n<p>Verify that the sensor was updated correctly and moved to a \\\"Complete\\\" phase</p>\\n<pre><code>kubectl get sensor webhook-with-resource-param -n default -o yaml\\n</code></pre>\\n<p>Check the logs of the Argo workflow pod for the message you posted.</p>\\n<pre><code>kubectl logs arguments-via-webhook-event main\\n</code></pre>\\n<p>Check the logs of the sensor-controller pod or the associated signal microservice if there are problems.</p>\",\"docPath\":\"argo-events/docs/quickstart\",\"proj\":\"argo-events\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---docs-argo-events-docs-quickstart-html-0011b9eb63ddad217cc5.js","module.exports = {\"pathContext\":{\"docHtml\":\"<h1>Getting Started - Quickstart</h1>\\n<p>This is a guide to getting started with Argo Events.</p>\\n<h2>Requirements</h2>\\n<ul>\\n<li>Kubernetes cluster >v1.9</li>\\n<li>Installed the <a href=\\\"https://kubernetes.io/docs/tasks/tools/install-kubectl/\\\">kubectl</a> command-line tool >v1.9.0</li>\\n<li>Installed Go >1.9 and properly setup the <a href=\\\"https://golang.org/doc/install\\\">GOPATH</a> environment variable</li>\\n<li>Installed <a href=\\\"https://golang.github.io/dep/docs/installation.html\\\">dep</a>, Go's dependency tool</li>\\n</ul>\\n<h2>1. Get the project</h2>\\n<pre><code>go get github.com/argoproj/argo-events\\ncd $GOPATH/src/github.com/argoproj/argo-events\\n</code></pre>\\n<h2>2. Deploy Argo Events SA, ClusterRoles, ConfigMap, and Sensor Controller</h2>\\n<p>Note 1: This process is manual right now, but we're working on providing a Helm chart or integrating as a Ksonnet application.\\nNote 2: Modify the <a href=\\\"../hack/k8s/manifests/argo-events-cluster-roles.yaml\\\">argo-events-cluster-roles.yaml</a> file to use the correct namespace that you wish to deploy the sensor controller + signal microservices.</p>\\n<pre><code>kubectl apply -f hack/k8s/manifests/argo-events-sa.yaml\\nkubectl apply -f hack/k8s/manifests/argo-events-cluster-roles.yaml\\nkubectl apply -f hack/k8s/manifests/sensor-crd.yaml\\nkubectl apply -f hack/k8s/manifests/sensor-controller-configmap.yaml\\nkubectl apply -f hack/k8s/manifests/sensor-controller-deployment.yaml\\n</code></pre>\\n<h2>3. Deploy Argo Events Webhook Signal Microservice</h2>\\n<p>Note: In order to have a useful cluster for Argo Events, you will need to separately deploy the various signal services that you wish to support. This command installs the webhook signal service.</p>\\n<pre><code>kubectl apply -f hack/k8s/manifests/services/webhook.yaml\\n</code></pre>\\n<h2>4. Install Argo</h2>\\n<p>Follow instructions from <a href=\\\"https://github.com/argoproj/argo/blob/master/demo.md\\\">https://github.com/argoproj/argo/blob/master/demo.md</a></p>\\n<h2>5. Create a webhook sensor</h2>\\n<pre><code>kubectl apply -f examples/webhook-with-resource-param.yaml\\n</code></pre>\\n<p>Verify that the sensor was created.</p>\\n<pre><code>kubectl get sensors -n default\\n</code></pre>\\n<p>Verify that the signal microservice is listening for signals and the sensor is active.</p>\\n<pre><code>kubectl logs signal-webhook-xxx -f\\nkubectl get sensor webhook-with-resource-param -n default -o yaml\\n</code></pre>\\n<h2>6. Trigger the webhook &#x26; corresponding Argo workflow</h2>\\n<p>Trigger the webhook via sending a POST with a JSON with a \\\"message\\\" key and value.\\nEnsure that you set the header \\\"Content-Type\\\" to \\\"application/json\\\" or this event will be ignored.\\nNote: the <code>WEBHOOK_SERVICE_URL</code> will differ based on the Kubernetes cluster.</p>\\n<pre><code>export WEBHOOK_SERVICE_URL=$(minikube service --url webhook)\\ncurl -d '{\\\"message\\\":\\\"this is my first webhook\\\"}' -H \\\"Content-Type: application/json\\\" -X POST $WEBHOOK_SERVICE_URL/hello\\n</code></pre>\\n<p>Verify that the Argo workflow was run when the trigger was executed.</p>\\n<pre><code>argo list\\n</code></pre>\\n<p>Verify that the sensor was updated correctly and moved to a \\\"Complete\\\" phase</p>\\n<pre><code>kubectl get sensor webhook-with-resource-param -n default -o yaml\\n</code></pre>\\n<p>Check the logs of the Argo workflow pod for the message you posted.</p>\\n<pre><code>kubectl logs arguments-via-webhook-event main\\n</code></pre>\\n<p>Check the logs of the sensor-controller pod or the associated signal microservice if there are problems.</p>\",\"docPath\":\"argo-events/docs/quickstart\",\"proj\":\"argo-events\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/docs-argo-events-docs-quickstart-html.json\n// module id = 552\n// module chunks = 267626992867886"],"sourceRoot":""}