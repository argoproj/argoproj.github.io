{"version":3,"sources":["webpack:///path---docs-argo-ci-node-modules-tsutils-changelog-html-6778a17a11ce2ed5ea77.js","webpack:///./.cache/json/docs-argo-ci-node-modules-tsutils-changelog-html.json"],"names":["webpackJsonp","3259","module","exports","pathContext","docHtml","docPath","proj"],"mappings":"AAAAA,cAAc,iBAERC,KACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,aAAeC,QAAA,o2XAAw6NC,QAAA,yCAAAC,KAAA","file":"path---docs-argo-ci-node-modules-tsutils-changelog-html-6778a17a11ce2ed5ea77.js","sourcesContent":["webpackJsonp([113103462367365],{\n\n/***/ 3259:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"pathContext\":{\"docHtml\":\"<h1>2.13.0</h1>\\n<p><strong>Features:</strong></p>\\n<ul>\\n<li>added support for <code>JsxFragment</code> introduced in typescript@2.6.2</li>\\n<li>added corresponding typeguard functions</li>\\n</ul>\\n<h1>2.12.2</h1>\\n<p><strong>Bugfixes:</strong></p>\\n<ul>\\n<li>\\n<p><code>endsControlFlow</code></p>\\n<ul>\\n<li>added missing logic for labeled statement, iteration statements and try-catch</li>\\n<li>added missing logic for <code>break</code> and <code>continue</code> with labels</li>\\n<li>take all jump statements into account, not only the last statement</li>\\n</ul>\\n</li>\\n<li><code>isValidIdentifier</code> and <code>isValidNumericLiteral</code> handle irregular whitespace</li>\\n<li><code>findImports</code> searches in ambient modules inside regular <code>.ts</code> files (not only <code>.d.ts</code>)</li>\\n<li><code>canHaveJsDoc</code> is now a typeguard</li>\\n</ul>\\n<h1>2.12.1</h1>\\n<p><strong>Bugfixes:</strong></p>\\n<ul>\\n<li>\\n<p><code>forEachTokenWithTrivia</code></p>\\n<ul>\\n<li>handles irregular whitespace and no longer visits some tokens twice</li>\\n<li>correctly calculates the range of JsxText</li>\\n</ul>\\n</li>\\n</ul>\\n<h1>2.12.0</h1>\\n<p><strong>API-Changes:</strong></p>\\n<ul>\\n<li>deprecated <code>ImportOptions</code> if favor of the new <code>ImportKind</code> enum</li>\\n</ul>\\n<h1>2.11.2</h1>\\n<p><strong>Bugfixes:</strong></p>\\n<ul>\\n<li><code>parseJsDocOfNode</code>: set correct <code>pos</code>, <code>end</code> and <code>parent</code> properties. Also affects <code>getJsDoc</code> of <code>EndOfFileToken</code></li>\\n</ul>\\n<h1>2.11.1</h1>\\n<p><strong>Bugfixes:</strong></p>\\n<ul>\\n<li><code>collectVariableUsage</code>: correctly consider catch binding as block scoped declaration inside catch block</li>\\n</ul>\\n<h1>2.11.0</h1>\\n<p><strong>Bugfixes:</strong></p>\\n<ul>\\n<li><code>getJsDoc</code> now correctly returns JsDoc for <code>EndOfFileToken</code></li>\\n</ul>\\n<p><strong>Features:</strong></p>\\n<ul>\\n<li>added utility <code>parseJsDocOfNode</code></li>\\n</ul>\\n<h1>2.10.0</h1>\\n<p><strong>Features:</strong></p>\\n<ul>\\n<li>added utility <code>findImports</code> to find all kinds of imports in a source file</li>\\n</ul>\\n<h1>2.9.0</h1>\\n<p><strong>Features:</strong></p>\\n<ul>\\n<li>added typeguard <code>isMappedTypeNode</code></li>\\n<li>added utilities <code>canHaveJsDoc</code> and <code>getJsDoc</code></li>\\n</ul>\\n<h1>2.8.2</h1>\\n<p><strong>Bugfixes:</strong></p>\\n<ul>\\n<li><code>collectVariableUsage</code>: handle global augmentation like other module augmentations</li>\\n</ul>\\n<h1>2.8.1</h1>\\n<p><strong>Bugfixes:</strong></p>\\n<ul>\\n<li>Support <code>typescript@2.5.1</code> with optional catch binding</li>\\n<li><code>collectVariableUsage</code> fixed a bug where method decorator had method's parameters in scope</li>\\n</ul>\\n<h1>2.8.0</h1>\\n<ul>\\n<li>Compatibility with the latest typescript nightly</li>\\n<li>Added <code>getIdentifierText</code> to unescape identifiers across typescript versions</li>\\n</ul>\\n<h1>2.7.1</h1>\\n<p><strong>Bugfixes:</strong></p>\\n<ul>\\n<li><code>isReassignmentTarget</code> don't return <code>true</code> for right side of assignment</li>\\n</ul>\\n<h1>2.7.0</h1>\\n<p><strong>Features:</strong></p>\\n<ul>\\n<li>Added <code>isReassignmentTarget</code> utility</li>\\n</ul>\\n<h1>2.6.1</h1>\\n<p><strong>Bugfixes:</strong></p>\\n<ul>\\n<li><code>getDeclarationDomain</code> now returns <code>undefined</code> for Parameter in IndexSignature</li>\\n<li><code>collectVariableUsage</code> ignores Parameter in IndexSignature</li>\\n</ul>\\n<h1>2.6.0</h1>\\n<p><strong>Bugfixes:</strong></p>\\n<ul>\\n<li>\\n<p><code>collectVariableUsage</code>:</p>\\n<ul>\\n<li>don't merge imports with global declarations</li>\\n<li>treat everything in a declaration file as exported if there is no explicit <code>export {};</code></li>\\n</ul>\\n</li>\\n<li><code>isExpressionValueUsed</code>: handle destructuring in <code>for...of</code></li>\\n</ul>\\n<p><strong>Features:</strong></p>\\n<ul>\\n<li>Added <code>getModifier</code> utility</li>\\n<li>Added <code>DeclarationDomain.Import</code> to distinguish imports from other declarations</li>\\n</ul>\\n<h1>2.5.1</h1>\\n<p><strong>Bugfixes:</strong></p>\\n<ul>\\n<li><code>collectVariableUsage</code> ignore jump labels as in <code>break label;</code></li>\\n</ul>\\n<h1>2.5.0</h1>\\n<p><strong>Bugfixes:</strong></p>\\n<ul>\\n<li><code>isFunctionWithBody</code> handles constructor overload correctly.</li>\\n</ul>\\n<p><strong>Features:</strong></p>\\n<ul>\\n<li>Implemented <code>isExpressionValueUsed</code> to check whether the result of an expression is actually used.</li>\\n<li>Implemented <code>getDeclarationDomain</code> to determine if a given declaration introduces a new symbol in the value or type domain.</li>\\n</ul>\\n<p><strong><code>collectVariableUses</code> is now usable</strong></p>\\n<ul>\\n<li>no longer ignores signatures and its parameters</li>\\n<li>don't merge declarations and uses across domains</li>\\n<li>no longer marks exceptions in catch clause or parameter properties as exported</li>\\n<li>fixed exports of namespaces</li>\\n<li>fixed scoping of ClassExpression name</li>\\n<li>correcly handle ambient namespaces and module augmentations</li>\\n<li>fixed how <code>: typeof foo</code> is handled for parameters and function return type</li>\\n<li><strong>still WIP</strong>: <code>export {Foo as Bar}</code> inside ambient namespaces and modules</li>\\n</ul>\\n<h1>2.4.0</h1>\\n<p><strong>Bugfixes:</strong></p>\\n<ul>\\n<li><code>getLineRanges</code>: <code>contentLength</code> now contains the correct line length when there are multiple consecutive line break characters</li>\\n<li><code>getTokenAtPosition</code>: don't match tokens that end at the specified position (because that's already outside of their range)</li>\\n<li>deprecated the misnamed <code>isModfierFlagSet</code>, use the new <code>isModifierFlagSet</code> instead</li>\\n</ul>\\n<p><strong>Features:</strong></p>\\n<ul>\\n<li>Added typeguard: <code>isJsDoc</code></li>\\n<li>Added experimental scope and usage analysis (<code>getUsageDomain</code> and <code>collectVariableUsage</code>)</li>\\n</ul>\\n<h1>2.3.0</h1>\\n<p><strong>Bugfixes:</strong></p>\\n<ul>\\n<li><code>forEachComment</code> no longer omits some comments when callback returns a truthy value</li>\\n<li><code>isPositionInComment</code> fixed false positive inside JSXText</li>\\n</ul>\\n<p><strong>Features:</strong></p>\\n<ul>\\n<li>Added utility: <code>getCommentAtPosition</code></li>\\n</ul>\\n<h1>2.2.0</h1>\\n<p><strong>Bugfixes:</strong></p>\\n<ul>\\n<li>Fixed bit value of <code>SideEffectOptions.JsxElement</code> to be a power of 2</li>\\n</ul>\\n<p><strong>Features:</strong></p>\\n<ul>\\n<li>Added utilities: <code>getTokenAtPosition</code> and <code>isPositionInComment</code></li>\\n</ul>\\n<h1>2.1.0</h1>\\n<p><strong>Features:</strong></p>\\n<ul>\\n<li>Added typeguard <code>isExpression</code></li>\\n<li>Added utilities: <code>hasSideEffects</code>, <code>getDeclarationOfBindingElement</code></li>\\n</ul>\\n<h1>2.0.0</h1>\\n<p><strong>Breaking Changes:</strong></p>\\n<ul>\\n<li>Dropped compatibility with <code>typescript@&#x3C;2.1.0</code></li>\\n<li>Removed misnamed <code>isNumericliteral</code>, use <code>isNumericLiteral</code> instead (notice the uppercase L)</li>\\n<li>Removed <code>isEnumLiteralType</code> which will cause compile errors with typescript@2.4.0</li>\\n<li>Refactored directory structure: all imports that referenced subdirectories (e.g. <code>require('tsutils/src/typeguard')</code> will be broken</li>\\n</ul>\\n<p><strong>Features:</strong></p>\\n<ul>\\n<li>New directory structure allows imports of typeguards or utils independently, e.g. (<code>require('tsutils/typeguard')</code>)</li>\\n</ul>\\n<h1>1.9.1</h1>\\n<p><strong>Bugfixes:</strong></p>\\n<ul>\\n<li><code>isObjectFlagSet</code> now uses the correct <code>objectFlags</code> property</li>\\n</ul>\\n<h1>1.9.0</h1>\\n<p><strong>Bugfixes:</strong></p>\\n<ul>\\n<li><code>getNextToken</code> no longer omits <code>EndOfFileToken</code> when there is no trivia before EOF. That means the only inputs where <code>getNextToken</code> returns <code>undefined</code> are <code>SourceFile</code> and <code>EndOfFileToken</code></li>\\n</ul>\\n<p><strong>Features</strong>:</p>\\n<ul>\\n<li>Added typeguards for types</li>\\n<li>Added utilities for flag checking: <code>isNodeFlagSet</code>, <code>isTypeFlagSet</code>, <code>isSymbolFlagSet</code>,<code>isObjectFlagSet</code>, <code>isModifierFlagSet</code></li>\\n</ul>\\n<h1>1.8.0</h1>\\n<p><strong>Features:</strong></p>\\n<ul>\\n<li>Support peer dependency of typescript nightlies of 2.4.0</li>\\n<li>Added typeguards: <code>isJsxAttributes</code>, <code>isIntersectionTypeNode</code>, <code>isTypeOperatorNode</code>, <code>isTypePredicateNode</code>, <code>isTypeQueryNode</code>, <code>isUnionTypeNode</code></li>\\n</ul>\\n<h1>1.7.0</h1>\\n<p><strong>Bugfixes:</strong></p>\\n<ul>\\n<li><code>isFunctionScopeBoundary</code> now handles Interfaces, TypeAliases, FunctionSignatures, etc</li>\\n</ul>\\n<p><strong>Features:</strong></p>\\n<ul>\\n<li>Added utilities: <code>isThisParameter</code>, <code>isSameLine</code> and <code>isFunctionWithBody</code></li>\\n</ul>\\n<h1>1.6.0</h1>\\n<p><strong>Features:</strong></p>\\n<ul>\\n<li>Add <code>isValidPropertyAccess</code>, <code>isValidNumericLiteral</code> and <code>isValidPropertyName</code></li>\\n</ul>\\n<h1>1.5.0</h1>\\n<p><strong>Features:</strong></p>\\n<ul>\\n<li>Add <code>isValidIdentifier</code></li>\\n</ul>\\n<h1>1.4.0</h1>\\n<p><strong>Features:</strong></p>\\n<ul>\\n<li>Add <code>contentLength</code> property to the result of <code>getLineRanges</code></li>\\n</ul>\\n<h1>1.3.0</h1>\\n<p><strong>Bugfixes:</strong></p>\\n<ul>\\n<li>\\n<p><code>canHaveLeadingTrivia</code>:</p>\\n<ul>\\n<li>Fix property access on undefined parent reference</li>\\n<li>Fixes: <a href=\\\"https://github.com/palantir/tslint/issues/2330\\\">palantir/tslint#2330</a></li>\\n</ul>\\n</li>\\n<li><code>hasOwnThisReference</code>: now includes accessors on object literals</li>\\n</ul>\\n<p><strong>Features:</strong></p>\\n<ul>\\n<li>\\n<p>Typeguards:</p>\\n<ul>\\n<li>isTypeParameterDeclaration</li>\\n<li>isEnitityName</li>\\n</ul>\\n</li>\\n</ul>\\n<h1>1.2.2</h1>\\n<p><strong>Bugfixes:</strong></p>\\n<ul>\\n<li>\\n<p><code>hasOwnThisReference</code>:</p>\\n<ul>\\n<li>exclude overload signatures of function declarations</li>\\n<li>add method declarations on object literals</li>\\n</ul>\\n</li>\\n</ul>\\n<h1>1.2.1</h1>\\n<p><strong>Bugfixes:</strong></p>\\n<ul>\\n<li>Fix name of <code>isNumericLiteral</code></li>\\n</ul>\\n<h1>1.2.0</h1>\\n<p><strong>Features:</strong></p>\\n<ul>\\n<li>\\n<p>Typeguards:</p>\\n<ul>\\n<li>isEnumMember</li>\\n<li>isExpressionWithTypeArguments</li>\\n<li>isImportSpecifier</li>\\n</ul>\\n</li>\\n<li>\\n<p>Utilities:</p>\\n<ul>\\n<li>isJsDocKind, isTypeNodeKind</li>\\n</ul>\\n</li>\\n<li>Allow typescript@next in peerDependencies</li>\\n</ul>\\n<h1>1.1.0</h1>\\n<p><strong>Bugfixes:</strong></p>\\n<ul>\\n<li>Fix isBlockScopeBoundary: Remove WithStatement, IfStatment, DoStatement and WhileStatement because they are no scope boundary whitout a block.</li>\\n</ul>\\n<p><strong>Features:</strong></p>\\n<ul>\\n<li>\\n<p>Added more typeguards:</p>\\n<ul>\\n<li>isAssertionExpression</li>\\n<li>isEmptyStatement</li>\\n<li>isJsxAttributeLike</li>\\n<li>isJsxOpeningLikeElement</li>\\n<li>isNonNullExpression</li>\\n<li>isSyntaxList</li>\\n</ul>\\n</li>\\n<li>\\n<p>Utilities:</p>\\n<ul>\\n<li>getNextToken, getPreviousToken</li>\\n<li>hasOwnThisReference</li>\\n<li>getLineRanges</li>\\n</ul>\\n</li>\\n</ul>\\n<h1>1.0.0</h1>\\n<p><strong>Features:</strong></p>\\n<ul>\\n<li>Initial implementation of typeguards</li>\\n<li>\\n<p>Utilities:</p>\\n<ul>\\n<li>getChildOfKind</li>\\n<li>isNodeKind, isAssignmentKind</li>\\n<li>hasModifier, isParameterProperty, hasAccessModifier</li>\\n<li>getPreviousStatement, getNextStatement</li>\\n<li>getPropertyName</li>\\n<li>forEachDestructuringIdentifier, forEachDeclaredVariable</li>\\n<li>getVariableDeclarationKind, isBlockScopedVariableDeclarationList, isBlockScopedVariableDeclaration</li>\\n<li>isScopeBoundary, isFunctionScopeBoundary, isBlockScopeBoundary</li>\\n<li>forEachToken, forEachTokenWithTrivia, forEachComment</li>\\n<li>endsControlFlow</li>\\n</ul>\\n</li>\\n</ul>\",\"docPath\":\"argo-ci/node_modules/tsutils/changelog\",\"proj\":\"argo-ci\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---docs-argo-ci-node-modules-tsutils-changelog-html-6778a17a11ce2ed5ea77.js","module.exports = {\"pathContext\":{\"docHtml\":\"<h1>2.13.0</h1>\\n<p><strong>Features:</strong></p>\\n<ul>\\n<li>added support for <code>JsxFragment</code> introduced in typescript@2.6.2</li>\\n<li>added corresponding typeguard functions</li>\\n</ul>\\n<h1>2.12.2</h1>\\n<p><strong>Bugfixes:</strong></p>\\n<ul>\\n<li>\\n<p><code>endsControlFlow</code></p>\\n<ul>\\n<li>added missing logic for labeled statement, iteration statements and try-catch</li>\\n<li>added missing logic for <code>break</code> and <code>continue</code> with labels</li>\\n<li>take all jump statements into account, not only the last statement</li>\\n</ul>\\n</li>\\n<li><code>isValidIdentifier</code> and <code>isValidNumericLiteral</code> handle irregular whitespace</li>\\n<li><code>findImports</code> searches in ambient modules inside regular <code>.ts</code> files (not only <code>.d.ts</code>)</li>\\n<li><code>canHaveJsDoc</code> is now a typeguard</li>\\n</ul>\\n<h1>2.12.1</h1>\\n<p><strong>Bugfixes:</strong></p>\\n<ul>\\n<li>\\n<p><code>forEachTokenWithTrivia</code></p>\\n<ul>\\n<li>handles irregular whitespace and no longer visits some tokens twice</li>\\n<li>correctly calculates the range of JsxText</li>\\n</ul>\\n</li>\\n</ul>\\n<h1>2.12.0</h1>\\n<p><strong>API-Changes:</strong></p>\\n<ul>\\n<li>deprecated <code>ImportOptions</code> if favor of the new <code>ImportKind</code> enum</li>\\n</ul>\\n<h1>2.11.2</h1>\\n<p><strong>Bugfixes:</strong></p>\\n<ul>\\n<li><code>parseJsDocOfNode</code>: set correct <code>pos</code>, <code>end</code> and <code>parent</code> properties. Also affects <code>getJsDoc</code> of <code>EndOfFileToken</code></li>\\n</ul>\\n<h1>2.11.1</h1>\\n<p><strong>Bugfixes:</strong></p>\\n<ul>\\n<li><code>collectVariableUsage</code>: correctly consider catch binding as block scoped declaration inside catch block</li>\\n</ul>\\n<h1>2.11.0</h1>\\n<p><strong>Bugfixes:</strong></p>\\n<ul>\\n<li><code>getJsDoc</code> now correctly returns JsDoc for <code>EndOfFileToken</code></li>\\n</ul>\\n<p><strong>Features:</strong></p>\\n<ul>\\n<li>added utility <code>parseJsDocOfNode</code></li>\\n</ul>\\n<h1>2.10.0</h1>\\n<p><strong>Features:</strong></p>\\n<ul>\\n<li>added utility <code>findImports</code> to find all kinds of imports in a source file</li>\\n</ul>\\n<h1>2.9.0</h1>\\n<p><strong>Features:</strong></p>\\n<ul>\\n<li>added typeguard <code>isMappedTypeNode</code></li>\\n<li>added utilities <code>canHaveJsDoc</code> and <code>getJsDoc</code></li>\\n</ul>\\n<h1>2.8.2</h1>\\n<p><strong>Bugfixes:</strong></p>\\n<ul>\\n<li><code>collectVariableUsage</code>: handle global augmentation like other module augmentations</li>\\n</ul>\\n<h1>2.8.1</h1>\\n<p><strong>Bugfixes:</strong></p>\\n<ul>\\n<li>Support <code>typescript@2.5.1</code> with optional catch binding</li>\\n<li><code>collectVariableUsage</code> fixed a bug where method decorator had method's parameters in scope</li>\\n</ul>\\n<h1>2.8.0</h1>\\n<ul>\\n<li>Compatibility with the latest typescript nightly</li>\\n<li>Added <code>getIdentifierText</code> to unescape identifiers across typescript versions</li>\\n</ul>\\n<h1>2.7.1</h1>\\n<p><strong>Bugfixes:</strong></p>\\n<ul>\\n<li><code>isReassignmentTarget</code> don't return <code>true</code> for right side of assignment</li>\\n</ul>\\n<h1>2.7.0</h1>\\n<p><strong>Features:</strong></p>\\n<ul>\\n<li>Added <code>isReassignmentTarget</code> utility</li>\\n</ul>\\n<h1>2.6.1</h1>\\n<p><strong>Bugfixes:</strong></p>\\n<ul>\\n<li><code>getDeclarationDomain</code> now returns <code>undefined</code> for Parameter in IndexSignature</li>\\n<li><code>collectVariableUsage</code> ignores Parameter in IndexSignature</li>\\n</ul>\\n<h1>2.6.0</h1>\\n<p><strong>Bugfixes:</strong></p>\\n<ul>\\n<li>\\n<p><code>collectVariableUsage</code>:</p>\\n<ul>\\n<li>don't merge imports with global declarations</li>\\n<li>treat everything in a declaration file as exported if there is no explicit <code>export {};</code></li>\\n</ul>\\n</li>\\n<li><code>isExpressionValueUsed</code>: handle destructuring in <code>for...of</code></li>\\n</ul>\\n<p><strong>Features:</strong></p>\\n<ul>\\n<li>Added <code>getModifier</code> utility</li>\\n<li>Added <code>DeclarationDomain.Import</code> to distinguish imports from other declarations</li>\\n</ul>\\n<h1>2.5.1</h1>\\n<p><strong>Bugfixes:</strong></p>\\n<ul>\\n<li><code>collectVariableUsage</code> ignore jump labels as in <code>break label;</code></li>\\n</ul>\\n<h1>2.5.0</h1>\\n<p><strong>Bugfixes:</strong></p>\\n<ul>\\n<li><code>isFunctionWithBody</code> handles constructor overload correctly.</li>\\n</ul>\\n<p><strong>Features:</strong></p>\\n<ul>\\n<li>Implemented <code>isExpressionValueUsed</code> to check whether the result of an expression is actually used.</li>\\n<li>Implemented <code>getDeclarationDomain</code> to determine if a given declaration introduces a new symbol in the value or type domain.</li>\\n</ul>\\n<p><strong><code>collectVariableUses</code> is now usable</strong></p>\\n<ul>\\n<li>no longer ignores signatures and its parameters</li>\\n<li>don't merge declarations and uses across domains</li>\\n<li>no longer marks exceptions in catch clause or parameter properties as exported</li>\\n<li>fixed exports of namespaces</li>\\n<li>fixed scoping of ClassExpression name</li>\\n<li>correcly handle ambient namespaces and module augmentations</li>\\n<li>fixed how <code>: typeof foo</code> is handled for parameters and function return type</li>\\n<li><strong>still WIP</strong>: <code>export {Foo as Bar}</code> inside ambient namespaces and modules</li>\\n</ul>\\n<h1>2.4.0</h1>\\n<p><strong>Bugfixes:</strong></p>\\n<ul>\\n<li><code>getLineRanges</code>: <code>contentLength</code> now contains the correct line length when there are multiple consecutive line break characters</li>\\n<li><code>getTokenAtPosition</code>: don't match tokens that end at the specified position (because that's already outside of their range)</li>\\n<li>deprecated the misnamed <code>isModfierFlagSet</code>, use the new <code>isModifierFlagSet</code> instead</li>\\n</ul>\\n<p><strong>Features:</strong></p>\\n<ul>\\n<li>Added typeguard: <code>isJsDoc</code></li>\\n<li>Added experimental scope and usage analysis (<code>getUsageDomain</code> and <code>collectVariableUsage</code>)</li>\\n</ul>\\n<h1>2.3.0</h1>\\n<p><strong>Bugfixes:</strong></p>\\n<ul>\\n<li><code>forEachComment</code> no longer omits some comments when callback returns a truthy value</li>\\n<li><code>isPositionInComment</code> fixed false positive inside JSXText</li>\\n</ul>\\n<p><strong>Features:</strong></p>\\n<ul>\\n<li>Added utility: <code>getCommentAtPosition</code></li>\\n</ul>\\n<h1>2.2.0</h1>\\n<p><strong>Bugfixes:</strong></p>\\n<ul>\\n<li>Fixed bit value of <code>SideEffectOptions.JsxElement</code> to be a power of 2</li>\\n</ul>\\n<p><strong>Features:</strong></p>\\n<ul>\\n<li>Added utilities: <code>getTokenAtPosition</code> and <code>isPositionInComment</code></li>\\n</ul>\\n<h1>2.1.0</h1>\\n<p><strong>Features:</strong></p>\\n<ul>\\n<li>Added typeguard <code>isExpression</code></li>\\n<li>Added utilities: <code>hasSideEffects</code>, <code>getDeclarationOfBindingElement</code></li>\\n</ul>\\n<h1>2.0.0</h1>\\n<p><strong>Breaking Changes:</strong></p>\\n<ul>\\n<li>Dropped compatibility with <code>typescript@&#x3C;2.1.0</code></li>\\n<li>Removed misnamed <code>isNumericliteral</code>, use <code>isNumericLiteral</code> instead (notice the uppercase L)</li>\\n<li>Removed <code>isEnumLiteralType</code> which will cause compile errors with typescript@2.4.0</li>\\n<li>Refactored directory structure: all imports that referenced subdirectories (e.g. <code>require('tsutils/src/typeguard')</code> will be broken</li>\\n</ul>\\n<p><strong>Features:</strong></p>\\n<ul>\\n<li>New directory structure allows imports of typeguards or utils independently, e.g. (<code>require('tsutils/typeguard')</code>)</li>\\n</ul>\\n<h1>1.9.1</h1>\\n<p><strong>Bugfixes:</strong></p>\\n<ul>\\n<li><code>isObjectFlagSet</code> now uses the correct <code>objectFlags</code> property</li>\\n</ul>\\n<h1>1.9.0</h1>\\n<p><strong>Bugfixes:</strong></p>\\n<ul>\\n<li><code>getNextToken</code> no longer omits <code>EndOfFileToken</code> when there is no trivia before EOF. That means the only inputs where <code>getNextToken</code> returns <code>undefined</code> are <code>SourceFile</code> and <code>EndOfFileToken</code></li>\\n</ul>\\n<p><strong>Features</strong>:</p>\\n<ul>\\n<li>Added typeguards for types</li>\\n<li>Added utilities for flag checking: <code>isNodeFlagSet</code>, <code>isTypeFlagSet</code>, <code>isSymbolFlagSet</code>,<code>isObjectFlagSet</code>, <code>isModifierFlagSet</code></li>\\n</ul>\\n<h1>1.8.0</h1>\\n<p><strong>Features:</strong></p>\\n<ul>\\n<li>Support peer dependency of typescript nightlies of 2.4.0</li>\\n<li>Added typeguards: <code>isJsxAttributes</code>, <code>isIntersectionTypeNode</code>, <code>isTypeOperatorNode</code>, <code>isTypePredicateNode</code>, <code>isTypeQueryNode</code>, <code>isUnionTypeNode</code></li>\\n</ul>\\n<h1>1.7.0</h1>\\n<p><strong>Bugfixes:</strong></p>\\n<ul>\\n<li><code>isFunctionScopeBoundary</code> now handles Interfaces, TypeAliases, FunctionSignatures, etc</li>\\n</ul>\\n<p><strong>Features:</strong></p>\\n<ul>\\n<li>Added utilities: <code>isThisParameter</code>, <code>isSameLine</code> and <code>isFunctionWithBody</code></li>\\n</ul>\\n<h1>1.6.0</h1>\\n<p><strong>Features:</strong></p>\\n<ul>\\n<li>Add <code>isValidPropertyAccess</code>, <code>isValidNumericLiteral</code> and <code>isValidPropertyName</code></li>\\n</ul>\\n<h1>1.5.0</h1>\\n<p><strong>Features:</strong></p>\\n<ul>\\n<li>Add <code>isValidIdentifier</code></li>\\n</ul>\\n<h1>1.4.0</h1>\\n<p><strong>Features:</strong></p>\\n<ul>\\n<li>Add <code>contentLength</code> property to the result of <code>getLineRanges</code></li>\\n</ul>\\n<h1>1.3.0</h1>\\n<p><strong>Bugfixes:</strong></p>\\n<ul>\\n<li>\\n<p><code>canHaveLeadingTrivia</code>:</p>\\n<ul>\\n<li>Fix property access on undefined parent reference</li>\\n<li>Fixes: <a href=\\\"https://github.com/palantir/tslint/issues/2330\\\">palantir/tslint#2330</a></li>\\n</ul>\\n</li>\\n<li><code>hasOwnThisReference</code>: now includes accessors on object literals</li>\\n</ul>\\n<p><strong>Features:</strong></p>\\n<ul>\\n<li>\\n<p>Typeguards:</p>\\n<ul>\\n<li>isTypeParameterDeclaration</li>\\n<li>isEnitityName</li>\\n</ul>\\n</li>\\n</ul>\\n<h1>1.2.2</h1>\\n<p><strong>Bugfixes:</strong></p>\\n<ul>\\n<li>\\n<p><code>hasOwnThisReference</code>:</p>\\n<ul>\\n<li>exclude overload signatures of function declarations</li>\\n<li>add method declarations on object literals</li>\\n</ul>\\n</li>\\n</ul>\\n<h1>1.2.1</h1>\\n<p><strong>Bugfixes:</strong></p>\\n<ul>\\n<li>Fix name of <code>isNumericLiteral</code></li>\\n</ul>\\n<h1>1.2.0</h1>\\n<p><strong>Features:</strong></p>\\n<ul>\\n<li>\\n<p>Typeguards:</p>\\n<ul>\\n<li>isEnumMember</li>\\n<li>isExpressionWithTypeArguments</li>\\n<li>isImportSpecifier</li>\\n</ul>\\n</li>\\n<li>\\n<p>Utilities:</p>\\n<ul>\\n<li>isJsDocKind, isTypeNodeKind</li>\\n</ul>\\n</li>\\n<li>Allow typescript@next in peerDependencies</li>\\n</ul>\\n<h1>1.1.0</h1>\\n<p><strong>Bugfixes:</strong></p>\\n<ul>\\n<li>Fix isBlockScopeBoundary: Remove WithStatement, IfStatment, DoStatement and WhileStatement because they are no scope boundary whitout a block.</li>\\n</ul>\\n<p><strong>Features:</strong></p>\\n<ul>\\n<li>\\n<p>Added more typeguards:</p>\\n<ul>\\n<li>isAssertionExpression</li>\\n<li>isEmptyStatement</li>\\n<li>isJsxAttributeLike</li>\\n<li>isJsxOpeningLikeElement</li>\\n<li>isNonNullExpression</li>\\n<li>isSyntaxList</li>\\n</ul>\\n</li>\\n<li>\\n<p>Utilities:</p>\\n<ul>\\n<li>getNextToken, getPreviousToken</li>\\n<li>hasOwnThisReference</li>\\n<li>getLineRanges</li>\\n</ul>\\n</li>\\n</ul>\\n<h1>1.0.0</h1>\\n<p><strong>Features:</strong></p>\\n<ul>\\n<li>Initial implementation of typeguards</li>\\n<li>\\n<p>Utilities:</p>\\n<ul>\\n<li>getChildOfKind</li>\\n<li>isNodeKind, isAssignmentKind</li>\\n<li>hasModifier, isParameterProperty, hasAccessModifier</li>\\n<li>getPreviousStatement, getNextStatement</li>\\n<li>getPropertyName</li>\\n<li>forEachDestructuringIdentifier, forEachDeclaredVariable</li>\\n<li>getVariableDeclarationKind, isBlockScopedVariableDeclarationList, isBlockScopedVariableDeclaration</li>\\n<li>isScopeBoundary, isFunctionScopeBoundary, isBlockScopeBoundary</li>\\n<li>forEachToken, forEachTokenWithTrivia, forEachComment</li>\\n<li>endsControlFlow</li>\\n</ul>\\n</li>\\n</ul>\",\"docPath\":\"argo-ci/node_modules/tsutils/changelog\",\"proj\":\"argo-ci\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/docs-argo-ci-node-modules-tsutils-changelog-html.json\n// module id = 3259\n// module chunks = 113103462367365"],"sourceRoot":""}