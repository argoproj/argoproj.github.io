webpackJsonp([0xeb11a5eaed51],{3094:function(e,n){e.exports={pathContext:{docHtml:'<h1>regex-cache <a href="https://www.npmjs.com/package/regex-cache"><img src="https://img.shields.io/npm/v/regex-cache.svg?style=flat" alt="NPM version"></a> <a href="https://npmjs.org/package/regex-cache"><img src="https://img.shields.io/npm/dm/regex-cache.svg?style=flat" alt="NPM monthly downloads"></a>  <a href="https://npmjs.org/package/regex-cache"><img src="https://img.shields.io/npm/dt/regex-cache.svg?style=flat" alt="NPM total downloads"></a> <a href="https://travis-ci.org/jonschlinkert/regex-cache"><img src="https://img.shields.io/travis/jonschlinkert/regex-cache.svg?style=flat&#x26;label=Travis" alt="Linux Build Status"></a> <a href="https://ci.appveyor.com/project/jonschlinkert/regex-cache"><img src="https://img.shields.io/appveyor/ci/jonschlinkert/regex-cache.svg?style=flat&#x26;label=AppVeyor" alt="Windows Build Status"></a></h1>\n<blockquote>\n<p>Memoize the results of a call to the RegExp constructor, avoiding repetitious runtime compilation of the same string and options, resulting in surprising performance improvements.</p>\n</blockquote>\n<h2>Install</h2>\n<p>Install with <a href="https://www.npmjs.com/">npm</a>:</p>\n<pre><code class="language-sh">$ npm install --save regex-cache\n</code></pre>\n<ul>\n<li>Read <a href="#what-this-does">what this does</a>.</li>\n<li>See <a href="#benchmarks">the benchmarks</a></li>\n</ul>\n<h2>Usage</h2>\n<p>Wrap a function like this:</p>\n<pre><code class="language-js">var cache = require(\'regex-cache\');\nvar someRegex = cache(require(\'some-regex-lib\'));\n</code></pre>\n<p><strong>Caching a regex</strong></p>\n<p>If you want to cache a regex after calling <code>new RegExp()</code>, or you\'re requiring a module that returns a regex, wrap it with a function first:</p>\n<pre><code class="language-js">var cache = require(\'regex-cache\');\n\nfunction yourRegex(str, opts) {\n  // do stuff to str and opts\n  return new RegExp(str, opts.flags);\n}\n\nvar regex = cache(yourRegex);\n</code></pre>\n<h2>Recommendations</h2>\n<h3>Use this when...</h3>\n<ul>\n<li><strong>No options are passed</strong> to the function that creates the regex. Regardless of how big or small the regex is, when zero options are passed, caching will be faster than not.</li>\n<li><strong>A few options are passed</strong>, and the values are primitives. The limited benchmarks I did show that caching is beneficial when up to 8 or 9 options are passed.</li>\n</ul>\n<h3>Do not use this when...</h3>\n<ul>\n<li><strong>The values of options are not primitives</strong>. When non-primitives must be compared for equality, the time to compare the options is most likely as long or longer than the time to just create a new regex.</li>\n</ul>\n<h3>Example benchmarks</h3>\n<p>Performance results, with and without regex-cache:</p>\n<pre><code class="language-bash"># no args passed (defaults)\n  with-cache x 8,699,231 ops/sec ±0.86% (93 runs sampled)\n  without-cache x 2,777,551 ops/sec ±0.63% (95 runs sampled)\n\n# string and six options passed\n  with-cache x 1,885,934 ops/sec ±0.80% (93 runs sampled)\n  without-cache x 1,256,893 ops/sec ±0.65% (97 runs sampled)\n\n# string only\n  with-cache x 7,723,256 ops/sec ±0.87% (92 runs sampled)\n  without-cache x 2,303,060 ops/sec ±0.47% (99 runs sampled)\n\n# one option passed\n  with-cache x 4,179,877 ops/sec ±0.53% (100 runs sampled)\n  without-cache x 2,198,422 ops/sec ±0.47% (95 runs sampled)\n\n# two options passed\n  with-cache x 3,256,222 ops/sec ±0.51% (99 runs sampled)\n  without-cache x 2,121,401 ops/sec ±0.79% (97 runs sampled)\n\n# six options passed\n  with-cache x 1,816,018 ops/sec ±1.08% (96 runs sampled)\n  without-cache x 1,157,176 ops/sec ±0.53% (100 runs sampled)\n\n# \n# diminishing returns happen about here\n# \n\n# ten options passed\n  with-cache x 1,210,598 ops/sec ±0.56% (92 runs sampled)\n  without-cache x 1,665,588 ops/sec ±1.07% (100 runs sampled)\n\n# twelve options passed\n  with-cache x 1,042,096 ops/sec ±0.68% (92 runs sampled)\n  without-cache x 1,389,414 ops/sec ±0.68% (97 runs sampled)\n\n# twenty options passed\n  with-cache x 661,125 ops/sec ±0.80% (93 runs sampled)\n  without-cache x 1,208,757 ops/sec ±0.65% (97 runs sampled)\n\n# \n# when non-primitive values are compared\n# \n\n# single value on the options is an object\n  with-cache x 1,398,313 ops/sec ±1.05% (95 runs sampled)\n  without-cache x 2,228,281 ops/sec ±0.56% (99 runs sampled)\n</code></pre>\n<h2>Run benchmarks</h2>\n<p>Install dev dependencies:</p>\n<pre><code class="language-bash">npm i -d &#x26;&#x26; npm run benchmarks\n</code></pre>\n<h2>What this does</h2>\n<p>If you\'re using <code>new RegExp(\'foo\')</code> instead of a regex literal, it\'s probably because you need to dyamically generate a regex based on user options or some other potentially changing factors.</p>\n<p>When your function creates a string based on user inputs and passes it to the <code>RegExp</code> constructor, regex-cache caches the results. The next time the function is called if the key of a cached regex matches the user input (or no input was given), the cached regex is returned, avoiding unnecessary runtime compilation.</p>\n<p>Using the RegExp constructor offers a lot of flexibility, but the runtime compilation comes at a price - it\'s slow. Not specifically because of the call to the RegExp constructor, but <strong>because you have to build up the string before <code>new RegExp()</code> is even called</strong>.</p>\n<h2>About</h2>\n<h3>Contributing</h3>\n<p>Pull requests and stars are always welcome. For bugs and feature requests, <a href="../../issues/new">please create an issue</a>.</p>\n<h3>Contributors</h3>\n<table>\n<thead>\n<tr>\n<th><strong>Commits</strong></th>\n<th><strong>Contributor</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>31</td>\n<td><a href="https://github.com/jonschlinkert">jonschlinkert</a></td>\n</tr>\n<tr>\n<td>1</td>\n<td><a href="https://github.com/MartinKolarik">MartinKolarik</a></td>\n</tr>\n</tbody>\n</table>\n<h3>Building docs</h3>\n<p><em>(This project\'s readme.md is generated by <a href="https://github.com/verbose/verb-generate-readme">verb</a>, please don\'t edit the readme directly. Any changes to the readme must be made in the <a href=".verb.html">.verb.md</a> readme template.)</em></p>\n<p>To generate the readme, run the following command:</p>\n<pre><code class="language-sh">$ npm install -g verbose/verb#dev verb-generate-readme &#x26;&#x26; verb\n</code></pre>\n<h3>Running tests</h3>\n<p>Running and reviewing unit tests is a great way to get familiarized with a library and its API. You can install dependencies and run tests with the following command:</p>\n<pre><code class="language-sh">$ npm install &#x26;&#x26; npm test\n</code></pre>\n<h3>Author</h3>\n<p><strong>Jon Schlinkert</strong></p>\n<ul>\n<li><a href="https://github.com/jonschlinkert">github/jonschlinkert</a></li>\n<li><a href="https://twitter.com/jonschlinkert">twitter/jonschlinkert</a></li>\n</ul>\n<h3>License</h3>\n<p>Copyright © 2017, <a href="https://github.com/jonschlinkert">Jon Schlinkert</a>.\nReleased under the <a href="LICENSE">MIT License</a>.</p>\n<hr>\n<p><em>This file was generated by <a href="https://github.com/verbose/verb-generate-readme">verb-generate-readme</a>, v0.6.0, on September 01, 2017.</em></p>',docPath:"argo-ci/node_modules/regex-cache/readme",proj:"argo-ci"}}}});
//# sourceMappingURL=path---docs-argo-ci-node-modules-regex-cache-f49d69cb71415be2e0c6.js.map