webpackJsonp([88791284863411],{3253:function(e,i){e.exports={pathContext:{docHtml:'<h1>Change Log</h1>\n<h2>v5.8.0</h2>\n<h2>:warning: Deprecations</h2>\n<ul>\n<li><a href="">deprecation</a>(<a href="https://palantir.github.io/tslint/rules/typeof-compare/">https://palantir.github.io/tslint/rules/typeof-compare/</a>) is deprecated because typescript already does that check (#3286)</li>\n<li>[deprecation] CLI argument <code>--type-check</code> is no longer necessary and will be removed in the next major version (#3322)</li>\n</ul>\n<h2>Updates to <code>tslint:latest</code> configuration</h2>\n<pre><code class="language-diff">+    "ban-comma-operator": true,\n+    "jsdoc-format": {\n+        options: "check-multiline-start",\n+    },\n+    "no-duplicate-switch-case": true,\n+    "no-implicit-dependencies": true,\n+    "no-return-await": true,\n</code></pre>\n<h2>:tada: Features</h2>\n<ul>\n<li>[feature] Added <code>linterOptions</code> configuration field to <code>tslint.json</code>, which supports a list of <code>exclude</code> globs to disable linting for a subset of files (#2409)</li>\n<li><a href="">new-rule</a>(<a href="https://palantir.github.io/tslint/rules/no-return-await/">https://palantir.github.io/tslint/rules/no-return-await/</a>) (#3233)</li>\n<li><a href="">new-rule</a>(<a href="https://palantir.github.io/tslint/rules/no-redundant-jsdoc/">https://palantir.github.io/tslint/rules/no-redundant-jsdoc/</a>) (#2754)</li>\n<li><a href="">new-rule</a>(<a href="https://palantir.github.io/tslint/rules/no-duplicate-switch-case/">https://palantir.github.io/tslint/rules/no-duplicate-switch-case/</a>) (#2937)</li>\n<li><a href="">new-rule</a>(<a href="https://palantir.github.io/tslint/rules/no-implicit-dependencies/">https://palantir.github.io/tslint/rules/no-implicit-dependencies/</a>) (#3343)</li>\n<li><a href="">new-rule</a>(<a href="https://palantir.github.io/tslint/rules/no-unnecessary-class/">https://palantir.github.io/tslint/rules/no-unnecessary-class/</a>) (#3119)</li>\n<li><a href="">new-rule</a>(<a href="https://palantir.github.io/tslint/rules/ban-comma-operator/">https://palantir.github.io/tslint/rules/ban-comma-operator/</a>) (#3250)</li>\n<li><a href="">new-fixer</a>(<a href="https://palantir.github.io/tslint/rules/one-line/">https://palantir.github.io/tslint/rules/one-line/</a>) (#3200)</li>\n<li><a href="">new-fixer</a>(<a href="https://palantir.github.io/tslint/rules/curly/">https://palantir.github.io/tslint/rules/curly/</a>) (#3262)</li>\n<li><a href="">new-rule-option</a>(<a href="https://palantir.github.io/tslint/rules/jsdoc-format/">https://palantir.github.io/tslint/rules/jsdoc-format/</a>) adds option <code>"check-multiline-start"</code> to enforce the first line of a multiline JSDoc comment to be empty. (#3181)</li>\n<li><a href="">new-rule-option</a>(<a href="https://palantir.github.io/tslint/rules/trailing-comma/">https://palantir.github.io/tslint/rules/trailing-comma/</a>) adds option <code>"esSpecCompliant"</code> to make it compatible with the ES spec regarding trailing commas after object/array rest and rest parameters. (#3176)</li>\n<li>[new-rule-option] <code>"check-parameter-property"</code> option for <a href="https://palantir.github.io/tslint/rules/member-access/"><code>member-access</code></a> rule (#3325)</li>\n<li>[new-rule-option] <code>"strict-bound-class-methods"</code> option for <a href="https://palantir.github.io/tslint/rules/semicolon/"><code>semicolon</code></a> rule (#3294)</li>\n<li>[new-rule-option] <code>"grouped-imports"</code> option for <a href="https://palantir.github.io/tslint/rules/ordered-imports/"><code>ordered-imports</code></a> rule (#3138)</li>\n<li>[new-rule-option] <code>"ignore-blank-lines"</code> option for <a href="https://palantir.github.io/tslint/rules/no-trailing-whitespace/"><code>no-trailing-whitespace</code></a> rule (#3346)</li>\n<li>[new-rule-option] <code>"never"</code> option for <a href="https://palantir.github.io/tslint/rules/object-literal-shorthand/"><code>object-literal-shorthand</code></a> disallows shorthand notation (#3268)</li>\n<li>[new-rule-option] <code>"exclude-class-expressions"</code> option for <a href="https://palantir.github.io/tslint/rules/max-classes-per-file/"><code>max-classes-per-file</code></a> rule (#3281)</li>\n<li><a href="">new-rule-option</a>(<a href="https://palantir.github.io/tslint/rules/no-unnecessary-type-assertion/">https://palantir.github.io/tslint/rules/no-unnecessary-type-assertion/</a>) supports a whitelist of types to ignore (#3257)</li>\n<li>[new-rule-option] <code>"module-source-path"</code> for <a href="https://palantir.github.io/tslint/rules/ordered-imports/"><code>ordered-imports</code></a> allows sorting imports by trailing end of path (#3178)</li>\n<li>[new-formatter] JUnit (#3194)</li>\n</ul>\n<h2>:hammer<em>and</em>wrench: Bugfixes &#x26; enhancements</h2>\n<ul>\n<li><a href="">bugfix</a>(<a href="https://palantir.github.io/tslint/rules/no-empty-interface/">https://palantir.github.io/tslint/rules/no-empty-interface/</a>) allows providing type arguments for extended type (#3260)</li>\n<li>[bugfix] Fixed line switches to not disable failures in the next line following the disabled line (#3177)</li>\n<li><a href="">bugfix</a>(<a href="https://palantir.github.io/tslint/rules/return-undefined/">https://palantir.github.io/tslint/rules/return-undefined/</a>) handles union return types in async functions (#3298)</li>\n<li><a href="">bugfix</a>(<a href="https://palantir.github.io/tslint/rules/deprecation/">https://palantir.github.io/tslint/rules/deprecation/</a>) checks correct constructor overload (#3203)</li>\n<li><a href="">bugfix</a>(<a href="https://palantir.github.io/tslint/rules/return-undefined/">https://palantir.github.io/tslint/rules/return-undefined/</a>) declared return type takes precedence over contextual type (#3298)</li>\n<li>[bugfix] Correctly mark <code>inputFilePath</code> as an optional parameter in <code>Configuration.findConfiguration()</code> (#3195)</li>\n<li><a href="">bugfix</a>(<a href="https://palantir.github.io/tslint/rules/return-undefined/">https://palantir.github.io/tslint/rules/return-undefined/</a>) fixed regressions: once again allows anything if return type is <code>any</code> (#3298)</li>\n<li><a href="">bugfix</a>(<a href="https://palantir.github.io/tslint/rules/only-arrow-functions/">https://palantir.github.io/tslint/rules/only-arrow-functions/</a>) allow function if <code>this</code> is used in parameter initializer (#3315)</li>\n<li><a href="">bugfix</a>(<a href="https://palantir.github.io/tslint/rules/no-conditional-assignment/">https://palantir.github.io/tslint/rules/no-conditional-assignment/</a>): exclude intentional assignments, e.g. inside functions (#2629)</li>\n<li><a href="">bugfix</a>(<a href="https://palantir.github.io/tslint/rules/no-angle-bracket-type-assertion/">https://palantir.github.io/tslint/rules/no-angle-bracket-type-assertion/</a>) fixer adds parentheses when necessary (#3301)</li>\n<li><a href="">bugfix</a>(<a href="https://palantir.github.io/tslint/rules/no-angle-bracket-type-assertion/">https://palantir.github.io/tslint/rules/no-angle-bracket-type-assertion/</a>) fixed order when autofixing consecutive assertions (#3301)</li>\n<li>[bugfix] <code>vso</code> formatter no longer duplicates output for fixed failures (#3348)</li>\n<li><a href="">bugfix</a>(<a href="https://palantir.github.io/tslint/rules/no-unbound-method/">https://palantir.github.io/tslint/rules/no-unbound-method/</a>): Allow negation of method (#3349)</li>\n<li><a href="">bugfix</a>(<a href="https://palantir.github.io/tslint/rules/arrow-parens/">https://palantir.github.io/tslint/rules/arrow-parens/</a>) with option <code>"ban-single-arg-parens"</code> no longer produces invalid code when fixed (#3247)</li>\n<li>[bugfix] Fixed regression where the lookup of <code>tslint.json</code> stopped at the current directory. (#3309)</li>\n<li>[bugfix] <code>--test</code> works correctly with any <code>compilerOptions.target</code> (#3296)</li>\n<li>[bugfix] <code>whitepace</code> handles files with BOM and other irregular whitespace (#3305)</li>\n<li><a href="">bugfix</a>(<a href="https://palantir.github.io/tslint/rules/callable-types/">https://palantir.github.io/tslint/rules/callable-types/</a>) auto fix produces invalid results (#3342)</li>\n<li><a href="">bugfix</a>(<a href="https://palantir.github.io/tslint/rules/no-string-literal/">https://palantir.github.io/tslint/rules/no-string-literal/</a>) correctly fix property names with leading underscores (#3184)</li>\n<li><a href="">bugfix</a>(<a href="https://palantir.github.io/tslint/rules/variable-name/">https://palantir.github.io/tslint/rules/variable-name/</a>) fixed crash on empty variable name (#3292)</li>\n<li><a href="">bugfix</a>(<a href="https://palantir.github.io/tslint/rules/trailing-comma/">https://palantir.github.io/tslint/rules/trailing-comma/</a>) fixed crash on arrow function without parens (#3246)</li>\n<li>[bugfix] Fix <a href="https://palantir.github.io/tslint/rules/space-before-function-paren/"><code>space-before-function-paren</code></a> for anonymous/arrow generic functions (#3085)</li>\n<li>[bugfix] Removed warning printed to console when using the <a href="https://palantir.github.io/tslint/rules/no-unused-variable/"><code>no-unused-variable</code></a> along with the <code>noUnusedLocals</code> and <code>noUnusedParameters</code> compiler options (#3227)</li>\n<li><a href="">bugfix</a>(<a href="https://palantir.github.io/tslint/rules/no-invalid-this/">https://palantir.github.io/tslint/rules/no-invalid-this/</a>) ignores functions with a <code>this</code> param (#3267)</li>\n<li>[enhancement] Sort failures by line and character for formatters (#3345)</li>\n<li><a href="">enhancement</a>(<a href="https://palantir.github.io/tslint/rules/import-blacklist/">https://palantir.github.io/tslint/rules/import-blacklist/</a>) also checks exports and dynamic imports (#3258)</li>\n<li><a href="">enhancement</a>(<a href="https://palantir.github.io/tslint/rules/no-conditional-assignment/">https://palantir.github.io/tslint/rules/no-conditional-assignment/</a>) added check for conditional (ternary) expressions (#2629)</li>\n<li>[enhancement] Allow <a href="https://palantir.github.io/tslint/rules/completed-docs/"><code>completed-docs</code></a> to list doc tags that mark a node as not requiring a documentation body. Tags can also provide a regexp matcher to validate that their contents are docs-valid. (#2415)</li>\n<li><a href="">enhancement</a>(<a href="https://palantir.github.io/tslint/rules/await-promise/">https://palantir.github.io/tslint/rules/await-promise/</a>) enforces that <code>for-await-of</code> is only used with <code>AsyncIterable</code> (#3297)</li>\n<li><a href="">enhancement</a>(<a href="https://palantir.github.io/tslint/rules/one-line/">https://palantir.github.io/tslint/rules/one-line/</a>) checks type alias declarations (#3200)</li>\n<li><a href="">enhancement</a>(<a href="https://palantir.github.io/tslint/rules/deprecation/">https://palantir.github.io/tslint/rules/deprecation/</a>) checks object destructuring (#3318)</li>\n<li><a href="">enhancement</a>(<a href="https://palantir.github.io/tslint/rules/no-submodule-imports/">https://palantir.github.io/tslint/rules/no-submodule-imports/</a>) also checks exports (#3258)</li>\n<li><a href="">enhancement</a>(<a href="https://palantir.github.io/tslint/rules/restrict-plus-operands/">https://palantir.github.io/tslint/rules/restrict-plus-operands/</a>): More specific error message when arguments include strings (#3220)</li>\n<li><a href="">enhancement</a>(<a href="https://palantir.github.io/tslint/rules/no-unsafe-any/">https://palantir.github.io/tslint/rules/no-unsafe-any/</a>) checks more expressions, for example destructuring, <code>yield</code>, property initializer (#3196)</li>\n<li><a href="">enhancement</a>(<a href="https://palantir.github.io/tslint/rules/object-literal-sort-keys/">https://palantir.github.io/tslint/rules/object-literal-sort-keys/</a>): allow grouping of object properties via additional blank lines when using alphabetical ordering. (#3191)</li>\n<li>[enhancement] Migrated CLI from using <code>colors</code> module to <code>chalk</code> module (#3171)</li>\n<li><a href="">enhancement</a>(<a href="https://palantir.github.io/tslint/rules/no-unused-variable/">https://palantir.github.io/tslint/rules/no-unused-variable/</a>) applies the ignorePattern to imports (#3187)</li>\n</ul>\n<p>Thanks to our contributors!</p>\n<ul>\n<li>Klaus Meinhardt</li>\n<li>Charles Samborski</li>\n<li>Donald Pipowitch</li>\n<li>Josh Goldberg</li>\n<li>mmkal</li>\n<li>Erik</li>\n<li>Csaba Miklos</li>\n<li>Dominik Moritz</li>\n<li>Khalid Saifullah</li>\n<li>Lukas Spieß</li>\n<li>Merott Movahedi</li>\n<li>Bowen Ni</li>\n<li>ksvitkovsky</li>\n<li>Hutson Betts</li>\n<li>Caleb Eggensperger</li>\n<li>Brent Erickson</li>\n<li>Trivikram</li>\n<li>Brandon Furtwangler</li>\n<li>Pavel Zet</li>\n<li>aervin_</li>\n<li>Holger Jeromin</li>\n<li>Danny Guo</li>\n<li>Jeremy Morton</li>\n<li>Cyril Gandon</li>\n<li>Andy Hanson</li>\n<li>yadan</li>\n</ul>\n<h2>v5.7.0</h2>\n<h2>:tada: New rules, options, and fixers</h2>\n<ul>\n<li><a href="">new-rule</a>(<a href="https://palantir.github.io/tslint/rules/no-parameter-reassignment/">https://palantir.github.io/tslint/rules/no-parameter-reassignment/</a>) (#3045)</li>\n<li>[new-rule-option]: <a href="https://palantir.github.io/tslint/rules/object-literal-sort-keys/"><code>object-literal-sort-keys</code></a>: Add <code>match-declaration-order</code> option (#2829)</li>\n<li>[new-rule-option] <code>check-type-operator</code> for <a href="https://palantir.github.io/tslint/rules/whitespace/"><code>whitespace</code></a> rule (#3083)</li>\n<li><a href="">new-rule-option</a>(<a href="https://palantir.github.io/tslint/rules/whitespace/">https://palantir.github.io/tslint/rules/whitespace/</a>): Add <code>check-rest-spread</code> option (#3089)</li>\n</ul>\n<h2>:hammer<em>and</em>wrench: Bugfixes &#x26; enhancements</h2>\n<ul>\n<li>[api] <code>AbstractRule#applyWithFunction</code> allows additional parameter that is passed through to <code>walkFn</code> (#3140)</li>\n<li>[api] <code>AbstractRule#applyWithFunction</code> has better type checking for its type parameter (#2660)</li>\n<li><a href="">bugfix</a>(<a href="https://palantir.github.io/tslint/rules/member-access/">https://palantir.github.io/tslint/rules/member-access/</a>) autofix now correcly inserts <code>public</code> keyword after decorators (#3162)</li>\n<li><a href="">bugfix</a>(<a href="https://palantir.github.io/tslint/rules/prefer-const/">https://palantir.github.io/tslint/rules/prefer-const/</a>) correctly handle <code>catch</code> without binding parameter introduced in <code>typescript@2.5.1</code> (#3151)</li>\n<li><a href="">bugfix</a>(<a href="https://palantir.github.io/tslint/rules/no-invalid-template-strings/">https://palantir.github.io/tslint/rules/no-invalid-template-strings/</a>) allows backslash-prefixed template expressions  (#3116)</li>\n<li><a href="">bugfix</a>(<a href="https://palantir.github.io/tslint/rules/deprecation/">https://palantir.github.io/tslint/rules/deprecation/</a>) no longer shows errors on imports and exports (#3141)</li>\n<li><a href="">bugfix</a>(<a href="https://palantir.github.io/tslint/rules/deprecation/">https://palantir.github.io/tslint/rules/deprecation/</a>): fix false positive when calling a function or method where another overload is deprecated (#2883)</li>\n<li><a href="">bugfix</a>(<a href="https://palantir.github.io/tslint/rules/whitespace/">https://palantir.github.io/tslint/rules/whitespace/</a>): fixed <code>"check-separator"</code> for trivial <code>for</code> cases. (#3132)</li>\n<li><a href="">bugfix</a>(<a href="https://palantir.github.io/tslint/rules/prefer-object-spread/">https://palantir.github.io/tslint/rules/prefer-object-spread/</a>) prevent spreading <code>this</code> as it is not allowed by the compiler (#3126)</li>\n<li>[bugfix] <code>msbuild</code> formatter uses backslashes in paths on Windows (#3145)</li>\n<li><a href="">bugfix</a>(<a href="https://palantir.github.io/tslint/rules/no-namespace/">https://palantir.github.io/tslint/rules/no-namespace/</a>) ignores global augmentation (#3161)</li>\n<li>[enhancement] remove superfluous empty lines on tslint output. (#3121)</li>\n<li><a href="">enhancement</a>(<a href="https://palantir.github.io/tslint/rules/no-submodule-imports/">https://palantir.github.io/tslint/rules/no-submodule-imports/</a>) allows whitelisting of submodules like <code>@angular/core/testing</code> (#3129)</li>\n<li>[enhancement] custom lint rules will be resolved using node\'s path resolution to allow for loaders like <code>ts-node</code> (#3108)</li>\n<li><a href="">enhancement</a>(<a href="https://palantir.github.io/tslint/rules/quotemark/">https://palantir.github.io/tslint/rules/quotemark/</a>) no longer requires <code>"single"</code> or <code>"double"</code> to be the first option. The rule defaults to <code>"double"</code> if none is specified. (#3114)</li>\n<li><a href="">enhancement</a>(<a href="https://palantir.github.io/tslint/rules/no-unused-variable/">https://palantir.github.io/tslint/rules/no-unused-variable/</a>) autofix removes trailing comments of imports (#3156)</li>\n<li><a href="">enhancement</a>(<a href="https://palantir.github.io/tslint/rules/no-unnecessary-type-assertion/">https://palantir.github.io/tslint/rules/no-unnecessary-type-assertion/</a>) allows certain necessary assertions to prevent type widening (#3120)</li>\n</ul>\n<p>Thanks to our contributors!</p>\n<ul>\n<li>Paul Gschwendtner</li>\n<li>Andy Hanson</li>\n<li>ksvitkovsky</li>\n<li>Santi Albo</li>\n<li>aervin</li>\n<li>Junle Li</li>\n<li>Joscha Feth</li>\n<li>WiseBird</li>\n<li>Caleb Eggensperger</li>\n<li>WGroenestein</li>\n<li>Bowen Ni</li>\n</ul>\n<h2>v5.6.0</h2>\n<h2>:tada: New rules, options, and fixers</h2>\n<ul>\n<li><a href="">new-rule</a>(<a href="https://palantir.github.io/tslint/rules/no-duplicate-imports/">https://palantir.github.io/tslint/rules/no-duplicate-imports/</a>) (#3075)</li>\n<li><a href="">new-rule</a>(<a href="https://palantir.github.io/tslint/rules/no-submodule-imports/">https://palantir.github.io/tslint/rules/no-submodule-imports/</a>) (#3091)</li>\n<li><a href="">new-rule</a>(<a href="https://palantir.github.io/tslint/rules/space-within-parens/">https://palantir.github.io/tslint/rules/space-within-parens/</a>) (#2959)</li>\n<li><a href="">new-fixer</a>(<a href="https://palantir.github.io/tslint/rules/member-access/">https://palantir.github.io/tslint/rules/member-access/</a>) (#2969)</li>\n<li><a href="">new-fixer</a>(<a href="https://palantir.github.io/tslint/rules/no-null-keyword/">https://palantir.github.io/tslint/rules/no-null-keyword/</a>): fix <code>x == null</code> to <code>x == undefined</code> (#2802)</li>\n<li><a href="">new-rule-option</a>(<a href="https://palantir.github.io/tslint/rules/no-shadowed-variable/">https://palantir.github.io/tslint/rules/no-shadowed-variable/</a>) let\'s you optionally ignore certain kinds of declarations (#3030)</li>\n<li><a href="">new-rule-option</a>(<a href="https://palantir.github.io/tslint/rules/prefer-conditional-expression/">https://palantir.github.io/tslint/rules/prefer-conditional-expression/</a>) adds <code>check-else-if</code> (#2963)</li>\n</ul>\n<h2>:hammer<em>and</em>wrench: Bugfixes &#x26; enhancements</h2>\n<ul>\n<li><a href="">bugfix</a>(<a href="https://palantir.github.io/tslint/rules/array-type/">https://palantir.github.io/tslint/rules/array-type/</a>): consider <code>this</code> to be simple type (#2982)</li>\n<li><a href="">bugfix</a>(<a href="https://palantir.github.io/tslint/rules/await-promise/">https://palantir.github.io/tslint/rules/await-promise/</a>) accepts not only union types but also intersection types with Promise-like types (#2987)</li>\n<li><a href="">bugfix</a>(<a href="https://palantir.github.io/tslint/rules/callable-types/">https://palantir.github.io/tslint/rules/callable-types/</a>): don\'t remove export modifier of interfaces (#2962)</li>\n<li><a href="">bugfix</a>(<a href="https://palantir.github.io/tslint/rules/completed-docs/">https://palantir.github.io/tslint/rules/completed-docs/</a>): Only checks variables at the file-level. (#2950)</li>\n<li><a href="">bugfix</a>(<a href="https://palantir.github.io/tslint/rules/completed-docs/">https://palantir.github.io/tslint/rules/completed-docs/</a>): Uses correct visibility of variables. (#2950)</li>\n<li><a href="">bugfix</a>(<a href="https://palantir.github.io/tslint/rules/no-floating-promises/">https://palantir.github.io/tslint/rules/no-floating-promises/</a>): recognize rejection handler passed as second argument to <code>promise.then()</code> (#3048)</li>\n<li><a href="">bugfix</a>(<a href="https://palantir.github.io/tslint/rules/no-shadowed-variable/">https://palantir.github.io/tslint/rules/no-shadowed-variable/</a>) don\'t warn for shadowed type parameter on static class members (#3030)</li>\n<li><a href="">bugfix</a>(<a href="https://palantir.github.io/tslint/rules/no-shadowed-variable/">https://palantir.github.io/tslint/rules/no-shadowed-variable/</a>) fixed false positive with key name in index signature (#3030)</li>\n<li><a href="">bugfix</a>(<a href="https://palantir.github.io/tslint/rules/no-shadowed-variable/">https://palantir.github.io/tslint/rules/no-shadowed-variable/</a>) fixed false positive with parameter inside function decorator (#3030)</li>\n<li><a href="">bugfix</a>(<a href="https://palantir.github.io/tslint/rules/no-unsafe-any/">https://palantir.github.io/tslint/rules/no-unsafe-any/</a>): allow truthyness and falsyness checks (#3008)</li>\n<li><a href="">bugfix</a>(<a href="https://palantir.github.io/tslint/rules/no-unused-variable/">https://palantir.github.io/tslint/rules/no-unused-variable/</a>) fixed crash when using destructuring (#3058)</li>\n<li><a href="">bugfix</a>(<a href="https://palantir.github.io/tslint/rules/one-line/">https://palantir.github.io/tslint/rules/one-line/</a>) correctly handles multiline type parameters (#3004)</li>\n<li><a href="">bugfix</a>(<a href="https://palantir.github.io/tslint/rules/prefer-for-of/">https://palantir.github.io/tslint/rules/prefer-for-of/</a>) fixed false positives when array is modified, e.g. <code>arr[i]++</code> (#3044)</li>\n<li><a href="">bugfix</a>(<a href="https://palantir.github.io/tslint/rules/prefer-object-spread/">https://palantir.github.io/tslint/rules/prefer-object-spread/</a>) adds parens when fixing arrow function return (#3026)</li>\n<li><a href="">bugfix</a>(<a href="https://palantir.github.io/tslint/rules/prefer-object-spread/">https://palantir.github.io/tslint/rules/prefer-object-spread/</a>) permit functions as first argument to Object.assign (#3098)</li>\n<li><a href="">bugfix</a>(<a href="https://palantir.github.io/tslint/rules/space-before-function-paren/">https://palantir.github.io/tslint/rules/space-before-function-paren/</a>) Handle default exports of functions without names like anonymous functions (fixes #3040) (#3053)</li>\n<li>[bugfix] Fixed an issue where, at runtime, the module <code>./test/parse</code> could not be located due after consumers had run <code>yarn clean</code> (#3072)</li>\n<li><a href="">enhancement</a>(<a href="https://palantir.github.io/tslint/rules/no-null-keyword/">https://palantir.github.io/tslint/rules/no-null-keyword/</a>) allows strict comparison (#2802)</li>\n<li><a href="">enhancement</a>(<a href="https://palantir.github.io/tslint/rules/no-switch-case-fall-through/">https://palantir.github.io/tslint/rules/no-switch-case-fall-through/</a>) matches <code>// falls through</code> comments case insensitive and allows trailing text (#2983)</li>\n<li><a href="">enhancement</a>(<a href="https://palantir.github.io/tslint/rules/ordered-imports/">https://palantir.github.io/tslint/rules/ordered-imports/</a>): support importEqualsDeclaration (#3102)</li>\n<li>[enhancement] Added NaN and (+/-)Infinity as numbers to <a href="https://palantir.github.io/tslint/rules/no-inferrable-types/"><code>no-inferrable-types</code></a> (#2885)</li>\n<li>[enhancement] Improved CLI error message when no filenames are specified (#3066)</li>\n<li><a href="">rule-change</a>(<a href="https://palantir.github.io/tslint/rules/prefer-conditional-expression/">https://palantir.github.io/tslint/rules/prefer-conditional-expression/</a>): ignore <code>if-else-if</code> by default. Use the new <code>"check-else-if"</code> option to check nested if statements (#2963)</li>\n</ul>\n<p>Thanks to our contributors!</p>\n<ul>\n<li>Klaus Meinhardt</li>\n<li>Julian Verdurmen</li>\n<li>Alexandre Alonso</li>\n<li>Josh Goldberg</li>\n<li>ksvitkovsky</li>\n<li>Daisuke Yokomoto</li>\n<li>Andrii Dieiev</li>\n<li>Florent Suc</li>\n<li>Jason Killian</li>\n<li>Amin Pakseresht</li>\n<li>reduckted</li>\n<li>vilicvane</li>\n<li>Russell Briggs</li>\n<li>Andy Hanson</li>\n<li>Leo Liang</li>\n<li>Dan Homola</li>\n<li>BehindTheMath</li>\n<li>David Golightly</li>\n<li>aervin</li>\n<li>Daniel Kucal</li>\n<li>Ika</li>\n<li>Chris Barr</li>\n</ul>\n<h2>v5.5.0</h2>\n<p><strong>Editor\'s note</strong>: This release features an important bugfix for overlapping fixes when using <code>--project</code> and <code>--fix</code> (#2864).</p>\n<h2>:tada: New rules and options</h2>\n<ul>\n<li><a href="">new-rule-option</a>(<a href="https://palantir.github.io/tslint/rules/completed-docs/">https://palantir.github.io/tslint/rules/completed-docs/</a>): Add <code>enum-members</code> option (#2911)</li>\n<li><a href="">new-rule</a>(<a href="https://palantir.github.io/tslint/rules/no-this-assignment/">https://palantir.github.io/tslint/rules/no-this-assignment/</a>) (#2931)</li>\n</ul>\n<h2>:hammer<em>and</em>wrench: Bugfixes &#x26; enhancements</h2>\n<ul>\n<li><a href="">bugfix</a>(<a href="https://palantir.github.io/tslint/rules/encoding/">https://palantir.github.io/tslint/rules/encoding/</a>) closes files correctly (#2958)</li>\n<li><a href="">bugfix</a>(<a href="https://palantir.github.io/tslint/rules/whitespace/">https://palantir.github.io/tslint/rules/whitespace/</a>) fix whitespace <code>"check-module"</code> to properly lint and fix errors  (#2401) (#2825)</li>\n<li>[bugfix]: <a href="https://palantir.github.io/tslint/rules/whitespace/"><code>whitespace</code></a>: now correctly handles dynamic imports introduced in typescript@2.4.0 (#2924)</li>\n<li><a href="">bugfix</a>(<a href="https://palantir.github.io/tslint/rules/switch-final-break/">https://palantir.github.io/tslint/rules/switch-final-break/</a>): don\'t fail if break jumps to a label outside of the switch (#2914)</li>\n<li><a href="">bugfix</a>(<a href="https://palantir.github.io/tslint/rules/no-shadowed-variable/">https://palantir.github.io/tslint/rules/no-shadowed-variable/</a>): exempt <code>this</code> parameter (#2598)</li>\n<li><a href="">bugfix</a>(<a href="https://palantir.github.io/tslint/rules/prefer-for-of/">https://palantir.github.io/tslint/rules/prefer-for-of/</a>) correctly handles variable scopes and other unrelated identifiers (#2984)</li>\n<li>[bugfix] Don\'t leave blank lines when <a href="https://palantir.github.io/tslint/rules/no-unused-variable/"><code>no-unused-variable</code></a> autofix removes whole import (#2901)</li>\n<li>[cli] restore <code>-v</code> option (#2926)</li>\n<li>[enhancement] Print stack trace of exceptions (#2890)</li>\n<li>[enhancement] Added allow-empty-catch option to <a href="https://palantir.github.io/tslint/rules/no-empty/"><code>no-empty</code></a> (#2886)</li>\n<li><a href="">enhancement</a>(<a href="https://palantir.github.io/tslint/rules/prefer-const/">https://palantir.github.io/tslint/rules/prefer-const/</a>): handle destructuring in for-of loop initializer as if <code>{"destructuring": "all"}</code> was specified (#2904)</li>\n<li><a href="">enhancement</a>(<a href="https://palantir.github.io/tslint/rules/no-shadowed-variable/">https://palantir.github.io/tslint/rules/no-shadowed-variable/</a>): added checks for other shadowing declarations, e.g. interfaces, classes, type parameters, imports, etc. (#2598)</li>\n<li><a href="">rule-change</a>(<a href="https://palantir.github.io/tslint/rules/no-shadowed-variable/">https://palantir.github.io/tslint/rules/no-shadowed-variable/</a>) no longer fails for declarations in the same scope, e.g. <code>var foo; var foo;</code>. Use the rule <a href="https://palantir.github.io/tslint/rules/no-duplicate-variable/"><code>no-duplicate-variable</code></a> to find such errors. (#2598)</li>\n</ul>\n<p>Thanks to our contributors!</p>\n<ul>\n<li>Klaus Meinhardt</li>\n<li>Josh Goldberg</li>\n<li>Petr Kosikhin</li>\n<li>Pablo Núñez</li>\n<li>Benny Neugebauer</li>\n<li>Radon Rosborough</li>\n<li>reduckted</li>\n<li>Chris Barr</li>\n<li>Julian Verdurmen</li>\n</ul>\n<h2>v5.4.3</h2>\n<h2>:hammer<em>and</em>wrench: Bugfixes</h2>\n<ul>\n<li>[bugfix] Fixed regression with empty <code>--out</code> file (#2867)</li>\n<li><a href="">bugfix</a>(<a href="https://palantir.github.io/tslint/rules/unified-signatures/">https://palantir.github.io/tslint/rules/unified-signatures/</a>): Don\'t suggest to unify rest parameters. (#2874)</li>\n<li><a href="">bugfix</a>(<a href="https://palantir.github.io/tslint/rules/binary-expression-operand-order/">https://palantir.github.io/tslint/rules/binary-expression-operand-order/</a>): Allow if both sides of the binary expression are literals. (#2873)</li>\n<li>[bugfix] Restore compatibility with typescript@2.1 and 2.2 for <a href="https://palantir.github.io/tslint/rules/whitespace/"><code>whitespace</code></a>, <a href="https://palantir.github.io/tslint/rules/space-before-function-paren/"><code>space-before-function-paren</code></a> and <a href="https://palantir.github.io/tslint/rules/deprecation/"><code>deprecation</code></a> (#2893)</li>\n<li><a href="">docs</a>(<a href="https://palantir.github.io/tslint/rules/no-string-literal/">https://palantir.github.io/tslint/rules/no-string-literal/</a>): Fix documentation (#2875)</li>\n</ul>\n<h2>v5.4.2</h2>\n<h2>:hammer<em>and</em>wrench: Bugfixes</h2>\n<ul>\n<li>[bugfix] Restored support for multiple <code>--exclude</code> options in the CLI (#2855)</li>\n<li>[bugfix] Restored support for <code>--version</code> CLI option (#2857)</li>\n</ul>\n<h2>v5.4.1</h2>\n<h2>:hammer<em>and</em>wrench: Bugfixes</h2>\n<ul>\n<li>[bugfix] Fixed regression in <code>--exclude</code> CLI option when using <code>--project</code> (#2852)</li>\n</ul>\n<h2>v5.4.0</h2>\n<h2>:star: Non-breaking API changes</h2>\n<ul>\n<li><code>--type-check</code> only checks for errors before linting is no longer required to enable rules that use the type checker. You only need to supply <code>--project</code> now.</li>\n</ul>\n<h2>:tada: New rules, options, and fixers</h2>\n<ul>\n<li><a href="">new-rule</a>(<a href="https://palantir.github.io/tslint/rules/switch-final-break/">https://palantir.github.io/tslint/rules/switch-final-break/</a>) (#2804)</li>\n<li><a href="">new-rule</a>(<a href="https://palantir.github.io/tslint/rules/use-default-type-parameter/">https://palantir.github.io/tslint/rules/use-default-type-parameter/</a>) (#2253)</li>\n<li><a href="">new-rule</a>(<a href="https://palantir.github.io/tslint/rules/binary-expression-operand-order/">https://palantir.github.io/tslint/rules/binary-expression-operand-order/</a>) (#2805)</li>\n<li><a href="">new-rule-option</a>(<a href="https://palantir.github.io/tslint/rules/ban/">https://palantir.github.io/tslint/rules/ban/</a>) new options format: allows to specify an optional explanation message for function bans, banning nested methods and using a wildcard for object of a method ban (#2547)</li>\n<li><a href="">new-rule-option</a>(<a href="https://palantir.github.io/tslint/rules/no-duplicate-variable/">https://palantir.github.io/tslint/rules/no-duplicate-variable/</a>) adds <code>check-parameters</code> option to check if variable has the same name as a parameter (#2597)</li>\n<li><a href="">new-rule-option</a>(<a href="https://palantir.github.io/tslint/rules/curly/">https://palantir.github.io/tslint/rules/curly/</a>): "as-needed" option (#2842)</li>\n<li><a href="">new-rule-option</a>(<a href="https://palantir.github.io/tslint/rules/no-unbound-method/">https://palantir.github.io/tslint/rules/no-unbound-method/</a>) add option <code>"ignore-static"</code> (#2751)</li>\n<li><a href="">new-rule-option</a>(<a href="https://palantir.github.io/tslint/rules/strict-boolean-expressions/">https://palantir.github.io/tslint/rules/strict-boolean-expressions/</a>) adds <code>allow-boolean-or-undefined</code> (#2820)</li>\n<li><a href="">new-fixer</a>(<a href="https://palantir.github.io/tslint/rules/object-literal-shorthand/">https://palantir.github.io/tslint/rules/object-literal-shorthand/</a>) can fix longhand methods (#2558)</li>\n</ul>\n<h2>:hammer<em>and</em>wrench: Bugfixes &#x26; enhancements</h2>\n<ul>\n<li><a href="">bugfix</a>(<a href="https://palantir.github.io/tslint/rules/prefer-object-spread/">https://palantir.github.io/tslint/rules/prefer-object-spread/</a>) allows constructor, function and method calls and more as first argument to <code>Object.assign</code> (#2828)</li>\n<li><a href="">bugfix</a>(<a href="https://palantir.github.io/tslint/rules/no-unbound-method/">https://palantir.github.io/tslint/rules/no-unbound-method/</a>) walker skips past the parent if it is a cast or parenthesized expression (#2838)</li>\n<li><a href="">bugfix</a>(<a href="https://palantir.github.io/tslint/rules/object-literal-shorthand/">https://palantir.github.io/tslint/rules/object-literal-shorthand/</a>): fixed suggestion for generator functions (#2558)</li>\n<li>[bugfix] Fixed issue with case sensitivity of <a href="https://palantir.github.io/tslint/rules/no-unused-variable/"><code>no-unused-variable</code></a> rule on Windows (#2819)</li>\n<li>[bugfix] don\'t crash <code>tslint --project</code> if <code>allowJs</code> is set in tsconfig.json (#2823)</li>\n<li><a href="">bugfix</a>(<a href="https://palantir.github.io/tslint/rules/align/">https://palantir.github.io/tslint/rules/align/</a>) with option <code>"members"</code>: check members of class expressions; don\'t check semicolons in classes (#2668)</li>\n<li><a href="">bugfix</a>(<a href="https://palantir.github.io/tslint/rules/no-inferred-empty-object-type/">https://palantir.github.io/tslint/rules/no-inferred-empty-object-type/</a>): fix stack overflow (#2762)</li>\n<li><a href="">bugfix</a>(<a href="https://palantir.github.io/tslint/rules/semicolon/">https://palantir.github.io/tslint/rules/semicolon/</a>): don\'t warn about unnecesary semicolon when it is actually needed, e.g. when followed by type assertion or template string (#2655)</li>\n<li><a href="">bugfix</a>(<a href="https://palantir.github.io/tslint/rules/space-before-function-paren/">https://palantir.github.io/tslint/rules/space-before-function-paren/</a>): Ignore async arrow function with no parentheses (#2833)</li>\n<li>[bugfix]: <a href="https://palantir.github.io/tslint/rules/no-unsafe-any/"><code>no-unsafe-any</code></a>: Don\'t fail on <code>continue label;</code> (#2830)</li>\n<li><a href="">bugfix</a>(<a href="https://palantir.github.io/tslint/rules/no-unbound-method/">https://palantir.github.io/tslint/rules/no-unbound-method/</a>): Allow unbound method to be used as a condition (#2834)</li>\n<li><a href="">bugfix</a>(<a href="https://palantir.github.io/tslint/rules/no-unsafe-any/">https://palantir.github.io/tslint/rules/no-unsafe-any/</a>): Allow to switch on a value of type <code>any</code> (#2836)</li>\n<li><a href="">bugfix</a>(<a href="https://palantir.github.io/tslint/rules/no-unsafe-any/">https://palantir.github.io/tslint/rules/no-unsafe-any/</a>): Don\'t mark <code>declare global {}</code> as an unsafe any. (#2839)</li>\n<li><a href="">bugfix</a>(<a href="https://palantir.github.io/tslint/rules/indent/">https://palantir.github.io/tslint/rules/indent/</a>) now checks indentation of expressions inside template strings (#2826)</li>\n<li>[enhancement] <code>--project</code> (or <code>-p</code>) enables rules that require the type checker. <code>--type-check</code> only checks for errors before linting is no longer required (#2773)</li>\n<li><a href="">enhancement</a>(<a href="https://palantir.github.io/tslint/rules/deprecation/">https://palantir.github.io/tslint/rules/deprecation/</a>): error message includes deprecation text if available (#2748)</li>\n<li><a href="">enhancement</a>(<a href="https://palantir.github.io/tslint/rules/cyclomatic-complexity/">https://palantir.github.io/tslint/rules/cyclomatic-complexity/</a>): Don\'t count empty switch case(#2743)</li>\n<li><a href="">enhancement</a>(<a href="https://palantir.github.io/tslint/rules/strict-boolean-expressions/">https://palantir.github.io/tslint/rules/strict-boolean-expressions/</a>): Allow <code>any</code>, and <code>true</code> and <code>false</code> literal types (#2758)</li>\n<li><a href="">enhancement</a>(<a href="https://palantir.github.io/tslint/rules/no-floating-promises/">https://palantir.github.io/tslint/rules/no-floating-promises/</a>): Allow \'promise.catch()\' (#2774)</li>\n<li><a href="">enhancement</a>(<a href="https://palantir.github.io/tslint/rules/comment-format/">https://palantir.github.io/tslint/rules/comment-format/</a>) no longer excludes comments with triple slash from linting except <code>/// &#x3C;reference path="..."/></code> (#2616)</li>\n<li><a href="">enhancement</a>(<a href="https://palantir.github.io/tslint/rules/prefer-object-spread/">https://palantir.github.io/tslint/rules/prefer-object-spread/</a>): lint more locations where return value is used. (#2828)</li>\n<li><a href="">enhancement</a>(<a href="https://palantir.github.io/tslint/rules/semicolon/">https://palantir.github.io/tslint/rules/semicolon/</a>): option <code>"never"</code> is now spec compliant (#2655)</li>\n<li><a href="">enhancement</a>(<a href="https://palantir.github.io/tslint/rules/object-literal-shorthand/">https://palantir.github.io/tslint/rules/object-literal-shorthand/</a>) handles async functions correctly (#2558)</li>\n<li>[enhancement] <code>--test</code> CLI option: allow passing path to tslint.json (#2784)</li>\n<li>[enhancement] Use commander instead of optimist for CLI arguments (#2689)</li>\n<li><a href="">enhancement</a>(<a href="https://palantir.github.io/tslint/rules/strict-type-predicates/">https://palantir.github.io/tslint/rules/strict-type-predicates/</a>): warn if strictNullChecks is not enabled (#2786)</li>\n</ul>\n<p>Thanks to our contributors!</p>\n<ul>\n<li>Klaus Meinhardt</li>\n<li>Manuel Lopez</li>\n<li>Andy Hanson</li>\n<li>Piotr Tomiak</li>\n</ul>\n<h2>v5.3.2</h2>\n<ul>\n<li>[bugfix] Fixes <code>not a directory</code> error (#2813)</li>\n</ul>\n<h2>v5.3.0</h2>\n<h2>This change may require a change to tslint.json</h2>\n<ul>\n<li><a href="">enhancement</a>(<a href="https://palantir.github.io/tslint/rules/prefer-switch/">https://palantir.github.io/tslint/rules/prefer-switch/</a>): Change default <code>min-cases</code> to 3. (#2669)</li>\n</ul>\n<h2>:tada: Features &#x26; enhancements</h2>\n<ul>\n<li>[new-cli-option] cli: Add <code>outputAbsolutePaths</code> option (#2667)</li>\n<li><a href="">new-rule</a>(<a href="https://palantir.github.io/tslint/rules/prefer-object-spread/">https://palantir.github.io/tslint/rules/prefer-object-spread/</a>) (#2624)</li>\n<li><a href="">new-rule</a>(<a href="https://palantir.github.io/tslint/rules/encoding/">https://palantir.github.io/tslint/rules/encoding/</a>) (#2368)</li>\n<li><a href="">new-rule</a>(<a href="https://palantir.github.io/tslint/rules/prefer-conditional-expression/">https://palantir.github.io/tslint/rules/prefer-conditional-expression/</a>) (#2363)</li>\n<li><a href="">new-rule-option</a>(<a href="https://palantir.github.io/tslint/rules/indent/">https://palantir.github.io/tslint/rules/indent/</a>) support indent size (#2723)</li>\n<li><a href="">new-rule-option</a>(<a href="https://palantir.github.io/tslint/rules/object-literal-sort-keys/">https://palantir.github.io/tslint/rules/object-literal-sort-keys/</a>) adds <code>ignore-case</code> (#2592)</li>\n<li><a href="">new-rule-option</a>(<a href="https://palantir.github.io/tslint/rules/quotemark/">https://palantir.github.io/tslint/rules/quotemark/</a>): Add <code>avoid-template</code> option (#2766)</li>\n<li><a href="">new-rule-option</a>(<a href="https://palantir.github.io/tslint/rules/await-promise">https://palantir.github.io/tslint/rules/await-promise</a>): What\'s considered a "Promise" is now configurable. (#2661)</li>\n<li><a href="">new-fixer</a>(<a href="https://palantir.github.io/tslint/rules/indent/">https://palantir.github.io/tslint/rules/indent/</a>) (#2723)</li>\n<li><a href="">new-fixer</a>(<a href="https://palantir.github.io/tslint/rules/typedef-whitespace/">https://palantir.github.io/tslint/rules/typedef-whitespace/</a>) (#2718)</li>\n<li>[enhancement] better error messages in <a href="https://palantir.github.io/tslint/rules/variable-name/"><code>variable-name</code></a> (#2672)</li>\n<li><a href="">enhancement</a>(<a href="https://palantir.github.io/tslint/rules/typedef/">https://palantir.github.io/tslint/rules/typedef/</a>): Use name or parameters for error location (#2460)</li>\n<li><a href="">enhancement</a>(<a href="https://palantir.github.io/tslint/rules/object-literal-sort-keys/">https://palantir.github.io/tslint/rules/object-literal-sort-keys/</a>): check shorthand properties (#2592)</li>\n<li><a href="">enhancement</a>(<a href="https://palantir.github.io/tslint/rules/space-before-function-paren/">https://palantir.github.io/tslint/rules/space-before-function-paren/</a>): Handle <code>get</code>/<code>set</code> accessor (#2700)</li>\n<li><a href="">enhancement</a>(<a href="https://palantir.github.io/tslint/rules/typedef-whitespace/">https://palantir.github.io/tslint/rules/typedef-whitespace/</a>) added checks for arrow function, call and construct signature (#2718)</li>\n<li><a href="">enhancement</a>(<a href="https://palantir.github.io/tslint/rules/no-object-literal-type-assertion/">https://palantir.github.io/tslint/rules/no-object-literal-type-assertion/</a>): Allow cast to <code>any</code> (#2671)</li>\n<li>[enhancement] cli: <code>-p</code> option handles directories (#2756)</li>\n<li>[develop] testing rules with type information is enabled when a <code>tsconfig.json</code> is found next to <code>tslint.json</code> (#2769)</li>\n<li>[configuration] deprecate mixed case tslint.json (#2713)</li>\n<li><a href="">bugfix</a>(<a href="https://palantir.github.io/tslint/rules/return-undefined/">https://palantir.github.io/tslint/rules/return-undefined/</a>): Treat a return type <code>void | undefined</code> same as <code>void</code> (#2731)</li>\n<li><a href="">bugfix</a>(<a href="https://palantir.github.io/tslint/rules/no-unnecessary-initializer/">https://palantir.github.io/tslint/rules/no-unnecessary-initializer/</a>): Handle <code>BindingElement</code> anywhere, not just in a <code>VariableDeclaration</code>. (#2707)</li>\n<li><a href="">bugfix</a>(<a href="https://palantir.github.io/tslint/rules/jsdoc-format/">https://palantir.github.io/tslint/rules/jsdoc-format/</a>): correctly handle alignment in files with BOM (#2619)</li>\n<li><a href="">bugfix</a>(<a href="https://palantir.github.io/tslint/rules/jsdoc-format/">https://palantir.github.io/tslint/rules/jsdoc-format/</a>): don\'t treat empty comments (<code>/**/</code>) as jsdoc (#2619)</li>\n<li><a href="">bugfix</a>(<a href="https://palantir.github.io/tslint/rules/typedef-whitespace/">https://palantir.github.io/tslint/rules/typedef-whitespace/</a>) don\'t warn for leading whitespace if token is preceded by line break (#2718)</li>\n<li>[bugfix] Make "completed-docs" rule respect "public" privacy (or lack thereof) (#2749)</li>\n<li><a href="">bugfix</a>(<a href="https://palantir.github.io/tslint/rules/jsdoc-format/">https://palantir.github.io/tslint/rules/jsdoc-format/</a>): fixed error position if line ends with <code>\\r\\n</code> (#2619)</li>\n<li><a href="">bugfix</a>(<a href="https://palantir.github.io/tslint/rules/prefer-switch/">https://palantir.github.io/tslint/rules/prefer-switch/</a>): add missing checks for some expressions (#2686)</li>\n<li><a href="">bugfix</a>(<a href="https://palantir.github.io/tslint/rules/prefer-template/">https://palantir.github.io/tslint/rules/prefer-template/</a>): Allow <code>"a" + "b" + "c"</code>. (#2741)</li>\n<li><a href="">bugfix</a>(<a href="https://palantir.github.io/tslint/rules/prefer-const/">https://palantir.github.io/tslint/rules/prefer-const/</a>): fix false positive with variable declared outside of for-of or for-in (#2760)</li>\n<li>[bugfix] <code>--project</code>: fix file matching with relative path to <code>tsconfig.json</code> (#2688)</li>\n<li><a href="">bugfix</a>(<a href="https://palantir.github.io/tslint/rules/no-default-export/">https://palantir.github.io/tslint/rules/no-default-export/</a>): correctly handle <code>export default abstract class {...}</code> (#2630)</li>\n<li><a href="">bugfix</a>(<a href="https://palantir.github.io/tslint/rules/no-mergeable-namespace/">https://palantir.github.io/tslint/rules/no-mergeable-namespace/</a>): display correct line in error message (#2656)</li>\n<li><a href="">bugfix</a>(<a href="https://palantir.github.io/tslint/rules/object-literal-sort-keys/">https://palantir.github.io/tslint/rules/object-literal-sort-keys/</a>): handle object spread correctly (#2592)</li>\n<li>[bugfix] Consistently output absolute/relative paths (#2667)</li>\n<li><a href="">bugfix</a>(<a href="https://palantir.github.io/tslint/rules/await-promise">https://palantir.github.io/tslint/rules/await-promise</a>): Consider types derived from a Promise in union types too. (#2661)</li>\n<li><a href="">bugfix</a>(<a href="https://palantir.github.io/tslint/rules/no-unsafe-any/">https://palantir.github.io/tslint/rules/no-unsafe-any/</a>): Fix bug where number literal in type position was flagged as an unsafe <code>any</code>. (#2712)</li>\n<li>[api] Deprecate <code>Lint.Utils.objectify</code> (#2764)</li>\n</ul>\n<p>Thanks to our contributors!</p>\n<ul>\n<li>Andy Hanson</li>\n<li>Klaus Meinhardt</li>\n<li>Martin Probst</li>\n<li>Filipe Silva</li>\n<li>walkerburgin</li>\n<li>René Scheibe</li>\n</ul>\n<h2>v5.2.0</h2>\n<ul>\n<li><a href="">rule-change</a>(<a href="https://palantir.github.io/tslint/rules/no-console/">https://palantir.github.io/tslint/rules/no-console/</a>) bans all console methods when no methods are specified (#2610)</li>\n<li><a href="">new-rule</a>(<a href="https://palantir.github.io/tslint/rules/no-object-literal-type-assertion/">https://palantir.github.io/tslint/rules/no-object-literal-type-assertion/</a>) (#2580)</li>\n<li><a href="">new-rule</a>(<a href="https://palantir.github.io/tslint/rules/no-irregular-whitespace/">https://palantir.github.io/tslint/rules/no-irregular-whitespace/</a>) (#2487)</li>\n<li><a href="">new-rule</a>(<a href="https://palantir.github.io/tslint/rules/prefer-switch/">https://palantir.github.io/tslint/rules/prefer-switch/</a>) (#2331)</li>\n<li><a href="">new-rule</a>(<a href="https://palantir.github.io/tslint/rules/number-literal-format/">https://palantir.github.io/tslint/rules/number-literal-format/</a>) (#2526)</li>\n<li><a href="">new-rule</a>(<a href="https://palantir.github.io/tslint/rules/deprecation/">https://palantir.github.io/tslint/rules/deprecation/</a>) (#2395)</li>\n<li><a href="">new-rule</a>(<a href="https://palantir.github.io/tslint/rules/no-unnecessary-type-assertion/">https://palantir.github.io/tslint/rules/no-unnecessary-type-assertion/</a>) (#2519)</li>\n<li><a href="">new-fixer</a>(<a href="https://palantir.github.io/tslint/rules/interface-over-type-literal/">https://palantir.github.io/tslint/rules/interface-over-type-literal/</a>) (#2617)</li>\n<li><a href="">new-fixer</a>(<a href="https://palantir.github.io/tslint/rules/callable-types/">https://palantir.github.io/tslint/rules/callable-types/</a>) (#2552)</li>\n<li><a href="">new-fixer</a>(<a href="https://palantir.github.io/tslint/rules/no-string-literal/">https://palantir.github.io/tslint/rules/no-string-literal/</a>) (#2495)</li>\n<li><a href="">new-fixer</a>(<a href="https://palantir.github.io/tslint/rules/no-internal-module/">https://palantir.github.io/tslint/rules/no-internal-module/</a>) (#2517)</li>\n<li><a href="">new-rule-option</a>(<a href="https://palantir.github.io/tslint/rules/align/">https://palantir.github.io/tslint/rules/align/</a>) rule added <code>members</code> option, which checks alignment of methods and properties of classes, objects, interfaces, type literals and object destructuring (#2387)</li>\n<li><a href="">new-rule-option</a>(<a href="https://palantir.github.io/tslint/rules/align/">https://palantir.github.io/tslint/rules/align/</a>) rule added <code>elements</code> option, which checks alignment of elements in array literals, array destructuring and tuple types (#2387)</li>\n<li><a href="">new-rule-option</a>(<a href="https://palantir.github.io/tslint/rules/trailing-comma/">https://palantir.github.io/tslint/rules/trailing-comma/</a>) adds more granular options to specify trailing commas for arrays, objects, functions, type literals, imports, and exports (#2538)</li>\n<li>[api] Deprecate <code>ScopeAwareRuleWalker</code> and <code>BlockScopeAwareRuleWalker</code>. (#2561)</li>\n<li>[develop] added support for <a href="https://palantir.github.io/tslint/develop/testing-rules/">error templates in rule tests</a> (#2481)</li>\n<li>[bugfix] Fixes "Severity for rule not found" error (#2516)</li>\n<li><a href="">bugfix</a>(<a href="https://palantir.github.io/tslint/rules/no-unused-expression/">https://palantir.github.io/tslint/rules/no-unused-expression/</a>): allow <code>void(0)</code> in addition to <code>void 0</code> and <code>void</code> in expression and statement position (#2645)</li>\n<li><a href="">bugfix</a>(<a href="https://palantir.github.io/tslint/rules/align/">https://palantir.github.io/tslint/rules/align/</a>): fix false positive for files with BOM (#2642)</li>\n<li><a href="">bugfix</a>(<a href="https://palantir.github.io/tslint/rules/return-undefined/">https://palantir.github.io/tslint/rules/return-undefined/</a>): Handle contextual types with ambiguous signatures; allow <code>any</code>; and handle async functions. (#2576)</li>\n<li><a href="">bugfix</a>(<a href="https://palantir.github.io/tslint/rules/semicolon/">https://palantir.github.io/tslint/rules/semicolon/</a>): don\'t mark semicolon as unnecessary when the next statement is on the same line (#2591)</li>\n<li><a href="">bugfix</a>(<a href="https://palantir.github.io/tslint/rules/no-internal-module/">https://palantir.github.io/tslint/rules/no-internal-module/</a>): no more false positives for global augmentation (#2517)</li>\n<li><a href="">bugfix</a>(<a href="https://palantir.github.io/tslint/rules/no-unnecessary-qualifier/">https://palantir.github.io/tslint/rules/no-unnecessary-qualifier/</a>): no longer breaks when walking a function that references <code>arguments</code> (#2555)</li>\n<li><a href="">bugfix</a>(<a href="https://palantir.github.io/tslint/rules/prefer-const/">https://palantir.github.io/tslint/rules/prefer-const/</a>) no longer shows warnings on ambient declarations (#2391)</li>\n<li><a href="">bugfix</a>(<a href="https://palantir.github.io/tslint/rules/callable-types/">https://palantir.github.io/tslint/rules/callable-types/</a>): suggest correct fix for interfaces with type arguments (#2552)</li>\n<li><a href="">bugfix</a>(<a href="https://palantir.github.io/tslint/rules/quotemark/">https://palantir.github.io/tslint/rules/quotemark/</a>): fix regression with jsx attributes (#2605)</li>\n<li><a href="">bugfix</a>(<a href="https://palantir.github.io/tslint/rules/adjacent-overload-signatures/">https://palantir.github.io/tslint/rules/adjacent-overload-signatures/</a>) handles functions ending in semicolon (#2412)</li>\n<li><a href="">bugfix</a>(<a href="https://palantir.github.io/tslint/rules/object-literal-key-quotes/">https://palantir.github.io/tslint/rules/object-literal-key-quotes/</a>): correctly stringify numbers when fixing (#2515)</li>\n<li><a href="">bugfix</a>(<a href="https://palantir.github.io/tslint/rules/object-literal-key-quotes/">https://palantir.github.io/tslint/rules/object-literal-key-quotes/</a>): does no longer require quotes for property names containing digits (#2515)</li>\n<li>[enhancement] Failures in extended config files now indicate which file (#2588)</li>\n<li><a href="">enhancement</a>(<a href="https://palantir.github.io/tslint/rules/align/">https://palantir.github.io/tslint/rules/align/</a>): Don\'t report \'statements are not aligned\' for empty statements (#2653)</li>\n<li><a href="">enhancement</a>(<a href="https://palantir.github.io/tslint/rules/class-name/">https://palantir.github.io/tslint/rules/class-name/</a>) now also checks class expressions (#2553)</li>\n<li>[enhancement] <code>optionExamples</code>: Allow to use an options array directly instead of a string representation. (#2527)</li>\n<li>[enhancement] <code>rulesDirectory</code> can now be resolved with Nodes resolve logic, if the directory contains an <code>index.js</code> (#2163) (#2358)</li>\n<li><a href="">enhancement</a>(<a href="https://palantir.github.io/tslint/rules/no-unused-expression/">https://palantir.github.io/tslint/rules/no-unused-expression/</a>): narrow error location for comma separated expressions and conditional expressions (#2645)</li>\n<li><a href="">enhancement</a>(<a href="https://palantir.github.io/tslint/rules/no-string-literal/">https://palantir.github.io/tslint/rules/no-string-literal/</a>) now handles escaped strings (#2495)</li>\n<li><a href="">enhancement</a>(<a href="https://palantir.github.io/tslint/rules/no-unnecessary-callback-wrapper/">https://palantir.github.io/tslint/rules/no-unnecessary-callback-wrapper/</a>): Allow <code>x => x(x)</code> (#2524)</li>\n<li><a href="">enhancement</a>(<a href="https://palantir.github.io/tslint/rules/no-var-keyword/">https://palantir.github.io/tslint/rules/no-var-keyword/</a>): Allow global var declarations (#2513)</li>\n</ul>\n<p>Thanks to our contributors!</p>\n<ul>\n<li>Andy Hanson</li>\n<li>Alex Eagle</li>\n<li>Donald Pipowitch</li>\n<li>Klaus Meinhardt</li>\n<li>Gord P</li>\n<li>Andy</li>\n<li>Quentin</li>\n<li>Mitchell Wills</li>\n<li>Vito</li>\n<li>CSchulz</li>\n<li>Josh Goldberg</li>\n<li>Brian Olore</li>\n<li>Manuel Lopez</li>\n<li>James Clark</li>\n</ul>\n<h2>v5.1.0</h2>\n<ul>\n<li>[new-rule] <code>no-invalid-template-strings</code> (#2332)</li>\n<li>[new-rule] <code>no-sparse-arrays</code> (#2407)</li>\n<li>[new-rule-option] <code>no-void-expression</code>: adds <code>ignore-arrow-function-shorthand</code> (#2445)</li>\n<li>[api] <code>tslint:all</code> configuration (#2417)</li>\n<li>[bugfix] In tslint:recommended move <code>no-reference-import</code> from <code>jsRules</code> to <code>rules</code> (#2441)</li>\n<li>[bugfix] <code>no-unnecessary-callback-wrapper</code>: only check if callback is identifier, allow all other expressions (#2510)</li>\n<li>[bugfix] <code>member-access</code>: Skip index signature, it can not have an access modifier (#2437)</li>\n<li>[bugfix] <code>restrict-plus-operands</code> fixes regression where every assignment and comparison was checked (#2454)</li>\n<li>[bugfix] <code>no-unnecessary-callback-wrapper</code>: allow async wrapper function (#2510)</li>\n<li>[bugfix] <code>prefer-for-of</code>: No error if <code>delete</code> is used (#2458)</li>\n<li>[bugfix] <code>radix</code>: don\'t warn for missing radix on method calls (#2352)</li>\n<li>[bugfix] <code>no-use-before-declare</code>: Handle symbol with empty declarations list. (#2436)</li>\n<li>[bugfix] <code>strict-type-predicates</code>: Check for construct signatures in <code>isFunction</code>. (#2479)</li>\n<li>[enhancement] <code>strict-boolean-expressions</code>: When <code>--strictNullChecks</code> is turned off, <code>allow-null-union</code> and <code>allow-undefined-union</code> turn off "always truthy" errors. (#2373)</li>\n<li>[enhancement] <code>radix</code>: added check for global.parseInt and window.parseInt (#2352)</li>\n<li>[enhancement] <code>arrow-return-shorthand</code>: Improve failure message when return expression is an object literal (#2466)</li>\n</ul>\n<p>Thanks to our contributors!</p>\n<ul>\n<li>Andy Hanson</li>\n<li>bumbleblym</li>\n<li>Klaus Meinhardt</li>\n<li>Jonas Kello</li>\n<li>Minko Gechev</li>\n<li>Donald Pipowitch</li>\n</ul>\n<h2>v5.0.0</h2>\n<h2>:fire: Breaking changes</h2>\n<ul>\n<li>Minimum version of TypeScript version is now 2.1.0 (#2425)</li>\n<li>\n<p>The severity level of rules are now configurable and defaults to severity "error". This affects the output of formatters:</p>\n<ul>\n<li>[formatter] <code>msbuild</code> was outputting all failures as "warning".</li>\n<li>[formatter] <code>pmd</code> was outputting all failures as priority 1. Now, it uses <em>priority 3</em> for "error" (default) and <em>priority 4</em> for "warning"</li>\n</ul>\n</li>\n<li>[formatter] <code>json</code> changed the <code>fix</code> property to now contain either one replacement or an array of replacements (#2403)</li>\n<li><code>tslint:recommended</code> configuration updated with <code>tslint:latest</code> rules &#x26; options (#2424)</li>\n<li>Removed <code>no-unused-new</code> rule, with logic moved into <code>no-unused-expression</code> (#2269)</li>\n<li><code>no-trailing-whitespace</code> now checks template strings by default. Use the new options <code>ignore-template-strings</code> to restore the old behavior. (#2359)</li>\n</ul>\n<h3>API breaks for custom rules</h3>\n<ul>\n<li>\n<p>Removed method <code>skip</code> from <code>RuleWalker</code> (#2313)</p>\n</li>\n<li>\n<p>Removed all use of the TypeScript Language Service, use only Program APIs instead (#2235)</p>\n<ul>\n<li>\n<p>This means that some rules that previously worked without the type checker <em>now require it</em>. This includes:</p>\n<ul>\n<li><code>no-unused-variable</code></li>\n<li><code>no-use-before-declare</code></li>\n</ul>\n</li>\n<li>\n<p>This breaks custom rule compilation. If your rule was not using the <code>ts.LanguageService</code> APIs, the migration is quite simple:</p>\n</li>\n</ul>\n<pre><code class="language-diff">- public applyWithProgram(srcFile: ts.SourceFile, langSvc: ts.LanguageService): Lint.RuleFailure[] {\n-     return this.applyWithWalker(new Walker(srcFile, this.getOptions(), langSvc.getProgram()));\n+ public applyWithProgram(srcFile: ts.SourceFile, program: ts.Program): Lint.RuleFailure[] {\n+     return this.applyWithWalker(new Walker(srcFile, this.getOptions(), program));\n</code></pre>\n<ul>\n<li>N.B. If you are refactoring your custom rules, consider <a href="https://palantir.github.io/tslint/develop/custom-rules/performance.html">these performance tips for writing custom rules</a>.</li>\n</ul>\n</li>\n<li>\n<p>Removed <code>createFix</code>. Replacements should be passed directly into addFailure. (#2403)</p>\n</li>\n<li>\n<p>Removed deprecated <code>scanAllTokens</code> and <code>skippableTokenAwareRuleWalker</code> (#2370)</p>\n</li>\n</ul>\n<h2>:tada: Notable features &#x26; enhancements</h2>\n<ul>\n<li>\n<p>[feature] The severity level of rules are now individually configurable. Default severity can also be configured.  (#629, #345)</p>\n<ul>\n<li>Valid values for <code>severity</code>: <code>default</code> | <code>error | warn | warning | none | off</code></li>\n<li>Valid values for <code>defaultSeverity</code>: <code>error | warn | warning | none | off</code></li>\n<li>Old style:</li>\n</ul>\n<pre><code class="language-json">{\n    "extends": "tslint:latest",\n    "rules": {\n        "callable-types": true,\n        "max-line-length": [true, 140]\n    }\n}\n</code></pre>\n<ul>\n<li>New style (in this example, <code>callable-types</code> outputs errors and <code>max-line-length</code> outputs warnings):</li>\n</ul>\n<pre><code class="language-json">{\n    "extends": "tslint:latest",\n    "defaultSeverity": "error",\n    "rules": {\n        "callable-types": true,\n        "max-line-length": {\n            "options": 140,\n            "severity": "warning"\n        }\n    }\n}\n</code></pre>\n</li>\n<li>\n<p>[new-rule] <code>prefer-template</code> (#2243)</p>\n</li>\n<li>\n<p>[new-rule] <code>return-undefined</code> (#2251)</p>\n</li>\n<li>\n<p>[new-rule] <code>no-reference-import</code> (#2273)</p>\n</li>\n<li>\n<p>[new-rule] <code>no-unnecessary-callback-wrapper</code> (#2249)</p>\n</li>\n<li>\n<p>[new-fixer] <code>linebreak-style</code> (#2394)</p>\n</li>\n<li>\n<p>[new-fixer] <code>eofline</code> (#2393)</p>\n</li>\n</ul>\n<h2>Full list of changes</h2>\n<ul>\n<li>[api] Added class <code>OptionallyTypedRule</code>, which allows rule authors to write a rule that applies when typing is either enabled or disabled (#2300)</li>\n<li>[bugfix] <code>prefer-function-over-method</code> now ignores abstract methods (#2307)</li>\n<li>[bugfix] <code>arrow-parens</code> with option <code>ban-single-arg-parens</code> now correctly handles functions with return type annotation (#2265)</li>\n<li>[bugfix] <code>prefer-function-over-method</code> exclude overload signatures (#2315)</li>\n<li>[bugfix] <code>use-isnan</code> now applies only to comparison operators (#2317)</li>\n<li>[bugfix] <code>file-header-rule</code> now handles single-line comments correctly (#2320)</li>\n<li>[bugfix] <code>newline-before-return</code>: fix handling of blank lines between comments (#2321)</li>\n<li>[bugfix] <code>trailing-comma</code> No longer enforce trailing commas in type parameters and tuple types (#2236)</li>\n<li>[bugfix] <code>align</code> don\'t fix if it would remove code (#2379)</li>\n<li>[bugfix] <code>unified-signatures</code> now recognizes rest parameters (#2342)</li>\n<li>[bugfix] <code>no-inferrable-types</code> don\'t warn for inferrable type on readonly property (#2312)</li>\n<li>[bugfix] <code>trailing-comma</code> no longer crashes on new without parentheses (e.g. <code>new Foo</code>) (#2389)</li>\n<li>[bugfix] <code>semicolon</code> Ignore comments when checking for unnecessary semicolon (#2240)</li>\n<li>[bugfix] <code>semicolon</code> Don\'t report unnecessary semicolon when followed by regex literal (#2240)</li>\n<li>[bugfix] CLI: exit with 0 on type check errors when <code>--force</code> is specified (#2322)</li>\n<li>[bugfix] CLI: <code>--test</code> now correctly strips single quotes from patterns on windows (#2322)</li>\n<li>[bugfix] <code>prefer-const</code> only fix initialized variables (#2219)</li>\n<li>[bugfix] <code>prefer-const</code> correctly handle variables shadowed by parameters and catched exceptions (#2219)</li>\n<li>[bugfix] <code>prefer-const</code> don\'t warn if one variable in a for loop initializer can not be const (#2219)</li>\n<li>[bugfix] <code>prefer-const</code> handle more cases in destructuring (#2219)</li>\n<li>[bugfix] <code>no-unused-expression</code> allow comma separated assignments (#2269)</li>\n<li>[chore] removed update-notifier dependency (#2262)</li>\n<li>[development] allow rule tests to specify version requirement for typescript (#2323)</li>\n<li>[enhancement] <code>ignore-properties</code> option of <code>no-inferrable-types</code> now also ignores parameter properties (#2312)</li>\n<li>[enhancement] <code>unified-signatures</code> now displays line number of the overload to unify if there are more than 2 overloads (#2270)</li>\n<li>[enhancement] <code>trailing-comma</code> New checks for CallSignature and NamedExports (#2236)</li>\n<li>[enhancement] <code>semicolon</code> New check for export statements, function overloads and shorthand module declaration (#2240)</li>\n<li>[enhancement] <code>semicolon</code> Report unnecessary semicolons in classes and in statement position (for option "always" too) (#2240)</li>\n<li>[enhancement] <code>semicolon</code> check for semicolon after method overload (#2240)</li>\n<li>[enhancement] <code>array-type</code> now consider <code>object</code>, <code>undefined</code> and <code>never</code> as simple types, allowing <code>object</code>, <code>undefined[]</code> and <code>never[]</code> (#1843)(#2353)</li>\n<li>[enhancement] <code>align</code> check statement alignment for all blocks (#2379)</li>\n<li>[enhancement] <code>align</code>check parameter alignment for all signatures (#2379)</li>\n<li>[enhancement] <code>--test</code> can handle multiple paths at once (#2322)</li>\n<li>[enhancement] <code>only-arrow-functions</code> allow functions that use <code>this</code> in the body (#2229)</li>\n<li>[enhancement] CLI: print error when <code>--type-check</code> is used without <code>--project</code> (#2322)</li>\n<li>[enhancement] CLI: don\'t print stack trace on type check error (#2322)</li>\n<li>[enhancement] CLI: added <code>-p</code> as shorthand for <code>--project</code> to be consistent with <code>tsc</code> (#2322)</li>\n<li>[enhancement] <code>prefer-const</code> show warnings for <code>var</code> (#2219)</li>\n<li>[enhancement] <code>quotemark</code> fixer unescapes original quotemark (e.g. <code>\'\\\'\'</code> -> <code>"\'"</code>) (#2359)</li>\n<li>[enhancement] <code>no-unused-expression</code> allow indirect eval <code>(0, eval)("");</code> (#2269)</li>\n<li>[enhancement] <code>no-unused-expression</code> checking for unused new can now use option <code>allow-fast-null-checks</code> (#2269)</li>\n<li>[enhancement] <code>no-unused-expression</code> find unused comma separated expressions in all locations of the code (#2269)</li>\n<li>[enhancement] <code>no-unused-expression</code> find unused expressions inside void expression (#2269)</li>\n<li>[new-config-option] Adds <code>defaultSeverity</code> with options <code>error</code>, <code>warning</code>, and <code>off</code>. (#2416)</li>\n<li>[new-formatter] TAP formatter (#2325)</li>\n<li>[new-rule-option] <code>no-unused-expression</code> adds option <code>allow-tagged-template</code> to allow tagged templates for side effects (#2269)</li>\n<li>[new-rule-option] <code>no-unused-expression</code> adds option <code>allow-new</code> to allow <code>new</code> without using the new object (#2269)</li>\n<li>[new-rule-option] <code>member-access</code> adds <code>no-public</code> option (#2247)</li>\n<li>[new-rule-option] <code>curly</code> added option <code>ignore-same-line</code> (#2334)</li>\n<li>[new-rule-option] <code>{destructuring: "all"}</code> to only warn if all variables in a destructuring can be const (#2219)</li>\n<li>[new-rule-option] added <code>ignore-template-strings</code> to <code>no-trailing-whitespace</code> (#2359)</li>\n<li>[rule-update] <code>array-type</code> now consider <code>undefined</code> and <code>never</code> as simple types, allowing <code>undefined[]</code> and <code>never[]</code> (#1843)</li>\n</ul>\n<p>Thanks to our contributors!</p>\n<ul>\n<li>Brian Olore</li>\n<li>Andy Hanson</li>\n<li>@andy-ms</li>\n<li>Chris Barr</li>\n<li>Klaus Meinhardt</li>\n<li>@bumbleblym</li>\n<li>Josh Goldberg</li>\n<li>James Clark</li>\n<li>@vilic</li>\n<li>Aleksandr Filatov</li>\n<li>Matt Banz</li>\n<li>Karol Janyst</li>\n<li>Mike Deverell</li>\n<li>Alexander James Phillips</li>\n<li>Irfan Hudda</li>\n</ul>\n<h2>v4.5.1</h2>\n<ul>\n<li>[enhancement] Updated recommended rules to include <code>ban-types</code> and <code>no-duplicate-super</code> (#2271)</li>\n<li>[bugfix] <code>object-literal-key-quotes</code> handle negative number property name (#2273)</li>\n</ul>\n<h2>v4.5.0</h2>\n<ul>\n<li>[new-rule] <code>no-import-side-effect</code> (#2155)</li>\n<li>[new-rule] <code>match-default-export-name</code> (#2117)</li>\n<li>[new-rule] <code>no-non-null-assertion</code> (#2221)</li>\n<li>[new-rule] <code>ban-types</code> (#2175)</li>\n<li>[new-rule] <code>no-duplicate-super</code> (#2038)</li>\n<li>[new-rule] <code>newline-before-return</code> (#2173)</li>\n<li>[new-rule-option] <code>completed-docs</code> adds options for location, type, and privacy. Also adds interfaces, enums, types (#2095)</li>\n<li>[new-rule-option] <code>no-inferrable-types</code> adds option  <code>ignore-properties</code> (#2178)</li>\n<li>[new-rule-option] <code>typedef</code> adds options <code>object-destructuring</code> and <code>array-destructuring</code> options (#2146)</li>\n<li>[new-rule-option] <code>member-ordering</code> adds option <code>alphabetize</code> (#2101)</li>\n<li>[new-rule-option] <code>no-trailing-whitespace</code> adds option <code>ignore-jsdoc</code> (#2177)</li>\n<li>[new-rule-option] <code>no-trailing-whitespace</code> adds option <code>ignore-comments</code> option (#2153)</li>\n<li>[new-fixer] <code>no-inferrable-types</code> automatically remove inferrable type annotations (#2178)</li>\n<li>[new-fixer] <code>no-any</code> (#2165)</li>\n<li>[new-fixer] <code>noConsecutiveBlankLines</code> (#2201)</li>\n<li>[new-fixer] <code>object-literal-shorthand</code> (#2165)</li>\n<li>[bugfix] <code>no-switch-case-fallthrough</code> handle break, throw, continue and return nested in block, if-else and switch (#2218)</li>\n<li>[bugfix] <code>no-switch-case-fallthrough</code> allow empty case clauses before default clause (#2218)</li>\n<li>[bugfix] <code>no-mergeable-namespace</code> ignore property types that can\'t be merged (#2105)</li>\n<li>[bugfix] <code>object-literal-key-quotes</code> no need to quote a float if its .toString() is the same. (#2144)</li>\n<li>[bugfix] <code>no-consecutive-blank-lines</code> Correctly apply fixes at EOF (#2239)</li>\n<li>[bugfix]: Fixes installation issue with node 7.5 (#2212)</li>\n<li>[bugfix]: <code>quotemark</code> now handles escaped chars (#2224)</li>\n<li>[enhancement] Don\'t exit when a rule requires type checking but type checking is not enabled (#2188)</li>\n<li>[enhancement] <code>no-switch-case-fallthrough</code> allow single line comment <code>// falls through</code> (#2218)</li>\n<li>[enhancement] <code>no-unbound-method</code> allows property access and binary expressions (#2143)</li>\n<li>\n<p>[api] Introduce <code>AbstractWalker</code> for performance (#2093)</p>\n<ul>\n<li>see <a href="https://palantir.github.io/tslint/develop/custom-rules/performance.html">performance</a> and <a href="https://palantir.github.io/tslint/develop/custom-rules/migration.html">migration</a> docs</li>\n</ul>\n</li>\n</ul>\n<p>Thanks to our contributors!</p>\n<ul>\n<li>Andy Hanson</li>\n<li>Stefan Reichel</li>\n<li>Shlomi Assaf</li>\n<li>Josh Goldberg</li>\n<li>Minko Gechev</li>\n<li>Irfan Hudda</li>\n<li>Klaus Meinhardt</li>\n<li>Martin Probst</li>\n<li>Naoto Usuyama</li>\n<li>Caleb Eggensperger</li>\n<li>Arturs Vonda</li>\n<li>Joscha Feth</li>\n<li>Moritz</li>\n<li>Alexander Rusakov</li>\n<li>Alex Ryan</li>\n<li>Andy</li>\n<li>Yuichi Nukiyama</li>\n</ul>\n<h2>v4.4.2</h2>\n<ul>\n<li>[bugfix] <code>whitespace</code> rule caused false positive on EOF (#2131)</li>\n<li>[bugfix] WebStorm fails because <code>json</code> formatter parameter has extra space (#2132)</li>\n</ul>\n<h2>v4.4.1</h2>\n<ul>\n<li>[bugfix] errant space in recommended ruleset (couldn\'t find <code>no-misused-new</code>)</li>\n</ul>\n<h2>v4.4.0</h2>\n<ul>\n<li>[new-rule] <code>arrow-return-shorthand</code> (#1972)</li>\n<li>[new-rule] <code>no-unbound-method</code> (#2089)</li>\n<li>[new-rule] <code>no-boolean-literal-compare</code> (#2013)</li>\n<li>[new-rule] <code>no-unsafe-any</code> (#2047)</li>\n<li>[new-rule] <code>no-unnecessary-qualifier</code> (#2008)</li>\n<li>[new-rule] <code>no-unnecessary-initializer</code> (#2106)</li>\n<li>[new-rule] <code>await-promise</code> (#2102)</li>\n<li>[new-rule] <code>no-floating-promises</code> (#1632)</li>\n<li>[new-rule] <code>strict-type-predicates</code> (#2046)</li>\n<li>[new-rule] <code>no-misused-new</code> (#1963)</li>\n<li>[new-rule] <code>prefer-method-signature</code> (#2028)</li>\n<li>[new-rule] <code>prefer-function-over-method</code> (#2037)</li>\n<li>[new-rule-option] <code>allow-fast-null-checks</code> added to <code>no-unused-expression</code> (#1638)</li>\n<li>[new-rule-option] <code>comment-format-rule</code> adds <code>ignore-words</code> and <code>ignore-pattern</code> options (#1757)</li>\n<li>[new-rule-option] <code>whitespace</code> adds <code>check-preblock</code> option (#2002)</li>\n<li>[new-rule-option] <code>strict-boolean-expressions</code> adds <code>allow-null-union</code>, <code>allow-undefined-union</code>, <code>allow-string</code>, and <code>allow-number</code> and  (#2033)</li>\n<li>[new-fixer] <code>align</code> (#2097)</li>\n<li>[new-fixer] <code>no-trailing-whitespace</code> (#2060)</li>\n<li>[bugfix] <code>no-magic-numbers</code> false positive on default parameter values (#2004)</li>\n<li>[bugfix] <code>no-empty-interface</code> allow empty interface with 2 or more parents (#2070)</li>\n<li>[bugfix] <code>no-trailing-whitespace</code> fixed for comments and EOF (#2060)</li>\n<li>[bugfix] <code>no-empty</code> no longer fails for private or protected constructor (#1976)</li>\n<li>[bugfix] <code>tslint:disable</code>/<code>tslint-enable</code> now handles multiple rules and fixes what code is enabled/disabled (#2061)</li>\n<li>[bugfix] <code>no-inferrable-types</code> now validates property declarations (#2081)</li>\n<li>[bugfix] <code>unified-signatures</code> false positive (#2016)</li>\n<li>[bugfix] <code>whitespace</code> finds all whitespace errors in JsxExpressions and TemplateExpressions (#2036)</li>\n<li>[bugfix] <code>comment-format</code> no more false positives in JsxText (#2036)</li>\n<li>[enhancement] <code>--test</code> option now accepts glob (#2079)</li>\n</ul>\n<p>Thanks to our contributors!</p>\n<ul>\n<li>Alexander Rusakov</li>\n<li>Andrii Dieiev</li>\n<li>@andy-ms</li>\n<li>Andy Hanson</li>\n<li>Josh Goldberg</li>\n<li>Kei Son</li>\n<li>Klaus Meinhardt</li>\n<li>Krati Ahuja</li>\n<li>Martin Probst</li>\n<li>Mohsen Azimi</li>\n<li>Romke van der Meulen</li>\n<li>cameron-mcateer</li>\n</ul>\n<h2>v4.3.1</h2>\n<ul>\n<li>[bugfix] Fix back-compat break. Allow formattersDirectory === null (#1997)</li>\n</ul>\n<h2>v4.3.0</h2>\n<ul>\n<li><strong>Enabled additional rules in <code>tslint:latest</code> configuration</strong> (#1981)</li>\n<li>[new-rule] <code>space-before-function-paren</code> (#1897)</li>\n<li>[new-rule] <code>typeof-compare</code> (#1927)</li>\n<li>[new-rule] <code>import-spacing</code> (#1935)</li>\n<li>[new-rule] <code>unified-signatures</code> (#1944)</li>\n<li>[new-fixer] <code>object-literal-key-quotes</code> (#1953)</li>\n<li>[new-fixer] <code>no-angle-bracket-type-assertion</code> (#1979)</li>\n<li>[bugfix] <code>adjacent-overload-signature</code> now handles static/computed function names (#1831)</li>\n<li>[bugfix] <code>file-header</code> now handles files with only comments (#1913)</li>\n<li>[bugfix] <code>no-consecutive-blank-lines</code> now allows blank lines in template strings (#1886)</li>\n<li>[bugfix] <code>object-literal-key-quotes</code> no longer throws exception when using rest operator (#1916)</li>\n<li>[bugfix] <code>restrict-plus-operands</code> no longer shows false positive in ternary operation (#1925)</li>\n<li>[bugfix] <code>prefer-for-of</code> now handles nested <code>for</code> loops with reused iterator (#1926)</li>\n<li>[bugfix] Exit gracefully when <code>tsconfig.json</code> passed as <code>--project</code> argument doens\'t have files (#1933)</li>\n<li>[bugfix] <code>object-literal-key-quotes</code> now handles shorthand and spread properties (#1945)</li>\n<li>[bugfix] <code>arrow-parens</code> Allow binding patterns <code>([x, y]) => ...</code> and <code>({x, y}) => ...</code> to have parens (#1958)</li>\n<li>[bugfix] <code>semicolon</code> fixer now handles comma separator in interfaces and indicates failure when commas are using in interfaces (#1856)</li>\n<li>[bugfix] <code>only-arrow-functions</code> option <code>allow-named-functions</code> now allows function declarations (#1961)</li>\n<li>[bugfix] <code>prefer-for-of</code> no longer shows false positive when array is in parentheses (#1986)</li>\n<li>[bugfix] <code>prefer-const</code> now works for TypeScript versions &#x3C; 2.1.0 (#1989)</li>\n<li>[enhancement] <code>member-access</code> narrow location of error (#1964)</li>\n</ul>\n<p>Thanks to our contributors!</p>\n<ul>\n<li>Andrii Dieiev</li>\n<li>@andy-ms</li>\n<li>Andy Hanson</li>\n<li>Josh Goldberg</li>\n<li>Klaus Meinhardt</li>\n<li>Linda_pp</li>\n<li>Mohsen Azimi</li>\n<li>Victor Grigoriu</li>\n<li>Yuichi Nukiyama</li>\n<li>cameron-mcateer</li>\n</ul>\n<h2>v4.2.0</h2>\n<ul>\n<li>[new-rule] <code>no-string-throw</code> (#1878)</li>\n<li>[new-rule] <code>no-empty-interface</code> (#1889)</li>\n<li>[new-rule] <code>interface-over-type-literal</code> (#1890)</li>\n<li>[new-rule] <code>callable-types</code> (#1891)</li>\n<li>[new-rule] <code>no-void-expression</code> (#1903)</li>\n<li>[new-rule-option] <code>ban-single-arg-parens</code> added to <code>arrow-parens</code> (#1893)</li>\n<li>[bugfix] <code>prefer-const</code> handles destructuring arrays (#1894), destructuring objects (#1906), and forward references (#1908)</li>\n<li>[bugfix] Don\'t error for misplaced braces for \'else\' in <code>one-line</code> rule (#1866)</li>\n<li>[bugfix] <code>no-shadowed-variable</code> now identifies shadowed <code>for</code> iterator (#1816)</li>\n<li>[bugfix] <code>object-literal-key-quotes</code> now includes function names (#1874)</li>\n<li>[bugfix] error when EOF comes after <code>disable-next-line</code> comment (#1902)</li>\n</ul>\n<p>Thanks to our contributors!</p>\n<ul>\n<li>Andrew Scott</li>\n<li>@andy-ms</li>\n<li>Andy Hanson</li>\n<li>James Booth</li>\n<li>Klaus Meinhardt</li>\n<li>Vladimir Matveev</li>\n</ul>\n<h2>v4.1.1</h2>\n<ul>\n<li>[bugfix] <code>typedef</code> rule was showing false positive for <code>catch</code> clause (#1887)</li>\n</ul>\n<h2>v4.1.0</h2>\n<ul>\n<li>[new-rule] <code>prefer-const</code> (#1801)</li>\n<li>[new-rule] <code>strict-boolean-expressions</code> (#1820)</li>\n<li>[new-rule] <code>no-magic-numbers</code> (#1799)</li>\n<li>[new-rule] <code>import-blacklist</code> (#1841)</li>\n<li>[new-rule] <code>promise-functions-async</code> (#1779)</li>\n<li>[new-rule] <code>no-inferred-empty-object-type</code>: a type must be specified when using a generic class/function/etc (#1821)</li>\n<li>[new-rule-option] <code>allow-named-functions</code> added to <code>only-arrow-functions</code> (#1857)</li>\n<li>[new-fixer] <code>prefer-const</code> (#1801)</li>\n<li>[new-fixer] <code>quotemark</code> (#1790)</li>\n<li>[new-formatter] <code>code-frame</code> formatter shows you the error in context (#1819)</li>\n<li>[enhancement] <code>no-internal-module</code> failures highlight less text (#1781)</li>\n<li>[enhancement] Avoid auto-fixing errors that would result in compilation errors for rules that use type-check (#1608)</li>\n<li>[rule-change] <code>only-arrow-functions</code> will allow functions with a <code>this</code> parameter (#1597)</li>\n<li>[bugfix] <code>no-use-before-declare</code> false positive on named import (#1620)</li>\n<li>[bugfix] <code>prefer-for-of</code> was showing false positive when the element is assigned (#1813)</li>\n<li>[bugfix] The command line argument <code>type-check</code> was swallowing the next argument (#1783)</li>\n<li>[bugfix] <code>tslint:disable-line</code> was re-enabling <code>tslint:disable</code> (#1634)</li>\n<li>[bugfix] <code>adjacent-overload-signatures</code> did not work for constructors (#1800)</li>\n<li>[bugfix] <code>checkstyle</code> formatter was reporting errors under one file (#1811)</li>\n<li>[bugfix] <code>trailing-comma</code> was applied to parameter lists (#1775)</li>\n<li>[api] CLI logic moved into API friendly class (#1688)</li>\n</ul>\n<p>Thanks to our contributors!</p>\n<ul>\n<li>Alex Eagle</li>\n<li>Andrii Dieiev</li>\n<li>Andy Hanson</li>\n<li>Art Chaidarun</li>\n<li>Donald Pipowitch</li>\n<li>Feisal Ahmad</li>\n<li>Josh Goldberg</li>\n<li>Klaus Meinhardt</li>\n<li>Maciej Sypień</li>\n<li>Mohsen Azimi</li>\n<li>Ryan Lester</li>\n<li>Simon Schick</li>\n<li>Subhash Sharma</li>\n<li>Timothy Slatcher</li>\n<li>Yaroslav Admin</li>\n<li>Yuichi Nukiyama</li>\n<li>tdsmithATabc</li>\n<li>@wmrowan</li>\n</ul>\n<h2>v4.0.2</h2>\n<ul>\n<li>[enhancement] Don\'t exit when a rule can\'t be found. Print as a warning instead (#1771)</li>\n<li>[api-change] Allow 3rd party apps to see exception when the config is invalid (#1764)</li>\n<li>[bugfix] Don\'t flag a property named as empty string as not needing quotes in an object literal (#1762)</li>\n<li>[bugfix] Report correct number of fixes done by --fix (#1767)</li>\n<li>[bugfix] Fix false positives and exceptions in <code>prefer-for-of</code> (#1758)</li>\n<li>[bugfix] Fix <code>adjacent-overload-signatures</code> false positive when a static function has the same name (#1772)</li>\n</ul>\n<p>Thanks to our contributors!</p>\n<ul>\n<li>@gustavderdrache</li>\n</ul>\n<h2>v4.0.1</h2>\n<ul>\n<li>[bugfix] Removed <code>no-unused-variable</code> rule from recommended config, as it was causing spurious deprecation warnings.</li>\n</ul>\n<h2>v4.0.0-dev.2</h2>\n<ul>\n<li>Include latest v4.0.0 changes</li>\n</ul>\n<h2>v4.0.0</h2>\n<ul>\n<li>\n<p><strong>BREAKING CHANGES</strong></p>\n<ul>\n<li>[api-change] Minor changes to the library API. See this PR for changes and upgrade instructions (#1720)</li>\n<li>[removed-rule] Removed <code>no-unreachable</code> rule; covered by compiler (#661)</li>\n<li>[enhancement] Changed order of applied configuration files for the <code>extends</code> array to make it more intuitive. (#1503)</li>\n<li>[enhancement] Changed TypeScript peer dependency to >= 2.0.0 (#1710)</li>\n</ul>\n</li>\n<li>[new-rule] <code>completed-docs</code> rule added (#1644)</li>\n<li>[new-fixer] <code>ordered-imports</code> auto fixed (#1640)</li>\n<li>[new-fixer] <code>arrow-parens</code> auto fixed (#1731)</li>\n<li>[rule-change] <code>indent</code> rule now ignores template strings (#1611)</li>\n<li>[new-rule-option] <code>object-literal-key-quotes</code> adds the options <code>consistent</code> and <code>consistent-as-needed</code> (#1733)</li>\n<li>[enhancement] <code>--fix</code> option added to automatically fix selected rules (#1697)</li>\n<li>[enhancement] Updated recommend rules (#1717)</li>\n<li>[enhancement] <code>adjacent-overload-signatures</code> now works with classes, source files, modules, and namespaces (#1707)</li>\n<li>[enhancement] Users are notified if they are using an old TSLint version (#1696)</li>\n<li>[bugfix] Lint <code>.jsx</code> files if <code>jsRules</code> are configured (#1714)</li>\n<li>[bugfix] Command line glob patterns now handle single quotes (#1679)</li>\n</ul>\n<p>Thanks to our contributors!</p>\n<ul>\n<li>Andrii Dieiev</li>\n<li>Andy</li>\n<li>Chris Barr</li>\n<li>Davie Schoots</li>\n<li>Jordan Hawker</li>\n<li>Josh Goldberg</li>\n<li>Stepan Riha</li>\n<li>Yuichi Nukiyama</li>\n</ul>\n<h2>v4.0.0-dev.1</h2>\n<ul>\n<li>\n<p><strong>BREAKING CHANGES</strong></p>\n<ul>\n<li>[enhancement] The <code>semicolon</code> rule now disallows semicolons in multi-line bound class methods\n(to get the v3 behavior, use the <code>ignore-bound-class-methods</code> option) (#1643)</li>\n<li>[removed-rule] Removed <code>use-strict</code> rule (#678)</li>\n<li>[removed-rule] Removed <code>label-undefined</code> rule; covered by compiler (#1614)</li>\n<li>[enhancement] Renamed <code>no-constructor-vars</code> to <code>no-parameter-properties</code> (#1296)</li>\n<li>[rule-change] The <code>orderedImports</code> rule now sorts relative modules below non-relative modules (#1640)</li>\n</ul>\n</li>\n<li>\n<p><strong>Deprecated</strong></p>\n<ul>\n<li>[deprecated] <code>no-unused-variable</code> rule. This is checked by the TypeScript v2 compiler using the flags <a href="https://github.com/Microsoft/TypeScript/wiki/What%27s-new-in-TypeScript#flag-unused-declarations-with---nounusedparameters-and---nounusedlocals"><code>--noUnusedParameters</code> and <code>--noUnusedLocals</code></a>. (#1481)</li>\n</ul>\n</li>\n<li>[enhancement] Lint .js files (#1515)</li>\n<li>[new-fixer] <code>no-var-keyword</code> replaces <code>var</code> with <code>let</code> (#1547)</li>\n<li>[new-fixer] <code>trailing-comma</code> auto fixed (#1546)</li>\n<li>[new-fixer] <code>no-unused-variable</code> auto fixed for imports (#1568)</li>\n<li>[new-fixer] <code>semicolon</code> auto fixed (#1423)</li>\n<li>[new-rule] <code>max-classes-per-file</code> rule added (#1666)</li>\n<li>[new-rule-option] <code>no-consecutive-blank-lines</code> rule now accepts a number value indicating max blank lines (#1650)</li>\n<li>[new-rule-option] <code>ordered-imports</code> rule option <code>import-sources-order</code> accepts value <code>any</code> (#1602)</li>\n<li>[bugfix] <code>no-empty</code> rule fixed when parameter has readonly modifier</li>\n<li>[bugfix] <code>no-namespace</code> rule: do not flag nested or .d.ts namespaces (#1571)</li>\n</ul>\n<p>Thanks to our contributors!</p>\n<ul>\n<li>Alex Eagle</li>\n<li>Andrii Dieiev</li>\n<li>Ben Coveney</li>\n<li>Boris Aranovich</li>\n<li>Chris Barr</li>\n<li>Cyril Gandon</li>\n<li>Evgeniy Zhukovskiy</li>\n<li>Jay Anslow</li>\n<li>Kunal Marwaha</li>\n<li>Martin Probst</li>\n<li>Mingye Wang</li>\n<li>Raghav Katyal</li>\n<li>Sean Dawson</li>\n<li>Yuichi Nukiyama</li>\n<li>jakpaw</li>\n</ul>\n<h2>v4.0.0-dev.0</h2>\n<ul>\n<li>\n<p><strong>BREAKING CHANGES</strong></p>\n<ul>\n<li>[enhancement] Drop support for configuration via package.json (#1579)</li>\n<li>[removed-rule] Removed <code>no-duplicate-key</code> rule; covered by compiler (#1109)</li>\n<li>[enhancement] Call formatter once for all file results. Format output may be different (#656)</li>\n<li>[rule-change] <code>trailing-comma</code> supports function declarations, expressions, and types (#1486)</li>\n<li>[rule-change] <code>object-literal-sort-keys</code> now sorts quoted keys (#1529)</li>\n<li>[rule-change] <code>semicolon</code> now processes type aliases (#1475)</li>\n<li>[rule-change] <code>no-var-keyword</code> now rejects <code>export var</code> statements (#1256)</li>\n<li>[rule-change] <code>semicolon</code> now requires semicolon for function declaration with no body (#1447)</li>\n</ul>\n</li>\n<li>[new-formatter] <code>fileslist</code> formatter writes a list of files with errors without position or error type specifics (#1558)</li>\n<li>[new-rule] <code>cyclomaticComplexity</code>, enforces a threshold of cyclomatic complexity.] (#1464)</li>\n<li>[new-rule] <code>prefer-for-of</code>, which errors when <code>for(var x of y)</code> can be used instead of <code>for(var i = 0; i &#x3C; y.length; i++)</code> (#1335)</li>\n<li>[new-rule] <code>array-type</code>, which can require using either `T[]\' or \'Array<T>\' for arrays (#1498)</li>\n<li>[rule-change] <code>object-literal-sort-keys</code> checks multiline objects only (#1642)</li>\n<li>[rule-change] <code>ban</code> rule now can ban global functions (#327)</li>\n<li>[bugfix] always write lint result, even if using formatter (#1353)</li>\n<li>[bugfix] npm run test:bin fails on Windows (#1635)</li>\n<li>[bugfix] Don\'t enforce trailing spaces on newlines in typedef-whitespace rule (#1531)</li>\n<li>[bugfix] <code>jsdoc</code> rule should not match arbitrary comments (#1543)</li>\n<li>[bugfix] <code>one-line</code> rule errors when declaring wildcard ambient modules (#1425)</li>\n</ul>\n<p>Thanks to our contributors!</p>\n<ul>\n<li>Alex Eagle</li>\n<li>Andrii Dieiev</li>\n<li>Andy Hanson</li>\n<li>Ben Coveney</li>\n<li>Boris Aranovich</li>\n<li>Chris Barr</li>\n<li>Christian Dreher</li>\n<li>Claas Augner</li>\n<li>Josh Goldberg</li>\n<li>Martin Probst</li>\n<li>Mike Deverell</li>\n<li>Nina Hartmann</li>\n<li>Satoshi Amemiya</li>\n<li>Scott Wu</li>\n<li>Steve Van Opstal</li>\n<li>Umar Bolatov</li>\n<li>Vladimir Matveev</li>\n<li>Yui</li>\n</ul>\n<h2>v3.15.1</h2>\n<ul>\n<li>Enabled additional rules in <code>tslint:latest</code> configuration (#1506)</li>\n</ul>\n<h2>v3.15.0</h2>\n<ul>\n<li>Stable release containing changes from the last dev release (v3.15.0-dev.0)</li>\n</ul>\n<h2>v3.15.0-dev.0</h2>\n<ul>\n<li>[enhancement] Rules can automatically fix errors (#1423)</li>\n<li>[enhancement] Better error messages for invalid source files (#1480)</li>\n<li>[new-rule] <code>adjacent-overload-signatures</code> rule (#1426)</li>\n<li>[new-rule] <code>file-header</code> rule (#1441)</li>\n<li>[new-rule] <code>object-literal-shorthand</code> rule (#1488)</li>\n<li>[new-rule-option] <code>allow-declarations</code> option for <code>only-arrow-functions</code> rule (#1452)</li>\n<li>[new-rule-option] <code>import-sources-order</code> option for <code>ordered-imports</code> rule (#1466)</li>\n<li>[bugfix] <code>arrow-parens</code> rule handles async and generics (#1446, #1479)</li>\n<li>[bugfix] <code>comment-format</code> rule ignores tslint control comments (#1473)</li>\n<li>[bugfix] Fix <code>no-shadowed-variable</code> rule false positives (#1482)</li>\n</ul>\n<p>Thanks to our contributors!</p>\n<ul>\n<li>@apacala</li>\n<li>@danvk</li>\n<li>@DovydasNavickas</li>\n<li>@glen-84</li>\n<li>@IllusionMH</li>\n<li>@JoshuaKGoldberg</li>\n<li>@markwongsk</li>\n<li>@rakatyal</li>\n<li>@rhysd</li>\n<li>@ScottSWu</li>\n<li>@YuichiNukiyama</li>\n</ul>\n<h2>v3.14.0</h2>\n<ul>\n<li>Stable release containing changes from the last dev releases (v3.14.0-dev.0, v3.14.0-dev.1)</li>\n</ul>\n<h2>v3.14.0-dev.1</h2>\n<ul>\n<li>[new-rule] <code>arrow-parens</code> rule (#777)</li>\n<li>[new-rule] <code>max-file-line-count</code> rule (#1360)</li>\n<li>[new-rule] <code>no-unsafe-finally</code> rule (#1349)</li>\n<li>[new-rule] <code>no-for-in-array</code> rule (#1380)</li>\n<li>[new-rule] <code>object-literal-key-quotes</code> rule (#1364)</li>\n<li>[enhancement] Better <code>ban</code> rule failure messages (#1385)</li>\n<li>[enhancement] New stylish formatter (#1406)</li>\n</ul>\n<p>Thanks to our contributors!</p>\n<ul>\n<li>@chrismbarr</li>\n<li>@danvk</li>\n<li>@gjuchault</li>\n<li>@lowkay</li>\n<li>@ScottSWu</li>\n<li>@YuichiNukiyama</li>\n</ul>\n<h2>v3.14.0-dev.0</h2>\n<ul>\n<li>[enhancement] Add optional type information to rules (#1323)</li>\n</ul>\n<p>Thanks to our contributors!</p>\n<ul>\n<li>@ScottSWu</li>\n</ul>\n<h2>v3.13.0</h2>\n<ul>\n<li>Stable release containing changes from the last dev release (v3.13.0-dev.0)</li>\n</ul>\n<h2>v3.13.0-dev.0</h2>\n<ul>\n<li>[new-rule] <code>ordered-imports</code> rule (#1325)</li>\n<li>[enhancement] MPEG transport stream files are ignored by the CLI (#1357)</li>\n</ul>\n<p>Thanks to our contributors!</p>\n<ul>\n<li>@chrismbarr</li>\n<li>@corydeppen</li>\n<li>@danvk</li>\n<li>@janaagaard75</li>\n<li>@mprobst</li>\n</ul>\n<h2>v3.12.0-dev.2</h2>\n<ul>\n<li>[enhancement] Support TypeScript v2.0.0-dev builds</li>\n</ul>\n<h2>v3.12.1</h2>\n<ul>\n<li>Stable release containing changes from the last dev release (v3.12.0-dev.1)</li>\n</ul>\n<h2>v3.12.0-dev.1</h2>\n<ul>\n<li>[bugfix] Fix null reference bug in typedef rule (#1345)</li>\n</ul>\n<h2>v3.12.0</h2>\n<ul>\n<li>Stable release containing changes from the last dev release (v3.12.0-dev.0)</li>\n</ul>\n<h2>v3.12.0-dev.0</h2>\n<ul>\n<li>[new-rule] <code>only-arrow-functions</code> rule (#1318)</li>\n<li>[new-rule] <code>no-unused-new</code> rule (#1316)</li>\n<li>[new-rule-option] <code>arrow-call-signature</code> option for <code>typedef</code> rule (#1284)</li>\n<li>[enhancement] Metadata for every rule (#1311)</li>\n<li>[enhancement] <code>typedef</code> rule is more flexible about the location of typedefs for arrow functions (#1176)</li>\n<li>[enhancement] Failure messages are clearer and more consistent for many rules (#1303, #1307, #1309)</li>\n<li>[bugfix] <code>no-consecutive-blank-lines</code> now handles lines with only whitespace correctly (#1249)</li>\n<li>[bugfix] Correctly load <code>.json</code> config files that have a BOM (#1338)</li>\n</ul>\n<p>Thanks to our contributors!</p>\n<ul>\n<li>@allannienhuis</li>\n<li>@arnaudvalle</li>\n<li>@bencoveney</li>\n<li>@chrismbarr</li>\n<li>@corydeppen</li>\n<li>@HamletDRC</li>\n<li>@JoshuaKGoldberg</li>\n<li>@timbrown81</li>\n<li>@tomduncalf</li>\n<li>@YuichiNukiyama</li>\n</ul>\n<h2>v3.11.0</h2>\n<ul>\n<li>Stable release containing changes from the last dev release (v3.11.0-dev.0)</li>\n</ul>\n<h2>v3.11.0-dev.0</h2>\n<ul>\n<li>[new-rule] <code>linebreak-style</code> rule (#123)</li>\n<li>[new-rule] <code>no-mergeable-namespace</code> rule (#843)</li>\n<li>[enhancement] Add built-in configurations (#1261)</li>\n<li>[enhancement] New vso formatter (#1281)</li>\n<li>[new-rule-option] <code>ignore-interfaces</code> option for <code>semicolon</code> rule (#1233)</li>\n<li>[bugfix] <code>no-default-export</code> rule handles more default export cases (#1241)</li>\n</ul>\n<p>Thanks to our contributors!</p>\n<ul>\n<li>@cgwrench</li>\n<li>@HamletDRC</li>\n<li>@lijunle</li>\n<li>@paldepind</li>\n<li>@patsissons</li>\n<li>@schmuli</li>\n<li>@YuichiNukiyama</li>\n</ul>\n<h2>v3.10.2</h2>\n<ul>\n<li>Stable release containing changes from the last dev release (v3.10.0-dev.2)</li>\n</ul>\n<h2>v3.10.0-dev.2</h2>\n<ul>\n<li>[bugfix] <code>member-ordering</code> rule doesn\'t crash on methods in class expressions (#1252)</li>\n<li>[bugfix] <code>ban</code> rule handles chained methods appropriately (#1234)</li>\n</ul>\n<p>Thanks to our contributors!</p>\n<ul>\n<li>@marines</li>\n</ul>\n<h2>v3.10.1</h2>\n<ul>\n<li>Stable release containing changes from the last dev release (v3.10.0-dev.1)</li>\n</ul>\n<h2>v3.10.0-dev.1</h2>\n<ul>\n<li>[bugfix] <code>member-ordering</code> rule doesn\'t crash on methods in object literals (#1243)</li>\n</ul>\n<h2>v3.10.0</h2>\n<ul>\n<li>Stable release containing changes from the last dev release (v3.10.0-dev.0)</li>\n</ul>\n<h2>v3.10.0-dev.0</h2>\n<ul>\n<li>[new-rule] <code>new-parens</code> rule (#1177)</li>\n<li>[new-rule] <code>no-default-export</code> rule (#1182)</li>\n<li>[new-rule-option] <code>order: ...</code> option for <code>member-ordering</code> rule (#1208)</li>\n<li>[new-rule-option] "ignore-for-loop" option for <code>one-variable-per-declaration</code> rule (#1204)</li>\n<li>[enhancement] "no-this-in-function-in-method" option renamed to "check-function-in-method" (#1203)</li>\n<li>[bugfix] <code>semicolon</code> rule checks export statements (#1155)</li>\n</ul>\n<p>Thanks to our contributors!</p>\n<ul>\n<li>@chrismbarr</li>\n<li>@HamletDRC</li>\n<li>@larshp</li>\n<li>@patsissons</li>\n<li>@YuichiNukiyama</li>\n</ul>\n<h2>v3.9.0</h2>\n<ul>\n<li>Stable release containing changes from the last dev release (v3.9.0-dev.0)</li>\n</ul>\n<h2>v3.9.0-dev.0</h2>\n<ul>\n<li>[new-rule] <code>no-namespace</code> rule (#1133)</li>\n<li>[new-rule] <code>one-variable-per-declaration</code> rule (#525)</li>\n<li>[new-rule-option] "ignore-params" option for <code>no-inferrable-types</code> rule (#1190)</li>\n<li>[new-rule-option] "no-this-in-function-in-method" option for <code>no-invalid-this</code> rule (#1179)</li>\n<li>[enhancement] Single line enable/disable comments (#144)</li>\n<li>[enhancement] Resolve <code>extends</code> packages relative to location of configuration file (#1171)</li>\n<li>[enhancement] <code>Linter</code> class will throw an error if configuration is of an invalid type (#1167)</li>\n<li>[bugfix] <code>use-isnan</code> allows assaignments to <code>NaN</code> (#1054)</li>\n<li>[bugfix] <code>no-unreachable</code> handles allows hoisted type aliases (#564)</li>\n<li>[bugfix] <code>member-ordering</code> rule now checks constructors (#1158)</li>\n<li>[bugfix] <code>--test</code> CLI command works correctly with specifiying custom rules (#1195)</li>\n</ul>\n<p>Thanks to our contributors!</p>\n<ul>\n<li>@abierbaum</li>\n<li>@HamletDRC</li>\n<li>@inthemill</li>\n<li>@janslow</li>\n<li>@JoshuaKGoldberg</li>\n<li>@mprobst</li>\n<li>@patsissions</li>\n<li>@YuichiNukiyama</li>\n</ul>\n<h2>v3.8.1</h2>\n<ul>\n<li>Stable release containing changes from the last dev release (v3.8.0-dev.1)</li>\n</ul>\n<h2>v3.8.0-dev.1</h2>\n<ul>\n<li>[bugfix] Allow JS directives at the start of constructors, getters, and setters (#1159)</li>\n<li>[bugfix] Remove accidentally included performance profiles from published NPM artifact (#1160)</li>\n</ul>\n<h2>v3.8.0</h2>\n<ul>\n<li>Stable release containing changes from the last dev release (v3.8.0-dev.0)</li>\n</ul>\n<h2>v3.8.0-dev.0</h2>\n<ul>\n<li>[new-rule] <code>no-invalid-this</code> rule (#1105)</li>\n<li>[new-rule] <code>use-isnan</code> rule (#1054)</li>\n<li>[new-rule] <code>no-reference</code> rule (#1139)</li>\n<li>[new-rule-option] "allow-pascal-case" option for <code>variable-name</code> rule (#1079)</li>\n<li>[enhancement] Comments now allowed in <code>tslint.json</code> files (#1129)</li>\n<li>[enhancement] Smarter <code>trailing-comma</code> behavior (#1122)</li>\n<li>[enhancement] <code>semicolon</code> rule more lenient with arrow-function class members (#1076)</li>\n<li>[enhancement] Allow enabling/disabling rules with <code>//</code> comments (#1134)</li>\n<li>[enhancement] New checkstyle formatter (#250)</li>\n<li>[enhancement] Clearer message for <code>no-var-keyword</code> rule (#1124)</li>\n<li>[bugfix] Loaded configurations are not cached (#1128)</li>\n<li>[bugfix] Allow JS directives at the start of class methods (#1144)</li>\n</ul>\n<p>Thanks to our contributors!</p>\n<ul>\n<li>@AndyMoreland</li>\n<li>@chrismbarr</li>\n<li>@HamletDRC</li>\n<li>@JoshuaKGoldberg</li>\n<li>@sshev</li>\n<li>@unional</li>\n</ul>\n<h2>v3.7.4</h2>\n<ul>\n<li>Stable release containing changes from the last dev release (v3.7.0-dev.5)</li>\n</ul>\n<h2>v3.7.0-dev.5</h2>\n<ul>\n<li>[bugfix] Allow JS directives in namespaces (#1115)</li>\n</ul>\n<h2>v3.7.3</h2>\n<ul>\n<li>Stable release containing changes from the last dev release (v3.7.0-dev.4)</li>\n</ul>\n<h2>v3.7.0-dev.4</h2>\n<ul>\n<li>[bugfix] Downgrade <code>findup-sync</code> dependency (#1108)</li>\n</ul>\n<h2>v3.7.2</h2>\n<ul>\n<li>Stable release containing changes from the last dev release (v3.7.0-dev.3)</li>\n</ul>\n<h2>v3.7.0-dev.3</h2>\n<ul>\n<li>[bugfix] <code>findConfigurationPath</code> always returns an absolute path (#1093)</li>\n<li>[bugfix] Update <code>findup-sync</code> dependency (#1080)</li>\n<li>[bugfix] <code>declare global</code> no longer triggers <code>no-internal-module</code> rule (#1069)</li>\n<li>[bugfix] Valid JS directives no longer trigger <code>no-unused-expression</code> rule (#1050)</li>\n</ul>\n<h2>v3.7.1</h2>\n<ul>\n<li>Stable release containing changes from the last dev release</li>\n</ul>\n<h2>v3.7.0-dev.2</h2>\n<ul>\n<li>[bugfix] Improve handling of paths provided via the -c CLI option (#1083)</li>\n</ul>\n<h2>v3.7.0</h2>\n<ul>\n<li>Stable release containing changes from the last dev release</li>\n</ul>\n<h2>v3.7.0-dev.1</h2>\n<ul>\n<li>[enhancement] <code>extends</code> field for <code>tslint.json</code> files (#997)</li>\n<li>[enhancement] <code>--force</code> CLI option (#1059)</li>\n<li>[enhancement] Improve how <code>Linter</code> class handles configurations with a <code>rulesDirectory</code> field (#1035)</li>\n<li>[new-rule] <code>no-angle-bracket-type-assertion</code> rule (#639)</li>\n<li>[new-rule-option] "allow-undefined-check" option for <code>triple-equals</code> rule (#602)</li>\n<li>[new-rule-option] "always-prefix" and "never-prefix" option for <code>interface-name</code> rule (#512)</li>\n</ul>\n<p>Thanks to our contributors!</p>\n<ul>\n<li>@Arnavion</li>\n<li>@chrismbarr</li>\n<li>@ChrisPearce</li>\n<li>@JoshuaKGoldberg</li>\n<li>@patsissonso</li>\n<li>@sasidhar</li>\n<li>@unional</li>\n<li>@vvakame</li>\n</ul>\n<h2>v3.6.0</h2>\n<ul>\n<li>Stable release containing changes from the last dev release</li>\n</ul>\n<h2>v3.6.0-dev.1</h2>\n<ul>\n<li>[enhancement] Add <code>--exclude</code> CLI option (#915)</li>\n<li>[bugfix] Fix <code>no-shadowed-variable</code> rule handling of standalone blocks (#1021)</li>\n<li>[deprecation] Configuration through <code>package.json</code> files (#1020)</li>\n<li>[API] Export additional configuration methods from top-level "tslint" module (#1009)</li>\n</ul>\n<p>Thanks to our contributors!</p>\n<ul>\n<li>@blakeembrey</li>\n<li>@hamhut1066</li>\n<li>@meowtec</li>\n</ul>\n<h2>v3.5.0</h2>\n<ul>\n<li>Stable release containing changes from the last dev release</li>\n</ul>\n<h2>v3.5.0-dev.1</h2>\n<ul>\n<li>[new-rule-option] "ignore-pattern" option for <code>no-unused-variable</code> rule (#314)</li>\n<li>[bugfix] Fix occassional crash in <code>no-string-literal</code> rule (#906)</li>\n<li>[enhancement] Tweak behavior of <code>member-ordering</code> rule with regards to arrow function types in interfaces (#226)</li>\n</ul>\n<p>Thanks to our contributors!</p>\n<ul>\n<li>@arusakov</li>\n<li>@Pajn</li>\n</ul>\n<h2>v3.4.0</h2>\n<ul>\n<li>Stable release containing changes from the last two dev releases</li>\n</ul>\n<h2>v3.4.0-dev.2</h2>\n<ul>\n<li>[new-rule-option] "arrow-parameter" option for <code>typedef</code> rule (#333)</li>\n<li>[new-rule-option] "never" option for <code>semicolon</code> rule (#363)</li>\n<li>[new-rule-option] "onespace" setting for <code>typedef-whitespace</code> rule (#888)</li>\n<li>[new-rule-option] <code>typedef-whitespace</code> rule can now check spacing on right side of typdef colon (#888)</li>\n<li>[enhancement] <code>member-ordering</code> rule treats arrow functions as methods (#226)</li>\n<li>[bugfix] Handle spaces before typedefs correctly in <code>typedef-whitespace</code> rule (#955)</li>\n<li>[bugfix] <code>label-position</code> rule now allows labels on <code>for-of</code> loops (#959)</li>\n</ul>\n<p>Thanks to our contributors!</p>\n<ul>\n<li>@b0r3as</li>\n<li>@ChaseMoskal</li>\n<li>@Pajn</li>\n<li>@pe8ter</li>\n<li>@tomduncalf</li>\n</ul>\n<h2>v3.4.0-dev.1</h2>\n<ul>\n<li>\n<p>[enhancement] Revamped testing system (#620)</p>\n<ul>\n<li>Writing tests for rules is now much simpler with a linter DSL.\nSee exisitng tests in <code>test/rules/**/*.ts.lint</code> for examples.</li>\n</ul>\n</li>\n<li>[enhancement] New msbuild formatter (#947)</li>\n<li>[bugfix] Fix handling of multiline literals in <code>trailing-comma</code> rule (#856)</li>\n<li>[bugfix] <code>one-line</code> rule correctly checks space between <code>catch</code> and opening brace (#925)</li>\n<li>[bugfix] <code>one-line</code> rule correctly checks multiline variable declarations (#935)</li>\n<li>[new-rule-option] New option <code>check-finally</code> for <code>one-line</code> rule (#925)</li>\n<li>\n<p><strong>BREAKING CHANGES</strong></p>\n<ul>\n<li>[bugfix] Report error when a rule in the config file is not found (#598)</li>\n</ul>\n</li>\n</ul>\n<p>Thanks to our contributors!</p>\n<ul>\n<li>@mmv</li>\n<li>@pe8ter</li>\n</ul>\n<h2>v3.3.0</h2>\n<ul>\n<li>[bugfix] Tweak TSLint build so TSLint works with typescript@next (#926)</li>\n</ul>\n<h2>v3.3.0-dev.1</h2>\n<ul>\n<li>[bugfix] Correctly handle more than one custom rules directory (#928)</li>\n</ul>\n<h2>v3.2.2</h2>\n<ul>\n<li>Stable release containing changes from the last dev release</li>\n</ul>\n<h2>v3.2.2-dev.1</h2>\n<ul>\n<li>[enhancement] Throw an error if a path to a directory of custom rules is invalid (#910)</li>\n<li>[new-rule-option] "jsx-single" and "jsx-double" options for <code>quotemark</code> rule (#673)</li>\n<li>[bugfix] Handle paths to directories of custom rules more accurately</li>\n<li>[bugfix] <code>no-unused-expression</code> rule handles <code>await</code> statements correctly (#887)</li>\n</ul>\n<h2>v3.2.1</h2>\n<ul>\n<li>Stable release containing changes from the last dev release</li>\n</ul>\n<h2>v3.2.1-dev.1</h2>\n<ul>\n<li>[enhancement] automatically generate a <code>tslint.json</code> file with new <code>--init</code> CLI command (#717)</li>\n<li>[bugfix] <code>no-var-keyword</code> rule detects the use of <code>var</code> in all types of <code>for</code> loops (#855)</li>\n</ul>\n<h2>v3.2.0</h2>\n<ul>\n<li>Stable release containing changes from last two dev releases</li>\n</ul>\n<h2>v3.2.0-dev.2</h2>\n<ul>\n<li>[bugfix] formatters are now exported correctly to work with TS 1.8 (#863)</li>\n</ul>\n<h2>v3.2.0-dev.1</h2>\n<ul>\n<li>[bugfix] fixed bug in how custom rules directories are registered (#844)</li>\n<li>[enhancement] better support for globs in CLI (#827)</li>\n<li>[new-rule] <code>no-null-keyword</code> rule (#722)</li>\n</ul>\n<h2>v3.1.1</h2>\n<ul>\n<li>Bump TypeScript peer dependency to <code>>= 1.7.3</code> due to <code>const enum</code> incompatibility (#832)</li>\n</ul>\n<h2>v3.1.0</h2>\n<ul>\n<li>[bugfix] build with TS v1.7.3 to fix null pointer exception (#832)</li>\n<li>[bugfix] fixed false positive in <code>no-require-imports</code> rule (#816)</li>\n</ul>\n<h2>v3.1.0-dev.1</h2>\n<ul>\n<li>[bugfix] fixed <code>no-shadowed-variable</code> false positives when handling destructuring in function params (#727)</li>\n<li>[enhancement] <code>rulesDirectory</code> in <code>tslint.json</code> now supports multiple file paths (#795)</li>\n</ul>\n<h2>v3.0.0</h2>\n<ul>\n<li>\n<p>[bugfix] <code>member-access</code> rule now handles object literals and get/set accessors properly (#801)</p>\n<ul>\n<li>New rule options: <code>check-accessor</code> and <code>check-constructor</code></li>\n</ul>\n</li>\n<li>\n<p>All the changes from the following releases, including some <strong>breaking changes</strong>:</p>\n<ul>\n<li><code>3.0.0-dev.3</code></li>\n<li><code>3.0.0-dev.2</code></li>\n<li><code>3.0.0-dev.1</code></li>\n<li><code>2.6.0-dev.2</code></li>\n<li><code>2.6.0-dev.1</code></li>\n</ul>\n</li>\n</ul>\n<h2>v3.0.0-dev.3</h2>\n<ul>\n<li>TypeScript is now a peerDependency (#791)</li>\n<li>[bugfix] <code>no-unused-variable</code> rule with <code>react</code> option works with self-closing JSX tags (#776)</li>\n<li>[bugfix] <code>use-strict</code> bugfix (#544)</li>\n</ul>\n<h2>v3.0.0-dev.2</h2>\n<ul>\n<li>[new-rule-option] "react" option for <code>no-unused-variable</code> rule (#698, #725)</li>\n<li>[bugfix] Fix how <code>Linter</code> is exported from "tslint" module (#760)</li>\n<li>[bugfix] <code>no-use-before-declare</code> rule doesn\'t crash on uncompilable code (#763)</li>\n</ul>\n<h2>v3.0.0-dev.1</h2>\n<ul>\n<li>\n<p><strong>BREAKING CHANGES</strong></p>\n<ul>\n<li>\n<p>Rearchitect TSLint to use external modules instead of merged namespaces (#726)</p>\n<ul>\n<li>Dependencies need to be handled differently now by custom rules and formatters</li>\n<li>See the <a href="https://github.com/palantir/tslint/pull/726">PR</a> for full details about this change</li>\n</ul>\n</li>\n<li><code>no-trailing-comma</code> rule removed, it is replaced by the <code>trailing-comma</code> rule (#687)</li>\n<li>Rename <code>sort-object-literal-keys</code> rule to <code>object-literal-sort-keys</code> (#304, #537)</li>\n<li><code>Lint.abstract()</code> has been removed (#700)</li>\n</ul>\n</li>\n<li>[new-rule] <code>trailing-comma</code> rule (#557, #687)</li>\n<li>[new-rule-option] "ban-keywords" option for <code>variable-name</code> rule (#735, #748)</li>\n<li>[bugfix] <code>typedef</code> rule now handles <code>for-of</code> loops correctly (#743)</li>\n<li>[bugfix] Handle tslint.json utf-8 files which have a BOM correctly (#90)</li>\n</ul>\n<h2>v2.6.0-dev.2</h2>\n<ul>\n<li>Upgrade TypeScript compiler to <code>v1.7.0-dev.20151003</code></li>\n<li>[bugfix] <code>no-unused-expression</code> rule now handles yield expressions properly (#706)</li>\n</ul>\n<h2>v2.6.0-dev.1</h2>\n<ul>\n<li>Upgrade TypeScript compiler to <code>v1.7.0-dev.20150924</code></li>\n</ul>\n<h2>v2.5.1</h2>\n<ul>\n<li>[new-rule] no-inferrable-types rule (#676)</li>\n<li>[new-rule-option] "avoid-escape" option for quotemark rule (#543)</li>\n<li>[bugfix] type declaration for tslint external module #686</li>\n<li>\n<p>[enhancement] <code>AbstractRule</code> and <code>AbstractFormatter</code> are now abstract classes (#631)</p>\n<ul>\n<li>Note: <code>Lint.abstract()</code> is now deprecated</li>\n</ul>\n</li>\n</ul>\n<h2>v2.5.0</h2>\n<ul>\n<li>Use TypeScript compiler <code>v1.6.2</code></li>\n<li>[bugfixes] #637, #642, #650, #652</li>\n<li>[bugfixes] fix various false positives in <code>no-unused-variable</code> rule (#570, #613, #663)</li>\n<li>Update project setup for latest VSCode (#662)</li>\n</ul>\n<h2>v2.5.0-beta</h2>\n<ul>\n<li>Use TypeScript compiler <code>v1.6.0-beta</code></li>\n<li>[bugfix] Fix <code>no-internal-module</code> false positives on nested namespaces (#600)</li>\n<li>[docs] Add documentation for <code>sort-object-literal-keys</code> rule</li>\n</ul>\n<h2>v2.5.0-dev.5</h2>\n<ul>\n<li>Upgrade TypeScript compiler to <code>v1.7.0-dev.20150828</code></li>\n<li>[bugfix] Handle .tsx files appropriately (#597, #558)</li>\n</ul>\n<h2>v2.5.0-dev.4</h2>\n<ul>\n<li>Upgrade TypeScript compiler to <code>v1.6.0-dev.20150825</code></li>\n</ul>\n<h2>v2.5.0-dev.3</h2>\n<ul>\n<li>Upgrade TypeScript compiler to <code>v1.6.0-dev.20150821</code></li>\n</ul>\n<h2>v2.5.0-dev.2</h2>\n<ul>\n<li>Upgrade TypeScript compiler to <code>v1.6.0-dev.20150811</code></li>\n<li>[bug] fix <code>whitespace</code> false positive in JSX elements (#559)</li>\n</ul>\n<h2>v2.5.0-dev.1</h2>\n<ul>\n<li>Upgrade TypeScript compiler to <code>v1.6.0-dev.20150805</code></li>\n<li>[enhancement] Support <code>.tsx</code> syntax (#490)</li>\n</ul>\n<h2>v2.4.5</h2>\n<ul>\n<li>[bugfix] fix false positives on <code>no-shadowed-variable</code> rule (#500)</li>\n<li>[enhancement] add <code>allow-trailing-underscore</code> option to <code>variable-name</code> rule</li>\n</ul>\n<h2>v2.4.4</h2>\n<ul>\n<li>[bugfix] remove "typescript" block from package.json (#606)</li>\n</ul>\n<h2>v2.4.3</h2>\n<ul>\n<li>[new-rule] <code>no-conditional-assignment</code> (#507)</li>\n<li>[new-rule] <code>member-access</code> (#552)</li>\n<li>[new-rule] <code>no-internal-module</code> (#513)</li>\n<li>[bugfix] small fixes to <code>sample.tslint.json</code> (#545)</li>\n<li>[bugfix] fix README docs for quotemark and indent (#523)</li>\n<li>[enhancement] update <code>findup-sync</code> and <code>underscore.string</code> dependencies</li>\n<li>[enhancement] add <code>"typescript"</code> field to <code>package.json</code> (#560)</li>\n<li>[enhancement] small improvements to CLI help text</li>\n<li>[enhancement] expose raw failures array in the JS API (#477)</li>\n</ul>\n<h2>v2.4.2</h2>\n<ul>\n<li>[bug] remove npm-shrinkwrap.json from the published package</li>\n</ul>\n<h2>v2.4.0</h2>\n<ul>\n<li>Upgraded Typescript compiler to 1.5.3</li>\n<li>[bugs] #332, #493, #509, #483</li>\n<li>[bug] fix error message in <code>no-var-keyword</code> rule</li>\n<li>[enhancement] CI tests are now run on node v0.12 in addition to v0.10</li>\n<li>\n<p><strong>BREAKING</strong></p>\n<ul>\n<li><code>-f</code> option removed from CLI</li>\n</ul>\n</li>\n</ul>\n<h2>v2.3.1-beta</h2>\n<ul>\n<li>[bugs] #137 #434 #451 #456</li>\n<li>[new-rule] <code>no-require-imports</code> disallows <code>require()</code> style imports</li>\n<li>[new-rule] <code>no-shadowed-variable</code> moves over shadowed variable checking from <code>no-duplicate-variable</code> into its own rule</li>\n<li>\n<p><strong>BREAKING</strong></p>\n<ul>\n<li><code>no-duplicate-variable</code> now only checks for duplicates within the same block scope; enable <code>no-shadowed-variable</code> to get duplicate-variable checking across block scopes</li>\n</ul>\n</li>\n<li>[enhancement] <code>no-duplicate-variable</code>, <code>no-shadowed-variable</code>, and <code>no-use-before-declare</code> now support ES6 destructuring</li>\n<li>[enhancement] tslint CLI now uses a default configuration if no config file is found</li>\n</ul>\n<h2>v2.3.0-beta</h2>\n<ul>\n<li>[bugs] #401 #367 #324 #352</li>\n<li>[new-rule] <code>no-var-keyword</code> disallows <code>var</code> in favor of <code>let</code> and <code>const</code></li>\n<li>[new-rule] <code>sort-object-literal-keys</code> forces object-literal keys to be sorted alphabetically</li>\n<li>Add support for ES6 destructuring and module syntax (affects <code>variable-name</code>, <code>no-use-before-declare</code>, <code>whitespace</code> and <code>no-unused-variable</code>)</li>\n<li>Add support for ES6 for-of and spread operator syntax</li>\n<li>Use tsconfig.json &#x26; JSCS in the build system</li>\n</ul>\n<h2>v2.2.0-beta</h2>\n<ul>\n<li>Upgraded Typescript compiler to 1.5.0-beta</li>\n<li>\n<p><strong>BREAKING CHANGES</strong></p>\n<ul>\n<li>due to changes to the typescript compiler API, old custom rules may no longer work and may need to be rewritten</li>\n<li>the JSON formatter\'s line and character positions are now back to being 0-indexed instead of 1-indexed</li>\n</ul>\n</li>\n<li>[bugs] #328 #334 #319 #351 #365 #254</li>\n<li>[bug] fixes for tslint behavior around template strings (fixes #357, #349, #332, and more)</li>\n<li>[new-rule] <code>align</code> rule now enforces vertical alignment on parameters, arguments, and statements</li>\n<li>[new-rule] <code>switch-default</code> enforces a <code>default</code> case in <code>switch</code> statements</li>\n<li>[feature] <code>no-duplicate-variable</code> rule now additionally checks if function parameters have been shadowed</li>\n<li>Additional fixes to existing rules to work as before with the typescript 1.5 compiler</li>\n</ul>\n<h2>v2.1.1</h2>\n<ul>\n<li>[bugs] #292 #293 #295 #301 #302</li>\n<li>Some internal refactoring</li>\n<li>Added Windows CI testing (appveyor)</li>\n</ul>\n<h2>v2.1.0</h2>\n<ul>\n<li>Fix crash on Windows</li>\n</ul>\n<h2>v2.0.1</h2>\n<ul>\n<li>Upgraded Typescript compiler to 1.4</li>\n<li>\n<p><strong>BREAKING CHANGES</strong></p>\n<ul>\n<li>\n<p>typedef rule options were modified:</p>\n<ul>\n<li>index-signature removed as no longer necessary</li>\n<li>property-signature renamed to property-declaration</li>\n<li>variable-declarator renamed to variable-declaration</li>\n<li>member-variable-declarator renamed to member-variable-declaration</li>\n</ul>\n</li>\n<li>\n<p>typedef-whitespace rule options were modified:</p>\n<ul>\n<li>catch-clause was removed as invalid</li>\n<li>further options were added, see readme for more details</li>\n</ul>\n</li>\n<li>due to changes to the typescript compiler API, old custom rules may no longer work and may need to be rewritten</li>\n<li>the JSON formatter\'s line and character positions are now 1-indexed instead of 0-indexed</li>\n</ul>\n</li>\n</ul>\n<h2>v1.2.0</h2>\n<ul>\n<li>[bug] #245</li>\n</ul>\n<h2>v1.0.1</h2>\n<ul>\n<li>[bug] #238</li>\n</ul>\n<h2>v1.0.0</h2>\n<ul>\n<li>upgrade TypeScript compiler to 1.3</li>\n<li>\n<p><strong>BREAKING CHANGES</strong></p>\n<ul>\n<li>all error messages now start with a lower-case character and do not end with a period</li>\n<li>all rule options are consistent in nomenclature. The <code>typedef</code> and <code>typedef-whitespace</code> rules now take in hyphenated options</li>\n<li><code>unused-variables</code> rule cannot find unused private variables defined in the constructor due to a bug in 1.3 compiler</li>\n<li><code>indent</code> rule has changed to only check for tabs or spaces and not enforce indentation levels</li>\n</ul>\n</li>\n</ul>\n<h2>v0.4.12</h2>\n<ul>\n<li>multiple files with -f on cli</li>\n<li>config file search starts with input file</li>\n</ul>\n<h2>v0.4.11</h2>\n<ul>\n<li>[bugs] #136, #163</li>\n<li>internal refactors</li>\n</ul>\n<h2>v0.4.10</h2>\n<ul>\n<li>[bugs] #138, #145, #146, #148</li>\n</ul>\n<h2>v0.4.9</h2>\n<ul>\n<li>[new-rule] <code>no-any</code> disallows all uses of <code>any</code></li>\n<li>[bug] <code>/* tslint:disable */</code> now disables semicolon rule as well</li>\n<li>[bug] delete operator no longer results in a false positive for <code>no-unused-expression</code></li>\n</ul>\n<h2>v0.4.8</h2>\n<ul>\n<li>[new-rule] <code>no-var-requires</code> disallows require statements not part of an import statement</li>\n<li>[new-rule] <code>typedef</code> rule also checks for member variables</li>\n<li>[bug] <code>no-unused-variable</code> no longer triggers false positives for class members labeled only <code>static</code></li>\n<li>[bug] <code>no-unused-expression</code> no longer triggers false positives for <code>"use strict";</code> expressions</li>\n<li>[bug] <code>use-strict</code> works correctly on function declarations</li>\n<li>[bug] config file is now discoverable from other drives on Windows</li>\n</ul>\n<h2>v0.4.7</h2>\n<ul>\n<li>[new-rule] added <code>no-unused-expression</code> rule which disallows unused expression statements</li>\n<li>[feature] the <code>check-operator</code> option for the <code>whitespace</code> rule now checks whitespace around the => token</li>\n<li>[bug] <code>no-use-before-declare-rule</code> no longer triggers false positives for member variables of classes used before the class is declared</li>\n<li>[bug] semicolon at end of file no longer triggers false positives for <code>whitespace</code> rule</li>\n<li>[bug] hoisted functions no longer cause false positives for the <code>no-unreachable</code> rule</li>\n<li>[bug] the rule loader no longer transforms/ignores the leading and trailing underscores and dashes of rule names in the config file</li>\n<li>[bug] <code>export import</code> statements no longer false positives for <code>no-unused-variable-rule</code></li>\n<li>[docs] added documentation for creating custom rules and formatters</li>\n<li>[docs] added sample <code>tslint.json</code> file, under <code>docs/sample.tslint.json</code></li>\n</ul>\n<h2>v0.4.6</h2>\n<ul>\n<li>[build] migrated build to use <code>grunt-ts</code> instead of <code>grunt-typescript</code></li>\n<li>[feature] <code>package.json</code> now contains a <code>tslintConfig</code> paramater to allow users to specify the location of the configuration file there</li>\n<li>[feature] tslint now searches for the configuration file in the user\'s home directory if not found in the current path</li>\n<li>[bug] unbraced conditionals no longer cause false positives for the <code>no-unreachable</code> rule</li>\n</ul>\n<h2>v0.4.5</h2>\n<ul>\n<li>[feature] <code>no-unused-variable</code> no longer checks parameters by defualt. Parameters are now only checked if the <code>check-parameters</code> option is set.</li>\n<li>[bug] <code>no-unused-variable</code> parameter check no longer fails on variable argument parameters (like ...args) and on cases where the parameters are broken up by newlines.</li>\n</ul>\n<h2>v0.4.4</h2>\n<ul>\n<li>[bug] <code>no-unused-variable</code> validates function parameters and constructor methods</li>\n<li>[bug] <code>no-empty</code> and <code>no-trailing-comma</code> rules handle empty objects</li>\n</ul>\n<h2>v0.4.3</h2>\n<ul>\n<li>[new-rule] <code>no-unused-variable</code></li>\n<li>[new-rule] <code>no-trailing-comma</code></li>\n<li>[new-rule] <code>no-use-before-declare</code></li>\n<li>[feature] support <code>--version</code> in CLI</li>\n<li>[feature] expose rule names to custom formatters</li>\n<li>[feature] add <code>verbose</code> formatter</li>\n<li>[bug] <code>no-empty</code> allows constructors with member declaration parameters</li>\n<li>[bug] CLI supports <code>--help</code></li>\n<li>[bug] <code>max-line-length</code> allows CRLF endings</li>\n</ul>',
docPath:"argo-ci/node_modules/tslint/changelog",proj:"argo-ci"}}}});
//# sourceMappingURL=path---docs-argo-ci-node-modules-tslint-changelog-html-ac116157a850eda7b3b1.js.map