webpackJsonp([18405190994296],{568:function(e,n){e.exports={pathContext:{docHtml:'<h1>Ingress Configuration</h1>\n<p>Argo CD runs both a gRPC server (used by the CLI), as well as a HTTP/HTTPS server (used by the UI).\nBoth protocols are exposed by the argocd-server service object on the following ports:</p>\n<ul>\n<li>443 - gRPC/HTTPS</li>\n<li>80 - HTTP (redirects to HTTPS)</li>\n</ul>\n<p>There are several ways how Ingress can be configured.</p>\n<h2><a href="https://github.com/kubernetes/ingress-nginx">kubernetes/ingress-nginx</a></h2>\n<h3>Option 1: SSL-Passthrough</h3>\n<p>Because Argo CD serves multiple protocols (gRPC/HTTPS) on the same port (443), this provides a\nchallenge when attempting to define a single nginx ingress object and rule for the argocd-service,\nsince the <code>nginx.ingress.kubernetes.io/backend-protocol</code> <a href="https://kubernetes.github.io/ingress-nginx/user-guide/nginx-configuration/annotations/#backend-protocol">annotation</a>\naccepts only a single value for the backend protocol (e.g. HTTP, HTTPS, GRPC, GRPCS).</p>\n<p>In order to expose the Argo CD API server with a single ingress rule and hostname, the\n<code>nginx.ingress.kubernetes.io/ssl-passthrough</code> <a href="https://kubernetes.github.io/ingress-nginx/user-guide/nginx-configuration/annotations/#ssl-passthrough">annotation</a>\nmust be used to passthrough TLS connections and terminate TLS at the Argo CD API server.</p>\n<pre><code class="language-yaml">apiVersion: extensions/v1beta1\nkind: Ingress\nmetadata:\n  name: argocd-server-ingress\n  annotations:\n    kubernetes.io/ingress.class: nginx\n    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"\n    nginx.ingress.kubernetes.io/ssl-passthrough: "true"\nspec:\n  rules:\n  - host: argocd.example.com\n    http:\n      paths:\n      - backend:\n          serviceName: argocd-server\n          servicePort: https\n</code></pre>\n<p>The above rule terminates TLS at the Argo CD API server, which detects the protocol being used,\nand responds appropriately. Note that the <code>nginx.ingress.kubernetes.io/ssl-passthrough</code> annotation\nrequires that the <code>--enable-ssl-passthrough</code> flag be added to the command line arguments to\n<code>nginx-ingress-controller</code>.</p>\n<h3>Option 2: Multiple Ingress Objects And Hosts</h3>\n<p>Since ingress-nginx Ingress supports only a single protocol per Ingress object, an alternative\nway would be to define two Ingress objects. One for HTTP/HTTPS, and the other for gRPC:</p>\n<p>HTTP/HTTPS Ingress:</p>\n<pre><code class="language-yaml">apiVersion: extensions/v1beta1\nkind: Ingress\nmetadata:\n  name: argocd-server-http-ingress\n  annotations:\n    kubernetes.io/ingress.class: "nginx"\n    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"\n    nginx.ingress.kubernetes.io/backend-protocol: "HTTP"\nspec:\n  rules:\n  - http:\n      paths:\n      - backend:\n          serviceName: argocd-server\n          servicePort: http\n    host: argocd.example.com\n  tls:\n  - hosts:\n    - argocd.example.com\n    secretName: argocd-secret\n</code></pre>\n<p>gRPC Ingress:</p>\n<pre><code class="language-yaml">apiVersion: extensions/v1beta1\nkind: Ingress\nmetadata:\n  name: argocd-server-grpc-ingress\n  annotations:\n    kubernetes.io/ingress.class: "nginx"\n    nginx.ingress.kubernetes.io/backend-protocol: "GRPC"\nspec:\n  rules:\n  - http:\n      paths:\n      - backend:\n          serviceName: argocd-server\n          servicePort: https\n    host: grpc.argocd.example.com\n  tls:\n  - hosts:\n    - grpc.argocd.example.com\n    secretName: argocd-secret\n</code></pre>\n<p>The API server should then be run with TLS disabled. Edit the <code>argocd-server</code> deployment to add the\n<code>--insecure</code> flag to the argocd-server command:</p>\n<pre><code class="language-yaml">spec:\n  template:\n    spec:\n      name: argocd-server\n      containers:\n      - command:\n        - /argocd-server\n        - --staticassets\n        - /shared/app\n        - --repo-server\n        - argocd-repo-server:8081\n        - --insecure\n</code></pre>\n<p>The obvious disadvantage to this approach is that this technique require two separate hostnames for\nthe API server -- one for gRPC and the other for HTTP/HTTPS. However it allow TLS termination to\nhappen at the ingress controller.</p>\n<h2>AWS Application Load Balancers (ALBs) And Classic ELB (HTTP Mode)</h2>\n<p>Neither ALBs and Classic ELB in HTTP mode, do not have full support for HTTP2/gRPC which is the\nprotocol used by the <code>argocd</code> CLI. Thus, when using an AWS load balancer, either Classic ELB in\npassthrough mode is needed, or NLBs.</p>\n<h2>UI Base Path</h2>\n<p>If Argo CD UI is available under non-root path (e.g. <code>/argo-cd</code> instead of <code>/</code>) then UI path should be configured in API server.\nTo configure UI path add <code>--basehref</code> flag into <code>argocd-server</code> deployment command:</p>\n<pre><code class="language-yaml">spec:\n  template:\n    spec:\n      name: argocd-server\n      containers:\n      - command:\n        - /argocd-server\n        - --staticassets\n        - /shared/app\n        - --repo-server\n        - argocd-repo-server:8081\n        - --basehref\n        - /argo-cd\n</code></pre>\n<p>NOTE: flag <code>--basehref</code> only changes UI base URL. API server keep using <code>/</code> path so you need to add URL rewrite rule to proxy config.\nExample nginx.conf with URL rewrite:</p>\n<pre><code>worker_processes 1;\n\nevents { worker_connections 1024; }\n\nhttp {\n\n    sendfile on;\n\n    server {\n        listen 443;\n\n        location /argo-cd {\n            rewrite /argo-cd/(.*) /$1  break;\n            proxy_pass         https://localhost:8080;\n            proxy_redirect     off;\n            proxy_set_header   Host $host;\n            proxy_set_header   X-Real-IP $remote_addr;\n            proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;\n            proxy_set_header   X-Forwarded-Host $server_name;\n        }\n    }\n}\n</code></pre>',docPath:"argo-cd/docs/operator-manual/ingress",proj:"argo-cd"}}}});
//# sourceMappingURL=path---docs-argo-cd-docs-operator-manual-ingress-html-39f549d2300f3e74000c.js.map