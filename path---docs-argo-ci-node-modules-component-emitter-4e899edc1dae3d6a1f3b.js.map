{"version":3,"sources":["webpack:///path---docs-argo-ci-node-modules-component-emitter-4e899edc1dae3d6a1f3b.js","webpack:///./.cache/json/docs-argo-ci-node-modules-component-emitter.json"],"names":["webpackJsonp","2189","module","exports","pathContext","docHtml","docPath","proj"],"mappings":"AAAAA,cAAc,iBAERC,KACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,aAAeC,QAAA,oyDAA68BC,QAAA,gDAAAC,KAAA","file":"path---docs-argo-ci-node-modules-component-emitter-4e899edc1dae3d6a1f3b.js","sourcesContent":["webpackJsonp([138114612690255],{\n\n/***/ 2189:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"pathContext\":{\"docHtml\":\"<h1>Emitter <a href=\\\"https://travis-ci.org/component/emitter\\\"><img src=\\\"https://travis-ci.org/component/emitter.png\\\" alt=\\\"Build Status\\\"></a></h1>\\n<p>  Event emitter component.</p>\\n<h2>Installation</h2>\\n<pre><code>$ component install component/emitter\\n</code></pre>\\n<h2>API</h2>\\n<h3>Emitter(obj)</h3>\\n<p>  The <code>Emitter</code> may also be used as a mixin. For example\\na \\\"plain\\\" object may become an emitter, or you may\\nextend an existing prototype.</p>\\n<p>  As an <code>Emitter</code> instance:</p>\\n<pre><code class=\\\"language-js\\\">var Emitter = require('emitter');\\nvar emitter = new Emitter;\\nemitter.emit('something');\\n</code></pre>\\n<p>  As a mixin:</p>\\n<pre><code class=\\\"language-js\\\">var Emitter = require('emitter');\\nvar user = { name: 'tobi' };\\nEmitter(user);\\n\\nuser.emit('im a user');\\n</code></pre>\\n<p>  As a prototype mixin:</p>\\n<pre><code class=\\\"language-js\\\">var Emitter = require('emitter');\\nEmitter(User.prototype);\\n</code></pre>\\n<h3>Emitter#on(event, fn)</h3>\\n<p>  Register an <code>event</code> handler <code>fn</code>.</p>\\n<h3>Emitter#once(event, fn)</h3>\\n<p>  Register a single-shot <code>event</code> handler <code>fn</code>,\\nremoved immediately after it is invoked the\\nfirst time.</p>\\n<h3>Emitter#off(event, fn)</h3>\\n<ul>\\n<li>Pass <code>event</code> and <code>fn</code> to remove a listener.</li>\\n<li>Pass <code>event</code> to remove all listeners on that event.</li>\\n<li>Pass nothing to remove all listeners on all events.</li>\\n</ul>\\n<h3>Emitter#emit(event, ...)</h3>\\n<p>  Emit an <code>event</code> with variable option args.</p>\\n<h3>Emitter#listeners(event)</h3>\\n<p>  Return an array of callbacks, or an empty array.</p>\\n<h3>Emitter#hasListeners(event)</h3>\\n<p>  Check if this emitter has <code>event</code> handlers.</p>\\n<h2>License</h2>\\n<p>MIT</p>\",\"docPath\":\"argo-ci/node_modules/component-emitter/readme\",\"proj\":\"argo-ci\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---docs-argo-ci-node-modules-component-emitter-4e899edc1dae3d6a1f3b.js","module.exports = {\"pathContext\":{\"docHtml\":\"<h1>Emitter <a href=\\\"https://travis-ci.org/component/emitter\\\"><img src=\\\"https://travis-ci.org/component/emitter.png\\\" alt=\\\"Build Status\\\"></a></h1>\\n<p>  Event emitter component.</p>\\n<h2>Installation</h2>\\n<pre><code>$ component install component/emitter\\n</code></pre>\\n<h2>API</h2>\\n<h3>Emitter(obj)</h3>\\n<p>  The <code>Emitter</code> may also be used as a mixin. For example\\na \\\"plain\\\" object may become an emitter, or you may\\nextend an existing prototype.</p>\\n<p>  As an <code>Emitter</code> instance:</p>\\n<pre><code class=\\\"language-js\\\">var Emitter = require('emitter');\\nvar emitter = new Emitter;\\nemitter.emit('something');\\n</code></pre>\\n<p>  As a mixin:</p>\\n<pre><code class=\\\"language-js\\\">var Emitter = require('emitter');\\nvar user = { name: 'tobi' };\\nEmitter(user);\\n\\nuser.emit('im a user');\\n</code></pre>\\n<p>  As a prototype mixin:</p>\\n<pre><code class=\\\"language-js\\\">var Emitter = require('emitter');\\nEmitter(User.prototype);\\n</code></pre>\\n<h3>Emitter#on(event, fn)</h3>\\n<p>  Register an <code>event</code> handler <code>fn</code>.</p>\\n<h3>Emitter#once(event, fn)</h3>\\n<p>  Register a single-shot <code>event</code> handler <code>fn</code>,\\nremoved immediately after it is invoked the\\nfirst time.</p>\\n<h3>Emitter#off(event, fn)</h3>\\n<ul>\\n<li>Pass <code>event</code> and <code>fn</code> to remove a listener.</li>\\n<li>Pass <code>event</code> to remove all listeners on that event.</li>\\n<li>Pass nothing to remove all listeners on all events.</li>\\n</ul>\\n<h3>Emitter#emit(event, ...)</h3>\\n<p>  Emit an <code>event</code> with variable option args.</p>\\n<h3>Emitter#listeners(event)</h3>\\n<p>  Return an array of callbacks, or an empty array.</p>\\n<h3>Emitter#hasListeners(event)</h3>\\n<p>  Check if this emitter has <code>event</code> handlers.</p>\\n<h2>License</h2>\\n<p>MIT</p>\",\"docPath\":\"argo-ci/node_modules/component-emitter/readme\",\"proj\":\"argo-ci\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/docs-argo-ci-node-modules-component-emitter.json\n// module id = 2189\n// module chunks = 138114612690255"],"sourceRoot":""}