{"version":3,"sources":["webpack:///path---docs-argo-ci-node-modules-fsevents-node-modules-inflight-e05db801fa643daf61a3.js","webpack:///./.cache/json/docs-argo-ci-node-modules-fsevents-node-modules-inflight.json"],"names":["webpackJsonp","2479","module","exports","pathContext","docHtml","docPath","proj"],"mappings":"AAAAA,cAAc,iBAERC,KACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,aAAeC,QAAA,ujCAA+5BC,QAAA,6DAAAC,KAAA","file":"path---docs-argo-ci-node-modules-fsevents-node-modules-inflight-e05db801fa643daf61a3.js","sourcesContent":["webpackJsonp([42526149362439],{\n\n/***/ 2479:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"pathContext\":{\"docHtml\":\"<h1>inflight</h1>\\n<p>Add callbacks to requests in flight to avoid async duplication</p>\\n<h2>USAGE</h2>\\n<pre><code class=\\\"language-javascript\\\">var inflight = require('inflight')\\n\\n// some request that does some stuff\\nfunction req(key, callback) {\\n  // key is any random string.  like a url or filename or whatever.\\n  //\\n  // will return either a falsey value, indicating that the\\n  // request for this key is already in flight, or a new callback\\n  // which when called will call all callbacks passed to inflightk\\n  // with the same key\\n  callback = inflight(key, callback)\\n\\n  // If we got a falsey value back, then there's already a req going\\n  if (!callback) return\\n\\n  // this is where you'd fetch the url or whatever\\n  // callback is also once()-ified, so it can safely be assigned\\n  // to multiple events etc.  First call wins.\\n  setTimeout(function() {\\n    callback(null, key)\\n  }, 100)\\n}\\n\\n// only assigns a single setTimeout\\n// when it dings, all cbs get called\\nreq('foo', cb1)\\nreq('foo', cb2)\\nreq('foo', cb3)\\nreq('foo', cb4)\\n</code></pre>\",\"docPath\":\"argo-ci/node_modules/fsevents/node_modules/inflight/readme\",\"proj\":\"argo-ci\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---docs-argo-ci-node-modules-fsevents-node-modules-inflight-e05db801fa643daf61a3.js","module.exports = {\"pathContext\":{\"docHtml\":\"<h1>inflight</h1>\\n<p>Add callbacks to requests in flight to avoid async duplication</p>\\n<h2>USAGE</h2>\\n<pre><code class=\\\"language-javascript\\\">var inflight = require('inflight')\\n\\n// some request that does some stuff\\nfunction req(key, callback) {\\n  // key is any random string.  like a url or filename or whatever.\\n  //\\n  // will return either a falsey value, indicating that the\\n  // request for this key is already in flight, or a new callback\\n  // which when called will call all callbacks passed to inflightk\\n  // with the same key\\n  callback = inflight(key, callback)\\n\\n  // If we got a falsey value back, then there's already a req going\\n  if (!callback) return\\n\\n  // this is where you'd fetch the url or whatever\\n  // callback is also once()-ified, so it can safely be assigned\\n  // to multiple events etc.  First call wins.\\n  setTimeout(function() {\\n    callback(null, key)\\n  }, 100)\\n}\\n\\n// only assigns a single setTimeout\\n// when it dings, all cbs get called\\nreq('foo', cb1)\\nreq('foo', cb2)\\nreq('foo', cb3)\\nreq('foo', cb4)\\n</code></pre>\",\"docPath\":\"argo-ci/node_modules/fsevents/node_modules/inflight/readme\",\"proj\":\"argo-ci\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/docs-argo-ci-node-modules-fsevents-node-modules-inflight.json\n// module id = 2479\n// module chunks = 42526149362439"],"sourceRoot":""}