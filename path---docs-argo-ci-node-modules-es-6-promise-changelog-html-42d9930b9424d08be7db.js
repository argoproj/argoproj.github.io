webpackJsonp([0xce934f243cff],{2273:function(e,i){e.exports={pathContext:{docHtml:'<h1>Master</h1>\n<h1>3.3.1</h1>\n<ul>\n<li>fix links in readme</li>\n</ul>\n<h1>3.3.0</h1>\n<ul>\n<li>support polyfil on WebMAF (playstation env)</li>\n<li>fix tampering related bug global <code>constructor</code> was referenced by mistake.</li>\n<li>provide TS Typings</li>\n<li>increase compatibliity with sinon.useFakeTimers();</li>\n<li>update build tools (use rollup)</li>\n<li>directly export promise;</li>\n</ul>\n<h1>3.2.2</h1>\n<ul>\n<li>IE8: use isArray</li>\n<li>update build dependencies</li>\n</ul>\n<h1>3.2.1</h1>\n<ul>\n<li>fix race tampering issue</li>\n<li>use eslint</li>\n<li>fix Promise.all tampering</li>\n<li>remove unused code</li>\n<li>fix issues with NWJS/electron</li>\n</ul>\n<h1>3.2.0</h1>\n<ul>\n<li>improve tamper resistence of Promise.all Promise.race and\nPromise.prototype.then (note, this isn\'t complete, but addresses an exception\nwhen used \\w core-js, follow up work will address entirely)</li>\n<li>remove spec incompatible then chaining fast-path</li>\n<li>add eslint</li>\n<li>update build deps</li>\n</ul>\n<h1>3.1.2</h1>\n<ul>\n<li>fix node detection issues with NWJS/electron</li>\n</ul>\n<h1>3.1.0</h1>\n<ul>\n<li>improve performance of Promise.all when it encounters a non-promise input object input</li>\n<li>then/resolve tamper protection</li>\n<li>reduce AST size of promise constructor, to facilitate more inlining</li>\n<li>Update README.md with details about PhantomJS requirement for running tests</li>\n<li>Mangle and compress the minified version</li>\n</ul>\n<h1>3.0.1</h1>\n<ul>\n<li>no longer include dist/test in npm releases</li>\n</ul>\n<h1>3.0.0</h1>\n<ul>\n<li>\n<p>use nextTick() instead of setImmediate() to schedule microtasks with node 0.10. Later versions of\nnodes are not affected as they were already using nextTick(). Note that using nextTick() might\ntrigger a depreciation warning on 0.10 as described at <a href="https://github.com/cujojs/when/issues/410">https://github.com/cujojs/when/issues/410</a>.\nThe reason why nextTick() is preferred is that is setImmediate() would schedule a macrotask\ninstead of a microtask and might result in a different scheduling.\nIf needed you can revert to the former behavior as follow:</p>\n<p>var Promise = require(\'es6-promise\').Promise;\nPromise._setScheduler(setImmediate);</p>\n</li>\n</ul>\n<h1>2.3.0</h1>\n<ul>\n<li>\n<h1>121: Ability to override the internal asap implementation</h1>\n</li>\n<li>\n<h1>120: Use an ascii character for an apostrophe, for source maps</h1>\n</li>\n</ul>\n<h1>2.2.0</h1>\n<ul>\n<li>\n<h1>116: Expose asap() and a way to override the scheduling mechanism on Promise</h1>\n</li>\n<li>Lock to v0.2.3 of ember-cli</li>\n</ul>\n<h1>2.1.1</h1>\n<ul>\n<li>Fix #100 via #105: tell browserify to ignore vertx require</li>\n<li>Fix #101 via #102: "follow thenable state, not own state"</li>\n</ul>\n<h1>2.1.0</h1>\n<ul>\n<li>\n<h1>59: Automatic polyfill. No need to invoke <code>ES6Promise.polyfill()</code> anymore.</h1>\n</li>\n<li>... (see the commit log)</li>\n</ul>\n<h1>2.0.0</h1>\n<ul>\n<li>re-sync with RSVP. Many large performance improvements and bugfixes.</li>\n</ul>\n<h1>1.0.0</h1>\n<ul>\n<li>first subset of RSVP</li>\n</ul>',docPath:"argo-ci/node_modules/es6-promise/changelog",proj:"argo-ci"}}}});
//# sourceMappingURL=path---docs-argo-ci-node-modules-es-6-promise-changelog-html-42d9930b9424d08be7db.js.map