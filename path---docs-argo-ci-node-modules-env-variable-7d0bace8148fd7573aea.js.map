{"version":3,"sources":["webpack:///path---docs-argo-ci-node-modules-env-variable-7d0bace8148fd7573aea.js","webpack:///./.cache/json/docs-argo-ci-node-modules-env-variable.json"],"names":["webpackJsonp","2272","module","exports","pathContext","docHtml","docPath","proj"],"mappings":"AAAAA,cAAc,iBAERC,KACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,aAAeC,QAAA,wrFAAo2EC,QAAA,2CAAAC,KAAA","file":"path---docs-argo-ci-node-modules-env-variable-7d0bace8148fd7573aea.js","sourcesContent":["webpackJsonp([269170615369522],{\n\n/***/ 2272:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"pathContext\":{\"docHtml\":\"<h1>env-variable</h1>\\n<p><a href=\\\"http://bigpipe.io\\\"><img src=\\\"https://img.shields.io/badge/from-bigpipe.io-9d8dff.svg?style=flat-square\\\" alt=\\\"From bigpipe.io\\\"></a><a href=\\\"http://browsenpm.org/package/env-variable\\\"><img src=\\\"http://img.shields.io/npm/v/env-variable.svg?style=flat-square\\\" alt=\\\"Version npm\\\"></a><a href=\\\"https://travis-ci.org/bigpipe/env-variable\\\"><img src=\\\"http://img.shields.io/travis/bigpipe/env-variable/master.svg?style=flat-square\\\" alt=\\\"Build Status\\\"></a><a href=\\\"https://david-dm.org/bigpipe/env-variable\\\"><img src=\\\"https://img.shields.io/david/bigpipe/env-variable.svg?style=flat-square\\\" alt=\\\"Dependencies\\\"></a><a href=\\\"https://coveralls.io/r/bigpipe/env-variable?branch=master\\\"><img src=\\\"http://img.shields.io/coveralls/bigpipe/env-variable/master.svg?style=flat-square\\\" alt=\\\"Coverage Status\\\"></a></p>\\n<p>A cross platform <code>env-variable</code> for browsers and node. Of course, browsers\\ndoesn't have environment variables but we do have hashtags and localStorage\\nwhich we will use as fallback.</p>\\n<h3>hashtags</h3>\\n<p>This is a really easy way of adding some trigger some environment variables that\\nyou might use for debugging. We assume that the hashtag (#) contains\\na query string who's key is the name and the value.. the value.</p>\\n<h3>localStorage</h3>\\n<p>If you want more persisting env variables you can set a query string of env\\nvariables in localStorage. It will attempt to use the <code>env</code> variable.</p>\\n<h2>Installation</h2>\\n<p>This module is written for node and browserify and can be installed using npm:</p>\\n<pre><code>npm install --save env-variable\\n</code></pre>\\n<h2>Usage</h2>\\n<p>This module exposes a node / <code>module.exports</code> interface.</p>\\n<pre><code class=\\\"language-js\\\">var env = require('env-variable')();\\n</code></pre>\\n<p>As you can see from the example above we execute the required module. You can\\nalternately store it but I don't assume this a common pattern. When you execute\\nthe function it returns an object with all the env variables.</p>\\n<p>When you execute the function you can alternately pass it an object which will\\nbe seen as the default env variables and all fallbacks and <code>process.env</code> will be\\nmerged in to this object.</p>\\n<pre><code class=\\\"language-js\\\">var env = require('env-variable')({\\n  foo: 'bar',\\n  NODE_ENV: 'production'\\n});\\n</code></pre>\\n<p>Oh, in <code>env-variable</code> we don't really care how you write your env variables. We\\nautomatically add an extra lower case version of the variables so you can access\\neverything in one consistent way.</p>\\n<p>And that's basically everything you need to know. <em>random high fives</em>.</p>\\n<h2>License</h2>\\n<p><a href=\\\"LICENSE\\\">MIT</a></p>\",\"docPath\":\"argo-ci/node_modules/env-variable/readme\",\"proj\":\"argo-ci\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---docs-argo-ci-node-modules-env-variable-7d0bace8148fd7573aea.js","module.exports = {\"pathContext\":{\"docHtml\":\"<h1>env-variable</h1>\\n<p><a href=\\\"http://bigpipe.io\\\"><img src=\\\"https://img.shields.io/badge/from-bigpipe.io-9d8dff.svg?style=flat-square\\\" alt=\\\"From bigpipe.io\\\"></a><a href=\\\"http://browsenpm.org/package/env-variable\\\"><img src=\\\"http://img.shields.io/npm/v/env-variable.svg?style=flat-square\\\" alt=\\\"Version npm\\\"></a><a href=\\\"https://travis-ci.org/bigpipe/env-variable\\\"><img src=\\\"http://img.shields.io/travis/bigpipe/env-variable/master.svg?style=flat-square\\\" alt=\\\"Build Status\\\"></a><a href=\\\"https://david-dm.org/bigpipe/env-variable\\\"><img src=\\\"https://img.shields.io/david/bigpipe/env-variable.svg?style=flat-square\\\" alt=\\\"Dependencies\\\"></a><a href=\\\"https://coveralls.io/r/bigpipe/env-variable?branch=master\\\"><img src=\\\"http://img.shields.io/coveralls/bigpipe/env-variable/master.svg?style=flat-square\\\" alt=\\\"Coverage Status\\\"></a></p>\\n<p>A cross platform <code>env-variable</code> for browsers and node. Of course, browsers\\ndoesn't have environment variables but we do have hashtags and localStorage\\nwhich we will use as fallback.</p>\\n<h3>hashtags</h3>\\n<p>This is a really easy way of adding some trigger some environment variables that\\nyou might use for debugging. We assume that the hashtag (#) contains\\na query string who's key is the name and the value.. the value.</p>\\n<h3>localStorage</h3>\\n<p>If you want more persisting env variables you can set a query string of env\\nvariables in localStorage. It will attempt to use the <code>env</code> variable.</p>\\n<h2>Installation</h2>\\n<p>This module is written for node and browserify and can be installed using npm:</p>\\n<pre><code>npm install --save env-variable\\n</code></pre>\\n<h2>Usage</h2>\\n<p>This module exposes a node / <code>module.exports</code> interface.</p>\\n<pre><code class=\\\"language-js\\\">var env = require('env-variable')();\\n</code></pre>\\n<p>As you can see from the example above we execute the required module. You can\\nalternately store it but I don't assume this a common pattern. When you execute\\nthe function it returns an object with all the env variables.</p>\\n<p>When you execute the function you can alternately pass it an object which will\\nbe seen as the default env variables and all fallbacks and <code>process.env</code> will be\\nmerged in to this object.</p>\\n<pre><code class=\\\"language-js\\\">var env = require('env-variable')({\\n  foo: 'bar',\\n  NODE_ENV: 'production'\\n});\\n</code></pre>\\n<p>Oh, in <code>env-variable</code> we don't really care how you write your env variables. We\\nautomatically add an extra lower case version of the variables so you can access\\neverything in one consistent way.</p>\\n<p>And that's basically everything you need to know. <em>random high fives</em>.</p>\\n<h2>License</h2>\\n<p><a href=\\\"LICENSE\\\">MIT</a></p>\",\"docPath\":\"argo-ci/node_modules/env-variable/readme\",\"proj\":\"argo-ci\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/docs-argo-ci-node-modules-env-variable.json\n// module id = 2272\n// module chunks = 269170615369522"],"sourceRoot":""}