webpackJsonp([22271582711108],{486:function(e,o){e.exports={pathContext:{docHtml:'<h1>Application Source Types</h1>\n<p>ArgoCD supports several different ways in which kubernetes manifests can be defined:</p>\n<ul>\n<li><a href="https://ksonnet.io">ksonnet</a> applications</li>\n<li><a href="https://helm.sh">helm</a> charts</li>\n<li>Simple directory of YAML/json manifests</li>\n</ul>\n<p>Some additional considerations should be made when deploying apps of a particular type:</p>\n<h2>Ksonnet</h2>\n<h3>Environments</h3>\n<p>Ksonnet has a first class concept of an "environment." To create an application from a ksonnet\napp directory, an environment must be specified. For example, the following command creates the\n"guestbook-default" app, which points to the <code>default</code> environment:</p>\n<pre><code>argocd app create guestbook-default --repo https://github.com/argoproj/argocd-example-apps.git --path guestbook --env default\n</code></pre>\n<h3>Parameters</h3>\n<p>Ksonnet parameters all belong to a component. For example, the following are the parameters\navailable in the guestbook app, all of which belong to the <code>guestbook-ui</code> component:</p>\n<pre><code>$ ks param list\nCOMPONENT    PARAM         VALUE\n=========    =====         =====\nguestbook-ui containerPort 80\nguestbook-ui image         "gcr.io/heptio-images/ks-guestbook-demo:0.1"\nguestbook-ui name          "guestbook-ui"\nguestbook-ui replicas      1\nguestbook-ui servicePort   80\nguestbook-ui type          "LoadBalancer"\n</code></pre>\n<p>When overriding ksonnet parameters in ArgoCD, the component name should also be specified in the\n<code>argocd app set</code> command, in the form of <code>-p COMPONENT=PARAM=VALUE</code>. For example:</p>\n<pre><code>argocd app set guestbook-default -p guestbook-ui=image=gcr.io/heptio-images/ks-guestbook-demo:0.1\n</code></pre>\n<h2>Helm</h2>\n<h3>Values Files</h3>\n<p>Helm has the ability to use a different, or even multiple "values.yaml" files to derive its\nparameters from. Alternate or multiple values file(s), can be specified using the <code>--values</code>\nflag. The flag can be repeated to support multiple values files:</p>\n<pre><code>argocd app set helm-guestbook --values values-production.yaml\n</code></pre>\n<h3>Helm Parameters</h3>\n<p>Helm has the ability to set parameter values, which override any values in\na <code>values.yaml</code>. For example, <code>service.type</code> is a common parameter which is exposed in a Helm chart:</p>\n<pre><code>helm template . --set service.type=LoadBalancer\n</code></pre>\n<p>Similarly ArgoCD can override values in the <code>values.yaml</code> parameters using <code>argo app set</code> command,\nin the form of <code>-p PARAM=VALUE</code>. For example:</p>\n<pre><code>argocd app set helm-guestbook -p service.type=LoadBalancer\n</code></pre>\n<h3>Helm Hooks</h3>\n<p>Helm hooks are equivalent in concept to <a href="resource_hooks.html">ArgoCD resource hooks</a>. In helm, a hook\nis any normal kubernetes resource annotated with the <code>helm.sh/hook</code> annotation. When ArgoCD deploys\nhelm application which contains helm hooks, all helm hook resources are currently ignored during\nthe <code>kubectl apply</code> of the manifests. There is an\n<a href="https://github.com/argoproj/argo-cd/issues/355">open issue</a> to map Helm hooks to ArgoCD\'s concept\nof Pre/Post/Sync hooks.</p>\n<h3>Random Data</h3>\n<p>Helm templating has the ability to generate random data during chart rendering via the\n<code>randAlphaNum</code> function. Many helm charts from the <a href="https://github.com/helm/charts">charts repository</a>\nmake use of this feature. For example, the following is the secret for the\n<a href="https://github.com/helm/charts/blob/master/stable/redis/templates/secrets.yaml">redis helm chart</a>:</p>\n<pre><code>data:\n  {{- if .Values.password }}\n  redis-password: {{ .Values.password | b64enc | quote }}\n  {{- else }}\n  redis-password: {{ randAlphaNum 10 | b64enc | quote }}\n  {{- end }}\n</code></pre>\n<p>The ArgoCD application controller periodically compares git state against the live state, running\nthe <code>helm template &#x3C;CHART></code> command to generate the helm manifests. Because the random value is\nregenerated every time the comparison is made, any application which makes use of the <code>randAlphaNum</code>\nfunction will always be in an <code>OutOfSync</code> state. This can be mitigated by explicitly setting a\nvalue, in the values.yaml such that the value is stable between each comparison. For example:</p>\n<pre><code>argocd app set redis -p password=abc123\n</code></pre>',docPath:"argo-cd/docs/application_sources",proj:"argo-cd"}}}});
//# sourceMappingURL=path---docs-argo-cd-docs-application-sources-html-d9fcff94d7a18bc1612d.js.map