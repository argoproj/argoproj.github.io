webpackJsonp([78962549485527],{2173:function(r,o){r.exports={pathContext:{docHtml:'<h1>color-string</h1>\n<p><a href="https://travis-ci.org/Qix-/color-string"><img src="https://travis-ci.org/Qix-/color-string.svg?branch=master" alt="Build Status"></a></p>\n<blockquote>\n<p>library for parsing and generating CSS color strings.</p>\n</blockquote>\n<h2>Install</h2>\n<p>With <a href="http://npmjs.org/">npm</a>:</p>\n<pre><code class="language-console">$ npm install color-string\n</code></pre>\n<h2>Usage</h2>\n<h3>Parsing</h3>\n<pre><code class="language-js">colorString.get(\'#FFF\')                          // {model: \'rgb\', value: [255, 255, 255, 1]}\ncolorString.get(\'#FFFA\')                         // {model: \'rgb\', value: [255, 255, 255, 0.67]}\ncolorString.get(\'#FFFFFFAA\')                     // {model: \'rgb\', value: [255, 255, 255, 0.67]}\ncolorString.get(\'hsl(360, 100%, 50%)\')           // {model: \'hsl\', value: [0, 100, 50, 1]}\ncolorString.get(\'hwb(60, 3%, 60%)\')              // {model: \'hwb\', value: [60, 3, 60, 1]}\n\ncolorString.get.rgb(\'#FFF\')                      // [255, 255, 255, 1]\ncolorString.get.rgb(\'blue\')                      // [0, 0, 255, 1]\ncolorString.get.rgb(\'rgba(200, 60, 60, 0.3)\')    // [200, 60, 60, 0.3]\ncolorString.get.rgb(\'rgb(200, 200, 200)\')        // [200, 200, 200, 1]\n\ncolorString.get.hsl(\'hsl(360, 100%, 50%)\')       // [0, 100, 50, 1]\ncolorString.get.hsl(\'hsla(360, 60%, 50%, 0.4)\')  // [0, 60, 50, 0.4]\n\ncolorString.get.hwb(\'hwb(60, 3%, 60%)\')          // [60, 3, 60, 1]\ncolorString.get.hwb(\'hwb(60, 3%, 60%, 0.6)\')     // [60, 3, 60, 0.6]\n\ncolorString.get.rgb(\'invalid color string\')      // null\n</code></pre>\n<h3>Generation</h3>\n<pre><code class="language-js">colorString.to.hex([255, 255, 255])     // "#FFFFFF"\ncolorString.to.hex([0, 0, 255, 0.4])    // "#0000FF66"\ncolorString.to.hex([0, 0, 255], 0.4)    // "#0000FF66"\ncolorString.to.rgb([255, 255, 255])     // "rgb(255, 255, 255)"\ncolorString.to.rgb([0, 0, 255, 0.4])    // "rgba(0, 0, 255, 0.4)"\ncolorString.to.rgb([0, 0, 255], 0.4)    // "rgba(0, 0, 255, 0.4)"\ncolorString.to.rgb.percent([0, 0, 255]) // "rgb(0%, 0%, 100%)"\ncolorString.to.keyword([255, 255, 0])   // "yellow"\ncolorString.to.hsl([360, 100, 100])     // "hsl(360, 100%, 100%)"\ncolorString.to.hwb([50, 3, 15])         // "hwb(50, 3%, 15%)"\n\n// all functions also support swizzling\ncolorString.to.rgb(0, [0, 255], 0.4)    // "rgba(0, 0, 255, 0.4)"\ncolorString.to.rgb([0, 0], [255], 0.4)  // "rgba(0, 0, 255, 0.4)"\ncolorString.to.rgb([0], 0, [255, 0.4])  // "rgba(0, 0, 255, 0.4)"\n</code></pre>',docPath:"argo-ci/node_modules/color-string/readme",proj:"argo-ci"}}}});
//# sourceMappingURL=path---docs-argo-ci-node-modules-color-string-7b1bdb2ea7fd5ef5cfa4.js.map