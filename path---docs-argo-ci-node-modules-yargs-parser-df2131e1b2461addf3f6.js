webpackJsonp([0x7e06bd4335c9],{3442:function(e,o){e.exports={pathContext:{docHtml:'<h1>yargs-parser</h1>\n<p><a href="https://travis-ci.org/yargs/yargs-parser"><img src="https://travis-ci.org/yargs/yargs-parser.png" alt="Build Status"></a>\n<a href="https://coveralls.io/r/yargs/yargs-parser?branch=master"><img src="https://coveralls.io/repos/yargs/yargs-parser/badge.svg?branch=" alt="Coverage Status"></a>\n<a href="https://www.npmjs.com/package/yargs-parser"><img src="https://img.shields.io/npm/v/yargs-parser.svg" alt="NPM version"></a>\n<a href="https://ci.appveyor.com/project/bcoe/yargs-parser"><img src="https://img.shields.io/appveyor/ci/bcoe/yargs-parser/master.svg?label=Windows%20Tests" alt="Windows Tests"></a>\n<a href="https://github.com/conventional-changelog/standard-version"><img src="https://img.shields.io/badge/release-standard%20version-brightgreen.svg" alt="Standard Version"></a></p>\n<p>The mighty option parser used by <a href="https://github.com/yargs/yargs">yargs</a>.</p>\n<p>visit the <a href="http://yargs.js.org/">yargs website</a> for more examples, and thorough usage instructions.</p>\n<img width="250" src="https://raw.githubusercontent.com/yargs/yargs-parser/master/yargs-logo.png">\n<h2>Example</h2>\n<pre><code class="language-sh">npm i yargs-parser --save\n</code></pre>\n<pre><code class="language-js">var argv = require(\'yargs-parser\')(process.argv.slice(2))\nconsole.log(argv)\n</code></pre>\n<pre><code class="language-sh">node example.js --foo=33 --bar hello\n{ _: [], foo: 33, bar: \'hello\' }\n</code></pre>\n<p><em>or parse a string!</em></p>\n<pre><code class="language-js">var argv = require(\'./\')(\'--foo=99 --bar=33\')\nconsole.log(argv)\n</code></pre>\n<pre><code class="language-sh">{ _: [], foo: 99, bar: 33 }\n</code></pre>\n<p>Convert an array of mixed types before passing to <code>yargs-parser</code>:</p>\n<pre><code class="language-js">var parse = require(\'yargs-parser\')\nparse([\'-f\', 11, \'--zoom\', 55].join(\' \'))   // &#x3C;-- array to string\nparse([\'-f\', 11, \'--zoom\', 55].map(String)) // &#x3C;-- array of strings\n</code></pre>\n<h2>API</h2>\n<h3>require(\'yargs-parser\')(args, opts={})</h3>\n<p>Parses command line arguments returning a simple mapping of keys and values.</p>\n<p><strong>expects:</strong></p>\n<ul>\n<li><code>args</code>: a string or array of strings representing the options to parse.</li>\n<li>\n<p><code>opts</code>: provide a set of hints indicating how <code>args</code> should be parsed:</p>\n<ul>\n<li><code>opts.alias</code>: an object representing the set of aliases for a key: <code>{alias: {foo: [\'f\']}}</code>.</li>\n<li><code>opts.array</code>: indicate that keys should be parsed as an array: <code>{array: [\'foo\', \'bar\']}</code>.</li>\n<li><code>opts.boolean</code>: arguments should be parsed as booleans: <code>{boolean: [\'x\', \'y\']}</code>.</li>\n<li><code>opts.config</code>: indicate a key that represents a path to a configuration file (this file will be loaded and parsed).</li>\n<li><code>opts.coerce</code>: provide a custom synchronous function that returns a coerced value from the argument provided\n(or throws an error), e.g. <code>{coerce: {foo: function (arg) {return modifiedArg}}}</code>.</li>\n<li><code>opts.count</code>: indicate a key that should be used as a counter, e.g., <code>-vvv</code> = <code>{v: 3}</code>.</li>\n<li><code>opts.default</code>: provide default values for keys: <code>{default: {x: 33, y: \'hello world!\'}}</code>.</li>\n<li><code>opts.envPrefix</code>: environment variables (<code>process.env</code>) with the prefix provided should be parsed.</li>\n<li><code>opts.narg</code>: specify that a key requires <code>n</code> arguments: <code>{narg: {x: 2}}</code>.</li>\n<li><code>opts.normalize</code>: <code>path.normalize()</code> will be applied to values set to this key.</li>\n<li><code>opts.string</code>: keys should be treated as strings (even if they resemble a number <code>-x 33</code>).</li>\n<li><code>opts.configuration</code>: provide configuration options to the yargs-parser (see: <a href="#configuration">configuration</a>).</li>\n<li><code>opts.number</code>: keys should be treated as numbers.</li>\n<li><code>opts[\'--\']</code>: arguments after the end-of-options flag <code>--</code> will be set to the <code>argv.[\'--\']</code> array instead of being set to the <code>argv._</code> array.</li>\n</ul>\n</li>\n</ul>\n<p><strong>returns:</strong></p>\n<ul>\n<li>\n<p><code>obj</code>: an object representing the parsed value of <code>args</code></p>\n<ul>\n<li><code>key/value</code>: key value pairs for each argument and their aliases.</li>\n<li><code>_</code>: an array representing the positional arguments.</li>\n<li>[optional] <code>--</code>:  an array with arguments after the end-of-options flag <code>--</code>.</li>\n</ul>\n</li>\n</ul>\n<h3>require(\'yargs-parser\').detailed(args, opts={})</h3>\n<p>Parses a command line string, returning detailed information required by the\nyargs engine.</p>\n<p><strong>expects:</strong></p>\n<ul>\n<li><code>args</code>: a string or array of strings representing options to parse.</li>\n<li><code>opts</code>: provide a set of hints indicating how <code>args</code>, inputs are identical to <code>require(\'yargs-parser\')(args, opts={})</code>.</li>\n</ul>\n<p><strong>returns:</strong></p>\n<ul>\n<li>\n<p><code>argv</code>: an object representing the parsed value of <code>args</code></p>\n<ul>\n<li><code>key/value</code>: key value pairs for each argument and their aliases.</li>\n<li><code>_</code>: an array representing the positional arguments.</li>\n</ul>\n</li>\n<li><code>error</code>: populated with an error object if an exception occurred during parsing.</li>\n<li><code>aliases</code>: the inferred list of aliases built by combining lists in <code>opts.alias</code>.</li>\n<li><code>newAliases</code>: any new aliases added via camel-case expansion.</li>\n<li><code>configuration</code>: the configuration loaded from the <code>yargs</code> stanza in package.json.</li>\n</ul>\n<p><a name="configuration"></a></p>\n<h3>Configuration</h3>\n<p>The yargs-parser applies several automated transformations on the keys provided\nin <code>args</code>. These features can be turned on and off using the <code>configuration</code> field\nof <code>opts</code>.</p>\n<pre><code class="language-js">var parsed = parser([\'--no-dice\'], {\n  configuration: {\n    \'boolean-negation\': false\n  }\n})\n</code></pre>\n<h3>short option groups</h3>\n<ul>\n<li>default: <code>true</code>.</li>\n<li>key: <code>short-option-groups</code>.</li>\n</ul>\n<p>Should a group of short-options be treated as boolean flags?</p>\n<pre><code class="language-sh">node example.js -abc\n{ _: [], a: true, b: true, c: true }\n</code></pre>\n<p><em>if disabled:</em></p>\n<pre><code class="language-sh">node example.js -abc\n{ _: [], abc: true }\n</code></pre>\n<h3>camel-case expansion</h3>\n<ul>\n<li>default: <code>true</code>.</li>\n<li>key: <code>camel-case-expansion</code>.</li>\n</ul>\n<p>Should hyphenated arguments be expanded into camel-case aliases?</p>\n<pre><code class="language-sh">node example.js --foo-bar\n{ _: [], \'foo-bar\': true, fooBar: true }\n</code></pre>\n<p><em>if disabled:</em></p>\n<pre><code class="language-sh">node example.js --foo-bar\n{ _: [], \'foo-bar\': true }\n</code></pre>\n<h3>dot-notation</h3>\n<ul>\n<li>default: <code>true</code></li>\n<li>key: <code>dot-notation</code></li>\n</ul>\n<p>Should keys that contain <code>.</code> be treated as objects?</p>\n<pre><code class="language-sh">node example.js --foo.bar\n{ _: [], foo: { bar: true } }\n</code></pre>\n<p><em>if disabled:</em></p>\n<pre><code class="language-sh">node example.js --foo.bar\n{ _: [], "foo.bar": true }\n</code></pre>\n<h3>parse numbers</h3>\n<ul>\n<li>default: <code>true</code></li>\n<li>key: <code>parse-numbers</code></li>\n</ul>\n<p>Should keys that look like numbers be treated as such?</p>\n<pre><code class="language-sh">node example.js --foo=99.3\n{ _: [], foo: 99.3 }\n</code></pre>\n<p><em>if disabled:</em></p>\n<pre><code class="language-sh">node example.js --foo=99.3\n{ _: [], foo: "99.3" }\n</code></pre>\n<h3>boolean negation</h3>\n<ul>\n<li>default: <code>true</code></li>\n<li>key: <code>boolean-negation</code></li>\n</ul>\n<p>Should variables prefixed with <code>--no</code> be treated as negations?</p>\n<pre><code class="language-sh">node example.js --no-foo\n{ _: [], foo: false }\n</code></pre>\n<p><em>if disabled:</em></p>\n<pre><code class="language-sh">node example.js --no-foo\n{ _: [], "no-foo": true }\n</code></pre>\n<h3>duplicate arguments array</h3>\n<ul>\n<li>default: <code>true</code></li>\n<li>key: <code>duplicate-arguments-array</code></li>\n</ul>\n<p>Should arguments be coerced into an array when duplicated:</p>\n<pre><code class="language-sh">node example.js -x 1 -x 2\n{ _: [], x: [1, 2] }\n</code></pre>\n<p><em>if disabled:</em></p>\n<pre><code class="language-sh">node example.js -x 1 -x 2\n{ _: [], x: 2 }\n</code></pre>\n<h3>flatten duplicate arrays</h3>\n<ul>\n<li>default: <code>true</code></li>\n<li>key: <code>flatten-duplicate-arrays</code></li>\n</ul>\n<p>Should array arguments be coerced into a single array when duplicated:</p>\n<pre><code class="language-sh">node example.js -x 1 2 -x 3 4\n{ _: [], x: [1, 2, 3, 4] }\n</code></pre>\n<p><em>if disabled:</em></p>\n<pre><code class="language-sh">node example.js -x 1 2 -x 3 4\n{ _: [], x: [[1, 2], [3, 4]] }\n</code></pre>\n<h3>negation prefix</h3>\n<ul>\n<li>default: <code>no-</code></li>\n<li>key: <code>negation-prefix</code></li>\n</ul>\n<p>The prefix to use for negated boolean variables.</p>\n<pre><code class="language-sh">node example.js --no-foo\n{ _: [], foo: false }\n</code></pre>\n<p><em>if set to <code>quux</code>:</em></p>\n<pre><code class="language-sh">node example.js --quuxfoo\n{ _: [], foo: false }\n</code></pre>\n<h3>populate --</h3>\n<ul>\n<li>default: <code>false</code>.</li>\n<li>key: <code>populate--</code></li>\n</ul>\n<p>Should unparsed flags be stored in <code>--</code> or <code>_</code>.</p>\n<p><em>If disabled:</em></p>\n<pre><code class="language-sh">node example.js a -b -- x y\n{ _: [ \'a\', \'x\', \'y\' ], b: true }\n</code></pre>\n<p><em>If enabled:</em></p>\n<pre><code class="language-sh">node example.js a -b -- x y\n{ _: [ \'a\' ], \'--\': [ \'x\', \'y\' ], b: true }\n</code></pre>\n<h2>Special Thanks</h2>\n<p>The yargs project evolves from optimist and minimist. It owes its\nexistence to a lot of James Halliday\'s hard work. Thanks <a href="https://github.com/substack">substack</a> <strong>beep</strong> <strong>boop</strong> \\o/</p>\n<h2>License</h2>\n<p>ISC</p>',docPath:"argo-ci/node_modules/yargs-parser/readme",proj:"argo-ci"}}}});
//# sourceMappingURL=path---docs-argo-ci-node-modules-yargs-parser-df2131e1b2461addf3f6.js.map