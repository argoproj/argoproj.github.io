webpackJsonp([0x7689365f7d9b],{2966:function(e,n){e.exports={pathContext:{docHtml:"<h1>Events</h1>\n<p>nodemon will emit events based on the child process.</p>\n<h2>Commands</h2>\n<ul>\n<li>restart</li>\n<li>config:update</li>\n<li>quit</li>\n</ul>\n<h2>States</h2>\n<ul>\n<li>start - child process has started</li>\n<li>crash - child process has crashed (nodemon will not emit exit)</li>\n<li>exit - child process has cleanly exited (ie. no crash)</li>\n<li>restart([ array of files triggering the restart ]) - child process has restarted</li>\n<li>config:update - nodemon's config has changed</li>\n</ul>\n<h2>Messages</h2>\n<ul>\n<li>log({ type, message (plain text log), colour (colour coded log) }) - logging from nodemon (not the child process)</li>\n<li>stdout - the stdout stream from the child process</li>\n<li>stderr - the stderr stream from the child process</li>\n<li>readable - stdout and stderr streams are ready (<a href=\"https://github.com/remy/nodemon#pipe-output-to-somewhere-else\">example</a>)</li>\n</ul>\n<p>Note that if you want to supress the normal stdout &#x26; stderr of the child, in favour\nof processing the stream manually using the stdout/stderr nodemon events, pass\nnodemon the option of <code>stdout: false</code>.</p>\n<h2>Using nodemon events</h2>\n<p>If nodemon is required, events can be bound and emitted on the nodemon object:</p>\n<pre><code class=\"language-js\">var nodemon = require('nodemon');\n\nnodemon({ script: 'app.js' }).on('start', function () {\n  console.log('nodemon started');\n}).on('crash', function () {\n  console.log('script crashed for some reason');\n});\n\n// force a restart\nnodemon.emit('restart');\n\n// force a quit\nnodemon.emit('quit');\n</code></pre>\n<p>If nodemon is a spawned process, then the child (nodemon) will emit message\nevents whereby the event argument contains the event type, and instead of\nemitting events, you <code>send</code> the command:</p>\n<pre><code class=\"language-js\">var app = spawnNodemon();\n\napp.on('message', function (event) {\n  if (event.type === 'start') {\n    console.log('nodemon started');\n  } else if (event.type === 'crash') {\n    console.log('script crashed for some reason');\n  }\n});\n\n// force a restart\napp.send('restart');\n\n// force a quit\napp.send('quit');\n</code></pre>\n<p>Note that even though the child will still emit a <code>message</code> event whose type is\n<code>exit</code>, it makes more sense to listen to the actual <code>exit</code> event on the child:</p>\n<pre><code class=\"language-js\">app.on('exit', function () {\n  console.log('nodemon quit');\n});\n</code></pre>",docPath:"argo-ci/node_modules/nodemon/doc/events",proj:"argo-ci"}}}});
//# sourceMappingURL=path---docs-argo-ci-node-modules-nodemon-doc-events-html-e970cd00fc291f1d5367.js.map