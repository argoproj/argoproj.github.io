{"version":3,"sources":["webpack:///path---docs-argo-ci-node-modules-nan-doc-methods-html-f899abde5997376ab1ca.js","webpack:///./.cache/json/docs-argo-ci-node-modules-nan-doc-methods-html.json"],"names":["webpackJsonp","2910","module","exports","pathContext","docHtml","docPath","proj"],"mappings":"AAAAA,cAAc,iBAERC,KACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,aAAeC,QAAA;AAA8h/BC,QAAA,uCAAAC,KAAA","file":"path---docs-argo-ci-node-modules-nan-doc-methods-html-f899abde5997376ab1ca.js","sourcesContent":["webpackJsonp([60808732868736],{\n\n/***/ 2910:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"pathContext\":{\"docHtml\":\"<h2>JavaScript-accessible methods</h2>\\n<p>A <em>template</em> is a blueprint for JavaScript functions and objects in a context. You can use a template to wrap C++ functions and data structures within JavaScript objects so that they can be manipulated from JavaScript. See the V8 Embedders Guide section on <a href=\\\"https://github.com/v8/v8/wiki/Embedder%27s-Guide#templates\\\">Templates</a> for further information.</p>\\n<p>In order to expose functionality to JavaScript via a template, you must provide it to V8 in a form that it understands. Across the versions of V8 supported by NAN, JavaScript-accessible method signatures vary widely, NAN fully abstracts method declaration and provides you with an interface that is similar to the most recent V8 API but is backward-compatible with older versions that still use the now-deceased <code>v8::Argument</code> type.</p>\\n<ul>\\n<li><strong>Method argument types</strong></li>\\n<li><a href=\\\"#api_nan_function_callback_info\\\"><b><code>Nan::FunctionCallbackInfo</code></b></a></li>\\n<li><a href=\\\"#api_nan_property_callback_info\\\"><b><code>Nan::PropertyCallbackInfo</code></b></a></li>\\n<li><a href=\\\"#api_nan_return_value\\\"><b><code>Nan::ReturnValue</code></b></a></li>\\n<li><strong>Method declarations</strong></li>\\n<li><a href=\\\"#api_nan_method\\\"><b>Method declaration</b></a></li>\\n<li><a href=\\\"#api_nan_getter\\\"><b>Getter declaration</b></a></li>\\n<li><a href=\\\"#api_nan_setter\\\"><b>Setter declaration</b></a></li>\\n<li><a href=\\\"#api_nan_property_getter\\\"><b>Property getter declaration</b></a></li>\\n<li><a href=\\\"#api_nan_property_setter\\\"><b>Property setter declaration</b></a></li>\\n<li><a href=\\\"#api_nan_property_enumerator\\\"><b>Property enumerator declaration</b></a></li>\\n<li><a href=\\\"#api_nan_property_deleter\\\"><b>Property deleter declaration</b></a></li>\\n<li><a href=\\\"#api_nan_property_query\\\"><b>Property query declaration</b></a></li>\\n<li><a href=\\\"#api_nan_index_getter\\\"><b>Index getter declaration</b></a></li>\\n<li><a href=\\\"#api_nan_index_setter\\\"><b>Index setter declaration</b></a></li>\\n<li><a href=\\\"#api_nan_index_enumerator\\\"><b>Index enumerator declaration</b></a></li>\\n<li><a href=\\\"#api_nan_index_deleter\\\"><b>Index deleter declaration</b></a></li>\\n<li><a href=\\\"#api_nan_index_query\\\"><b>Index query declaration</b></a></li>\\n<li>Method and template helpers</li>\\n<li><a href=\\\"#api_nan_set_method\\\"><b><code>Nan::SetMethod()</code></b></a></li>\\n<li><a href=\\\"#api_nan_set_prototype_method\\\"><b><code>Nan::SetPrototypeMethod()</code></b></a></li>\\n<li><a href=\\\"#api_nan_set_accessor\\\"><b><code>Nan::SetAccessor()</code></b></a></li>\\n<li><a href=\\\"#api_nan_set_named_property_handler\\\"><b><code>Nan::SetNamedPropertyHandler()</code></b></a></li>\\n<li><a href=\\\"#api_nan_set_indexed_property_handler\\\"><b><code>Nan::SetIndexedPropertyHandler()</code></b></a></li>\\n<li><a href=\\\"#api_nan_set_template\\\"><b><code>Nan::SetTemplate()</code></b></a></li>\\n<li><a href=\\\"#api_nan_set_prototype_template\\\"><b><code>Nan::SetPrototypeTemplate()</code></b></a></li>\\n<li><a href=\\\"#api_nan_set_instance_template\\\"><b><code>Nan::SetInstanceTemplate()</code></b></a></li>\\n<li><a href=\\\"#api_nan_set_call_handler\\\"><b><code>Nan::SetCallHandler()</code></b></a></li>\\n<li><a href=\\\"#api_nan_set_call_as_function_handler\\\"><b><code>Nan::SetCallAsFunctionHandler()</code></b></a></li>\\n</ul>\\n<p><a name=\\\"api_nan_function_callback_info\\\"></a></p>\\n<h3>Nan::FunctionCallbackInfo</h3>\\n<p><code>Nan::FunctionCallbackInfo</code> should be used in place of <a href=\\\"https://v8docs.nodesource.com/node-8.0/dd/d0d/classv8_1_1_function_callback_info.html\\\"><code>v8::FunctionCallbackInfo</code></a>, even with older versions of Node where <code>v8::FunctionCallbackInfo</code> does not exist.</p>\\n<p>Definition:</p>\\n<pre><code class=\\\"language-c++\\\">template&#x3C;typename T> class FunctionCallbackInfo {\\n public:\\n  ReturnValue&#x3C;T> GetReturnValue() const;\\n  v8::Local&#x3C;v8::Function> Callee();\\n  v8::Local&#x3C;v8::Value> Data();\\n  v8::Local&#x3C;v8::Object> Holder();\\n  bool IsConstructCall();\\n  int Length() const;\\n  v8::Local&#x3C;v8::Value> operator[](int i) const;\\n  v8::Local&#x3C;v8::Object> This() const;\\n  v8::Isolate *GetIsolate() const;\\n};\\n</code></pre>\\n<p>See the <a href=\\\"https://v8docs.nodesource.com/node-8.0/dd/d0d/classv8_1_1_function_callback_info.html\\\"><code>v8::FunctionCallbackInfo</code></a> documentation for usage details on these. See <a href=\\\"#api_nan_return_value\\\"><code>Nan::ReturnValue</code></a> for further information on how to set a return value from methods.</p>\\n<p><a name=\\\"api_nan_property_callback_info\\\"></a></p>\\n<h3>Nan::PropertyCallbackInfo</h3>\\n<p><code>Nan::PropertyCallbackInfo</code> should be used in place of <a href=\\\"https://v8docs.nodesource.com/node-8.0/d7/dc5/classv8_1_1_property_callback_info.html\\\"><code>v8::PropertyCallbackInfo</code></a>, even with older versions of Node where <code>v8::PropertyCallbackInfo</code> does not exist.</p>\\n<p>Definition:</p>\\n<pre><code class=\\\"language-c++\\\">template&#x3C;typename T> class PropertyCallbackInfo : public PropertyCallbackInfoBase&#x3C;T> {\\n public:\\n  ReturnValue&#x3C;T> GetReturnValue() const;\\n  v8::Isolate* GetIsolate() const;\\n  v8::Local&#x3C;v8::Value> Data() const;\\n  v8::Local&#x3C;v8::Object> This() const;\\n  v8::Local&#x3C;v8::Object> Holder() const;\\n};\\n</code></pre>\\n<p>See the <a href=\\\"https://v8docs.nodesource.com/node-8.0/d7/dc5/classv8_1_1_property_callback_info.html\\\"><code>v8::PropertyCallbackInfo</code></a> documentation for usage details on these. See <a href=\\\"#api_nan_return_value\\\"><code>Nan::ReturnValue</code></a> for further information on how to set a return value from property accessor methods.</p>\\n<p><a name=\\\"api_nan_return_value\\\"></a></p>\\n<h3>Nan::ReturnValue</h3>\\n<p><code>Nan::ReturnValue</code> is used in place of <a href=\\\"https://v8docs.nodesource.com/node-8.0/da/da7/classv8_1_1_return_value.html\\\"><code>v8::ReturnValue</code></a> on both <a href=\\\"#api_nan_function_callback_info\\\"><code>Nan::FunctionCallbackInfo</code></a> and <a href=\\\"#api_nan_property_callback_info\\\"><code>Nan::PropertyCallbackInfo</code></a> as the return type of <code>GetReturnValue()</code>.</p>\\n<p>Example usage:</p>\\n<pre><code class=\\\"language-c++\\\">void EmptyArray(const Nan::FunctionCallbackInfo&#x3C;v8::Value>&#x26; info) {\\n  info.GetReturnValue().Set(Nan::New&#x3C;v8::Array>());\\n}\\n</code></pre>\\n<p>Definition:</p>\\n<pre><code class=\\\"language-c++\\\">template&#x3C;typename T> class ReturnValue {\\n public:\\n  // Handle setters\\n  template &#x3C;typename S> void Set(const v8::Local&#x3C;S> &#x26;handle);\\n  template &#x3C;typename S> void Set(const Nan::Global&#x3C;S> &#x26;handle);\\n\\n  // Fast primitive setters\\n  void Set(bool value);\\n  void Set(double i);\\n  void Set(int32_t i);\\n  void Set(uint32_t i);\\n\\n  // Fast JS primitive setters\\n  void SetNull();\\n  void SetUndefined();\\n  void SetEmptyString();\\n\\n  // Convenience getter for isolate\\n  v8::Isolate *GetIsolate() const;\\n};\\n</code></pre>\\n<p>See the documentation on <a href=\\\"https://v8docs.nodesource.com/node-8.0/da/da7/classv8_1_1_return_value.html\\\"><code>v8::ReturnValue</code></a> for further information on this.</p>\\n<p><a name=\\\"api_nan_method\\\"></a></p>\\n<h3>Method declaration</h3>\\n<p>JavaScript-accessible methods should be declared with the following signature to form a <code>Nan::FunctionCallback</code>:</p>\\n<pre><code class=\\\"language-c++\\\">typedef void(*FunctionCallback)(const FunctionCallbackInfo&#x3C;v8::Value>&#x26;);\\n</code></pre>\\n<p>Example:</p>\\n<pre><code class=\\\"language-c++\\\">void MethodName(const Nan::FunctionCallbackInfo&#x3C;v8::Value>&#x26; info) {\\n  ...\\n}\\n</code></pre>\\n<p>You do not need to declare a new <code>HandleScope</code> within a method as one is implicitly created for you.</p>\\n<p><strong>Example usage</strong></p>\\n<pre><code class=\\\"language-c++\\\">// .h:\\nclass Foo : public Nan::ObjectWrap {\\n  ...\\n\\n  static void Bar(const Nan::FunctionCallbackInfo&#x3C;v8::Value>&#x26; info);\\n  static void Baz(const Nan::FunctionCallbackInfo&#x3C;v8::Value>&#x26; info);\\n}\\n\\n\\n// .cc:\\nvoid Foo::Bar(const Nan::FunctionCallbackInfo&#x3C;v8::Value>&#x26; info) {\\n  ...\\n}\\n\\nvoid Foo::Baz(const Nan::FunctionCallbackInfo&#x3C;v8::Value>&#x26; info) {\\n  ...\\n}\\n</code></pre>\\n<p>A helper macro <code>NAN_METHOD(methodname)</code> exists, compatible with NAN v1 method declarations.</p>\\n<p><strong>Example usage with <code>NAN_METHOD(methodname)</code></strong></p>\\n<pre><code class=\\\"language-c++\\\">// .h:\\nclass Foo : public Nan::ObjectWrap {\\n  ...\\n\\n  static NAN_METHOD(Bar);\\n  static NAN_METHOD(Baz);\\n}\\n\\n\\n// .cc:\\nNAN_METHOD(Foo::Bar) {\\n  ...\\n}\\n\\nNAN_METHOD(Foo::Baz) {\\n  ...\\n}\\n</code></pre>\\n<p>Use <a href=\\\"#api_nan_set_prototype_method\\\"><code>Nan::SetPrototypeMethod</code></a> to attach a method to a JavaScript function prototype or <a href=\\\"#api_nan_set_method\\\"><code>Nan::SetMethod</code></a> to attach a method directly on a JavaScript object.</p>\\n<p><a name=\\\"api_nan_getter\\\"></a></p>\\n<h3>Getter declaration</h3>\\n<p>JavaScript-accessible getters should be declared with the following signature to form a <code>Nan::GetterCallback</code>:</p>\\n<pre><code class=\\\"language-c++\\\">typedef void(*GetterCallback)(v8::Local&#x3C;v8::String>,\\n                              const PropertyCallbackInfo&#x3C;v8::Value>&#x26;);\\n</code></pre>\\n<p>Example:</p>\\n<pre><code class=\\\"language-c++\\\">void GetterName(v8::Local&#x3C;v8::String> property,\\n                const Nan::PropertyCallbackInfo&#x3C;v8::Value>&#x26; info) {\\n  ...\\n}\\n</code></pre>\\n<p>You do not need to declare a new <code>HandleScope</code> within a getter as one is implicitly created for you.</p>\\n<p>A helper macro <code>NAN_GETTER(methodname)</code> exists, compatible with NAN v1 method declarations.</p>\\n<p>Also see the V8 Embedders Guide documentation on <a href=\\\"https://developers.google.com/v8/embed#accesssors\\\">Accessors</a>.</p>\\n<p><a name=\\\"api_nan_setter\\\"></a></p>\\n<h3>Setter declaration</h3>\\n<p>JavaScript-accessible setters should be declared with the following signature to form a <b><code>Nan::SetterCallback</code></b>:</p>\\n<pre><code class=\\\"language-c++\\\">typedef void(*SetterCallback)(v8::Local&#x3C;v8::String>,\\n                              v8::Local&#x3C;v8::Value>,\\n                              const PropertyCallbackInfo&#x3C;void>&#x26;);\\n</code></pre>\\n<p>Example:</p>\\n<pre><code class=\\\"language-c++\\\">void SetterName(v8::Local&#x3C;v8::String> property,\\n                v8::Local&#x3C;v8::Value> value,\\n                const Nan::PropertyCallbackInfo&#x3C;void>&#x26; info) {\\n  ...\\n}\\n</code></pre>\\n<p>You do not need to declare a new <code>HandleScope</code> within a setter as one is implicitly created for you.</p>\\n<p>A helper macro <code>NAN_SETTER(methodname)</code> exists, compatible with NAN v1 method declarations.</p>\\n<p>Also see the V8 Embedders Guide documentation on <a href=\\\"https://developers.google.com/v8/embed#accesssors\\\">Accessors</a>.</p>\\n<p><a name=\\\"api_nan_property_getter\\\"></a></p>\\n<h3>Property getter declaration</h3>\\n<p>JavaScript-accessible property getters should be declared with the following signature to form a <b><code>Nan::PropertyGetterCallback</code></b>:</p>\\n<pre><code class=\\\"language-c++\\\">typedef void(*PropertyGetterCallback)(v8::Local&#x3C;v8::String>,\\n                                      const PropertyCallbackInfo&#x3C;v8::Value>&#x26;);\\n</code></pre>\\n<p>Example:</p>\\n<pre><code class=\\\"language-c++\\\">void PropertyGetterName(v8::Local&#x3C;v8::String> property,\\n                        const Nan::PropertyCallbackInfo&#x3C;v8::Value>&#x26; info) {\\n  ...\\n}\\n</code></pre>\\n<p>You do not need to declare a new <code>HandleScope</code> within a property getter as one is implicitly created for you.</p>\\n<p>A helper macro <code>NAN_PROPERTY_GETTER(methodname)</code> exists, compatible with NAN v1 method declarations.</p>\\n<p>Also see the V8 Embedders Guide documentation on named property <a href=\\\"https://developers.google.com/v8/embed#interceptors\\\">Interceptors</a>.</p>\\n<p><a name=\\\"api_nan_property_setter\\\"></a></p>\\n<h3>Property setter declaration</h3>\\n<p>JavaScript-accessible property setters should be declared with the following signature to form a <b><code>Nan::PropertySetterCallback</code></b>:</p>\\n<pre><code class=\\\"language-c++\\\">typedef void(*PropertySetterCallback)(v8::Local&#x3C;v8::String>,\\n                                      v8::Local&#x3C;v8::Value>,\\n                                      const PropertyCallbackInfo&#x3C;v8::Value>&#x26;);\\n</code></pre>\\n<p>Example:</p>\\n<pre><code class=\\\"language-c++\\\">void PropertySetterName(v8::Local&#x3C;v8::String> property,\\n                        v8::Local&#x3C;v8::Value> value,\\n                        const Nan::PropertyCallbackInfo&#x3C;v8::Value>&#x26; info);\\n</code></pre>\\n<p>You do not need to declare a new <code>HandleScope</code> within a property setter as one is implicitly created for you.</p>\\n<p>A helper macro <code>NAN_PROPERTY_SETTER(methodname)</code> exists, compatible with NAN v1 method declarations.</p>\\n<p>Also see the V8 Embedders Guide documentation on named property <a href=\\\"https://developers.google.com/v8/embed#interceptors\\\">Interceptors</a>.</p>\\n<p><a name=\\\"api_nan_property_enumerator\\\"></a></p>\\n<h3>Property enumerator declaration</h3>\\n<p>JavaScript-accessible property enumerators should be declared with the following signature to form a <b><code>Nan::PropertyEnumeratorCallback</code></b>:</p>\\n<pre><code class=\\\"language-c++\\\">typedef void(*PropertyEnumeratorCallback)(const PropertyCallbackInfo&#x3C;v8::Array>&#x26;);\\n</code></pre>\\n<p>Example:</p>\\n<pre><code class=\\\"language-c++\\\">void PropertyEnumeratorName(const Nan::PropertyCallbackInfo&#x3C;v8::Array>&#x26; info);\\n</code></pre>\\n<p>You do not need to declare a new <code>HandleScope</code> within a property enumerator as one is implicitly created for you.</p>\\n<p>A helper macro <code>NAN_PROPERTY_ENUMERATOR(methodname)</code> exists, compatible with NAN v1 method declarations.</p>\\n<p>Also see the V8 Embedders Guide documentation on named property <a href=\\\"https://developers.google.com/v8/embed#interceptors\\\">Interceptors</a>.</p>\\n<p><a name=\\\"api_nan_property_deleter\\\"></a></p>\\n<h3>Property deleter declaration</h3>\\n<p>JavaScript-accessible property deleters should be declared with the following signature to form a <b><code>Nan::PropertyDeleterCallback</code></b>:</p>\\n<pre><code class=\\\"language-c++\\\">typedef void(*PropertyDeleterCallback)(v8::Local&#x3C;v8::String>,\\n                                       const PropertyCallbackInfo&#x3C;v8::Boolean>&#x26;);\\n</code></pre>\\n<p>Example:</p>\\n<pre><code class=\\\"language-c++\\\">void PropertyDeleterName(v8::Local&#x3C;v8::String> property,\\n                         const Nan::PropertyCallbackInfo&#x3C;v8::Boolean>&#x26; info);\\n</code></pre>\\n<p>You do not need to declare a new <code>HandleScope</code> within a property deleter as one is implicitly created for you.</p>\\n<p>A helper macro <code>NAN_PROPERTY_DELETER(methodname)</code> exists, compatible with NAN v1 method declarations.</p>\\n<p>Also see the V8 Embedders Guide documentation on named property <a href=\\\"https://developers.google.com/v8/embed#interceptors\\\">Interceptors</a>.</p>\\n<p><a name=\\\"api_nan_property_query\\\"></a></p>\\n<h3>Property query declaration</h3>\\n<p>JavaScript-accessible property query methods should be declared with the following signature to form a <b><code>Nan::PropertyQueryCallback</code></b>:</p>\\n<pre><code class=\\\"language-c++\\\">typedef void(*PropertyQueryCallback)(v8::Local&#x3C;v8::String>,\\n                                     const PropertyCallbackInfo&#x3C;v8::Integer>&#x26;);\\n</code></pre>\\n<p>Example:</p>\\n<pre><code class=\\\"language-c++\\\">void PropertyQueryName(v8::Local&#x3C;v8::String> property,\\n                       const Nan::PropertyCallbackInfo&#x3C;v8::Integer>&#x26; info);\\n</code></pre>\\n<p>You do not need to declare a new <code>HandleScope</code> within a property query method as one is implicitly created for you.</p>\\n<p>A helper macro <code>NAN_PROPERTY_QUERY(methodname)</code> exists, compatible with NAN v1 method declarations.</p>\\n<p>Also see the V8 Embedders Guide documentation on named property <a href=\\\"https://developers.google.com/v8/embed#interceptors\\\">Interceptors</a>.</p>\\n<p><a name=\\\"api_nan_index_getter\\\"></a></p>\\n<h3>Index getter declaration</h3>\\n<p>JavaScript-accessible index getter methods should be declared with the following signature to form a <b><code>Nan::IndexGetterCallback</code></b>:</p>\\n<pre><code class=\\\"language-c++\\\">typedef void(*IndexGetterCallback)(uint32_t,\\n                                   const PropertyCallbackInfo&#x3C;v8::Value>&#x26;);\\n</code></pre>\\n<p>Example:</p>\\n<pre><code class=\\\"language-c++\\\">void IndexGetterName(uint32_t index, const PropertyCallbackInfo&#x3C;v8::Value>&#x26; info);\\n</code></pre>\\n<p>You do not need to declare a new <code>HandleScope</code> within a index getter as one is implicitly created for you.</p>\\n<p>A helper macro <code>NAN_INDEX_GETTER(methodname)</code> exists, compatible with NAN v1 method declarations.</p>\\n<p>Also see the V8 Embedders Guide documentation on indexed property <a href=\\\"https://developers.google.com/v8/embed#interceptors\\\">Interceptors</a>.</p>\\n<p><a name=\\\"api_nan_index_setter\\\"></a></p>\\n<h3>Index setter declaration</h3>\\n<p>JavaScript-accessible index setter methods should be declared with the following signature to form a <b><code>Nan::IndexSetterCallback</code></b>:</p>\\n<pre><code class=\\\"language-c++\\\">typedef void(*IndexSetterCallback)(uint32_t,\\n                                   v8::Local&#x3C;v8::Value>,\\n                                   const PropertyCallbackInfo&#x3C;v8::Value>&#x26;);\\n</code></pre>\\n<p>Example:</p>\\n<pre><code class=\\\"language-c++\\\">void IndexSetterName(uint32_t index,\\n                     v8::Local&#x3C;v8::Value> value,\\n                     const PropertyCallbackInfo&#x3C;v8::Value>&#x26; info);\\n</code></pre>\\n<p>You do not need to declare a new <code>HandleScope</code> within a index setter as one is implicitly created for you.</p>\\n<p>A helper macro <code>NAN_INDEX_SETTER(methodname)</code> exists, compatible with NAN v1 method declarations.</p>\\n<p>Also see the V8 Embedders Guide documentation on indexed property <a href=\\\"https://developers.google.com/v8/embed#interceptors\\\">Interceptors</a>.</p>\\n<p><a name=\\\"api_nan_index_enumerator\\\"></a></p>\\n<h3>Index enumerator declaration</h3>\\n<p>JavaScript-accessible index enumerator methods should be declared with the following signature to form a <b><code>Nan::IndexEnumeratorCallback</code></b>:</p>\\n<pre><code class=\\\"language-c++\\\">typedef void(*IndexEnumeratorCallback)(const PropertyCallbackInfo&#x3C;v8::Array>&#x26;);\\n</code></pre>\\n<p>Example:</p>\\n<pre><code class=\\\"language-c++\\\">void IndexEnumeratorName(const PropertyCallbackInfo&#x3C;v8::Array>&#x26; info);\\n</code></pre>\\n<p>You do not need to declare a new <code>HandleScope</code> within a index enumerator as one is implicitly created for you.</p>\\n<p>A helper macro <code>NAN_INDEX_ENUMERATOR(methodname)</code> exists, compatible with NAN v1 method declarations.</p>\\n<p>Also see the V8 Embedders Guide documentation on indexed property <a href=\\\"https://developers.google.com/v8/embed#interceptors\\\">Interceptors</a>.</p>\\n<p><a name=\\\"api_nan_index_deleter\\\"></a></p>\\n<h3>Index deleter declaration</h3>\\n<p>JavaScript-accessible index deleter methods should be declared with the following signature to form a <b><code>Nan::IndexDeleterCallback</code></b>:</p>\\n<pre><code class=\\\"language-c++\\\">typedef void(*IndexDeleterCallback)(uint32_t,\\n                                    const PropertyCallbackInfo&#x3C;v8::Boolean>&#x26;);\\n</code></pre>\\n<p>Example:</p>\\n<pre><code class=\\\"language-c++\\\">void IndexDeleterName(uint32_t index, const PropertyCallbackInfo&#x3C;v8::Boolean>&#x26; info);\\n</code></pre>\\n<p>You do not need to declare a new <code>HandleScope</code> within a index deleter as one is implicitly created for you.</p>\\n<p>A helper macro <code>NAN_INDEX_DELETER(methodname)</code> exists, compatible with NAN v1 method declarations.</p>\\n<p>Also see the V8 Embedders Guide documentation on indexed property <a href=\\\"https://developers.google.com/v8/embed#interceptors\\\">Interceptors</a>.</p>\\n<p><a name=\\\"api_nan_index_query\\\"></a></p>\\n<h3>Index query declaration</h3>\\n<p>JavaScript-accessible index query methods should be declared with the following signature to form a <b><code>Nan::IndexQueryCallback</code></b>:</p>\\n<pre><code class=\\\"language-c++\\\">typedef void(*IndexQueryCallback)(uint32_t,\\n                                  const PropertyCallbackInfo&#x3C;v8::Integer>&#x26;);\\n</code></pre>\\n<p>Example:</p>\\n<pre><code class=\\\"language-c++\\\">void IndexQueryName(uint32_t index, const PropertyCallbackInfo&#x3C;v8::Integer>&#x26; info);\\n</code></pre>\\n<p>You do not need to declare a new <code>HandleScope</code> within a index query method as one is implicitly created for you.</p>\\n<p>A helper macro <code>NAN_INDEX_QUERY(methodname)</code> exists, compatible with NAN v1 method declarations.</p>\\n<p>Also see the V8 Embedders Guide documentation on indexed property <a href=\\\"https://developers.google.com/v8/embed#interceptors\\\">Interceptors</a>.</p>\\n<p><a name=\\\"api_nan_set_method\\\"></a></p>\\n<h3>Nan::SetMethod()</h3>\\n<p>Sets a method with a given name directly on a JavaScript object where the method has the <code>Nan::FunctionCallback</code> signature (see <a href=\\\"#api_nan_method\\\">Method declaration</a>).</p>\\n<p>Signature:</p>\\n<pre><code class=\\\"language-c++\\\">void Nan::SetMethod(v8::Local&#x3C;v8::Object> recv,\\n                    const char *name,\\n                    Nan::FunctionCallback callback)\\nvoid Nan::SetMethod(v8::Local&#x3C;v8::Template> templ,\\n                    const char *name,\\n                    Nan::FunctionCallback callback)\\n</code></pre>\\n<p><a name=\\\"api_nan_set_prototype_method\\\"></a></p>\\n<h3>Nan::SetPrototypeMethod()</h3>\\n<p>Sets a method with a given name on a <code>FunctionTemplate</code>'s prototype where the method has the <code>Nan::FunctionCallback</code> signature (see <a href=\\\"#api_nan_method\\\">Method declaration</a>).</p>\\n<p>Signature:</p>\\n<pre><code class=\\\"language-c++\\\">void Nan::SetPrototypeMethod(v8::Local&#x3C;v8::FunctionTemplate> recv,\\n                             const char* name,\\n                             Nan::FunctionCallback callback)\\n</code></pre>\\n<p><a name=\\\"api_nan_set_accessor\\\"></a></p>\\n<h3>Nan::SetAccessor()</h3>\\n<p>Sets getters and setters for a property with a given name on an <code>ObjectTemplate</code> or a plain <code>Object</code>. Accepts getters with the <code>Nan::GetterCallback</code> signature (see <a href=\\\"#api_nan_getter\\\">Getter declaration</a>) and setters with the <code>Nan::SetterCallback</code> signature (see <a href=\\\"#api_nan_setter\\\">Setter declaration</a>).</p>\\n<p>Signature:</p>\\n<pre><code class=\\\"language-c++\\\">void SetAccessor(v8::Local&#x3C;v8::ObjectTemplate> tpl,\\n                 v8::Local&#x3C;v8::String> name,\\n                 Nan::GetterCallback getter,\\n                 Nan::SetterCallback setter = 0,\\n                 v8::Local&#x3C;v8::Value> data = v8::Local&#x3C;v8::Value>(),\\n                 v8::AccessControl settings = v8::DEFAULT,\\n                 v8::PropertyAttribute attribute = v8::None,\\n                 imp::Sig signature = imp::Sig());\\nbool SetAccessor(v8::Local&#x3C;v8::Object> obj,\\n                 v8::Local&#x3C;v8::String> name,\\n                 Nan::GetterCallback getter,\\n                 Nan::SetterCallback setter = 0,\\n                 v8::Local&#x3C;v8::Value> data = v8::Local&#x3C;v8::Value>(),\\n                 v8::AccessControl settings = v8::DEFAULT,\\n                 v8::PropertyAttribute attribute = v8::None)\\n</code></pre>\\n<p>See the V8 <a href=\\\"https://v8docs.nodesource.com/node-8.0/db/d5f/classv8_1_1_object_template.html#aca0ed196f8a9adb1f68b1aadb6c9cd77\\\"><code>ObjectTemplate#SetAccessor()</code></a> and <a href=\\\"https://v8docs.nodesource.com/node-8.0/db/d85/classv8_1_1_object.html#a3f9dee085f5ec346465f1dc924325043\\\"><code>Object#SetAccessor()</code></a> for further information about how to use <code>Nan::SetAccessor()</code>.</p>\\n<p><a name=\\\"api_nan_set_named_property_handler\\\"></a></p>\\n<h3>Nan::SetNamedPropertyHandler()</h3>\\n<p>Sets named property getters, setters, query, deleter and enumerator methods on an <code>ObjectTemplate</code>. Accepts:</p>\\n<ul>\\n<li>Property getters with the <code>Nan::PropertyGetterCallback</code> signature (see <a href=\\\"#api_nan_property_getter\\\">Property getter declaration</a>)</li>\\n<li>Property setters with the <code>Nan::PropertySetterCallback</code> signature (see <a href=\\\"#api_nan_property_setter\\\">Property setter declaration</a>)</li>\\n<li>Property query methods with the <code>Nan::PropertyQueryCallback</code> signature (see <a href=\\\"#api_nan_property_query\\\">Property query declaration</a>)</li>\\n<li>Property deleters with the <code>Nan::PropertyDeleterCallback</code> signature (see <a href=\\\"#api_nan_property_deleter\\\">Property deleter declaration</a>)</li>\\n<li>Property enumerators with the <code>Nan::PropertyEnumeratorCallback</code> signature (see <a href=\\\"#api_nan_property_enumerator\\\">Property enumerator declaration</a>)</li>\\n</ul>\\n<p>Signature:</p>\\n<pre><code class=\\\"language-c++\\\">void SetNamedPropertyHandler(v8::Local&#x3C;v8::ObjectTemplate> tpl,\\n                             Nan::PropertyGetterCallback getter,\\n                             Nan::PropertySetterCallback setter = 0,\\n                             Nan::PropertyQueryCallback query = 0,\\n                             Nan::PropertyDeleterCallback deleter = 0,\\n                             Nan::PropertyEnumeratorCallback enumerator = 0,\\n                             v8::Local&#x3C;v8::Value> data = v8::Local&#x3C;v8::Value>())\\n</code></pre>\\n<p>See the V8 <a href=\\\"https://v8docs.nodesource.com/io.js-3.3/db/d5f/classv8_1_1_object_template.html#a34d1cc45b642cd131706663801aadd76\\\"><code>ObjectTemplate#SetNamedPropertyHandler()</code></a> for further information about how to use <code>Nan::SetNamedPropertyHandler()</code>.</p>\\n<p><a name=\\\"api_nan_set_indexed_property_handler\\\"></a></p>\\n<h3>Nan::SetIndexedPropertyHandler()</h3>\\n<p>Sets indexed property getters, setters, query, deleter and enumerator methods on an <code>ObjectTemplate</code>. Accepts:</p>\\n<ul>\\n<li>Indexed property getters with the <code>Nan::IndexGetterCallback</code> signature (see <a href=\\\"#api_nan_index_getter\\\">Index getter declaration</a>)</li>\\n<li>Indexed property setters with the <code>Nan::IndexSetterCallback</code> signature (see <a href=\\\"#api_nan_index_setter\\\">Index setter declaration</a>)</li>\\n<li>Indexed property query methods with the <code>Nan::IndexQueryCallback</code> signature (see <a href=\\\"#api_nan_index_query\\\">Index query declaration</a>)</li>\\n<li>Indexed property deleters with the <code>Nan::IndexDeleterCallback</code> signature (see <a href=\\\"#api_nan_index_deleter\\\">Index deleter declaration</a>)</li>\\n<li>Indexed property enumerators with the <code>Nan::IndexEnumeratorCallback</code> signature (see <a href=\\\"#api_nan_index_enumerator\\\">Index enumerator declaration</a>)</li>\\n</ul>\\n<p>Signature:</p>\\n<pre><code class=\\\"language-c++\\\">void SetIndexedPropertyHandler(v8::Local&#x3C;v8::ObjectTemplate> tpl,\\n                               Nan::IndexGetterCallback getter,\\n                               Nan::IndexSetterCallback setter = 0,\\n                               Nan::IndexQueryCallback query = 0,\\n                               Nan::IndexDeleterCallback deleter = 0,\\n                               Nan::IndexEnumeratorCallback enumerator = 0,\\n                               v8::Local&#x3C;v8::Value> data = v8::Local&#x3C;v8::Value>())\\n</code></pre>\\n<p>See the V8 <a href=\\\"https://v8docs.nodesource.com/node-8.0/db/d5f/classv8_1_1_object_template.html#ac89f06d634add0e890452033f7d17ff1\\\"><code>ObjectTemplate#SetIndexedPropertyHandler()</code></a> for further information about how to use <code>Nan::SetIndexedPropertyHandler()</code>.</p>\\n<p><a name=\\\"api_nan_set_template\\\"></a></p>\\n<h3>Nan::SetTemplate()</h3>\\n<p>Adds properties on an <code>Object</code>'s or <code>Function</code>'s template.</p>\\n<p>Signature:</p>\\n<pre><code class=\\\"language-c++\\\">void Nan::SetTemplate(v8::Local&#x3C;v8::Template> templ,\\n                      const char *name,\\n                      v8::Local&#x3C;v8::Data> value);\\nvoid Nan::SetTemplate(v8::Local&#x3C;v8::Template> templ,\\n                      v8::Local&#x3C;v8::String> name,\\n                      v8::Local&#x3C;v8::Data> value,\\n                      v8::PropertyAttribute attributes)\\n</code></pre>\\n<p>Calls the <code>Template</code>'s <a href=\\\"https://v8docs.nodesource.com/node-8.0/db/df7/classv8_1_1_template.html#ae3fbaff137557aa6a0233bc7e52214ac\\\"><code>Set()</code></a>.</p>\\n<p><a name=\\\"api_nan_set_prototype_template\\\"></a></p>\\n<h3>Nan::SetPrototypeTemplate()</h3>\\n<p>Adds properties on an <code>Object</code>'s or <code>Function</code>'s prototype template.</p>\\n<p>Signature:</p>\\n<pre><code class=\\\"language-c++\\\">void Nan::SetPrototypeTemplate(v8::Local&#x3C;v8::FunctionTemplate> templ,\\n                               const char *name,\\n                               v8::Local&#x3C;v8::Data> value);\\nvoid Nan::SetPrototypeTemplate(v8::Local&#x3C;v8::FunctionTemplate> templ,\\n                               v8::Local&#x3C;v8::String> name,\\n                               v8::Local&#x3C;v8::Data> value,\\n                               v8::PropertyAttribute attributes)\\n</code></pre>\\n<p>Calls the <code>FunctionTemplate</code>'s <em>PrototypeTemplate's</em> <a href=\\\"https://v8docs.nodesource.com/io.js-3.3/db/df7/classv8_1_1_template.html#a2db6a56597bf23c59659c0659e564ddf\\\"><code>Set()</code></a>.</p>\\n<p><a name=\\\"api_nan_set_instance_template\\\"></a></p>\\n<h3>Nan::SetInstanceTemplate()</h3>\\n<p>Use to add instance properties on <code>FunctionTemplate</code>'s.</p>\\n<p>Signature:</p>\\n<pre><code class=\\\"language-c++\\\">void Nan::SetInstanceTemplate(v8::Local&#x3C;v8::FunctionTemplate> templ,\\n                              const char *name,\\n                              v8::Local&#x3C;v8::Data> value);\\nvoid Nan::SetInstanceTemplate(v8::Local&#x3C;v8::FunctionTemplate> templ,\\n                              v8::Local&#x3C;v8::String> name,\\n                              v8::Local&#x3C;v8::Data> value,\\n                              v8::PropertyAttribute attributes)\\n</code></pre>\\n<p>Calls the <code>FunctionTemplate</code>'s <em>InstanceTemplate's</em> <a href=\\\"https://v8docs.nodesource.com/io.js-3.3/db/df7/classv8_1_1_template.html#a2db6a56597bf23c59659c0659e564ddf\\\"><code>Set()</code></a>.</p>\\n<p><a name=\\\"api_nan_set_call_handler\\\"></a></p>\\n<h3>Nan::SetCallHandler()</h3>\\n<p>Set the call-handler callback for a <code>v8::FunctionTemplate</code>.\\nThis callback is called whenever the function created from this FunctionTemplate is called.</p>\\n<p>Signature:</p>\\n<pre><code class=\\\"language-c++\\\">void Nan::SetCallHandler(v8::Local&#x3C;v8::FunctionTemplate> templ, Nan::FunctionCallback callback, v8::Local&#x3C;v8::Value> data = v8::Local&#x3C;v8::Value>())\\n</code></pre>\\n<p>Calls the <code>FunctionTemplate</code>'s <a href=\\\"https://v8docs.nodesource.com/node-8.0/d8/d83/classv8_1_1_function_template.html#a2d3845db66392074c5a018a66efbfada\\\"><code>SetCallHandler()</code></a>.</p>\\n<p><a name=\\\"api_nan_set_call_as_function_handler\\\"></a></p>\\n<h3>Nan::SetCallAsFunctionHandler()</h3>\\n<p>Sets the callback to be used when calling instances created from the <code>v8::ObjectTemplate</code> as a function.\\nIf no callback is set, instances behave like normal JavaScript objects that cannot be called as a function.</p>\\n<p>Signature:</p>\\n<pre><code class=\\\"language-c++\\\">void Nan::SetCallAsFunctionHandler(v8::Local&#x3C;v8::ObjectTemplate> templ, Nan::FunctionCallback callback, v8::Local&#x3C;v8::Value> data = v8::Local&#x3C;v8::Value>())\\n</code></pre>\\n<p>Calls the <code>ObjectTemplate</code>'s <a href=\\\"https://v8docs.nodesource.com/node-8.0/db/d5f/classv8_1_1_object_template.html#a5e9612fc80bf6db8f2da199b9b0bd04e\\\"><code>SetCallAsFunctionHandler()</code></a>.</p>\",\"docPath\":\"argo-ci/node_modules/nan/doc/methods\",\"proj\":\"argo-ci\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---docs-argo-ci-node-modules-nan-doc-methods-html-f899abde5997376ab1ca.js","module.exports = {\"pathContext\":{\"docHtml\":\"<h2>JavaScript-accessible methods</h2>\\n<p>A <em>template</em> is a blueprint for JavaScript functions and objects in a context. You can use a template to wrap C++ functions and data structures within JavaScript objects so that they can be manipulated from JavaScript. See the V8 Embedders Guide section on <a href=\\\"https://github.com/v8/v8/wiki/Embedder%27s-Guide#templates\\\">Templates</a> for further information.</p>\\n<p>In order to expose functionality to JavaScript via a template, you must provide it to V8 in a form that it understands. Across the versions of V8 supported by NAN, JavaScript-accessible method signatures vary widely, NAN fully abstracts method declaration and provides you with an interface that is similar to the most recent V8 API but is backward-compatible with older versions that still use the now-deceased <code>v8::Argument</code> type.</p>\\n<ul>\\n<li><strong>Method argument types</strong></li>\\n<li><a href=\\\"#api_nan_function_callback_info\\\"><b><code>Nan::FunctionCallbackInfo</code></b></a></li>\\n<li><a href=\\\"#api_nan_property_callback_info\\\"><b><code>Nan::PropertyCallbackInfo</code></b></a></li>\\n<li><a href=\\\"#api_nan_return_value\\\"><b><code>Nan::ReturnValue</code></b></a></li>\\n<li><strong>Method declarations</strong></li>\\n<li><a href=\\\"#api_nan_method\\\"><b>Method declaration</b></a></li>\\n<li><a href=\\\"#api_nan_getter\\\"><b>Getter declaration</b></a></li>\\n<li><a href=\\\"#api_nan_setter\\\"><b>Setter declaration</b></a></li>\\n<li><a href=\\\"#api_nan_property_getter\\\"><b>Property getter declaration</b></a></li>\\n<li><a href=\\\"#api_nan_property_setter\\\"><b>Property setter declaration</b></a></li>\\n<li><a href=\\\"#api_nan_property_enumerator\\\"><b>Property enumerator declaration</b></a></li>\\n<li><a href=\\\"#api_nan_property_deleter\\\"><b>Property deleter declaration</b></a></li>\\n<li><a href=\\\"#api_nan_property_query\\\"><b>Property query declaration</b></a></li>\\n<li><a href=\\\"#api_nan_index_getter\\\"><b>Index getter declaration</b></a></li>\\n<li><a href=\\\"#api_nan_index_setter\\\"><b>Index setter declaration</b></a></li>\\n<li><a href=\\\"#api_nan_index_enumerator\\\"><b>Index enumerator declaration</b></a></li>\\n<li><a href=\\\"#api_nan_index_deleter\\\"><b>Index deleter declaration</b></a></li>\\n<li><a href=\\\"#api_nan_index_query\\\"><b>Index query declaration</b></a></li>\\n<li>Method and template helpers</li>\\n<li><a href=\\\"#api_nan_set_method\\\"><b><code>Nan::SetMethod()</code></b></a></li>\\n<li><a href=\\\"#api_nan_set_prototype_method\\\"><b><code>Nan::SetPrototypeMethod()</code></b></a></li>\\n<li><a href=\\\"#api_nan_set_accessor\\\"><b><code>Nan::SetAccessor()</code></b></a></li>\\n<li><a href=\\\"#api_nan_set_named_property_handler\\\"><b><code>Nan::SetNamedPropertyHandler()</code></b></a></li>\\n<li><a href=\\\"#api_nan_set_indexed_property_handler\\\"><b><code>Nan::SetIndexedPropertyHandler()</code></b></a></li>\\n<li><a href=\\\"#api_nan_set_template\\\"><b><code>Nan::SetTemplate()</code></b></a></li>\\n<li><a href=\\\"#api_nan_set_prototype_template\\\"><b><code>Nan::SetPrototypeTemplate()</code></b></a></li>\\n<li><a href=\\\"#api_nan_set_instance_template\\\"><b><code>Nan::SetInstanceTemplate()</code></b></a></li>\\n<li><a href=\\\"#api_nan_set_call_handler\\\"><b><code>Nan::SetCallHandler()</code></b></a></li>\\n<li><a href=\\\"#api_nan_set_call_as_function_handler\\\"><b><code>Nan::SetCallAsFunctionHandler()</code></b></a></li>\\n</ul>\\n<p><a name=\\\"api_nan_function_callback_info\\\"></a></p>\\n<h3>Nan::FunctionCallbackInfo</h3>\\n<p><code>Nan::FunctionCallbackInfo</code> should be used in place of <a href=\\\"https://v8docs.nodesource.com/node-8.0/dd/d0d/classv8_1_1_function_callback_info.html\\\"><code>v8::FunctionCallbackInfo</code></a>, even with older versions of Node where <code>v8::FunctionCallbackInfo</code> does not exist.</p>\\n<p>Definition:</p>\\n<pre><code class=\\\"language-c++\\\">template&#x3C;typename T> class FunctionCallbackInfo {\\n public:\\n  ReturnValue&#x3C;T> GetReturnValue() const;\\n  v8::Local&#x3C;v8::Function> Callee();\\n  v8::Local&#x3C;v8::Value> Data();\\n  v8::Local&#x3C;v8::Object> Holder();\\n  bool IsConstructCall();\\n  int Length() const;\\n  v8::Local&#x3C;v8::Value> operator[](int i) const;\\n  v8::Local&#x3C;v8::Object> This() const;\\n  v8::Isolate *GetIsolate() const;\\n};\\n</code></pre>\\n<p>See the <a href=\\\"https://v8docs.nodesource.com/node-8.0/dd/d0d/classv8_1_1_function_callback_info.html\\\"><code>v8::FunctionCallbackInfo</code></a> documentation for usage details on these. See <a href=\\\"#api_nan_return_value\\\"><code>Nan::ReturnValue</code></a> for further information on how to set a return value from methods.</p>\\n<p><a name=\\\"api_nan_property_callback_info\\\"></a></p>\\n<h3>Nan::PropertyCallbackInfo</h3>\\n<p><code>Nan::PropertyCallbackInfo</code> should be used in place of <a href=\\\"https://v8docs.nodesource.com/node-8.0/d7/dc5/classv8_1_1_property_callback_info.html\\\"><code>v8::PropertyCallbackInfo</code></a>, even with older versions of Node where <code>v8::PropertyCallbackInfo</code> does not exist.</p>\\n<p>Definition:</p>\\n<pre><code class=\\\"language-c++\\\">template&#x3C;typename T> class PropertyCallbackInfo : public PropertyCallbackInfoBase&#x3C;T> {\\n public:\\n  ReturnValue&#x3C;T> GetReturnValue() const;\\n  v8::Isolate* GetIsolate() const;\\n  v8::Local&#x3C;v8::Value> Data() const;\\n  v8::Local&#x3C;v8::Object> This() const;\\n  v8::Local&#x3C;v8::Object> Holder() const;\\n};\\n</code></pre>\\n<p>See the <a href=\\\"https://v8docs.nodesource.com/node-8.0/d7/dc5/classv8_1_1_property_callback_info.html\\\"><code>v8::PropertyCallbackInfo</code></a> documentation for usage details on these. See <a href=\\\"#api_nan_return_value\\\"><code>Nan::ReturnValue</code></a> for further information on how to set a return value from property accessor methods.</p>\\n<p><a name=\\\"api_nan_return_value\\\"></a></p>\\n<h3>Nan::ReturnValue</h3>\\n<p><code>Nan::ReturnValue</code> is used in place of <a href=\\\"https://v8docs.nodesource.com/node-8.0/da/da7/classv8_1_1_return_value.html\\\"><code>v8::ReturnValue</code></a> on both <a href=\\\"#api_nan_function_callback_info\\\"><code>Nan::FunctionCallbackInfo</code></a> and <a href=\\\"#api_nan_property_callback_info\\\"><code>Nan::PropertyCallbackInfo</code></a> as the return type of <code>GetReturnValue()</code>.</p>\\n<p>Example usage:</p>\\n<pre><code class=\\\"language-c++\\\">void EmptyArray(const Nan::FunctionCallbackInfo&#x3C;v8::Value>&#x26; info) {\\n  info.GetReturnValue().Set(Nan::New&#x3C;v8::Array>());\\n}\\n</code></pre>\\n<p>Definition:</p>\\n<pre><code class=\\\"language-c++\\\">template&#x3C;typename T> class ReturnValue {\\n public:\\n  // Handle setters\\n  template &#x3C;typename S> void Set(const v8::Local&#x3C;S> &#x26;handle);\\n  template &#x3C;typename S> void Set(const Nan::Global&#x3C;S> &#x26;handle);\\n\\n  // Fast primitive setters\\n  void Set(bool value);\\n  void Set(double i);\\n  void Set(int32_t i);\\n  void Set(uint32_t i);\\n\\n  // Fast JS primitive setters\\n  void SetNull();\\n  void SetUndefined();\\n  void SetEmptyString();\\n\\n  // Convenience getter for isolate\\n  v8::Isolate *GetIsolate() const;\\n};\\n</code></pre>\\n<p>See the documentation on <a href=\\\"https://v8docs.nodesource.com/node-8.0/da/da7/classv8_1_1_return_value.html\\\"><code>v8::ReturnValue</code></a> for further information on this.</p>\\n<p><a name=\\\"api_nan_method\\\"></a></p>\\n<h3>Method declaration</h3>\\n<p>JavaScript-accessible methods should be declared with the following signature to form a <code>Nan::FunctionCallback</code>:</p>\\n<pre><code class=\\\"language-c++\\\">typedef void(*FunctionCallback)(const FunctionCallbackInfo&#x3C;v8::Value>&#x26;);\\n</code></pre>\\n<p>Example:</p>\\n<pre><code class=\\\"language-c++\\\">void MethodName(const Nan::FunctionCallbackInfo&#x3C;v8::Value>&#x26; info) {\\n  ...\\n}\\n</code></pre>\\n<p>You do not need to declare a new <code>HandleScope</code> within a method as one is implicitly created for you.</p>\\n<p><strong>Example usage</strong></p>\\n<pre><code class=\\\"language-c++\\\">// .h:\\nclass Foo : public Nan::ObjectWrap {\\n  ...\\n\\n  static void Bar(const Nan::FunctionCallbackInfo&#x3C;v8::Value>&#x26; info);\\n  static void Baz(const Nan::FunctionCallbackInfo&#x3C;v8::Value>&#x26; info);\\n}\\n\\n\\n// .cc:\\nvoid Foo::Bar(const Nan::FunctionCallbackInfo&#x3C;v8::Value>&#x26; info) {\\n  ...\\n}\\n\\nvoid Foo::Baz(const Nan::FunctionCallbackInfo&#x3C;v8::Value>&#x26; info) {\\n  ...\\n}\\n</code></pre>\\n<p>A helper macro <code>NAN_METHOD(methodname)</code> exists, compatible with NAN v1 method declarations.</p>\\n<p><strong>Example usage with <code>NAN_METHOD(methodname)</code></strong></p>\\n<pre><code class=\\\"language-c++\\\">// .h:\\nclass Foo : public Nan::ObjectWrap {\\n  ...\\n\\n  static NAN_METHOD(Bar);\\n  static NAN_METHOD(Baz);\\n}\\n\\n\\n// .cc:\\nNAN_METHOD(Foo::Bar) {\\n  ...\\n}\\n\\nNAN_METHOD(Foo::Baz) {\\n  ...\\n}\\n</code></pre>\\n<p>Use <a href=\\\"#api_nan_set_prototype_method\\\"><code>Nan::SetPrototypeMethod</code></a> to attach a method to a JavaScript function prototype or <a href=\\\"#api_nan_set_method\\\"><code>Nan::SetMethod</code></a> to attach a method directly on a JavaScript object.</p>\\n<p><a name=\\\"api_nan_getter\\\"></a></p>\\n<h3>Getter declaration</h3>\\n<p>JavaScript-accessible getters should be declared with the following signature to form a <code>Nan::GetterCallback</code>:</p>\\n<pre><code class=\\\"language-c++\\\">typedef void(*GetterCallback)(v8::Local&#x3C;v8::String>,\\n                              const PropertyCallbackInfo&#x3C;v8::Value>&#x26;);\\n</code></pre>\\n<p>Example:</p>\\n<pre><code class=\\\"language-c++\\\">void GetterName(v8::Local&#x3C;v8::String> property,\\n                const Nan::PropertyCallbackInfo&#x3C;v8::Value>&#x26; info) {\\n  ...\\n}\\n</code></pre>\\n<p>You do not need to declare a new <code>HandleScope</code> within a getter as one is implicitly created for you.</p>\\n<p>A helper macro <code>NAN_GETTER(methodname)</code> exists, compatible with NAN v1 method declarations.</p>\\n<p>Also see the V8 Embedders Guide documentation on <a href=\\\"https://developers.google.com/v8/embed#accesssors\\\">Accessors</a>.</p>\\n<p><a name=\\\"api_nan_setter\\\"></a></p>\\n<h3>Setter declaration</h3>\\n<p>JavaScript-accessible setters should be declared with the following signature to form a <b><code>Nan::SetterCallback</code></b>:</p>\\n<pre><code class=\\\"language-c++\\\">typedef void(*SetterCallback)(v8::Local&#x3C;v8::String>,\\n                              v8::Local&#x3C;v8::Value>,\\n                              const PropertyCallbackInfo&#x3C;void>&#x26;);\\n</code></pre>\\n<p>Example:</p>\\n<pre><code class=\\\"language-c++\\\">void SetterName(v8::Local&#x3C;v8::String> property,\\n                v8::Local&#x3C;v8::Value> value,\\n                const Nan::PropertyCallbackInfo&#x3C;void>&#x26; info) {\\n  ...\\n}\\n</code></pre>\\n<p>You do not need to declare a new <code>HandleScope</code> within a setter as one is implicitly created for you.</p>\\n<p>A helper macro <code>NAN_SETTER(methodname)</code> exists, compatible with NAN v1 method declarations.</p>\\n<p>Also see the V8 Embedders Guide documentation on <a href=\\\"https://developers.google.com/v8/embed#accesssors\\\">Accessors</a>.</p>\\n<p><a name=\\\"api_nan_property_getter\\\"></a></p>\\n<h3>Property getter declaration</h3>\\n<p>JavaScript-accessible property getters should be declared with the following signature to form a <b><code>Nan::PropertyGetterCallback</code></b>:</p>\\n<pre><code class=\\\"language-c++\\\">typedef void(*PropertyGetterCallback)(v8::Local&#x3C;v8::String>,\\n                                      const PropertyCallbackInfo&#x3C;v8::Value>&#x26;);\\n</code></pre>\\n<p>Example:</p>\\n<pre><code class=\\\"language-c++\\\">void PropertyGetterName(v8::Local&#x3C;v8::String> property,\\n                        const Nan::PropertyCallbackInfo&#x3C;v8::Value>&#x26; info) {\\n  ...\\n}\\n</code></pre>\\n<p>You do not need to declare a new <code>HandleScope</code> within a property getter as one is implicitly created for you.</p>\\n<p>A helper macro <code>NAN_PROPERTY_GETTER(methodname)</code> exists, compatible with NAN v1 method declarations.</p>\\n<p>Also see the V8 Embedders Guide documentation on named property <a href=\\\"https://developers.google.com/v8/embed#interceptors\\\">Interceptors</a>.</p>\\n<p><a name=\\\"api_nan_property_setter\\\"></a></p>\\n<h3>Property setter declaration</h3>\\n<p>JavaScript-accessible property setters should be declared with the following signature to form a <b><code>Nan::PropertySetterCallback</code></b>:</p>\\n<pre><code class=\\\"language-c++\\\">typedef void(*PropertySetterCallback)(v8::Local&#x3C;v8::String>,\\n                                      v8::Local&#x3C;v8::Value>,\\n                                      const PropertyCallbackInfo&#x3C;v8::Value>&#x26;);\\n</code></pre>\\n<p>Example:</p>\\n<pre><code class=\\\"language-c++\\\">void PropertySetterName(v8::Local&#x3C;v8::String> property,\\n                        v8::Local&#x3C;v8::Value> value,\\n                        const Nan::PropertyCallbackInfo&#x3C;v8::Value>&#x26; info);\\n</code></pre>\\n<p>You do not need to declare a new <code>HandleScope</code> within a property setter as one is implicitly created for you.</p>\\n<p>A helper macro <code>NAN_PROPERTY_SETTER(methodname)</code> exists, compatible with NAN v1 method declarations.</p>\\n<p>Also see the V8 Embedders Guide documentation on named property <a href=\\\"https://developers.google.com/v8/embed#interceptors\\\">Interceptors</a>.</p>\\n<p><a name=\\\"api_nan_property_enumerator\\\"></a></p>\\n<h3>Property enumerator declaration</h3>\\n<p>JavaScript-accessible property enumerators should be declared with the following signature to form a <b><code>Nan::PropertyEnumeratorCallback</code></b>:</p>\\n<pre><code class=\\\"language-c++\\\">typedef void(*PropertyEnumeratorCallback)(const PropertyCallbackInfo&#x3C;v8::Array>&#x26;);\\n</code></pre>\\n<p>Example:</p>\\n<pre><code class=\\\"language-c++\\\">void PropertyEnumeratorName(const Nan::PropertyCallbackInfo&#x3C;v8::Array>&#x26; info);\\n</code></pre>\\n<p>You do not need to declare a new <code>HandleScope</code> within a property enumerator as one is implicitly created for you.</p>\\n<p>A helper macro <code>NAN_PROPERTY_ENUMERATOR(methodname)</code> exists, compatible with NAN v1 method declarations.</p>\\n<p>Also see the V8 Embedders Guide documentation on named property <a href=\\\"https://developers.google.com/v8/embed#interceptors\\\">Interceptors</a>.</p>\\n<p><a name=\\\"api_nan_property_deleter\\\"></a></p>\\n<h3>Property deleter declaration</h3>\\n<p>JavaScript-accessible property deleters should be declared with the following signature to form a <b><code>Nan::PropertyDeleterCallback</code></b>:</p>\\n<pre><code class=\\\"language-c++\\\">typedef void(*PropertyDeleterCallback)(v8::Local&#x3C;v8::String>,\\n                                       const PropertyCallbackInfo&#x3C;v8::Boolean>&#x26;);\\n</code></pre>\\n<p>Example:</p>\\n<pre><code class=\\\"language-c++\\\">void PropertyDeleterName(v8::Local&#x3C;v8::String> property,\\n                         const Nan::PropertyCallbackInfo&#x3C;v8::Boolean>&#x26; info);\\n</code></pre>\\n<p>You do not need to declare a new <code>HandleScope</code> within a property deleter as one is implicitly created for you.</p>\\n<p>A helper macro <code>NAN_PROPERTY_DELETER(methodname)</code> exists, compatible with NAN v1 method declarations.</p>\\n<p>Also see the V8 Embedders Guide documentation on named property <a href=\\\"https://developers.google.com/v8/embed#interceptors\\\">Interceptors</a>.</p>\\n<p><a name=\\\"api_nan_property_query\\\"></a></p>\\n<h3>Property query declaration</h3>\\n<p>JavaScript-accessible property query methods should be declared with the following signature to form a <b><code>Nan::PropertyQueryCallback</code></b>:</p>\\n<pre><code class=\\\"language-c++\\\">typedef void(*PropertyQueryCallback)(v8::Local&#x3C;v8::String>,\\n                                     const PropertyCallbackInfo&#x3C;v8::Integer>&#x26;);\\n</code></pre>\\n<p>Example:</p>\\n<pre><code class=\\\"language-c++\\\">void PropertyQueryName(v8::Local&#x3C;v8::String> property,\\n                       const Nan::PropertyCallbackInfo&#x3C;v8::Integer>&#x26; info);\\n</code></pre>\\n<p>You do not need to declare a new <code>HandleScope</code> within a property query method as one is implicitly created for you.</p>\\n<p>A helper macro <code>NAN_PROPERTY_QUERY(methodname)</code> exists, compatible with NAN v1 method declarations.</p>\\n<p>Also see the V8 Embedders Guide documentation on named property <a href=\\\"https://developers.google.com/v8/embed#interceptors\\\">Interceptors</a>.</p>\\n<p><a name=\\\"api_nan_index_getter\\\"></a></p>\\n<h3>Index getter declaration</h3>\\n<p>JavaScript-accessible index getter methods should be declared with the following signature to form a <b><code>Nan::IndexGetterCallback</code></b>:</p>\\n<pre><code class=\\\"language-c++\\\">typedef void(*IndexGetterCallback)(uint32_t,\\n                                   const PropertyCallbackInfo&#x3C;v8::Value>&#x26;);\\n</code></pre>\\n<p>Example:</p>\\n<pre><code class=\\\"language-c++\\\">void IndexGetterName(uint32_t index, const PropertyCallbackInfo&#x3C;v8::Value>&#x26; info);\\n</code></pre>\\n<p>You do not need to declare a new <code>HandleScope</code> within a index getter as one is implicitly created for you.</p>\\n<p>A helper macro <code>NAN_INDEX_GETTER(methodname)</code> exists, compatible with NAN v1 method declarations.</p>\\n<p>Also see the V8 Embedders Guide documentation on indexed property <a href=\\\"https://developers.google.com/v8/embed#interceptors\\\">Interceptors</a>.</p>\\n<p><a name=\\\"api_nan_index_setter\\\"></a></p>\\n<h3>Index setter declaration</h3>\\n<p>JavaScript-accessible index setter methods should be declared with the following signature to form a <b><code>Nan::IndexSetterCallback</code></b>:</p>\\n<pre><code class=\\\"language-c++\\\">typedef void(*IndexSetterCallback)(uint32_t,\\n                                   v8::Local&#x3C;v8::Value>,\\n                                   const PropertyCallbackInfo&#x3C;v8::Value>&#x26;);\\n</code></pre>\\n<p>Example:</p>\\n<pre><code class=\\\"language-c++\\\">void IndexSetterName(uint32_t index,\\n                     v8::Local&#x3C;v8::Value> value,\\n                     const PropertyCallbackInfo&#x3C;v8::Value>&#x26; info);\\n</code></pre>\\n<p>You do not need to declare a new <code>HandleScope</code> within a index setter as one is implicitly created for you.</p>\\n<p>A helper macro <code>NAN_INDEX_SETTER(methodname)</code> exists, compatible with NAN v1 method declarations.</p>\\n<p>Also see the V8 Embedders Guide documentation on indexed property <a href=\\\"https://developers.google.com/v8/embed#interceptors\\\">Interceptors</a>.</p>\\n<p><a name=\\\"api_nan_index_enumerator\\\"></a></p>\\n<h3>Index enumerator declaration</h3>\\n<p>JavaScript-accessible index enumerator methods should be declared with the following signature to form a <b><code>Nan::IndexEnumeratorCallback</code></b>:</p>\\n<pre><code class=\\\"language-c++\\\">typedef void(*IndexEnumeratorCallback)(const PropertyCallbackInfo&#x3C;v8::Array>&#x26;);\\n</code></pre>\\n<p>Example:</p>\\n<pre><code class=\\\"language-c++\\\">void IndexEnumeratorName(const PropertyCallbackInfo&#x3C;v8::Array>&#x26; info);\\n</code></pre>\\n<p>You do not need to declare a new <code>HandleScope</code> within a index enumerator as one is implicitly created for you.</p>\\n<p>A helper macro <code>NAN_INDEX_ENUMERATOR(methodname)</code> exists, compatible with NAN v1 method declarations.</p>\\n<p>Also see the V8 Embedders Guide documentation on indexed property <a href=\\\"https://developers.google.com/v8/embed#interceptors\\\">Interceptors</a>.</p>\\n<p><a name=\\\"api_nan_index_deleter\\\"></a></p>\\n<h3>Index deleter declaration</h3>\\n<p>JavaScript-accessible index deleter methods should be declared with the following signature to form a <b><code>Nan::IndexDeleterCallback</code></b>:</p>\\n<pre><code class=\\\"language-c++\\\">typedef void(*IndexDeleterCallback)(uint32_t,\\n                                    const PropertyCallbackInfo&#x3C;v8::Boolean>&#x26;);\\n</code></pre>\\n<p>Example:</p>\\n<pre><code class=\\\"language-c++\\\">void IndexDeleterName(uint32_t index, const PropertyCallbackInfo&#x3C;v8::Boolean>&#x26; info);\\n</code></pre>\\n<p>You do not need to declare a new <code>HandleScope</code> within a index deleter as one is implicitly created for you.</p>\\n<p>A helper macro <code>NAN_INDEX_DELETER(methodname)</code> exists, compatible with NAN v1 method declarations.</p>\\n<p>Also see the V8 Embedders Guide documentation on indexed property <a href=\\\"https://developers.google.com/v8/embed#interceptors\\\">Interceptors</a>.</p>\\n<p><a name=\\\"api_nan_index_query\\\"></a></p>\\n<h3>Index query declaration</h3>\\n<p>JavaScript-accessible index query methods should be declared with the following signature to form a <b><code>Nan::IndexQueryCallback</code></b>:</p>\\n<pre><code class=\\\"language-c++\\\">typedef void(*IndexQueryCallback)(uint32_t,\\n                                  const PropertyCallbackInfo&#x3C;v8::Integer>&#x26;);\\n</code></pre>\\n<p>Example:</p>\\n<pre><code class=\\\"language-c++\\\">void IndexQueryName(uint32_t index, const PropertyCallbackInfo&#x3C;v8::Integer>&#x26; info);\\n</code></pre>\\n<p>You do not need to declare a new <code>HandleScope</code> within a index query method as one is implicitly created for you.</p>\\n<p>A helper macro <code>NAN_INDEX_QUERY(methodname)</code> exists, compatible with NAN v1 method declarations.</p>\\n<p>Also see the V8 Embedders Guide documentation on indexed property <a href=\\\"https://developers.google.com/v8/embed#interceptors\\\">Interceptors</a>.</p>\\n<p><a name=\\\"api_nan_set_method\\\"></a></p>\\n<h3>Nan::SetMethod()</h3>\\n<p>Sets a method with a given name directly on a JavaScript object where the method has the <code>Nan::FunctionCallback</code> signature (see <a href=\\\"#api_nan_method\\\">Method declaration</a>).</p>\\n<p>Signature:</p>\\n<pre><code class=\\\"language-c++\\\">void Nan::SetMethod(v8::Local&#x3C;v8::Object> recv,\\n                    const char *name,\\n                    Nan::FunctionCallback callback)\\nvoid Nan::SetMethod(v8::Local&#x3C;v8::Template> templ,\\n                    const char *name,\\n                    Nan::FunctionCallback callback)\\n</code></pre>\\n<p><a name=\\\"api_nan_set_prototype_method\\\"></a></p>\\n<h3>Nan::SetPrototypeMethod()</h3>\\n<p>Sets a method with a given name on a <code>FunctionTemplate</code>'s prototype where the method has the <code>Nan::FunctionCallback</code> signature (see <a href=\\\"#api_nan_method\\\">Method declaration</a>).</p>\\n<p>Signature:</p>\\n<pre><code class=\\\"language-c++\\\">void Nan::SetPrototypeMethod(v8::Local&#x3C;v8::FunctionTemplate> recv,\\n                             const char* name,\\n                             Nan::FunctionCallback callback)\\n</code></pre>\\n<p><a name=\\\"api_nan_set_accessor\\\"></a></p>\\n<h3>Nan::SetAccessor()</h3>\\n<p>Sets getters and setters for a property with a given name on an <code>ObjectTemplate</code> or a plain <code>Object</code>. Accepts getters with the <code>Nan::GetterCallback</code> signature (see <a href=\\\"#api_nan_getter\\\">Getter declaration</a>) and setters with the <code>Nan::SetterCallback</code> signature (see <a href=\\\"#api_nan_setter\\\">Setter declaration</a>).</p>\\n<p>Signature:</p>\\n<pre><code class=\\\"language-c++\\\">void SetAccessor(v8::Local&#x3C;v8::ObjectTemplate> tpl,\\n                 v8::Local&#x3C;v8::String> name,\\n                 Nan::GetterCallback getter,\\n                 Nan::SetterCallback setter = 0,\\n                 v8::Local&#x3C;v8::Value> data = v8::Local&#x3C;v8::Value>(),\\n                 v8::AccessControl settings = v8::DEFAULT,\\n                 v8::PropertyAttribute attribute = v8::None,\\n                 imp::Sig signature = imp::Sig());\\nbool SetAccessor(v8::Local&#x3C;v8::Object> obj,\\n                 v8::Local&#x3C;v8::String> name,\\n                 Nan::GetterCallback getter,\\n                 Nan::SetterCallback setter = 0,\\n                 v8::Local&#x3C;v8::Value> data = v8::Local&#x3C;v8::Value>(),\\n                 v8::AccessControl settings = v8::DEFAULT,\\n                 v8::PropertyAttribute attribute = v8::None)\\n</code></pre>\\n<p>See the V8 <a href=\\\"https://v8docs.nodesource.com/node-8.0/db/d5f/classv8_1_1_object_template.html#aca0ed196f8a9adb1f68b1aadb6c9cd77\\\"><code>ObjectTemplate#SetAccessor()</code></a> and <a href=\\\"https://v8docs.nodesource.com/node-8.0/db/d85/classv8_1_1_object.html#a3f9dee085f5ec346465f1dc924325043\\\"><code>Object#SetAccessor()</code></a> for further information about how to use <code>Nan::SetAccessor()</code>.</p>\\n<p><a name=\\\"api_nan_set_named_property_handler\\\"></a></p>\\n<h3>Nan::SetNamedPropertyHandler()</h3>\\n<p>Sets named property getters, setters, query, deleter and enumerator methods on an <code>ObjectTemplate</code>. Accepts:</p>\\n<ul>\\n<li>Property getters with the <code>Nan::PropertyGetterCallback</code> signature (see <a href=\\\"#api_nan_property_getter\\\">Property getter declaration</a>)</li>\\n<li>Property setters with the <code>Nan::PropertySetterCallback</code> signature (see <a href=\\\"#api_nan_property_setter\\\">Property setter declaration</a>)</li>\\n<li>Property query methods with the <code>Nan::PropertyQueryCallback</code> signature (see <a href=\\\"#api_nan_property_query\\\">Property query declaration</a>)</li>\\n<li>Property deleters with the <code>Nan::PropertyDeleterCallback</code> signature (see <a href=\\\"#api_nan_property_deleter\\\">Property deleter declaration</a>)</li>\\n<li>Property enumerators with the <code>Nan::PropertyEnumeratorCallback</code> signature (see <a href=\\\"#api_nan_property_enumerator\\\">Property enumerator declaration</a>)</li>\\n</ul>\\n<p>Signature:</p>\\n<pre><code class=\\\"language-c++\\\">void SetNamedPropertyHandler(v8::Local&#x3C;v8::ObjectTemplate> tpl,\\n                             Nan::PropertyGetterCallback getter,\\n                             Nan::PropertySetterCallback setter = 0,\\n                             Nan::PropertyQueryCallback query = 0,\\n                             Nan::PropertyDeleterCallback deleter = 0,\\n                             Nan::PropertyEnumeratorCallback enumerator = 0,\\n                             v8::Local&#x3C;v8::Value> data = v8::Local&#x3C;v8::Value>())\\n</code></pre>\\n<p>See the V8 <a href=\\\"https://v8docs.nodesource.com/io.js-3.3/db/d5f/classv8_1_1_object_template.html#a34d1cc45b642cd131706663801aadd76\\\"><code>ObjectTemplate#SetNamedPropertyHandler()</code></a> for further information about how to use <code>Nan::SetNamedPropertyHandler()</code>.</p>\\n<p><a name=\\\"api_nan_set_indexed_property_handler\\\"></a></p>\\n<h3>Nan::SetIndexedPropertyHandler()</h3>\\n<p>Sets indexed property getters, setters, query, deleter and enumerator methods on an <code>ObjectTemplate</code>. Accepts:</p>\\n<ul>\\n<li>Indexed property getters with the <code>Nan::IndexGetterCallback</code> signature (see <a href=\\\"#api_nan_index_getter\\\">Index getter declaration</a>)</li>\\n<li>Indexed property setters with the <code>Nan::IndexSetterCallback</code> signature (see <a href=\\\"#api_nan_index_setter\\\">Index setter declaration</a>)</li>\\n<li>Indexed property query methods with the <code>Nan::IndexQueryCallback</code> signature (see <a href=\\\"#api_nan_index_query\\\">Index query declaration</a>)</li>\\n<li>Indexed property deleters with the <code>Nan::IndexDeleterCallback</code> signature (see <a href=\\\"#api_nan_index_deleter\\\">Index deleter declaration</a>)</li>\\n<li>Indexed property enumerators with the <code>Nan::IndexEnumeratorCallback</code> signature (see <a href=\\\"#api_nan_index_enumerator\\\">Index enumerator declaration</a>)</li>\\n</ul>\\n<p>Signature:</p>\\n<pre><code class=\\\"language-c++\\\">void SetIndexedPropertyHandler(v8::Local&#x3C;v8::ObjectTemplate> tpl,\\n                               Nan::IndexGetterCallback getter,\\n                               Nan::IndexSetterCallback setter = 0,\\n                               Nan::IndexQueryCallback query = 0,\\n                               Nan::IndexDeleterCallback deleter = 0,\\n                               Nan::IndexEnumeratorCallback enumerator = 0,\\n                               v8::Local&#x3C;v8::Value> data = v8::Local&#x3C;v8::Value>())\\n</code></pre>\\n<p>See the V8 <a href=\\\"https://v8docs.nodesource.com/node-8.0/db/d5f/classv8_1_1_object_template.html#ac89f06d634add0e890452033f7d17ff1\\\"><code>ObjectTemplate#SetIndexedPropertyHandler()</code></a> for further information about how to use <code>Nan::SetIndexedPropertyHandler()</code>.</p>\\n<p><a name=\\\"api_nan_set_template\\\"></a></p>\\n<h3>Nan::SetTemplate()</h3>\\n<p>Adds properties on an <code>Object</code>'s or <code>Function</code>'s template.</p>\\n<p>Signature:</p>\\n<pre><code class=\\\"language-c++\\\">void Nan::SetTemplate(v8::Local&#x3C;v8::Template> templ,\\n                      const char *name,\\n                      v8::Local&#x3C;v8::Data> value);\\nvoid Nan::SetTemplate(v8::Local&#x3C;v8::Template> templ,\\n                      v8::Local&#x3C;v8::String> name,\\n                      v8::Local&#x3C;v8::Data> value,\\n                      v8::PropertyAttribute attributes)\\n</code></pre>\\n<p>Calls the <code>Template</code>'s <a href=\\\"https://v8docs.nodesource.com/node-8.0/db/df7/classv8_1_1_template.html#ae3fbaff137557aa6a0233bc7e52214ac\\\"><code>Set()</code></a>.</p>\\n<p><a name=\\\"api_nan_set_prototype_template\\\"></a></p>\\n<h3>Nan::SetPrototypeTemplate()</h3>\\n<p>Adds properties on an <code>Object</code>'s or <code>Function</code>'s prototype template.</p>\\n<p>Signature:</p>\\n<pre><code class=\\\"language-c++\\\">void Nan::SetPrototypeTemplate(v8::Local&#x3C;v8::FunctionTemplate> templ,\\n                               const char *name,\\n                               v8::Local&#x3C;v8::Data> value);\\nvoid Nan::SetPrototypeTemplate(v8::Local&#x3C;v8::FunctionTemplate> templ,\\n                               v8::Local&#x3C;v8::String> name,\\n                               v8::Local&#x3C;v8::Data> value,\\n                               v8::PropertyAttribute attributes)\\n</code></pre>\\n<p>Calls the <code>FunctionTemplate</code>'s <em>PrototypeTemplate's</em> <a href=\\\"https://v8docs.nodesource.com/io.js-3.3/db/df7/classv8_1_1_template.html#a2db6a56597bf23c59659c0659e564ddf\\\"><code>Set()</code></a>.</p>\\n<p><a name=\\\"api_nan_set_instance_template\\\"></a></p>\\n<h3>Nan::SetInstanceTemplate()</h3>\\n<p>Use to add instance properties on <code>FunctionTemplate</code>'s.</p>\\n<p>Signature:</p>\\n<pre><code class=\\\"language-c++\\\">void Nan::SetInstanceTemplate(v8::Local&#x3C;v8::FunctionTemplate> templ,\\n                              const char *name,\\n                              v8::Local&#x3C;v8::Data> value);\\nvoid Nan::SetInstanceTemplate(v8::Local&#x3C;v8::FunctionTemplate> templ,\\n                              v8::Local&#x3C;v8::String> name,\\n                              v8::Local&#x3C;v8::Data> value,\\n                              v8::PropertyAttribute attributes)\\n</code></pre>\\n<p>Calls the <code>FunctionTemplate</code>'s <em>InstanceTemplate's</em> <a href=\\\"https://v8docs.nodesource.com/io.js-3.3/db/df7/classv8_1_1_template.html#a2db6a56597bf23c59659c0659e564ddf\\\"><code>Set()</code></a>.</p>\\n<p><a name=\\\"api_nan_set_call_handler\\\"></a></p>\\n<h3>Nan::SetCallHandler()</h3>\\n<p>Set the call-handler callback for a <code>v8::FunctionTemplate</code>.\\nThis callback is called whenever the function created from this FunctionTemplate is called.</p>\\n<p>Signature:</p>\\n<pre><code class=\\\"language-c++\\\">void Nan::SetCallHandler(v8::Local&#x3C;v8::FunctionTemplate> templ, Nan::FunctionCallback callback, v8::Local&#x3C;v8::Value> data = v8::Local&#x3C;v8::Value>())\\n</code></pre>\\n<p>Calls the <code>FunctionTemplate</code>'s <a href=\\\"https://v8docs.nodesource.com/node-8.0/d8/d83/classv8_1_1_function_template.html#a2d3845db66392074c5a018a66efbfada\\\"><code>SetCallHandler()</code></a>.</p>\\n<p><a name=\\\"api_nan_set_call_as_function_handler\\\"></a></p>\\n<h3>Nan::SetCallAsFunctionHandler()</h3>\\n<p>Sets the callback to be used when calling instances created from the <code>v8::ObjectTemplate</code> as a function.\\nIf no callback is set, instances behave like normal JavaScript objects that cannot be called as a function.</p>\\n<p>Signature:</p>\\n<pre><code class=\\\"language-c++\\\">void Nan::SetCallAsFunctionHandler(v8::Local&#x3C;v8::ObjectTemplate> templ, Nan::FunctionCallback callback, v8::Local&#x3C;v8::Value> data = v8::Local&#x3C;v8::Value>())\\n</code></pre>\\n<p>Calls the <code>ObjectTemplate</code>'s <a href=\\\"https://v8docs.nodesource.com/node-8.0/db/d5f/classv8_1_1_object_template.html#a5e9612fc80bf6db8f2da199b9b0bd04e\\\"><code>SetCallAsFunctionHandler()</code></a>.</p>\",\"docPath\":\"argo-ci/node_modules/nan/doc/methods\",\"proj\":\"argo-ci\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/docs-argo-ci-node-modules-nan-doc-methods-html.json\n// module id = 2910\n// module chunks = 60808732868736"],"sourceRoot":""}