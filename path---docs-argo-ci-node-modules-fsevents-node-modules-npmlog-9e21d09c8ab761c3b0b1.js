webpackJsonp([32346910650244],{2530:function(e,o){e.exports={pathContext:{docHtml:'<h1>npmlog</h1>\n<p>The logger util that npm uses.</p>\n<p>This logger is very basic.  It does the logging for npm.  It supports\ncustom levels and colored output.</p>\n<p>By default, logs are written to stderr.  If you want to send log messages\nto outputs other than streams, then you can change the <code>log.stream</code>\nmember, or you can just listen to the events that it emits, and do\nwhatever you want with them.</p>\n<h1>Installation</h1>\n<pre><code class="language-console">npm install npmlog --save\n</code></pre>\n<h1>Basic Usage</h1>\n<pre><code class="language-javascript">var log = require(\'npmlog\')\n\n// additional stuff ---------------------------+\n// message ----------+                         |\n// prefix ----+      |                         |\n// level -+   |      |                         |\n//        v   v      v                         v\n    log.info(\'fyi\', \'I have a kitty cat: %j\', myKittyCat)\n</code></pre>\n<h2>log.level</h2>\n<ul>\n<li>{String}</li>\n</ul>\n<p>The level to display logs at.  Any logs at or above this level will be\ndisplayed.  The special level <code>silent</code> will prevent anything from being\ndisplayed ever.</p>\n<h2>log.record</h2>\n<ul>\n<li>{Array}</li>\n</ul>\n<p>An array of all the log messages that have been entered.</p>\n<h2>log.maxRecordSize</h2>\n<ul>\n<li>{Number}</li>\n</ul>\n<p>The maximum number of records to keep.  If log.record gets bigger than\n10% over this value, then it is sliced down to 90% of this value.</p>\n<p>The reason for the 10% window is so that it doesn\'t have to resize a\nlarge array on every log entry.</p>\n<h2>log.prefixStyle</h2>\n<ul>\n<li>{Object}</li>\n</ul>\n<p>A style object that specifies how prefixes are styled.  (See below)</p>\n<h2>log.headingStyle</h2>\n<ul>\n<li>{Object}</li>\n</ul>\n<p>A style object that specifies how the heading is styled.  (See below)</p>\n<h2>log.heading</h2>\n<ul>\n<li>{String} Default: ""</li>\n</ul>\n<p>If set, a heading that is printed at the start of every line.</p>\n<h2>log.stream</h2>\n<ul>\n<li>{Stream} Default: <code>process.stderr</code></li>\n</ul>\n<p>The stream where output is written.</p>\n<h2>log.enableColor()</h2>\n<p>Force colors to be used on all messages, regardless of the output\nstream.</p>\n<h2>log.disableColor()</h2>\n<p>Disable colors on all messages.</p>\n<h2>log.enableProgress()</h2>\n<p>Enable the display of log activity spinner and progress bar</p>\n<h2>log.disableProgress()</h2>\n<p>Disable the display of a progress bar</p>\n<h2>log.enableUnicode()</h2>\n<p>Force the unicode theme to be used for the progress bar.</p>\n<h2>log.disableUnicode()</h2>\n<p>Disable the use of unicode in the progress bar.</p>\n<h2>log.setGaugeTemplate(template)</h2>\n<p>Set a template for outputting the progress bar. See the <a href="https://npmjs.com/package/gauge">gauge documentation</a> for details.</p>\n<h2>log.setGaugeThemeset(themes)</h2>\n<p>Select a themeset to pick themes from for the progress bar. See the <a href="https://npmjs.com/package/gauge">gauge documentation</a> for details.</p>\n<h2>log.pause()</h2>\n<p>Stop emitting messages to the stream, but do not drop them.</p>\n<h2>log.resume()</h2>\n<p>Emit all buffered messages that were written while paused.</p>\n<h2>log.log(level, prefix, message, ...)</h2>\n<ul>\n<li><code>level</code> {String} The level to emit the message at</li>\n<li><code>prefix</code> {String} A string prefix.  Set to "" to skip.</li>\n<li><code>message...</code> Arguments to <code>util.format</code></li>\n</ul>\n<p>Emit a log message at the specified level.</p>\n<h2>log[level](prefix, message, ...)</h2>\n<p>For example,</p>\n<ul>\n<li>log.silly(prefix, message, ...)</li>\n<li>log.verbose(prefix, message, ...)</li>\n<li>log.info(prefix, message, ...)</li>\n<li>log.http(prefix, message, ...)</li>\n<li>log.warn(prefix, message, ...)</li>\n<li>log.error(prefix, message, ...)</li>\n</ul>\n<p>Like <code>log.log(level, prefix, message, ...)</code>.  In this way, each level is\ngiven a shorthand, so you can do <code>log.info(prefix, message)</code>.</p>\n<h2>log.addLevel(level, n, style, disp)</h2>\n<ul>\n<li><code>level</code> {String} Level indicator</li>\n<li><code>n</code> {Number} The numeric level</li>\n<li><code>style</code> {Object} Object with fg, bg, inverse, etc.</li>\n<li><code>disp</code> {String} Optional replacement for <code>level</code> in the output.</li>\n</ul>\n<p>Sets up a new level with a shorthand function and so forth.</p>\n<p>Note that if the number is <code>Infinity</code>, then setting the level to that\nwill cause all log messages to be suppressed.  If the number is\n<code>-Infinity</code>, then the only way to show it is to enable all log messages.</p>\n<h2>log.newItem(name, todo, weight)</h2>\n<ul>\n<li><code>name</code> {String} Optional; progress item name.</li>\n<li><code>todo</code> {Number} Optional; total amount of work to be done. Default 0.</li>\n<li><code>weight</code> {Number} Optional; the weight of this item relative to others. Default 1.</li>\n</ul>\n<p>This adds a new <code>are-we-there-yet</code> item tracker to the progress tracker. The\nobject returned has the <code>log[level]</code> methods but is otherwise an\n<code>are-we-there-yet</code> <code>Tracker</code> object.</p>\n<h2>log.newStream(name, todo, weight)</h2>\n<p>This adds a new <code>are-we-there-yet</code> stream tracker to the progress tracker. The\nobject returned has the <code>log[level]</code> methods but is otherwise an\n<code>are-we-there-yet</code> <code>TrackerStream</code> object.</p>\n<h2>log.newGroup(name, weight)</h2>\n<p>This adds a new <code>are-we-there-yet</code> tracker group to the progress tracker. The\nobject returned has the <code>log[level]</code> methods but is otherwise an\n<code>are-we-there-yet</code> <code>TrackerGroup</code> object.</p>\n<h1>Events</h1>\n<p>Events are all emitted with the message object.</p>\n<ul>\n<li><code>log</code> Emitted for all messages</li>\n<li><code>log.&#x3C;level></code> Emitted for all messages with the <code>&#x3C;level></code> level.</li>\n<li><code>&#x3C;prefix></code> Messages with prefixes also emit their prefix as an event.</li>\n</ul>\n<h1>Style Objects</h1>\n<p>Style objects can have the following fields:</p>\n<ul>\n<li><code>fg</code> {String} Color for the foreground text</li>\n<li><code>bg</code> {String} Color for the background</li>\n<li><code>bold</code>, <code>inverse</code>, <code>underline</code> {Boolean} Set the associated property</li>\n<li><code>bell</code> {Boolean} Make a noise (This is pretty annoying, probably.)</li>\n</ul>\n<h1>Message Objects</h1>\n<p>Every log event is emitted with a message object, and the <code>log.record</code>\nlist contains all of them that have been created.  They have the\nfollowing fields:</p>\n<ul>\n<li><code>id</code> {Number}</li>\n<li><code>level</code> {String}</li>\n<li><code>prefix</code> {String}</li>\n<li><code>message</code> {String} Result of <code>util.format()</code></li>\n<li><code>messageRaw</code> {Array} Arguments to <code>util.format()</code></li>\n</ul>\n<h1>Blocking TTYs</h1>\n<p>We use <a href="https://npmjs.com/package/set-blocking"><code>set-blocking</code></a> to set\nstderr and stdout blocking if they are tty\'s and have the setBlocking call.\nThis is a work around for an issue in early versions of Node.js 6.x, which\nmade stderr and stdout non-blocking on OSX. (They are always blocking\nWindows and were never blocking on Linux.) <code>npmlog</code> needs them to be blocking\nso that it can allow output to stdout and stderr to be interlaced.</p>',docPath:"argo-ci/node_modules/fsevents/node_modules/npmlog/readme",proj:"argo-ci"}}}});
//# sourceMappingURL=path---docs-argo-ci-node-modules-fsevents-node-modules-npmlog-9e21d09c8ab761c3b0b1.js.map