webpackJsonp([8624415055940],{2198:function(e,t){e.exports={pathContext:{docHtml:'<h1>content-type</h1>\n<p><a href="https://npmjs.org/package/content-type"><img src="https://img.shields.io/npm/v/content-type.svg" alt="NPM Version"></a>\n<a href="https://npmjs.org/package/content-type"><img src="https://img.shields.io/npm/dm/content-type.svg" alt="NPM Downloads"></a>\n<a href="http://nodejs.org/download/"><img src="https://img.shields.io/node/v/content-type.svg" alt="Node.js Version"></a>\n<a href="https://travis-ci.org/jshttp/content-type"><img src="https://img.shields.io/travis/jshttp/content-type/master.svg" alt="Build Status"></a>\n<a href="https://coveralls.io/r/jshttp/content-type"><img src="https://img.shields.io/coveralls/jshttp/content-type/master.svg" alt="Test Coverage"></a></p>\n<p>Create and parse HTTP Content-Type header according to RFC 7231</p>\n<h2>Installation</h2>\n<pre><code class="language-sh">$ npm install content-type\n</code></pre>\n<h2>API</h2>\n<pre><code class="language-js">var contentType = require(\'content-type\')\n</code></pre>\n<h3>contentType.parse(string)</h3>\n<pre><code class="language-js">var obj = contentType.parse(\'image/svg+xml; charset=utf-8\')\n</code></pre>\n<p>Parse a content type string. This will return an object with the following\nproperties (examples are shown for the string <code>\'image/svg+xml; charset=utf-8\'</code>):</p>\n<ul>\n<li>\n<p><code>type</code>: The media type (the type and subtype, always lower case).\nExample: <code>\'image/svg+xml\'</code></p>\n</li>\n<li>\n<p><code>parameters</code>: An object of the parameters in the media type (name of parameter\nalways lower case). Example: <code>{charset: \'utf-8\'}</code></p>\n</li>\n</ul>\n<p>Throws a <code>TypeError</code> if the string is missing or invalid.</p>\n<h3>contentType.parse(req)</h3>\n<pre><code class="language-js">var obj = contentType.parse(req)\n</code></pre>\n<p>Parse the <code>content-type</code> header from the given <code>req</code>. Short-cut for\n<code>contentType.parse(req.headers[\'content-type\'])</code>.</p>\n<p>Throws a <code>TypeError</code> if the <code>Content-Type</code> header is missing or invalid.</p>\n<h3>contentType.parse(res)</h3>\n<pre><code class="language-js">var obj = contentType.parse(res)\n</code></pre>\n<p>Parse the <code>content-type</code> header set on the given <code>res</code>. Short-cut for\n<code>contentType.parse(res.getHeader(\'content-type\'))</code>.</p>\n<p>Throws a <code>TypeError</code> if the <code>Content-Type</code> header is missing or invalid.</p>\n<h3>contentType.format(obj)</h3>\n<pre><code class="language-js">var str = contentType.format({type: \'image/svg+xml\'})\n</code></pre>\n<p>Format an object into a content type string. This will return a string of the\ncontent type for the given object with the following properties (examples are\nshown that produce the string <code>\'image/svg+xml; charset=utf-8\'</code>):</p>\n<ul>\n<li>\n<p><code>type</code>: The media type (will be lower-cased). Example: <code>\'image/svg+xml\'</code></p>\n</li>\n<li>\n<p><code>parameters</code>: An object of the parameters in the media type (name of the\nparameter will be lower-cased). Example: <code>{charset: \'utf-8\'}</code></p>\n</li>\n</ul>\n<p>Throws a <code>TypeError</code> if the object contains an invalid type or parameter names.</p>\n<h2>License</h2>\n<p><a href="LICENSE">MIT</a></p>',docPath:"argo-ci/node_modules/content-type/readme",proj:"argo-ci"}}}});
//# sourceMappingURL=path---docs-argo-ci-node-modules-content-type-readme-html-a084076825ffd73651a9.js.map