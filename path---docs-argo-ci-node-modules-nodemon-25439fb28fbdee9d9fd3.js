webpackJsonp([0x9d1fd024f258],{2973:function(e,o){e.exports={pathContext:{docHtml:'<p><img src="http://nodemon.io/nodemon.svg" alt="nodemon logo"></p>\n<h1>nodemon</h1>\n<p>For use during development of a node.js based application.</p>\n<p>nodemon will watch the files in the directory in which nodemon was started, and if any files change, nodemon will automatically restart your node application.</p>\n<p>nodemon does <strong>not</strong> require <em>any</em> changes to your code or method of development. nodemon simply wraps your node application and keeps an eye on any files that have changed. Remember that nodemon is a replacement wrapper for <code>node</code>, think of it as replacing the word "node" on the command line when you run your script.</p>\n<p><a href="https://npmjs.org/package/nodemon"><img src="https://badge.fury.io/js/nodemon.svg" alt="NPM version"></a>\n<a href="https://travis-ci.org/remy/nodemon"><img src="https://travis-ci.org/remy/nodemon.svg?branch=master" alt="Travis Status"></a> <a href="#backers"><img src="https://opencollective.com/nodemon/backers/badge.svg" alt="Backers on Open Collective"></a> <a href="#sponsors"><img src="https://opencollective.com/nodemon/sponsors/badge.svg" alt="Sponsors on Open Collective"></a></p>\n<p><a href="https://app.codesponsor.io/link/wnz2te8CdfKZ8wMjGUpi8EZG/remy/nodemon" rel="nofollow" target="_blank"><img src="https://app.codesponsor.io/embed/wnz2te8CdfKZ8wMjGUpi8EZG/remy/nodemon.svg" style="width: 888px; height: 68px;" alt="Sponsor"></a></p>\n<h1>Installation</h1>\n<p>Either through cloning with git or by using <a href="http://npmjs.org">npm</a> (the recommended way):</p>\n<pre><code>npm install -g nodemon\n</code></pre>\n<p>And nodemon will be installed globally to your system path.</p>\n<p>You can also install nodemon as a developement dependency:</p>\n<pre><code>npm install --save-dev nodemon\n</code></pre>\n<p>With a local installation, nodemon will not be available in your system path. Instead, the local installation of nodemon can be run by calling it from within an npm script (such as <code>npm start</code>) or using <code>npx nodemon</code>.</p>\n<h1>Usage</h1>\n<p>nodemon wraps your application, so you can pass all the arguments you would normally pass to your app:</p>\n<pre><code>nodemon [your node app]\n</code></pre>\n<p>For CLI options, use the <code>-h</code> (or <code>--help</code>) argument:</p>\n<pre><code>nodemon -h\n</code></pre>\n<p>Using nodemon is simple, if my application accepted a host and port as the arguments, I would start it as so:</p>\n<pre><code>nodemon ./server.js localhost 8080\n</code></pre>\n<p>Any output from this script is prefixed with <code>[nodemon]</code>, otherwise all output from your application, errors included, will be echoed out as expected.</p>\n<p>If no script is given, nodemon will test for a <code>package.json</code> file and if found, will run the file associated with the <em>main</em> property (<a href="https://github.com/remy/nodemon/issues/14">ref</a>).</p>\n<p>You can also pass the <code>inspect</code> flag to node through the command line as you would normally:</p>\n<pre><code>nodemon --inspect ./server.js 80\n</code></pre>\n<p>If you have a <code>package.json</code> file for your app, you can omit the main script entirely and nodemon will read the <code>package.json</code> for the <code>main</code> property and use that value as the app.</p>\n<p>nodemon will also search for the <code>scripts.start</code> property in <code>package.json</code> (as of nodemon 1.1.x).</p>\n<p>Also check out the <a href="https://github.com/remy/nodemon/blob/master/faq.md">FAQ</a> or <a href="https://github.com/remy/nodemon/issues">issues</a> for nodemon.</p>\n<h2>Automatic re-running</h2>\n<p>nodemon was originally written to restart hanging processes such as web servers, but now supports apps that cleanly exit. If your script exits cleanly, nodemon will continue to monitor the directory (or directories) and restart the script if there are any changes.</p>\n<h2>Manual restarting</h2>\n<p>Whilst nodemon is running, if you need to manually restart your application, instead of stopping and restart nodemon, you can simply type <code>rs</code> with a carriage return, and nodemon will restart your process.</p>\n<h2>Config files</h2>\n<p>nodemon supports local and global configuration files. These are usually named <code>nodemon.json</code> and can be located in the current working directory or in your home directory. An alternative local configuration file can be specified with the <code>--config &#x3C;file></code> option.</p>\n<p>The specificity is as follows, so that a command line argument will always override the config file settings:</p>\n<ul>\n<li>command line arguments</li>\n<li>local config</li>\n<li>global config</li>\n</ul>\n<p>A config file can take any of the command line arguments as JSON key values, for example:</p>\n<pre><code class="language-json">{\n  "verbose": true,\n  "ignore": ["*.test.js", "fixtures/*"],\n  "execMap": {\n    "rb": "ruby",\n    "pde": "processing --sketch={{pwd}} --run"\n  }\n}\n</code></pre>\n<p>The above <code>nodemon.json</code> file might be my global config so that I have support for ruby files and processing files, and I can simply run <code>nodemon demo.pde</code> and nodemon will automatically know how to run the script even though out of the box support for processing scripts.</p>\n<p>A further example of options can be seen in <a href="https://github.com/remy/nodemon/blob/master/doc/sample-nodemon.md">sample-nodemon.md</a></p>\n<h3>package.json</h3>\n<p>If you want to keep all your package configurations in one place, nodemon supports using <code>package.json</code> for configuration.\nSimply specify the config in the same format as you would for a config file but under <code>nodemonConfig</code> in the <code>package.json</code> file, for example, take the following <code>package.json</code>:</p>\n<pre><code class="language-json">{\n  "name": "nodemon",\n  "homepage": "http://nodemon.io",\n  "...": "... other standard package.json values",\n  "nodemonConfig": {\n    "ignore": ["test/*", "docs/*"],\n"delay": "2500"\n  }\n}\n</code></pre>\n<p>Note that if you specify a <code>--config</code> file or provide a local <code>nodemon.json</code> any <code>package.json</code> config is ignored.</p>\n<p><em>This section needs better documentation, but for now you can also see <code>nodemon --help config</code> (<a href="https://github.com/remy/nodemon/blob/master/doc/cli/config.txt">also here</a>)</em>.</p>\n<h2>Using nodemon as a module</h2>\n<p>Please see <a href="doc/requireable.html">doc/requireable.md</a></p>\n<h2>Running non-node scripts</h2>\n<p>nodemon can also be used to execute and monitor other programs. nodemon will read the file extension of the script being run and monitor that extension instead of .js if there\'s no <code>nodemon.json</code>:</p>\n<pre><code>nodemon --exec "python -v" ./app.py\n</code></pre>\n<p>Now nodemon will run <code>app.py</code> with python in verbose mode (note that if you\'re not passing args to the exec program, you don\'t need the quotes), and look for new or modified files with the <code>.py</code> extension.</p>\n<h3>Default executables</h3>\n<p>Using the <code>nodemon.json</code> config file, you can define your own default executables using the <code>execMap</code> property. This is particularly useful if you\'re working with a language that isn\'t supported by default by nodemon.</p>\n<p>To add support for nodemon to know about the .pl extension (for Perl), the nodemon.json file would add:</p>\n<pre><code class="language-json">{\n  "execMap": {\n    "pl": "perl"\n  }\n}\n</code></pre>\n<p>Now running the following, nodemon will know to use <code>perl</code> as the executable:</p>\n<pre><code>nodemon script.pl\n</code></pre>\n<p>It\'s generally recommended to use the global <code>nodemon.json</code> to add your own <code>execMap</code> options. However, if there\'s a common default that\'s missing, this can be merged in to the project so that nodemon supports it by default, by changing <a href="https://github.com/remy/nodemon/blob/master/lib/config/defaults.js">default.js</a> and sending a pull request.</p>\n<h2>Monitoring multiple directories</h2>\n<p>By default nodemon monitors the current working directory. If you want to take control of that option, use the <code>--watch</code> option to add specific paths:</p>\n<pre><code>nodemon --watch app --watch libs app/server.js\n</code></pre>\n<p>Now nodemon will only restart if there are changes in the <code>./app</code> or <code>./libs</code> directory. By default nodemon will traverse sub-directories, so there\'s no need in explicitly including sub-directories.</p>\n<p>Don\'t use unix globbing to pass multiple directories, e.g <code>--watch ./lib/*</code>, it won\'t work. You need a <code>--watch</code> flag per directory watched.</p>\n<h2>Specifying extension watch list</h2>\n<p>By default, nodemon looks for files with the <code>.js</code>, <code>.mjs</code>, <code>.coffee</code>, <code>.litcoffee</code>, and <code>.json</code> extensions. If you use the <code>--exec</code> option and monitor <code>app.py</code> nodemon will monitor files with the extension of <code>.py</code>. However, you can specify your own list with the <code>-e</code> (or <code>--ext</code>) switch like so:</p>\n<pre><code>nodemon -e js,jade\n</code></pre>\n<p>Now nodemon will restart on any changes to files in the directory (or subdirectories) with the extensions .js, .jade.</p>\n<h2>Ignoring files</h2>\n<p>By default, nodemon will only restart when a <code>.js</code> JavaScript file changes. In some cases you will want to ignore some specific files, directories or file patterns, to prevent nodemon from prematurely restarting your application.</p>\n<p>This can be done via the command line:</p>\n<pre><code>nodemon --ignore lib/ --ignore tests/\n</code></pre>\n<p>Or specific files can be ignored:</p>\n<pre><code>nodemon --ignore lib/app.js\n</code></pre>\n<p>Patterns can also be ignored (but be sure to quote the arguments):</p>\n<pre><code>nodemon --ignore \'lib/*.js\'\n</code></pre>\n<p>Note that by default, nodemon will ignore the <code>.git</code>, <code>node_modules</code>, <code>bower_components</code>, <code>.nyc_output</code>, <code>coverage</code> and <code>.sass-cache</code> directories and <em>add</em> your ignored patterns to the list. If you want to indeed watch a directory like <code>node_modules</code>, you need to <a href="https://github.com/remy/nodemon/blob/master/faq.md#overriding-the-underlying-default-ignore-rules">override the underlying default ignore rules</a>.</p>\n<h2>Application isn\'t restarting</h2>\n<p>In some networked environments (such as a container running nodemon reading across a mounted drive), you will need to use the <code>legacyWatch: true</code> which enables Chokidar\'s polling.</p>\n<p>Via the CLI, use either <code>--legacy-watch</code> or <code>-L</code> for short:</p>\n<pre><code>nodemon -L\n</code></pre>\n<p>Though this should be a last resort as it will poll every file it can find.</p>\n<h2>Delaying restarting</h2>\n<p>In some situations, you may want to wait until a number of files have changed. The timeout before checking for new file changes is 1 second. If you\'re uploading a number of files and it\'s taking some number of seconds, this could cause your app to restart multiple times unnecessarily.</p>\n<p>To add an extra throttle, or delay restarting, use the <code>--delay</code> command:</p>\n<pre><code>nodemon --delay 10 server.js\n</code></pre>\n<p>For more precision, milliseconds can be specified.  Either as a float:</p>\n<pre><code>nodemon --delay 2.5 server.js\n</code></pre>\n<p>Or using the time specifier (ms):</p>\n<pre><code>nodemon --delay 2500ms server.js\n</code></pre>\n<p>The delay figure is number of seconds (or milliseconds, if specified) to delay before restarting. So nodemon will only restart your app the given number of seconds after the <em>last</em> file change.</p>\n<p>If you are setting this value in <code>nodemon.json</code>, the value will always be interpretted in milliseconds. E.g., the following are equivalent:</p>\n<pre><code>nodemon --delay 2.5\n\n{\n  "delay": "2500"\n}\n</code></pre>\n<h2>Controlling shutdown of your script</h2>\n<p>nodemon sends a kill signal to your application when it sees a file update. If you need to clean up on shutdown inside your script you can capture the kill signal and handle it yourself.</p>\n<p>The following example will listen once for the <code>SIGUSR2</code> signal (used by nodemon to restart), run the clean up process and then kill itself for nodemon to continue control:</p>\n<pre><code class="language-js">process.once(\'SIGUSR2\', function () {\n  gracefulShutdown(function () {\n    process.kill(process.pid, \'SIGUSR2\');\n  });\n});\n</code></pre>\n<p>Note that the <code>process.kill</code> is <em>only</em> called once your shutdown jobs are complete. Hat tip to <a href="http://www.benjiegillam.com/2011/08/node-js-clean-restart-and-faster-development-with-nodemon/">Benjie Gillam</a> for writing this technique up.</p>\n<h2>Triggering events when nodemon state changes</h2>\n<p>If you want growl like notifications when nodemon restarts or to trigger an action when an event happens, then you can either <code>require</code> nodemon or simply add event actions to your <code>nodemon.json</code> file.</p>\n<p>For example, to trigger a notification on a Mac when nodemon restarts, <code>nodemon.json</code> looks like this:</p>\n<pre><code class="language-json">{\n  "events": {\n    "restart": "osascript -e \'display notification \\"app restarted\\" with title \\"nodemon\\"\'"\n  }\n}\n</code></pre>\n<p>A full list of available events is listed on the <a href="https://github.com/remy/nodemon/wiki/Events#states">event states wiki</a>. Note that you can bind to both states and messages.</p>\n<h2>Pipe output to somewhere else</h2>\n<pre><code class="language-js">nodemon({\n  script: ...,\n  stdout: false // important: this tells nodemon not to output to console\n}).on(\'readable\', function() { // the `readable` event indicates that data is ready to pick up\n  this.stdout.pipe(fs.createWriteStream(\'output.txt\'));\n  this.stderr.pipe(fs.createWriteStream(\'err.txt\'));\n});\n</code></pre>\n<h2>Using nodemon in your gulp workflow</h2>\n<p>Check out the <a href="https://github.com/JacksonGariety/gulp-nodemon">gulp-nodemon</a> plugin to integrate nodemon with the rest of your project\'s gulp workflow.</p>\n<h2>Using nodemon in your Grunt workflow</h2>\n<p>Check out the <a href="https://github.com/ChrisWren/grunt-nodemon">grunt-nodemon</a> plugin to integrate nodemon with the rest of your project\'s grunt workflow.</p>\n<h2>Pronunciation</h2>\n<blockquote>\n<p>nodemon, is it pronounced: node-mon, no-demon or node-e-mon (like pokémon)?</p>\n</blockquote>\n<p>Well...I\'ve been asked this many times before. I like that I\'ve been asked this before. There\'s been bets as to which one it actually is.</p>\n<p>The answer is simple, but possibly frustrating. I\'m not saying (how I pronounce it). It\'s up to you to call it as you like. All answers are correct :)</p>\n<h2>Design principles</h2>\n<ul>\n<li>Less flags is better</li>\n<li>Works across all platforms</li>\n<li>Less features</li>\n<li>Let individuals build on top of nodemon</li>\n<li>Offer all CLI functionality as an API</li>\n<li>Contributions must have and pass tests</li>\n</ul>\n<p>Nodemon is not perfect, and CLI arguments has sprawled beyond where I\'m completely happy, but perhaps it can be reduced a little one day.</p>\n<h2>FAQ</h2>\n<p>See the <a href="https://github.com/remy/nodemon/blob/master/faq.md">FAQ</a> and please add your own questions if you think they would help others.</p>\n<h2>Contributors</h2>\n<p>This project exists thanks to all the people who <a href="https://github.com/remy/nodemon/blob/master/.github/CONTRIBUTING.md">contribute</a>.\n<a href="https://opencollective.com/nodemon#backer"><img src="https://opencollective.com/nodemon/contributors.svg?width=890" alt="nodemon contributors"></a></p>\n<h2>Backers</h2>\n<p>Thank you to all <a href="https://opencollective.com/nodemon#backer">our backers</a>! 🙏</p>\n<p><a href="https://opencollective.com/nodemon#backers"><img src="https://opencollective.com/nodemon/backers.svg?width=890" alt="nodemon backers"></a></p>\n<h2>Sponsors</h2>\n<p>Support this project by becoming a sponsor. Your logo will show up here with a link to your website. <a href="https://opencollective.com/nodemon#sponsor">Sponsor this project today ❤️</a></p>\n<h1>License</h1>\n<p>MIT <a href="http://rem.mit-license.org">http://rem.mit-license.org</a></p>',docPath:"argo-ci/node_modules/nodemon/readme",proj:"argo-ci"}}}});
//# sourceMappingURL=path---docs-argo-ci-node-modules-nodemon-25439fb28fbdee9d9fd3.js.map