webpackJsonp([0xe52ca5f4a1fa],{3078:function(e,n){e.exports={pathContext:{docHtml:'<h1>raw-body</h1>\n<p><a href="https://npmjs.org/package/raw-body"><img src="https://img.shields.io/npm/v/raw-body.svg" alt="NPM Version"></a>\n<a href="https://npmjs.org/package/raw-body"><img src="https://img.shields.io/npm/dm/raw-body.svg" alt="NPM Downloads"></a>\n<a href="https://nodejs.org/en/download/"><img src="https://img.shields.io/node/v/raw-body.svg" alt="Node.js Version"></a>\n<a href="https://travis-ci.org/stream-utils/raw-body"><img src="https://img.shields.io/travis/stream-utils/raw-body/master.svg" alt="Build status"></a>\n<a href="https://coveralls.io/r/stream-utils/raw-body?branch=master"><img src="https://img.shields.io/coveralls/stream-utils/raw-body/master.svg" alt="Test coverage"></a></p>\n<p>Gets the entire buffer of a stream either as a <code>Buffer</code> or a string.\nValidates the stream\'s length against an expected length and maximum limit.\nIdeal for parsing request bodies.</p>\n<h2>Install</h2>\n<p>This is a <a href="https://nodejs.org/en/">Node.js</a> module available through the\n<a href="https://www.npmjs.com/">npm registry</a>. Installation is done using the\n<a href="https://docs.npmjs.com/getting-started/installing-npm-packages-locally"><code>npm install</code> command</a>:</p>\n<pre><code class="language-sh">$ npm install raw-body\n</code></pre>\n<h3>TypeScript</h3>\n<p>This module includes a <a href="https://www.typescriptlang.org/">TypeScript</a>\ndeclarition file to enable auto complete in compatible editors and type\ninformation for TypeScript projects. This module depends on the Node.js\ntypes, so install <code>@types/node</code>:</p>\n<pre><code class="language-sh">$ npm install @types/node\n</code></pre>\n<h2>API</h2>\n<!-- eslint-disable no-unused-vars -->\n<pre><code class="language-js">var getRawBody = require(\'raw-body\')\n</code></pre>\n<h3>getRawBody(stream, [options], [callback])</h3>\n<p><strong>Returns a promise if no callback specified and global <code>Promise</code> exists.</strong></p>\n<p>Options:</p>\n<ul>\n<li><code>length</code> - The length of the stream.\nIf the contents of the stream do not add up to this length,\nan <code>400</code> error code is returned.</li>\n<li><code>limit</code> - The byte limit of the body.\nThis is the number of bytes or any string format supported by\n<a href="https://www.npmjs.com/package/bytes">bytes</a>,\nfor example <code>1000</code>, <code>\'500kb\'</code> or <code>\'3mb\'</code>.\nIf the body ends up being larger than this limit,\na <code>413</code> error code is returned.</li>\n<li><code>encoding</code> - The encoding to use to decode the body into a string.\nBy default, a <code>Buffer</code> instance will be returned when no encoding is specified.\nMost likely, you want <code>utf-8</code>, so setting <code>encoding</code> to <code>true</code> will decode as <code>utf-8</code>.\nYou can use any type of encoding supported by <a href="https://www.npmjs.org/package/iconv-lite#readme">iconv-lite</a>.</li>\n</ul>\n<p>You can also pass a string in place of options to just specify the encoding.</p>\n<p>If an error occurs, the stream will be paused, everything unpiped,\nand you are responsible for correctly disposing the stream.\nFor HTTP requests, no handling is required if you send a response.\nFor streams that use file descriptors, you should <code>stream.destroy()</code> or <code>stream.close()</code> to prevent leaks.</p>\n<h2>Errors</h2>\n<p>This module creates errors depending on the error condition during reading.\nThe error may be an error from the underlying Node.js implementation, but is\notherwise an error created by this module, which has the following attributes:</p>\n<ul>\n<li><code>limit</code> - the limit in bytes</li>\n<li><code>length</code> and <code>expected</code> - the expected length of the stream</li>\n<li><code>received</code> - the received bytes</li>\n<li><code>encoding</code> - the invalid encoding</li>\n<li><code>status</code> and <code>statusCode</code> - the corresponding status code for the error</li>\n<li><code>type</code> - the error type</li>\n</ul>\n<h3>Types</h3>\n<p>The errors from this module have a <code>type</code> property which allows for the progamatic\ndetermination of the type of error returned.</p>\n<h4>encoding.unsupported</h4>\n<p>This error will occur when the <code>encoding</code> option is specified, but the value does\nnot map to an encoding supported by the <a href="https://www.npmjs.org/package/iconv-lite#readme">iconv-lite</a>\nmodule.</p>\n<h4>entity.too.large</h4>\n<p>This error will occur when the <code>limit</code> option is specified, but the stream has\nan entity that is larger.</p>\n<h4>request.aborted</h4>\n<p>This error will occur when the request stream is aborted by the client before\nreading the body has finished.</p>\n<h4>request.size.invalid</h4>\n<p>This error will occur when the <code>length</code> option is specified, but the stream has\nemitted more bytes.</p>\n<h4>stream.encoding.set</h4>\n<p>This error will occur when the given stream has an encoding set on it, making it\na decoded stream. The stream should not have an encoding set and is expected to\nemit <code>Buffer</code> objects.</p>\n<h2>Examples</h2>\n<h3>Simple Express example</h3>\n<pre><code class="language-js">var contentType = require(\'content-type\')\nvar express = require(\'express\')\nvar getRawBody = require(\'raw-body\')\n\nvar app = express()\n\napp.use(function (req, res, next) {\n  getRawBody(req, {\n    length: req.headers[\'content-length\'],\n    limit: \'1mb\',\n    encoding: contentType.parse(req).parameters.charset\n  }, function (err, string) {\n    if (err) return next(err)\n    req.text = string\n    next()\n  })\n})\n\n// now access req.text\n</code></pre>\n<h3>Simple Koa example</h3>\n<pre><code class="language-js">var contentType = require(\'content-type\')\nvar getRawBody = require(\'raw-body\')\nvar koa = require(\'koa\')\n\nvar app = koa()\n\napp.use(function * (next) {\n  this.text = yield getRawBody(this.req, {\n    length: this.req.headers[\'content-length\'],\n    limit: \'1mb\',\n    encoding: contentType.parse(this.req).parameters.charset\n  })\n  yield next\n})\n\n// now access this.text\n</code></pre>\n<h3>Using as a promise</h3>\n<p>To use this library as a promise, simply omit the <code>callback</code> and a promise is\nreturned, provided that a global <code>Promise</code> is defined.</p>\n<pre><code class="language-js">var getRawBody = require(\'raw-body\')\nvar http = require(\'http\')\n\nvar server = http.createServer(function (req, res) {\n  getRawBody(req)\n  .then(function (buf) {\n    res.statusCode = 200\n    res.end(buf.length + \' bytes submitted\')\n  })\n  .catch(function (err) {\n    res.statusCode = 500\n    res.end(err.message)\n  })\n})\n\nserver.listen(3000)\n</code></pre>\n<h3>Using with TypeScript</h3>\n<pre><code class="language-ts">import * as getRawBody from \'raw-body\';\nimport * as http from \'http\';\n\nconst server = http.createServer((req, res) => {\n  getRawBody(req)\n  .then((buf) => {\n    res.statusCode = 200;\n    res.end(buf.length + \' bytes submitted\');\n  })\n  .catch((err) => {\n    res.statusCode = err.statusCode;\n    res.end(err.message);\n  });\n});\n\nserver.listen(3000);\n</code></pre>\n<h2>License</h2>\n<p><a href="LICENSE">MIT</a></p>',docPath:"argo-ci/node_modules/raw-body/readme",proj:"argo-ci"}}}});
//# sourceMappingURL=path---docs-argo-ci-node-modules-raw-body-readme-html-3f0766d622ad35d32936.js.map