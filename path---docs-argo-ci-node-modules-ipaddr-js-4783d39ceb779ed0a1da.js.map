{"version":3,"sources":["webpack:///path---docs-argo-ci-node-modules-ipaddr-js-4783d39ceb779ed0a1da.js","webpack:///./.cache/json/docs-argo-ci-node-modules-ipaddr-js.json"],"names":["webpackJsonp","2725","module","exports","pathContext","docHtml","docPath","proj"],"mappings":"AAAAA,cAAc,iBAERC,KACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,aAAeC,QAAA,swTAA4wTC,QAAA,wCAAAC,KAAA","file":"path---docs-argo-ci-node-modules-ipaddr-js-4783d39ceb779ed0a1da.js","sourcesContent":["webpackJsonp([211583685297338],{\n\n/***/ 2725:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"pathContext\":{\"docHtml\":\"<h1>ipaddr.js â€” an IPv6 and IPv4 address manipulation library <a href=\\\"https://travis-ci.org/whitequark/ipaddr.js\\\"><img src=\\\"https://travis-ci.org/whitequark/ipaddr.js.svg\\\" alt=\\\"Build Status\\\"></a></h1>\\n<p>ipaddr.js is a small (1.9K minified and gzipped) library for manipulating\\nIP addresses in JavaScript environments. It runs on both CommonJS runtimes\\n(e.g. <a href=\\\"http://nodejs.org\\\">nodejs</a>) and in a web browser.</p>\\n<p>ipaddr.js allows you to verify and parse string representation of an IP\\naddress, match it against a CIDR range or range list, determine if it falls\\ninto some reserved ranges (examples include loopback and private ranges),\\nand convert between IPv4 and IPv4-mapped IPv6 addresses.</p>\\n<h2>Installation</h2>\\n<p><code>npm install ipaddr.js</code></p>\\n<p>or</p>\\n<p><code>bower install ipaddr.js</code></p>\\n<h2>API</h2>\\n<p>ipaddr.js defines one object in the global scope: <code>ipaddr</code>. In CommonJS,\\nit is exported from the module:</p>\\n<pre><code class=\\\"language-js\\\">var ipaddr = require('ipaddr.js');\\n</code></pre>\\n<p>The API consists of several global methods and two classes: ipaddr.IPv6 and ipaddr.IPv4.</p>\\n<h3>Global methods</h3>\\n<p>There are three global methods defined: <code>ipaddr.isValid</code>, <code>ipaddr.parse</code> and\\n<code>ipaddr.process</code>. All of them receive a string as a single parameter.</p>\\n<p>The <code>ipaddr.isValid</code> method returns <code>true</code> if the address is a valid IPv4 or\\nIPv6 address, and <code>false</code> otherwise. It does not throw any exceptions.</p>\\n<p>The <code>ipaddr.parse</code> method returns an object representing the IP address,\\nor throws an <code>Error</code> if the passed string is not a valid representation of an\\nIP address.</p>\\n<p>The <code>ipaddr.process</code> method works just like the <code>ipaddr.parse</code> one, but it\\nautomatically converts IPv4-mapped IPv6 addresses to their IPv4 counterparts\\nbefore returning. It is useful when you have a Node.js instance listening\\non an IPv6 socket, and the <code>net.ivp6.bindv6only</code> sysctl parameter (or its\\nequivalent on non-Linux OS) is set to 0. In this case, you can accept IPv4\\nconnections on your IPv6-only socket, but the remote address will be mangled.\\nUse <code>ipaddr.process</code> method to automatically demangle it.</p>\\n<h3>Object representation</h3>\\n<p>Parsing methods return an object which descends from <code>ipaddr.IPv6</code> or\\n<code>ipaddr.IPv4</code>. These objects share some properties, but most of them differ.</p>\\n<h4>Shared properties</h4>\\n<p>One can determine the type of address by calling <code>addr.kind()</code>. It will return\\neither <code>\\\"ipv6\\\"</code> or <code>\\\"ipv4\\\"</code>.</p>\\n<p>An address can be converted back to its string representation with <code>addr.toString()</code>.\\nNote that this method:</p>\\n<ul>\\n<li>does not return the original string used to create the object (in fact, there is\\nno way of getting that string)</li>\\n<li>returns a compact representation (when it is applicable)</li>\\n</ul>\\n<p>A <code>match(range, bits)</code> method can be used to check if the address falls into a\\ncertain CIDR range.\\nNote that an address can be (obviously) matched only against an address of the same type.</p>\\n<p>For example:</p>\\n<pre><code class=\\\"language-js\\\">var addr = ipaddr.parse(\\\"2001:db8:1234::1\\\");\\nvar range = ipaddr.parse(\\\"2001:db8::\\\");\\n\\naddr.match(range, 32); // => true\\n</code></pre>\\n<p>Alternatively, <code>match</code> can also be called as <code>match([range, bits])</code>. In this way,\\nit can be used together with the <code>parseCIDR(string)</code> method, which parses an IP\\naddress together with a CIDR range.</p>\\n<p>For example:</p>\\n<pre><code class=\\\"language-js\\\">var addr = ipaddr.parse(\\\"2001:db8:1234::1\\\");\\n\\naddr.match(ipaddr.parseCIDR(\\\"2001:db8::/32\\\")); // => true\\n</code></pre>\\n<p>A <code>range()</code> method returns one of predefined names for several special ranges defined\\nby IP protocols. The exact names (and their respective CIDR ranges) can be looked up\\nin the source: <a href=\\\"https://github.com/whitequark/ipaddr.js/blob/master/src/ipaddr.coffee#L186\\\">IPv6 ranges</a> and <a href=\\\"https://github.com/whitequark/ipaddr.js/blob/master/src/ipaddr.coffee#L71\\\">IPv4 ranges</a>. Some common ones include <code>\\\"unicast\\\"</code>\\n(the default one) and <code>\\\"reserved\\\"</code>.</p>\\n<p>You can match against your own range list by using\\n<code>ipaddr.subnetMatch(address, rangeList, defaultName)</code> method. It can work with a mix of IPv6 or IPv4 addresses, and accepts a name-to-subnet map as the range list. For example:</p>\\n<pre><code class=\\\"language-js\\\">var rangeList = {\\n  documentationOnly: [ ipaddr.parse('2001:db8::'), 32 ],\\n  tunnelProviders: [\\n    [ ipaddr.parse('2001:470::'), 32 ], // he.net\\n    [ ipaddr.parse('2001:5c0::'), 32 ]  // freenet6\\n  ]\\n};\\nipaddr.subnetMatch(ipaddr.parse('2001:470:8:66::1'), rangeList, 'unknown'); // => \\\"tunnelProviders\\\"\\n</code></pre>\\n<p>The addresses can be converted to their byte representation with <code>toByteArray()</code>.\\n(Actually, JavaScript mostly does not know about byte buffers. They are emulated with\\narrays of numbers, each in range of 0..255.)</p>\\n<pre><code class=\\\"language-js\\\">var bytes = ipaddr.parse('2a00:1450:8007::68').toByteArray(); // ipv6.google.com\\nbytes // => [42, 0x00, 0x14, 0x50, 0x80, 0x07, 0x00, &#x3C;zeroes...>, 0x00, 0x68 ]\\n</code></pre>\\n<p>The <code>ipaddr.IPv4</code> and <code>ipaddr.IPv6</code> objects have some methods defined, too. All of them\\nhave the same interface for both protocols, and are similar to global methods.</p>\\n<p><code>ipaddr.IPvX.isValid(string)</code> can be used to check if the string is a valid address\\nfor particular protocol, and <code>ipaddr.IPvX.parse(string)</code> is the error-throwing parser.</p>\\n<p><code>ipaddr.IPvX.isValid(string)</code> uses the same format for parsing as the POSIX <code>inet_ntoa</code> function, which accepts unusual formats like <code>0xc0.168.1.1</code> or <code>0x10000000</code>. The function <code>ipaddr.IPv4.isValidFourPartDecimal(string)</code> validates the IPv4 address and also ensures that it is written in four-part decimal format.</p>\\n<h4>IPv6 properties</h4>\\n<p>Sometimes you will want to convert IPv6 not to a compact string representation (with\\nthe <code>::</code> substitution); the <code>toNormalizedString()</code> method will return an address where\\nall zeroes are explicit.</p>\\n<p>For example:</p>\\n<pre><code class=\\\"language-js\\\">var addr = ipaddr.parse(\\\"2001:0db8::0001\\\");\\naddr.toString(); // => \\\"2001:db8::1\\\"\\naddr.toNormalizedString(); // => \\\"2001:db8:0:0:0:0:0:1\\\"\\n</code></pre>\\n<p>The <code>isIPv4MappedAddress()</code> method will return <code>true</code> if this address is an IPv4-mapped\\none, and <code>toIPv4Address()</code> will return an IPv4 object address.</p>\\n<p>To access the underlying binary representation of the address, use <code>addr.parts</code>.</p>\\n<pre><code class=\\\"language-js\\\">var addr = ipaddr.parse(\\\"2001:db8:10::1234:DEAD\\\");\\naddr.parts // => [0x2001, 0xdb8, 0x10, 0, 0, 0, 0x1234, 0xdead]\\n</code></pre>\\n<p>A IPv6 zone index can be accessed via <code>addr.zoneId</code>:</p>\\n<pre><code class=\\\"language-js\\\">var addr = ipaddr.parse(\\\"2001:db8::%eth0\\\");\\naddr.zoneId // => 'eth0'\\n</code></pre>\\n<h4>IPv4 properties</h4>\\n<p><code>toIPv4MappedAddress()</code> will return a corresponding IPv4-mapped IPv6 address.</p>\\n<p>To access the underlying representation of the address, use <code>addr.octets</code>.</p>\\n<pre><code class=\\\"language-js\\\">var addr = ipaddr.parse(\\\"192.168.1.1\\\");\\naddr.octets // => [192, 168, 1, 1]\\n</code></pre>\\n<p><code>prefixLengthFromSubnetMask()</code> will return a CIDR prefix length for a valid IPv4 netmask or\\nfalse if the netmask is not valid.</p>\\n<pre><code class=\\\"language-js\\\">ipaddr.IPv4.parse('255.255.255.240').prefixLengthFromSubnetMask() == 28\\nipaddr.IPv4.parse('255.192.164.0').prefixLengthFromSubnetMask()  == null\\n</code></pre>\\n<p><code>subnetMaskFromPrefixLength()</code> will return an IPv4 netmask for a valid CIDR prefix length.</p>\\n<pre><code class=\\\"language-js\\\">ipaddr.IPv4.subnetMaskFromPrefixLength(24) == \\\"255.255.255.0\\\"\\nipaddr.IPv4.subnetMaskFromPrefixLength(29) == \\\"255.255.255.248\\\"\\n</code></pre>\\n<p><code>broadcastAddressFromCIDR()</code> will return the broadcast address for a given IPv4 interface and netmask in CIDR notation.</p>\\n<pre><code class=\\\"language-js\\\">ipaddr.IPv4.broadcastAddressFromCIDR(\\\"172.0.0.1/24\\\") == \\\"172.0.0.255\\\"\\n</code></pre>\\n<p><code>networkAddressFromCIDR()</code> will return the network address for a given IPv4 interface and netmask in CIDR notation.</p>\\n<pre><code class=\\\"language-js\\\">ipaddr.IPv4.networkAddressFromCIDR(\\\"172.0.0.1/24\\\") == \\\"172.0.0.0\\\"\\n</code></pre>\\n<h4>Conversion</h4>\\n<p>IPv4 and IPv6 can be converted bidirectionally to and from network byte order (MSB) byte arrays.</p>\\n<p>The <code>fromByteArray()</code> method will take an array and create an appropriate IPv4 or IPv6 object\\nif the input satisfies the requirements. For IPv4 it has to be an array of four 8-bit values,\\nwhile for IPv6 it has to be an array of sixteen 8-bit values.</p>\\n<p>For example:</p>\\n<pre><code class=\\\"language-js\\\">var addr = ipaddr.fromByteArray([0x7f, 0, 0, 1]);\\naddr.toString(); // => \\\"127.0.0.1\\\"\\n</code></pre>\\n<p>or</p>\\n<pre><code class=\\\"language-js\\\">var addr = ipaddr.fromByteArray([0x20, 1, 0xd, 0xb8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1])\\naddr.toString(); // => \\\"2001:db8::1\\\"\\n</code></pre>\\n<p>Both objects also offer a <code>toByteArray()</code> method, which returns an array in network byte order (MSB).</p>\\n<p>For example:</p>\\n<pre><code class=\\\"language-js\\\">var addr = ipaddr.parse(\\\"127.0.0.1\\\");\\naddr.toByteArray(); // => [0x7f, 0, 0, 1]\\n</code></pre>\\n<p>or</p>\\n<pre><code class=\\\"language-js\\\">var addr = ipaddr.parse(\\\"2001:db8::1\\\");\\naddr.toByteArray(); // => [0x20, 1, 0xd, 0xb8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]\\n</code></pre>\",\"docPath\":\"argo-ci/node_modules/ipaddr.js/readme\",\"proj\":\"argo-ci\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---docs-argo-ci-node-modules-ipaddr-js-4783d39ceb779ed0a1da.js","module.exports = {\"pathContext\":{\"docHtml\":\"<h1>ipaddr.js â€” an IPv6 and IPv4 address manipulation library <a href=\\\"https://travis-ci.org/whitequark/ipaddr.js\\\"><img src=\\\"https://travis-ci.org/whitequark/ipaddr.js.svg\\\" alt=\\\"Build Status\\\"></a></h1>\\n<p>ipaddr.js is a small (1.9K minified and gzipped) library for manipulating\\nIP addresses in JavaScript environments. It runs on both CommonJS runtimes\\n(e.g. <a href=\\\"http://nodejs.org\\\">nodejs</a>) and in a web browser.</p>\\n<p>ipaddr.js allows you to verify and parse string representation of an IP\\naddress, match it against a CIDR range or range list, determine if it falls\\ninto some reserved ranges (examples include loopback and private ranges),\\nand convert between IPv4 and IPv4-mapped IPv6 addresses.</p>\\n<h2>Installation</h2>\\n<p><code>npm install ipaddr.js</code></p>\\n<p>or</p>\\n<p><code>bower install ipaddr.js</code></p>\\n<h2>API</h2>\\n<p>ipaddr.js defines one object in the global scope: <code>ipaddr</code>. In CommonJS,\\nit is exported from the module:</p>\\n<pre><code class=\\\"language-js\\\">var ipaddr = require('ipaddr.js');\\n</code></pre>\\n<p>The API consists of several global methods and two classes: ipaddr.IPv6 and ipaddr.IPv4.</p>\\n<h3>Global methods</h3>\\n<p>There are three global methods defined: <code>ipaddr.isValid</code>, <code>ipaddr.parse</code> and\\n<code>ipaddr.process</code>. All of them receive a string as a single parameter.</p>\\n<p>The <code>ipaddr.isValid</code> method returns <code>true</code> if the address is a valid IPv4 or\\nIPv6 address, and <code>false</code> otherwise. It does not throw any exceptions.</p>\\n<p>The <code>ipaddr.parse</code> method returns an object representing the IP address,\\nor throws an <code>Error</code> if the passed string is not a valid representation of an\\nIP address.</p>\\n<p>The <code>ipaddr.process</code> method works just like the <code>ipaddr.parse</code> one, but it\\nautomatically converts IPv4-mapped IPv6 addresses to their IPv4 counterparts\\nbefore returning. It is useful when you have a Node.js instance listening\\non an IPv6 socket, and the <code>net.ivp6.bindv6only</code> sysctl parameter (or its\\nequivalent on non-Linux OS) is set to 0. In this case, you can accept IPv4\\nconnections on your IPv6-only socket, but the remote address will be mangled.\\nUse <code>ipaddr.process</code> method to automatically demangle it.</p>\\n<h3>Object representation</h3>\\n<p>Parsing methods return an object which descends from <code>ipaddr.IPv6</code> or\\n<code>ipaddr.IPv4</code>. These objects share some properties, but most of them differ.</p>\\n<h4>Shared properties</h4>\\n<p>One can determine the type of address by calling <code>addr.kind()</code>. It will return\\neither <code>\\\"ipv6\\\"</code> or <code>\\\"ipv4\\\"</code>.</p>\\n<p>An address can be converted back to its string representation with <code>addr.toString()</code>.\\nNote that this method:</p>\\n<ul>\\n<li>does not return the original string used to create the object (in fact, there is\\nno way of getting that string)</li>\\n<li>returns a compact representation (when it is applicable)</li>\\n</ul>\\n<p>A <code>match(range, bits)</code> method can be used to check if the address falls into a\\ncertain CIDR range.\\nNote that an address can be (obviously) matched only against an address of the same type.</p>\\n<p>For example:</p>\\n<pre><code class=\\\"language-js\\\">var addr = ipaddr.parse(\\\"2001:db8:1234::1\\\");\\nvar range = ipaddr.parse(\\\"2001:db8::\\\");\\n\\naddr.match(range, 32); // => true\\n</code></pre>\\n<p>Alternatively, <code>match</code> can also be called as <code>match([range, bits])</code>. In this way,\\nit can be used together with the <code>parseCIDR(string)</code> method, which parses an IP\\naddress together with a CIDR range.</p>\\n<p>For example:</p>\\n<pre><code class=\\\"language-js\\\">var addr = ipaddr.parse(\\\"2001:db8:1234::1\\\");\\n\\naddr.match(ipaddr.parseCIDR(\\\"2001:db8::/32\\\")); // => true\\n</code></pre>\\n<p>A <code>range()</code> method returns one of predefined names for several special ranges defined\\nby IP protocols. The exact names (and their respective CIDR ranges) can be looked up\\nin the source: <a href=\\\"https://github.com/whitequark/ipaddr.js/blob/master/src/ipaddr.coffee#L186\\\">IPv6 ranges</a> and <a href=\\\"https://github.com/whitequark/ipaddr.js/blob/master/src/ipaddr.coffee#L71\\\">IPv4 ranges</a>. Some common ones include <code>\\\"unicast\\\"</code>\\n(the default one) and <code>\\\"reserved\\\"</code>.</p>\\n<p>You can match against your own range list by using\\n<code>ipaddr.subnetMatch(address, rangeList, defaultName)</code> method. It can work with a mix of IPv6 or IPv4 addresses, and accepts a name-to-subnet map as the range list. For example:</p>\\n<pre><code class=\\\"language-js\\\">var rangeList = {\\n  documentationOnly: [ ipaddr.parse('2001:db8::'), 32 ],\\n  tunnelProviders: [\\n    [ ipaddr.parse('2001:470::'), 32 ], // he.net\\n    [ ipaddr.parse('2001:5c0::'), 32 ]  // freenet6\\n  ]\\n};\\nipaddr.subnetMatch(ipaddr.parse('2001:470:8:66::1'), rangeList, 'unknown'); // => \\\"tunnelProviders\\\"\\n</code></pre>\\n<p>The addresses can be converted to their byte representation with <code>toByteArray()</code>.\\n(Actually, JavaScript mostly does not know about byte buffers. They are emulated with\\narrays of numbers, each in range of 0..255.)</p>\\n<pre><code class=\\\"language-js\\\">var bytes = ipaddr.parse('2a00:1450:8007::68').toByteArray(); // ipv6.google.com\\nbytes // => [42, 0x00, 0x14, 0x50, 0x80, 0x07, 0x00, &#x3C;zeroes...>, 0x00, 0x68 ]\\n</code></pre>\\n<p>The <code>ipaddr.IPv4</code> and <code>ipaddr.IPv6</code> objects have some methods defined, too. All of them\\nhave the same interface for both protocols, and are similar to global methods.</p>\\n<p><code>ipaddr.IPvX.isValid(string)</code> can be used to check if the string is a valid address\\nfor particular protocol, and <code>ipaddr.IPvX.parse(string)</code> is the error-throwing parser.</p>\\n<p><code>ipaddr.IPvX.isValid(string)</code> uses the same format for parsing as the POSIX <code>inet_ntoa</code> function, which accepts unusual formats like <code>0xc0.168.1.1</code> or <code>0x10000000</code>. The function <code>ipaddr.IPv4.isValidFourPartDecimal(string)</code> validates the IPv4 address and also ensures that it is written in four-part decimal format.</p>\\n<h4>IPv6 properties</h4>\\n<p>Sometimes you will want to convert IPv6 not to a compact string representation (with\\nthe <code>::</code> substitution); the <code>toNormalizedString()</code> method will return an address where\\nall zeroes are explicit.</p>\\n<p>For example:</p>\\n<pre><code class=\\\"language-js\\\">var addr = ipaddr.parse(\\\"2001:0db8::0001\\\");\\naddr.toString(); // => \\\"2001:db8::1\\\"\\naddr.toNormalizedString(); // => \\\"2001:db8:0:0:0:0:0:1\\\"\\n</code></pre>\\n<p>The <code>isIPv4MappedAddress()</code> method will return <code>true</code> if this address is an IPv4-mapped\\none, and <code>toIPv4Address()</code> will return an IPv4 object address.</p>\\n<p>To access the underlying binary representation of the address, use <code>addr.parts</code>.</p>\\n<pre><code class=\\\"language-js\\\">var addr = ipaddr.parse(\\\"2001:db8:10::1234:DEAD\\\");\\naddr.parts // => [0x2001, 0xdb8, 0x10, 0, 0, 0, 0x1234, 0xdead]\\n</code></pre>\\n<p>A IPv6 zone index can be accessed via <code>addr.zoneId</code>:</p>\\n<pre><code class=\\\"language-js\\\">var addr = ipaddr.parse(\\\"2001:db8::%eth0\\\");\\naddr.zoneId // => 'eth0'\\n</code></pre>\\n<h4>IPv4 properties</h4>\\n<p><code>toIPv4MappedAddress()</code> will return a corresponding IPv4-mapped IPv6 address.</p>\\n<p>To access the underlying representation of the address, use <code>addr.octets</code>.</p>\\n<pre><code class=\\\"language-js\\\">var addr = ipaddr.parse(\\\"192.168.1.1\\\");\\naddr.octets // => [192, 168, 1, 1]\\n</code></pre>\\n<p><code>prefixLengthFromSubnetMask()</code> will return a CIDR prefix length for a valid IPv4 netmask or\\nfalse if the netmask is not valid.</p>\\n<pre><code class=\\\"language-js\\\">ipaddr.IPv4.parse('255.255.255.240').prefixLengthFromSubnetMask() == 28\\nipaddr.IPv4.parse('255.192.164.0').prefixLengthFromSubnetMask()  == null\\n</code></pre>\\n<p><code>subnetMaskFromPrefixLength()</code> will return an IPv4 netmask for a valid CIDR prefix length.</p>\\n<pre><code class=\\\"language-js\\\">ipaddr.IPv4.subnetMaskFromPrefixLength(24) == \\\"255.255.255.0\\\"\\nipaddr.IPv4.subnetMaskFromPrefixLength(29) == \\\"255.255.255.248\\\"\\n</code></pre>\\n<p><code>broadcastAddressFromCIDR()</code> will return the broadcast address for a given IPv4 interface and netmask in CIDR notation.</p>\\n<pre><code class=\\\"language-js\\\">ipaddr.IPv4.broadcastAddressFromCIDR(\\\"172.0.0.1/24\\\") == \\\"172.0.0.255\\\"\\n</code></pre>\\n<p><code>networkAddressFromCIDR()</code> will return the network address for a given IPv4 interface and netmask in CIDR notation.</p>\\n<pre><code class=\\\"language-js\\\">ipaddr.IPv4.networkAddressFromCIDR(\\\"172.0.0.1/24\\\") == \\\"172.0.0.0\\\"\\n</code></pre>\\n<h4>Conversion</h4>\\n<p>IPv4 and IPv6 can be converted bidirectionally to and from network byte order (MSB) byte arrays.</p>\\n<p>The <code>fromByteArray()</code> method will take an array and create an appropriate IPv4 or IPv6 object\\nif the input satisfies the requirements. For IPv4 it has to be an array of four 8-bit values,\\nwhile for IPv6 it has to be an array of sixteen 8-bit values.</p>\\n<p>For example:</p>\\n<pre><code class=\\\"language-js\\\">var addr = ipaddr.fromByteArray([0x7f, 0, 0, 1]);\\naddr.toString(); // => \\\"127.0.0.1\\\"\\n</code></pre>\\n<p>or</p>\\n<pre><code class=\\\"language-js\\\">var addr = ipaddr.fromByteArray([0x20, 1, 0xd, 0xb8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1])\\naddr.toString(); // => \\\"2001:db8::1\\\"\\n</code></pre>\\n<p>Both objects also offer a <code>toByteArray()</code> method, which returns an array in network byte order (MSB).</p>\\n<p>For example:</p>\\n<pre><code class=\\\"language-js\\\">var addr = ipaddr.parse(\\\"127.0.0.1\\\");\\naddr.toByteArray(); // => [0x7f, 0, 0, 1]\\n</code></pre>\\n<p>or</p>\\n<pre><code class=\\\"language-js\\\">var addr = ipaddr.parse(\\\"2001:db8::1\\\");\\naddr.toByteArray(); // => [0x20, 1, 0xd, 0xb8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]\\n</code></pre>\",\"docPath\":\"argo-ci/node_modules/ipaddr.js/readme\",\"proj\":\"argo-ci\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/docs-argo-ci-node-modules-ipaddr-js.json\n// module id = 2725\n// module chunks = 211583685297338"],"sourceRoot":""}