webpackJsonp([0x89f7eb309407],{3081:function(e,n){e.exports={pathContext:{docHtml:'<h1>rc</h1>\n<p>The non-configurable configuration loader for lazy people.</p>\n<h2>Usage</h2>\n<p>The only option is to pass rc the name of your app, and your default configuration.</p>\n<pre><code class="language-javascript">var conf = require(\'rc\')(appname, {\n  //defaults go here.\n  port: 2468,\n\n  //defaults which are objects will be merged, not replaced\n  views: {\n    engine: \'jade\'\n  }\n});\n</code></pre>\n<p><code>rc</code> will return your configuration options merged with the defaults you specify.\nIf you pass in a predefined defaults object, it will be mutated:</p>\n<pre><code class="language-javascript">var conf = {};\nrequire(\'rc\')(appname, conf);\n</code></pre>\n<p>If <code>rc</code> finds any config files for your app, the returned config object will have\na <code>configs</code> array containing their paths:</p>\n<pre><code class="language-javascript">var appCfg = require(\'rc\')(appname, conf);\nappCfg.configs[0] // /etc/appnamerc\nappCfg.configs[1] // /home/dominictarr/.config/appname\nappCfg.config // same as appCfg.configs[appCfg.configs.length - 1]\n</code></pre>\n<h2>Standards</h2>\n<p>Given your application name (<code>appname</code>), rc will look in all the obvious places for configuration.</p>\n<ul>\n<li>command line arguments (parsed by minimist)</li>\n<li>\n<p>environment variables prefixed with <code>${appname}_</code></p>\n<ul>\n<li>or use "__" to indicate nested properties <br/> <em>(e.g. `appname</em>foo<strong>bar</strong>baz<code>=></code>foo.bar.baz`)_</li>\n</ul>\n</li>\n<li>if you passed an option <code>--config file</code> then from that file</li>\n<li>a local <code>.${appname}rc</code> or the first found looking in <code>./ ../ ../../ ../../../</code> etc.</li>\n<li><code>$HOME/.${appname}rc</code></li>\n<li><code>$HOME/.${appname}/config</code></li>\n<li><code>$HOME/.config/${appname}</code></li>\n<li><code>$HOME/.config/${appname}/config</code></li>\n<li><code>/etc/${appname}rc</code></li>\n<li><code>/etc/${appname}/config</code></li>\n<li>the defaults object you passed in.</li>\n</ul>\n<p>All configuration sources that were found will be flattened into one object,\nso that sources <strong>earlier</strong> in this list override later ones.</p>\n<h2>Configuration File Formats</h2>\n<p>Configuration files (e.g. <code>.appnamerc</code>) may be in either <a href="http://json.org/example">json</a> or <a href="http://en.wikipedia.org/wiki/INI_file">ini</a> format. The example configurations below are equivalent:</p>\n<h4>Formatted as <code>ini</code></h4>\n<pre><code>; You can include comments in `ini` format if you want.\n\ndependsOn=0.10.0\n\n\n; `rc` has built-in support for ini sections, see?\n\n[commands]\n  www     = ./commands/www\n  console = ./commands/repl\n\n\n; You can even do nested sections\n\n[generators.options]\n  engine  = ejs\n\n[generators.modules]\n  new     = generate-new\n  engine  = generate-backend\n</code></pre>\n<h4>Formatted as <code>json</code></h4>\n<pre><code class="language-javascript">{\n  // You can even comment your JSON, if you want\n  "dependsOn": "0.10.0",\n  "commands": {\n    "www": "./commands/www",\n    "console": "./commands/repl"\n  },\n  "generators": {\n    "options": {\n      "engine": "ejs"\n    },\n    "modules": {\n      "new": "generate-new",\n      "backend": "generate-backend"\n    }\n  }\n}\n</code></pre>\n<p>Comments are stripped from JSON config via <a href="https://github.com/sindresorhus/strip-json-comments">strip-json-comments</a>.</p>\n<blockquote>\n<p>Since ini, and env variables do not have a standard for types, your application needs be prepared for strings.</p>\n</blockquote>\n<h2>Advanced Usage</h2>\n<h4>Pass in your own <code>argv</code></h4>\n<p>You may pass in your own <code>argv</code> as the third argument to <code>rc</code>.  This is in case you want to <a href="https://github.com/dominictarr/rc/pull/12">use your own command-line opts parser</a>.</p>\n<pre><code class="language-javascript">require(\'rc\')(appname, defaults, customArgvParser);\n</code></pre>\n<h2>Pass in your own parser</h2>\n<p>If you have a special need to use a non-standard parser,\nyou can do so by passing in the parser as the 4th argument.\n(leave the 3rd as null to get the default args parser)</p>\n<pre><code class="language-javascript">require(\'rc\')(appname, defaults, null, parser);\n</code></pre>\n<p>This may also be used to force a more strict format,\nsuch as strict, valid JSON only.</p>\n<h2>Note on Performance</h2>\n<p><code>rc</code> is running <code>fs.statSync</code>-- so make sure you don\'t use it in a hot code path (e.g. a request handler) </p>\n<h2>License</h2>\n<p>Multi-licensed under the two-clause BSD License, MIT License, or Apache License, version 2.0</p>',docPath:"argo-ci/node_modules/rc/readme",proj:"argo-ci"}}}});
//# sourceMappingURL=path---docs-argo-ci-node-modules-rc-ee392c49efa7e0654f78.js.map