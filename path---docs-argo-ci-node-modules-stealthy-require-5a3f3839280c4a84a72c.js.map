{"version":3,"sources":["webpack:///path---docs-argo-ci-node-modules-stealthy-require-5a3f3839280c4a84a72c.js","webpack:///./.cache/json/docs-argo-ci-node-modules-stealthy-require.json"],"names":["webpackJsonp","3192","module","exports","pathContext","docHtml","docPath","proj"],"mappings":"AAAAA,cAAc,iBAERC,KACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,aAAeC,QAAA,yxSAA8oNC,QAAA,+CAAAC,KAAA","file":"path---docs-argo-ci-node-modules-stealthy-require-5a3f3839280c4a84a72c.js","sourcesContent":["webpackJsonp([139713805131760],{\n\n/***/ 3192:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"pathContext\":{\"docHtml\":\"<h1>Stealthy-Require</h1>\\n<p><a href=\\\"https://travis-ci.org/analog-nico/stealthy-require\\\"><img src=\\\"https://img.shields.io/travis/analog-nico/stealthy-require/master.svg?style=flat-square\\\" alt=\\\"Build Status\\\"></a>\\n<a href=\\\"https://coveralls.io/r/analog-nico/stealthy-require\\\"><img src=\\\"https://img.shields.io/coveralls/analog-nico/stealthy-require.svg?style=flat-square\\\" alt=\\\"Coverage Status\\\"></a>\\n<a href=\\\"https://david-dm.org/analog-nico/stealthy-require\\\"><img src=\\\"https://img.shields.io/david/analog-nico/stealthy-require.svg?style=flat-square\\\" alt=\\\"Dependency Status\\\"></a></p>\\n<p>This is probably the closest you can currently get to require something in node.js with completely bypassing the require cache.</p>\\n<p><code>stealthy-require</code> works like this:</p>\\n<ol>\\n<li>It clears the require cache.</li>\\n<li>It calls a callback in which you require your module(s) without the cache kicking in.</li>\\n<li>It clears the cache again and restores its old state.</li>\\n</ol>\\n<p>The restrictions are:</p>\\n<ul>\\n<li><a href=\\\"https://github.com/nodejs/node/issues/5016\\\">Native modules cannot be required twice.</a> Thus this module bypasses the require cache only for non-native (e.g. JS) modules.</li>\\n<li>The require cache is only bypassed for all operations that happen synchronously when a module is required. If a module lazy loads another module at a later time that require call will not bypass the cache anymore.</li>\\n</ul>\\n<p>This means you should have a close look at all internal require calls before you decide to use this library.</p>\\n<h2>Installation</h2>\\n<p><a href=\\\"https://npmjs.org/package/stealthy-require\\\"><img src=\\\"https://nodei.co/npm/stealthy-require.png?downloads=true\\\" alt=\\\"NPM Stats\\\"></a></p>\\n<p>This is a module for node.js and is installed via npm:</p>\\n<pre><code class=\\\"language-bash\\\">npm install stealthy-require --save\\n</code></pre>\\n<h2>Usage</h2>\\n<p>Let's say you want to bypass the require cache for this require call:</p>\\n<pre><code class=\\\"language-js\\\">var request = require('request');\\n</code></pre>\\n<p>With <code>stealthy-require</code> you can do that like this:</p>\\n<pre><code class=\\\"language-js\\\">var stealthyRequire = require('stealthy-require');\\n\\nvar requestFresh = stealthyRequire(require.cache, function () {\\n    return require('request');\\n});\\n</code></pre>\\n<p>The require cache is bypassed for the module you require (i.e. <code>request</code>) as well as all modules the module requires (i.e. <code>http</code> and many more).</p>\\n<p>Sometimes the require cache shall not be bypassed for specific modules. E.g. <code>request</code> is required but <code>tough-cookie</code> – on which <code>request</code> depends on – shall be required using the regular cache. For that you can pass two extra arguments to <code>stealthyRequire(...)</code>:</p>\\n<ul>\\n<li>A callback that requires the modules that shall be required without bypassing the cache</li>\\n<li>The <code>module</code> variable</li>\\n</ul>\\n<pre><code class=\\\"language-js\\\">var stealthyRequire = require('stealthy-require');\\n\\nvar requestFresh = stealthyRequire(require.cache, function () {\\n    return require('request');\\n},\\nfunction () {\\n    require('tough-cookie'); // No return needed\\n    // You can require multiple modules here\\n}, module);\\n</code></pre>\\n<h2>Usage with Module Bundlers</h2>\\n<ul>\\n<li><a href=\\\"https://webpack.github.io\\\">Webpack</a> works out-of-the-box like described in the <a href=\\\"#usage\\\">Usage section</a> above.</li>\\n<li><a href=\\\"http://browserify.org\\\">Browserify</a> does not expose <code>require.cache</code>. However, as of <code>browserify@13.0.1</code> the cache is passed as the 6th argument to CommonJS modules. Thus you can pass this argument instead:</li>\\n</ul>\\n<pre><code class=\\\"language-js\\\">// Tweak for Browserify - using arguments[5] instead of require.cache\\nvar requestFresh = stealthyRequire(arguments[5], function () {\\n    return require('request');\\n});\\n</code></pre>\\n<h2>Preventing a Memory Leak When Repeatedly Requiring Fresh Module Instances in Node.js</h2>\\n<p>If you are using <code>stealthy-require</code> in node.js and repeatedly require fresh module instances the <code>module.children</code> array will hold all module instances which prevents unneeded instances to be garbage collected.</p>\\n<p>Assume your code calls <code>doSomething()</code> repeatedly.</p>\\n<pre><code class=\\\"language-js\\\">var stealthyRequire = require('stealthy-require');\\n\\nfunction doSomething() {\\n\\n    var freshInstance = stealthyRequire(require.cache, function () {\\n        return require('some-module');\\n    });\\n    \\n    return freshInstance.calc();\\n\\n}\\n</code></pre>\\n<p>After <code>doSomething()</code> returns <code>freshInstance</code> is not used anymore but won’t be garbage collected because <code>module.children</code> still holds a reference. The solution is to truncate <code>module.children</code> accordingly:</p>\\n<pre><code class=\\\"language-js\\\">var stealthyRequire = require('stealthy-require');\\n\\nfunction doSomething() {\\n\\n    var initialChildren = module.children.slice(); // Creates a shallow copy of the array\\n\\n    var freshInstance = stealthyRequire(require.cache, function () {\\n        return require('some-module');\\n    });\\n\\n    module.children = initialChildren;\\n\\n    return freshInstance.calc();\\n\\n}\\n</code></pre>\\n<p>The <code>slice</code> operation removes all new <code>module.children</code> entries created during the <code>stealthyRequire(...)</code> call and thus <code>freshInstance</code> gets garbage collected after <code>doSomething()</code> returns.</p>\\n<h2>Technical Walkthrough</h2>\\n<pre><code class=\\\"language-js\\\">// 1. Load stealthy-require\\nvar stealthyRequire = require('stealthy-require');\\n// This does nothing but loading the code.\\n// It has no side-effects like patching the module loader or anything.\\n\\n// Any regular require works as always.\\nvar request1 = require('request');\\n\\n// 2. Call stealthyRequire with passing the require cache and a callback.\\nvar requestFresh = stealthyRequire(require.cache, function () {\\n\\n    // 2a. Before this callback gets called the require cache is cleared.\\n\\n    // 2b. Any require taking place here takes place on a clean require cache.\\n    // Since the require call is part of the user's code it also works with module bundlers.\\n    return require('request');\\n    // Anything returned here will be returned by stealthyRequire(...).\\n\\n    // 2c. After this callback gets called the require cache is\\n    // - cleared again and\\n    // - restored to its old state before step 2.\\n\\n});\\n\\n// Any regular require again works as always.\\n// In this case require returns the cached request module instance.\\nvar request2 = require('request');\\n\\n// And voilà:\\nrequest1 === request2 // -> true\\nrequest1 === requestFresh // -> false\\n</code></pre>\\n<h2>Contributing</h2>\\n<p>To set up your development environment for <code>stealthy-require</code>:</p>\\n<ol>\\n<li>Clone this repo to your desktop,</li>\\n<li>in the shell <code>cd</code> to the main folder,</li>\\n<li>hit <code>npm install</code>,</li>\\n<li>hit <code>npm install gulp -g</code> if you haven't installed gulp globally yet, and</li>\\n<li>run <code>gulp dev</code>. (Or run <code>node ./node_modules/.bin/gulp dev</code> if you don't want to install gulp globally.)</li>\\n</ol>\\n<p><code>gulp dev</code> watches all source files and if you save some changes it will lint the code and execute all tests. The test coverage report can be viewed from <code>./coverage/lcov-report/index.html</code>.</p>\\n<p>If you want to debug a test you should use <code>gulp test-without-coverage</code> to run all tests without obscuring the code by the test coverage instrumentation.</p>\\n<h2>Change History</h2>\\n<ul>\\n<li>\\n<p>v1.1.1 (2017-05-08)</p>\\n<ul>\\n<li>Fix that stops <code>undefined</code> entries from appearing in <code>require.cache</code> <em>(Thanks to @jasperjn from reporting this in <a href=\\\"https://github.com/analog-nico/stealthy-require/issues/4\\\">issue #4</a>)</em></li>\\n</ul>\\n</li>\\n<li>\\n<p>v1.1.0 (2017-04-25)</p>\\n<ul>\\n<li>Added ability to disable bypassing the cache for certain modules <em>(Thanks to @novemberborn for suggesting this in <a href=\\\"https://github.com/analog-nico/stealthy-require/issues/3\\\">issue #3</a>)</em></li>\\n<li>Added section in README about a <a href=\\\"#preventing-a-memory-leak-when-repeatedly-requiring-fresh-module-instances-in-nodejs\\\">potential memory leak</a> <em>(Thanks to @Flarna and @novemberborn for bringing that up in <a href=\\\"https://github.com/analog-nico/stealthy-require/issues/2\\\">issue #2</a>)</em></li>\\n<li>Performance optimizations <em>(Thanks to @jcready for <a href=\\\"https://github.com/analog-nico/stealthy-require/pull/1\\\">pull request #1</a>)</em></li>\\n</ul>\\n</li>\\n<li>\\n<p>v1.0.0 (2016-07-18)</p>\\n<ul>\\n<li><strong>Breaking Change:</strong> API completely changed. Please read the <a href=\\\"#usage\\\">Usage section</a> again.</li>\\n<li>Redesigned library to support module bundlers like <a href=\\\"https://webpack.github.io\\\">Webpack</a> and <a href=\\\"http://browserify.org\\\">Browserify</a></li>\\n</ul>\\n</li>\\n<li>\\n<p>v0.1.0 (2016-05-26)</p>\\n<ul>\\n<li>Initial version</li>\\n</ul>\\n</li>\\n</ul>\\n<h2>License (ISC)</h2>\\n<p>In case you never heard about the <a href=\\\"http://en.wikipedia.org/wiki/ISC_license\\\">ISC license</a> it is functionally equivalent to the MIT license.</p>\\n<p>See the <a href=\\\"LICENSE\\\">LICENSE file</a> for details.</p>\",\"docPath\":\"argo-ci/node_modules/stealthy-require/readme\",\"proj\":\"argo-ci\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---docs-argo-ci-node-modules-stealthy-require-5a3f3839280c4a84a72c.js","module.exports = {\"pathContext\":{\"docHtml\":\"<h1>Stealthy-Require</h1>\\n<p><a href=\\\"https://travis-ci.org/analog-nico/stealthy-require\\\"><img src=\\\"https://img.shields.io/travis/analog-nico/stealthy-require/master.svg?style=flat-square\\\" alt=\\\"Build Status\\\"></a>\\n<a href=\\\"https://coveralls.io/r/analog-nico/stealthy-require\\\"><img src=\\\"https://img.shields.io/coveralls/analog-nico/stealthy-require.svg?style=flat-square\\\" alt=\\\"Coverage Status\\\"></a>\\n<a href=\\\"https://david-dm.org/analog-nico/stealthy-require\\\"><img src=\\\"https://img.shields.io/david/analog-nico/stealthy-require.svg?style=flat-square\\\" alt=\\\"Dependency Status\\\"></a></p>\\n<p>This is probably the closest you can currently get to require something in node.js with completely bypassing the require cache.</p>\\n<p><code>stealthy-require</code> works like this:</p>\\n<ol>\\n<li>It clears the require cache.</li>\\n<li>It calls a callback in which you require your module(s) without the cache kicking in.</li>\\n<li>It clears the cache again and restores its old state.</li>\\n</ol>\\n<p>The restrictions are:</p>\\n<ul>\\n<li><a href=\\\"https://github.com/nodejs/node/issues/5016\\\">Native modules cannot be required twice.</a> Thus this module bypasses the require cache only for non-native (e.g. JS) modules.</li>\\n<li>The require cache is only bypassed for all operations that happen synchronously when a module is required. If a module lazy loads another module at a later time that require call will not bypass the cache anymore.</li>\\n</ul>\\n<p>This means you should have a close look at all internal require calls before you decide to use this library.</p>\\n<h2>Installation</h2>\\n<p><a href=\\\"https://npmjs.org/package/stealthy-require\\\"><img src=\\\"https://nodei.co/npm/stealthy-require.png?downloads=true\\\" alt=\\\"NPM Stats\\\"></a></p>\\n<p>This is a module for node.js and is installed via npm:</p>\\n<pre><code class=\\\"language-bash\\\">npm install stealthy-require --save\\n</code></pre>\\n<h2>Usage</h2>\\n<p>Let's say you want to bypass the require cache for this require call:</p>\\n<pre><code class=\\\"language-js\\\">var request = require('request');\\n</code></pre>\\n<p>With <code>stealthy-require</code> you can do that like this:</p>\\n<pre><code class=\\\"language-js\\\">var stealthyRequire = require('stealthy-require');\\n\\nvar requestFresh = stealthyRequire(require.cache, function () {\\n    return require('request');\\n});\\n</code></pre>\\n<p>The require cache is bypassed for the module you require (i.e. <code>request</code>) as well as all modules the module requires (i.e. <code>http</code> and many more).</p>\\n<p>Sometimes the require cache shall not be bypassed for specific modules. E.g. <code>request</code> is required but <code>tough-cookie</code> – on which <code>request</code> depends on – shall be required using the regular cache. For that you can pass two extra arguments to <code>stealthyRequire(...)</code>:</p>\\n<ul>\\n<li>A callback that requires the modules that shall be required without bypassing the cache</li>\\n<li>The <code>module</code> variable</li>\\n</ul>\\n<pre><code class=\\\"language-js\\\">var stealthyRequire = require('stealthy-require');\\n\\nvar requestFresh = stealthyRequire(require.cache, function () {\\n    return require('request');\\n},\\nfunction () {\\n    require('tough-cookie'); // No return needed\\n    // You can require multiple modules here\\n}, module);\\n</code></pre>\\n<h2>Usage with Module Bundlers</h2>\\n<ul>\\n<li><a href=\\\"https://webpack.github.io\\\">Webpack</a> works out-of-the-box like described in the <a href=\\\"#usage\\\">Usage section</a> above.</li>\\n<li><a href=\\\"http://browserify.org\\\">Browserify</a> does not expose <code>require.cache</code>. However, as of <code>browserify@13.0.1</code> the cache is passed as the 6th argument to CommonJS modules. Thus you can pass this argument instead:</li>\\n</ul>\\n<pre><code class=\\\"language-js\\\">// Tweak for Browserify - using arguments[5] instead of require.cache\\nvar requestFresh = stealthyRequire(arguments[5], function () {\\n    return require('request');\\n});\\n</code></pre>\\n<h2>Preventing a Memory Leak When Repeatedly Requiring Fresh Module Instances in Node.js</h2>\\n<p>If you are using <code>stealthy-require</code> in node.js and repeatedly require fresh module instances the <code>module.children</code> array will hold all module instances which prevents unneeded instances to be garbage collected.</p>\\n<p>Assume your code calls <code>doSomething()</code> repeatedly.</p>\\n<pre><code class=\\\"language-js\\\">var stealthyRequire = require('stealthy-require');\\n\\nfunction doSomething() {\\n\\n    var freshInstance = stealthyRequire(require.cache, function () {\\n        return require('some-module');\\n    });\\n    \\n    return freshInstance.calc();\\n\\n}\\n</code></pre>\\n<p>After <code>doSomething()</code> returns <code>freshInstance</code> is not used anymore but won’t be garbage collected because <code>module.children</code> still holds a reference. The solution is to truncate <code>module.children</code> accordingly:</p>\\n<pre><code class=\\\"language-js\\\">var stealthyRequire = require('stealthy-require');\\n\\nfunction doSomething() {\\n\\n    var initialChildren = module.children.slice(); // Creates a shallow copy of the array\\n\\n    var freshInstance = stealthyRequire(require.cache, function () {\\n        return require('some-module');\\n    });\\n\\n    module.children = initialChildren;\\n\\n    return freshInstance.calc();\\n\\n}\\n</code></pre>\\n<p>The <code>slice</code> operation removes all new <code>module.children</code> entries created during the <code>stealthyRequire(...)</code> call and thus <code>freshInstance</code> gets garbage collected after <code>doSomething()</code> returns.</p>\\n<h2>Technical Walkthrough</h2>\\n<pre><code class=\\\"language-js\\\">// 1. Load stealthy-require\\nvar stealthyRequire = require('stealthy-require');\\n// This does nothing but loading the code.\\n// It has no side-effects like patching the module loader or anything.\\n\\n// Any regular require works as always.\\nvar request1 = require('request');\\n\\n// 2. Call stealthyRequire with passing the require cache and a callback.\\nvar requestFresh = stealthyRequire(require.cache, function () {\\n\\n    // 2a. Before this callback gets called the require cache is cleared.\\n\\n    // 2b. Any require taking place here takes place on a clean require cache.\\n    // Since the require call is part of the user's code it also works with module bundlers.\\n    return require('request');\\n    // Anything returned here will be returned by stealthyRequire(...).\\n\\n    // 2c. After this callback gets called the require cache is\\n    // - cleared again and\\n    // - restored to its old state before step 2.\\n\\n});\\n\\n// Any regular require again works as always.\\n// In this case require returns the cached request module instance.\\nvar request2 = require('request');\\n\\n// And voilà:\\nrequest1 === request2 // -> true\\nrequest1 === requestFresh // -> false\\n</code></pre>\\n<h2>Contributing</h2>\\n<p>To set up your development environment for <code>stealthy-require</code>:</p>\\n<ol>\\n<li>Clone this repo to your desktop,</li>\\n<li>in the shell <code>cd</code> to the main folder,</li>\\n<li>hit <code>npm install</code>,</li>\\n<li>hit <code>npm install gulp -g</code> if you haven't installed gulp globally yet, and</li>\\n<li>run <code>gulp dev</code>. (Or run <code>node ./node_modules/.bin/gulp dev</code> if you don't want to install gulp globally.)</li>\\n</ol>\\n<p><code>gulp dev</code> watches all source files and if you save some changes it will lint the code and execute all tests. The test coverage report can be viewed from <code>./coverage/lcov-report/index.html</code>.</p>\\n<p>If you want to debug a test you should use <code>gulp test-without-coverage</code> to run all tests without obscuring the code by the test coverage instrumentation.</p>\\n<h2>Change History</h2>\\n<ul>\\n<li>\\n<p>v1.1.1 (2017-05-08)</p>\\n<ul>\\n<li>Fix that stops <code>undefined</code> entries from appearing in <code>require.cache</code> <em>(Thanks to @jasperjn from reporting this in <a href=\\\"https://github.com/analog-nico/stealthy-require/issues/4\\\">issue #4</a>)</em></li>\\n</ul>\\n</li>\\n<li>\\n<p>v1.1.0 (2017-04-25)</p>\\n<ul>\\n<li>Added ability to disable bypassing the cache for certain modules <em>(Thanks to @novemberborn for suggesting this in <a href=\\\"https://github.com/analog-nico/stealthy-require/issues/3\\\">issue #3</a>)</em></li>\\n<li>Added section in README about a <a href=\\\"#preventing-a-memory-leak-when-repeatedly-requiring-fresh-module-instances-in-nodejs\\\">potential memory leak</a> <em>(Thanks to @Flarna and @novemberborn for bringing that up in <a href=\\\"https://github.com/analog-nico/stealthy-require/issues/2\\\">issue #2</a>)</em></li>\\n<li>Performance optimizations <em>(Thanks to @jcready for <a href=\\\"https://github.com/analog-nico/stealthy-require/pull/1\\\">pull request #1</a>)</em></li>\\n</ul>\\n</li>\\n<li>\\n<p>v1.0.0 (2016-07-18)</p>\\n<ul>\\n<li><strong>Breaking Change:</strong> API completely changed. Please read the <a href=\\\"#usage\\\">Usage section</a> again.</li>\\n<li>Redesigned library to support module bundlers like <a href=\\\"https://webpack.github.io\\\">Webpack</a> and <a href=\\\"http://browserify.org\\\">Browserify</a></li>\\n</ul>\\n</li>\\n<li>\\n<p>v0.1.0 (2016-05-26)</p>\\n<ul>\\n<li>Initial version</li>\\n</ul>\\n</li>\\n</ul>\\n<h2>License (ISC)</h2>\\n<p>In case you never heard about the <a href=\\\"http://en.wikipedia.org/wiki/ISC_license\\\">ISC license</a> it is functionally equivalent to the MIT license.</p>\\n<p>See the <a href=\\\"LICENSE\\\">LICENSE file</a> for details.</p>\",\"docPath\":\"argo-ci/node_modules/stealthy-require/readme\",\"proj\":\"argo-ci\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/docs-argo-ci-node-modules-stealthy-require.json\n// module id = 3192\n// module chunks = 139713805131760"],"sourceRoot":""}