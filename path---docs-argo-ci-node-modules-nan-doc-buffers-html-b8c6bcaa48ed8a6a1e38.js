webpackJsonp([0xa641402e7de3],{2904:function(e,a){e.exports={pathContext:{docHtml:'<h2>Buffers</h2>\n<p>NAN\'s <code>node::Buffer</code> helpers exist as the API has changed across supported Node versions. Use these methods to ensure compatibility.</p>\n<ul>\n<li><a href="#api_nan_new_buffer"><b><code>Nan::NewBuffer()</code></b></a></li>\n<li><a href="#api_nan_copy_buffer"><b><code>Nan::CopyBuffer()</code></b></a></li>\n<li><a href="#api_nan_free_callback"><b><code>Nan::FreeCallback()</code></b></a></li>\n</ul>\n<p><a name="api_nan_new_buffer"></a></p>\n<h3>Nan::NewBuffer()</h3>\n<p>Allocate a new <code>node::Buffer</code> object with the specified size and optional data. Calls <code>node::Buffer::New()</code>.</p>\n<p>Note that when creating a <code>Buffer</code> using <code>Nan::NewBuffer()</code> and an existing <code>char*</code>, it is assumed that the ownership of the pointer is being transferred to the new <code>Buffer</code> for management.\nWhen a <code>node::Buffer</code> instance is garbage collected and a <code>FreeCallback</code> has not been specified, <code>data</code> will be disposed of via a call to <code>free()</code>.\nYou <em>must not</em> free the memory space manually once you have created a <code>Buffer</code> in this way.</p>\n<p>Signature:</p>\n<pre><code class="language-c++">Nan::MaybeLocal&#x3C;v8::Object> Nan::NewBuffer(uint32_t size)\nNan::MaybeLocal&#x3C;v8::Object> Nan::NewBuffer(char* data, uint32_t size)\nNan::MaybeLocal&#x3C;v8::Object> Nan::NewBuffer(char *data,\n                                           size_t length,\n                                           Nan::FreeCallback callback,\n                                           void *hint)\n</code></pre>\n<p><a name="api_nan_copy_buffer"></a></p>\n<h3>Nan::CopyBuffer()</h3>\n<p>Similar to <a href="#api_nan_new_buffer"><code>Nan::NewBuffer()</code></a> except that an implicit memcpy will occur within Node. Calls <code>node::Buffer::Copy()</code>.</p>\n<p>Management of the <code>char*</code> is left to the user, you should manually free the memory space if necessary as the new <code>Buffer</code> will have its own copy.</p>\n<p>Signature:</p>\n<pre><code class="language-c++">Nan::MaybeLocal&#x3C;v8::Object> Nan::CopyBuffer(const char *data, uint32_t size)\n</code></pre>\n<p><a name="api_nan_free_callback"></a></p>\n<h3>Nan::FreeCallback()</h3>\n<p>A free callback that can be provided to <a href="#api_nan_new_buffer"><code>Nan::NewBuffer()</code></a>.\nThe supplied callback will be invoked when the <code>Buffer</code> undergoes garbage collection.</p>\n<p>Signature:</p>\n<pre><code class="language-c++">typedef void (*FreeCallback)(char *data, void *hint);\n</code></pre>',docPath:"argo-ci/node_modules/nan/doc/buffers",proj:"argo-ci"}}}});
//# sourceMappingURL=path---docs-argo-ci-node-modules-nan-doc-buffers-html-b8c6bcaa48ed8a6a1e38.js.map