webpackJsonp([45332606787653],{3145:function(e,n){e.exports={pathContext:{docHtml:"<h1>send</h1>\n<p><a href=\"https://npmjs.org/package/send\"><img src=\"https://img.shields.io/npm/v/send.svg\" alt=\"NPM Version\"></a>\n<a href=\"https://npmjs.org/package/send\"><img src=\"https://img.shields.io/npm/dm/send.svg\" alt=\"NPM Downloads\"></a>\n<a href=\"https://travis-ci.org/pillarjs/send\"><img src=\"https://img.shields.io/travis/pillarjs/send/master.svg?label=linux\" alt=\"Linux Build\"></a>\n<a href=\"https://ci.appveyor.com/project/dougwilson/send\"><img src=\"https://img.shields.io/appveyor/ci/dougwilson/send/master.svg?label=windows\" alt=\"Windows Build\"></a>\n<a href=\"https://coveralls.io/r/pillarjs/send?branch=master\"><img src=\"https://img.shields.io/coveralls/pillarjs/send/master.svg\" alt=\"Test Coverage\"></a>\n<a href=\"https://www.gratipay.com/dougwilson/\"><img src=\"https://img.shields.io/gratipay/dougwilson.svg\" alt=\"Gratipay\"></a></p>\n<p>Send is a library for streaming files from the file system as a http response\nsupporting partial responses (Ranges), conditional-GET negotiation (If-Match,\nIf-Unmodified-Since, If-None-Match, If-Modified-Since), high test coverage,\nand granular events which may be leveraged to take appropriate actions in your\napplication or framework.</p>\n<p>Looking to serve up entire folders mapped to URLs? Try <a href=\"https://www.npmjs.org/package/serve-static\">serve-static</a>.</p>\n<h2>Installation</h2>\n<p>This is a <a href=\"https://nodejs.org/en/\">Node.js</a> module available through the\n<a href=\"https://www.npmjs.com/\">npm registry</a>. Installation is done using the\n<a href=\"https://docs.npmjs.com/getting-started/installing-npm-packages-locally\"><code>npm install</code> command</a>:</p>\n<pre><code class=\"language-bash\">$ npm install send\n</code></pre>\n<h2>API</h2>\n<!-- eslint-disable no-unused-vars -->\n<pre><code class=\"language-js\">var send = require('send')\n</code></pre>\n<h3>send(req, path, [options])</h3>\n<p>Create a new <code>SendStream</code> for the given path to send to a <code>res</code>. The <code>req</code> is\nthe Node.js HTTP request and the <code>path</code> is a urlencoded path to send (urlencoded,\nnot the actual file-system path).</p>\n<h4>Options</h4>\n<h5>acceptRanges</h5>\n<p>Enable or disable accepting ranged requests, defaults to true.\nDisabling this will not send <code>Accept-Ranges</code> and ignore the contents\nof the <code>Range</code> request header.</p>\n<h5>cacheControl</h5>\n<p>Enable or disable setting <code>Cache-Control</code> response header, defaults to\ntrue. Disabling this will ignore the <code>immutable</code> and <code>maxAge</code> options.</p>\n<h5>dotfiles</h5>\n<p>Set how \"dotfiles\" are treated when encountered. A dotfile is a file\nor directory that begins with a dot (\".\"). Note this check is done on\nthe path itself without checking if the path actually exists on the\ndisk. If <code>root</code> is specified, only the dotfiles above the root are\nchecked (i.e. the root itself can be within a dotfile when when set\nto \"deny\").</p>\n<ul>\n<li><code>'allow'</code> No special treatment for dotfiles.</li>\n<li><code>'deny'</code> Send a 403 for any request for a dotfile.</li>\n<li><code>'ignore'</code> Pretend like the dotfile does not exist and 404.</li>\n</ul>\n<p>The default value is <em>similar</em> to <code>'ignore'</code>, with the exception that\nthis default will not ignore the files within a directory that begins\nwith a dot, for backward-compatibility.</p>\n<h5>end</h5>\n<p>Byte offset at which the stream ends, defaults to the length of the file\nminus 1. The end is inclusive in the stream, meaning <code>end: 3</code> will include\nthe 4th byte in the stream.</p>\n<h5>etag</h5>\n<p>Enable or disable etag generation, defaults to true.</p>\n<h5>extensions</h5>\n<p>If a given file doesn't exist, try appending one of the given extensions,\nin the given order. By default, this is disabled (set to <code>false</code>). An\nexample value that will serve extension-less HTML files: <code>['html', 'htm']</code>.\nThis is skipped if the requested file already has an extension.</p>\n<h5>immutable</h5>\n<p>Enable or diable the <code>immutable</code> directive in the <code>Cache-Control</code> response\nheader, defaults to <code>false</code>. If set to <code>true</code>, the <code>maxAge</code> option should\nalso be specified to enable caching. The <code>immutable</code> directive will prevent\nsupported clients from making conditional requests during the life of the\n<code>maxAge</code> option to check if the file has changed.</p>\n<h5>index</h5>\n<p>By default send supports \"index.html\" files, to disable this\nset <code>false</code> or to supply a new index pass a string or an array\nin preferred order.</p>\n<h5>lastModified</h5>\n<p>Enable or disable <code>Last-Modified</code> header, defaults to true. Uses the file\nsystem's last modified value.</p>\n<h5>maxAge</h5>\n<p>Provide a max-age in milliseconds for http caching, defaults to 0.\nThis can also be a string accepted by the\n<a href=\"https://www.npmjs.org/package/ms#readme\">ms</a> module.</p>\n<h5>root</h5>\n<p>Serve files relative to <code>path</code>.</p>\n<h5>start</h5>\n<p>Byte offset at which the stream starts, defaults to 0. The start is inclusive,\nmeaning <code>start: 2</code> will include the 3rd byte in the stream.</p>\n<h4>Events</h4>\n<p>The <code>SendStream</code> is an event emitter and will emit the following events:</p>\n<ul>\n<li><code>error</code> an error occurred <code>(err)</code></li>\n<li><code>directory</code> a directory was requested <code>(res, path)</code></li>\n<li><code>file</code> a file was requested <code>(path, stat)</code></li>\n<li><code>headers</code> the headers are about to be set on a file <code>(res, path, stat)</code></li>\n<li><code>stream</code> file streaming has started <code>(stream)</code></li>\n<li><code>end</code> streaming has completed</li>\n</ul>\n<h4>.pipe</h4>\n<p>The <code>pipe</code> method is used to pipe the response into the Node.js HTTP response\nobject, typically <code>send(req, path, options).pipe(res)</code>.</p>\n<h3>.mime</h3>\n<p>The <code>mime</code> export is the global instance of of the\n<a href=\"https://www.npmjs.com/package/mime\"><code>mime</code> npm module</a>.</p>\n<p>This is used to configure the MIME types that are associated with file extensions\nas well as other options for how to resolve the MIME type of a file (like the\ndefault type to use for an unknown file extension).</p>\n<h2>Error-handling</h2>\n<p>By default when no <code>error</code> listeners are present an automatic response will be\nmade, otherwise you have full control over the response, aka you may show a 5xx\npage etc.</p>\n<h2>Caching</h2>\n<p>It does <em>not</em> perform internal caching, you should use a reverse proxy cache\nsuch as Varnish for this, or those fancy things called CDNs. If your\napplication is small enough that it would benefit from single-node memory\ncaching, it's small enough that it does not need caching at all ;).</p>\n<h2>Debugging</h2>\n<p>To enable <code>debug()</code> instrumentation output export <strong>DEBUG</strong>:</p>\n<pre><code>$ DEBUG=send node app\n</code></pre>\n<h2>Running tests</h2>\n<pre><code>$ npm install\n$ npm test\n</code></pre>\n<h2>Examples</h2>\n<h3>Small example</h3>\n<pre><code class=\"language-js\">var http = require('http')\nvar parseUrl = require('parseurl')\nvar send = require('send')\n\nvar server = http.createServer(function onRequest (req, res) {\n  send(req, parseUrl(req).pathname).pipe(res)\n})\n\nserver.listen(3000)\n</code></pre>\n<h3>Custom file types</h3>\n<pre><code class=\"language-js\">var http = require('http')\nvar parseUrl = require('parseurl')\nvar send = require('send')\n\n// Default unknown types to text/plain\nsend.mime.default_type = 'text/plain'\n\n// Add a custom type\nsend.mime.define({\n  'application/x-my-type': ['x-mt', 'x-mtt']\n})\n\nvar server = http.createServer(function onRequest (req, res) {\n  send(req, parseUrl(req).pathname).pipe(res)\n})\n\nserver.listen(3000)\n</code></pre>\n<h3>Custom directory index view</h3>\n<p>This is a example of serving up a structure of directories with a\ncustom function to render a listing of a directory.</p>\n<pre><code class=\"language-js\">var http = require('http')\nvar fs = require('fs')\nvar parseUrl = require('parseurl')\nvar send = require('send')\n\n// Transfer arbitrary files from within /www/example.com/public/*\n// with a custom handler for directory listing\nvar server = http.createServer(function onRequest (req, res) {\n  send(req, parseUrl(req).pathname, {index: false, root: '/www/example.com/public'})\n  .once('directory', directory)\n  .pipe(res)\n})\n\nserver.listen(3000)\n\n// Custom directory handler\nfunction directory (res, path) {\n  var stream = this\n\n  // redirect to trailing slash for consistent url\n  if (!stream.hasTrailingSlash()) {\n    return stream.redirect(path)\n  }\n\n  // get directory list\n  fs.readdir(path, function onReaddir (err, list) {\n    if (err) return stream.error(err)\n\n    // render an index for the directory\n    res.setHeader('Content-Type', 'text/plain; charset=UTF-8')\n    res.end(list.join('\\n') + '\\n')\n  })\n}\n</code></pre>\n<h3>Serving from a root directory with custom error-handling</h3>\n<pre><code class=\"language-js\">var http = require('http')\nvar parseUrl = require('parseurl')\nvar send = require('send')\n\nvar server = http.createServer(function onRequest (req, res) {\n  // your custom error-handling logic:\n  function error (err) {\n    res.statusCode = err.status || 500\n    res.end(err.message)\n  }\n\n  // your custom headers\n  function headers (res, path, stat) {\n    // serve all files for download\n    res.setHeader('Content-Disposition', 'attachment')\n  }\n\n  // your custom directory handling logic:\n  function redirect () {\n    res.statusCode = 301\n    res.setHeader('Location', req.url + '/')\n    res.end('Redirecting to ' + req.url + '/')\n  }\n\n  // transfer arbitrary files from within\n  // /www/example.com/public/*\n  send(req, parseUrl(req).pathname, {root: '/www/example.com/public'})\n  .on('error', error)\n  .on('directory', redirect)\n  .on('headers', headers)\n  .pipe(res)\n})\n\nserver.listen(3000)\n</code></pre>\n<h2>License</h2>\n<p><a href=\"LICENSE\">MIT</a></p>",docPath:"argo-ci/node_modules/send/readme",proj:"argo-ci"}}}});
//# sourceMappingURL=path---docs-argo-ci-node-modules-send-readme-html-d8cab3bf5b5aa2cfdb70.js.map