{"version":3,"sources":["webpack:///path---docs-argo-ci-node-modules-delegates-69af9a6109da8e793fcf.js","webpack:///./.cache/json/docs-argo-ci-node-modules-delegates.json"],"names":["webpackJsonp","2239","module","exports","pathContext","docHtml","docPath","proj"],"mappings":"AAAAA,cAAc,iBAERC,KACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,aAAeC,QAAA,mkEAA4hEC,QAAA,wCAAAC,KAAA","file":"path---docs-argo-ci-node-modules-delegates-69af9a6109da8e793fcf.js","sourcesContent":["webpackJsonp([258022737893804],{\n\n/***/ 2239:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"pathContext\":{\"docHtml\":\"<h1>delegates</h1>\\n<p>  Node method and accessor delegation utilty.</p>\\n<h2>Installation</h2>\\n<pre><code>$ npm install delegates\\n</code></pre>\\n<h2>Example</h2>\\n<pre><code class=\\\"language-js\\\">var delegate = require('delegates');\\n\\n...\\n\\ndelegate(proto, 'request')\\n  .method('acceptsLanguages')\\n  .method('acceptsEncodings')\\n  .method('acceptsCharsets')\\n  .method('accepts')\\n  .method('is')\\n  .access('querystring')\\n  .access('idempotent')\\n  .access('socket')\\n  .access('length')\\n  .access('query')\\n  .access('search')\\n  .access('status')\\n  .access('method')\\n  .access('path')\\n  .access('body')\\n  .access('host')\\n  .access('url')\\n  .getter('subdomains')\\n  .getter('protocol')\\n  .getter('header')\\n  .getter('stale')\\n  .getter('fresh')\\n  .getter('secure')\\n  .getter('ips')\\n  .getter('ip')\\n</code></pre>\\n<h1>API</h1>\\n<h2>Delegate(proto, prop)</h2>\\n<p>Creates a delegator instance used to configure using the <code>prop</code> on the given\\n<code>proto</code> object. (which is usually a prototype)</p>\\n<h2>Delegate#method(name)</h2>\\n<p>Allows the given method <code>name</code> to be accessed on the host.</p>\\n<h2>Delegate#getter(name)</h2>\\n<p>Creates a \\\"getter\\\" for the property with the given <code>name</code> on the delegated\\nobject.</p>\\n<h2>Delegate#setter(name)</h2>\\n<p>Creates a \\\"setter\\\" for the property with the given <code>name</code> on the delegated\\nobject.</p>\\n<h2>Delegate#access(name)</h2>\\n<p>Creates an \\\"accessor\\\" (ie: both getter <em>and</em> setter) for the property with the\\ngiven <code>name</code> on the delegated object.</p>\\n<h2>Delegate#fluent(name)</h2>\\n<p>A unique type of \\\"accessor\\\" that works for a \\\"fluent\\\" API. When called as a\\ngetter, the method returns the expected value. However, if the method is called\\nwith a value, it will return itself so it can be chained. For example:</p>\\n<pre><code class=\\\"language-js\\\">delegate(proto, 'request')\\n  .fluent('query')\\n\\n// getter\\nvar q = request.query();\\n\\n// setter (chainable)\\nrequest\\n  .query({ a: 1 })\\n  .query({ b: 2 });\\n</code></pre>\\n<h1>License</h1>\\n<p>  MIT</p>\",\"docPath\":\"argo-ci/node_modules/delegates/readme\",\"proj\":\"argo-ci\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---docs-argo-ci-node-modules-delegates-69af9a6109da8e793fcf.js","module.exports = {\"pathContext\":{\"docHtml\":\"<h1>delegates</h1>\\n<p>  Node method and accessor delegation utilty.</p>\\n<h2>Installation</h2>\\n<pre><code>$ npm install delegates\\n</code></pre>\\n<h2>Example</h2>\\n<pre><code class=\\\"language-js\\\">var delegate = require('delegates');\\n\\n...\\n\\ndelegate(proto, 'request')\\n  .method('acceptsLanguages')\\n  .method('acceptsEncodings')\\n  .method('acceptsCharsets')\\n  .method('accepts')\\n  .method('is')\\n  .access('querystring')\\n  .access('idempotent')\\n  .access('socket')\\n  .access('length')\\n  .access('query')\\n  .access('search')\\n  .access('status')\\n  .access('method')\\n  .access('path')\\n  .access('body')\\n  .access('host')\\n  .access('url')\\n  .getter('subdomains')\\n  .getter('protocol')\\n  .getter('header')\\n  .getter('stale')\\n  .getter('fresh')\\n  .getter('secure')\\n  .getter('ips')\\n  .getter('ip')\\n</code></pre>\\n<h1>API</h1>\\n<h2>Delegate(proto, prop)</h2>\\n<p>Creates a delegator instance used to configure using the <code>prop</code> on the given\\n<code>proto</code> object. (which is usually a prototype)</p>\\n<h2>Delegate#method(name)</h2>\\n<p>Allows the given method <code>name</code> to be accessed on the host.</p>\\n<h2>Delegate#getter(name)</h2>\\n<p>Creates a \\\"getter\\\" for the property with the given <code>name</code> on the delegated\\nobject.</p>\\n<h2>Delegate#setter(name)</h2>\\n<p>Creates a \\\"setter\\\" for the property with the given <code>name</code> on the delegated\\nobject.</p>\\n<h2>Delegate#access(name)</h2>\\n<p>Creates an \\\"accessor\\\" (ie: both getter <em>and</em> setter) for the property with the\\ngiven <code>name</code> on the delegated object.</p>\\n<h2>Delegate#fluent(name)</h2>\\n<p>A unique type of \\\"accessor\\\" that works for a \\\"fluent\\\" API. When called as a\\ngetter, the method returns the expected value. However, if the method is called\\nwith a value, it will return itself so it can be chained. For example:</p>\\n<pre><code class=\\\"language-js\\\">delegate(proto, 'request')\\n  .fluent('query')\\n\\n// getter\\nvar q = request.query();\\n\\n// setter (chainable)\\nrequest\\n  .query({ a: 1 })\\n  .query({ b: 2 });\\n</code></pre>\\n<h1>License</h1>\\n<p>  MIT</p>\",\"docPath\":\"argo-ci/node_modules/delegates/readme\",\"proj\":\"argo-ci\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/docs-argo-ci-node-modules-delegates.json\n// module id = 2239\n// module chunks = 258022737893804"],"sourceRoot":""}