{"version":3,"sources":["webpack:///path---docs-argo-ci-node-modules-nan-doc-errors-html-f3d57b9dd20b8c23e8b6.js","webpack:///./.cache/json/docs-argo-ci-node-modules-nan-doc-errors-html.json"],"names":["webpackJsonp","2907","module","exports","pathContext","docHtml","docPath","proj"],"mappings":"AAAAA,cAAc,iBAERC,KACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,aAAeC,QAAA,ktRAA2yRC,QAAA,sCAAAC,KAAA","file":"path---docs-argo-ci-node-modules-nan-doc-errors-html-f3d57b9dd20b8c23e8b6.js","sourcesContent":["webpackJsonp([126829579492712],{\n\n/***/ 2907:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"pathContext\":{\"docHtml\":\"<h2>Errors</h2>\\n<p>NAN includes helpers for creating, throwing and catching Errors as much of this functionality varies across the supported versions of V8 and must be abstracted.</p>\\n<p>Note that an Error object is simply a specialized form of <code>v8::Value</code>.</p>\\n<p>Also consult the V8 Embedders Guide section on <a href=\\\"https://developers.google.com/v8/embed#exceptions\\\">Exceptions</a> for more information.</p>\\n<ul>\\n<li><a href=\\\"#api_nan_error\\\"><b><code>Nan::Error()</code></b></a></li>\\n<li><a href=\\\"#api_nan_range_error\\\"><b><code>Nan::RangeError()</code></b></a></li>\\n<li><a href=\\\"#api_nan_reference_error\\\"><b><code>Nan::ReferenceError()</code></b></a></li>\\n<li><a href=\\\"#api_nan_syntax_error\\\"><b><code>Nan::SyntaxError()</code></b></a></li>\\n<li><a href=\\\"#api_nan_type_error\\\"><b><code>Nan::TypeError()</code></b></a></li>\\n<li><a href=\\\"#api_nan_throw_error\\\"><b><code>Nan::ThrowError()</code></b></a></li>\\n<li><a href=\\\"#api_nan_throw_range_error\\\"><b><code>Nan::ThrowRangeError()</code></b></a></li>\\n<li><a href=\\\"#api_nan_throw_reference_error\\\"><b><code>Nan::ThrowReferenceError()</code></b></a></li>\\n<li><a href=\\\"#api_nan_throw_syntax_error\\\"><b><code>Nan::ThrowSyntaxError()</code></b></a></li>\\n<li><a href=\\\"#api_nan_throw_type_error\\\"><b><code>Nan::ThrowTypeError()</code></b></a></li>\\n<li><a href=\\\"#api_nan_fatal_exception\\\"><b><code>Nan::FatalException()</code></b></a></li>\\n<li><a href=\\\"#api_nan_errno_exception\\\"><b><code>Nan::ErrnoException()</code></b></a></li>\\n<li><a href=\\\"#api_nan_try_catch\\\"><b><code>Nan::TryCatch</code></b></a></li>\\n</ul>\\n<p><a name=\\\"api_nan_error\\\"></a></p>\\n<h3>Nan::Error()</h3>\\n<p>Create a new Error object using the <a href=\\\"https://v8docs.nodesource.com/io.js-3.3/da/d6a/classv8_1_1_exception.html\\\">v8::Exception</a> class in a way that is compatible across the supported versions of V8.</p>\\n<p>Note that an Error object is simply a specialized form of <code>v8::Value</code>.</p>\\n<p>Signature:</p>\\n<pre><code class=\\\"language-c++\\\">v8::Local&#x3C;v8::Value> Nan::Error(const char *msg);\\nv8::Local&#x3C;v8::Value> Nan::Error(v8::Local&#x3C;v8::String> msg);\\n</code></pre>\\n<p><a name=\\\"api_nan_range_error\\\"></a></p>\\n<h3>Nan::RangeError()</h3>\\n<p>Create a new RangeError object using the <a href=\\\"https://v8docs.nodesource.com/io.js-3.3/da/d6a/classv8_1_1_exception.html\\\">v8::Exception</a> class in a way that is compatible across the supported versions of V8.</p>\\n<p>Note that an RangeError object is simply a specialized form of <code>v8::Value</code>.</p>\\n<p>Signature:</p>\\n<pre><code class=\\\"language-c++\\\">v8::Local&#x3C;v8::Value> Nan::RangeError(const char *msg);\\nv8::Local&#x3C;v8::Value> Nan::RangeError(v8::Local&#x3C;v8::String> msg);\\n</code></pre>\\n<p><a name=\\\"api_nan_reference_error\\\"></a></p>\\n<h3>Nan::ReferenceError()</h3>\\n<p>Create a new ReferenceError object using the <a href=\\\"https://v8docs.nodesource.com/io.js-3.3/da/d6a/classv8_1_1_exception.html\\\">v8::Exception</a> class in a way that is compatible across the supported versions of V8.</p>\\n<p>Note that an ReferenceError object is simply a specialized form of <code>v8::Value</code>.</p>\\n<p>Signature:</p>\\n<pre><code class=\\\"language-c++\\\">v8::Local&#x3C;v8::Value> Nan::ReferenceError(const char *msg);\\nv8::Local&#x3C;v8::Value> Nan::ReferenceError(v8::Local&#x3C;v8::String> msg);\\n</code></pre>\\n<p><a name=\\\"api_nan_syntax_error\\\"></a></p>\\n<h3>Nan::SyntaxError()</h3>\\n<p>Create a new SyntaxError object using the <a href=\\\"https://v8docs.nodesource.com/io.js-3.3/da/d6a/classv8_1_1_exception.html\\\">v8::Exception</a> class in a way that is compatible across the supported versions of V8.</p>\\n<p>Note that an SyntaxError object is simply a specialized form of <code>v8::Value</code>.</p>\\n<p>Signature:</p>\\n<pre><code class=\\\"language-c++\\\">v8::Local&#x3C;v8::Value> Nan::SyntaxError(const char *msg);\\nv8::Local&#x3C;v8::Value> Nan::SyntaxError(v8::Local&#x3C;v8::String> msg);\\n</code></pre>\\n<p><a name=\\\"api_nan_type_error\\\"></a></p>\\n<h3>Nan::TypeError()</h3>\\n<p>Create a new TypeError object using the <a href=\\\"https://v8docs.nodesource.com/io.js-3.3/da/d6a/classv8_1_1_exception.html\\\">v8::Exception</a> class in a way that is compatible across the supported versions of V8.</p>\\n<p>Note that an TypeError object is simply a specialized form of <code>v8::Value</code>.</p>\\n<p>Signature:</p>\\n<pre><code class=\\\"language-c++\\\">v8::Local&#x3C;v8::Value> Nan::TypeError(const char *msg);\\nv8::Local&#x3C;v8::Value> Nan::TypeError(v8::Local&#x3C;v8::String> msg);\\n</code></pre>\\n<p><a name=\\\"api_nan_throw_error\\\"></a></p>\\n<h3>Nan::ThrowError()</h3>\\n<p>Throw an Error object (a specialized <code>v8::Value</code> as above) in the current context. If a <code>msg</code> is provided, a new Error object will be created.</p>\\n<p>Signature:</p>\\n<pre><code class=\\\"language-c++\\\">void Nan::ThrowError(const char *msg);\\nvoid Nan::ThrowError(v8::Local&#x3C;v8::String> msg);\\nvoid Nan::ThrowError(v8::Local&#x3C;v8::Value> error);\\n</code></pre>\\n<p><a name=\\\"api_nan_throw_range_error\\\"></a></p>\\n<h3>Nan::ThrowRangeError()</h3>\\n<p>Throw an RangeError object (a specialized <code>v8::Value</code> as above) in the current context. If a <code>msg</code> is provided, a new RangeError object will be created.</p>\\n<p>Signature:</p>\\n<pre><code class=\\\"language-c++\\\">void Nan::ThrowRangeError(const char *msg);\\nvoid Nan::ThrowRangeError(v8::Local&#x3C;v8::String> msg);\\nvoid Nan::ThrowRangeError(v8::Local&#x3C;v8::Value> error);\\n</code></pre>\\n<p><a name=\\\"api_nan_throw_reference_error\\\"></a></p>\\n<h3>Nan::ThrowReferenceError()</h3>\\n<p>Throw an ReferenceError object (a specialized <code>v8::Value</code> as above) in the current context. If a <code>msg</code> is provided, a new ReferenceError object will be created.</p>\\n<p>Signature:</p>\\n<pre><code class=\\\"language-c++\\\">void Nan::ThrowReferenceError(const char *msg);\\nvoid Nan::ThrowReferenceError(v8::Local&#x3C;v8::String> msg);\\nvoid Nan::ThrowReferenceError(v8::Local&#x3C;v8::Value> error);\\n</code></pre>\\n<p><a name=\\\"api_nan_throw_syntax_error\\\"></a></p>\\n<h3>Nan::ThrowSyntaxError()</h3>\\n<p>Throw an SyntaxError object (a specialized <code>v8::Value</code> as above) in the current context. If a <code>msg</code> is provided, a new SyntaxError object will be created.</p>\\n<p>Signature:</p>\\n<pre><code class=\\\"language-c++\\\">void Nan::ThrowSyntaxError(const char *msg);\\nvoid Nan::ThrowSyntaxError(v8::Local&#x3C;v8::String> msg);\\nvoid Nan::ThrowSyntaxError(v8::Local&#x3C;v8::Value> error);\\n</code></pre>\\n<p><a name=\\\"api_nan_throw_type_error\\\"></a></p>\\n<h3>Nan::ThrowTypeError()</h3>\\n<p>Throw an TypeError object (a specialized <code>v8::Value</code> as above) in the current context. If a <code>msg</code> is provided, a new TypeError object will be created.</p>\\n<p>Signature:</p>\\n<pre><code class=\\\"language-c++\\\">void Nan::ThrowTypeError(const char *msg);\\nvoid Nan::ThrowTypeError(v8::Local&#x3C;v8::String> msg);\\nvoid Nan::ThrowTypeError(v8::Local&#x3C;v8::Value> error);\\n</code></pre>\\n<p><a name=\\\"api_nan_fatal_exception\\\"></a></p>\\n<h3>Nan::FatalException()</h3>\\n<p>Replaces <code>node::FatalException()</code> which has a different API across supported versions of Node. For use with <a href=\\\"#api_nan_try_catch\\\"><code>Nan::TryCatch</code></a>.</p>\\n<p>Signature:</p>\\n<pre><code class=\\\"language-c++\\\">void Nan::FatalException(const Nan::TryCatch&#x26; try_catch);\\n</code></pre>\\n<p><a name=\\\"api_nan_errno_exception\\\"></a></p>\\n<h3>Nan::ErrnoException()</h3>\\n<p>Replaces <code>node::ErrnoException()</code> which has a different API across supported versions of Node. </p>\\n<p>Signature:</p>\\n<pre><code class=\\\"language-c++\\\">v8::Local&#x3C;v8::Value> Nan::ErrnoException(int errorno,\\n                                         const char* syscall = NULL,\\n                                         const char* message = NULL,\\n                                         const char* path = NULL);\\n</code></pre>\\n<p><a name=\\\"api_nan_try_catch\\\"></a></p>\\n<h3>Nan::TryCatch</h3>\\n<p>A simple wrapper around <a href=\\\"https://v8docs.nodesource.com/io.js-3.3/d4/dc6/classv8_1_1_try_catch.html\\\"><code>v8::TryCatch</code></a> compatible with all supported versions of V8. Can be used as a direct replacement in most cases. See also <a href=\\\"#api_nan_fatal_exception\\\"><code>Nan::FatalException()</code></a> for an internal use compatible with <code>node::FatalException</code>.</p>\\n<p>Signature:</p>\\n<pre><code class=\\\"language-c++\\\">class Nan::TryCatch {\\n public:\\n  Nan::TryCatch();\\n\\n  bool HasCaught() const;\\n\\n  bool CanContinue() const;\\n\\n  v8::Local&#x3C;v8::Value> ReThrow();\\n\\n  v8::Local&#x3C;v8::Value> Exception() const;\\n\\n  // Nan::MaybeLocal for older versions of V8\\n  v8::MaybeLocal&#x3C;v8::Value> StackTrace() const;\\n\\n  v8::Local&#x3C;v8::Message> Message() const;\\n\\n  void Reset();\\n\\n  void SetVerbose(bool value);\\n\\n  void SetCaptureMessage(bool value);\\n};\\n</code></pre>\",\"docPath\":\"argo-ci/node_modules/nan/doc/errors\",\"proj\":\"argo-ci\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---docs-argo-ci-node-modules-nan-doc-errors-html-f3d57b9dd20b8c23e8b6.js","module.exports = {\"pathContext\":{\"docHtml\":\"<h2>Errors</h2>\\n<p>NAN includes helpers for creating, throwing and catching Errors as much of this functionality varies across the supported versions of V8 and must be abstracted.</p>\\n<p>Note that an Error object is simply a specialized form of <code>v8::Value</code>.</p>\\n<p>Also consult the V8 Embedders Guide section on <a href=\\\"https://developers.google.com/v8/embed#exceptions\\\">Exceptions</a> for more information.</p>\\n<ul>\\n<li><a href=\\\"#api_nan_error\\\"><b><code>Nan::Error()</code></b></a></li>\\n<li><a href=\\\"#api_nan_range_error\\\"><b><code>Nan::RangeError()</code></b></a></li>\\n<li><a href=\\\"#api_nan_reference_error\\\"><b><code>Nan::ReferenceError()</code></b></a></li>\\n<li><a href=\\\"#api_nan_syntax_error\\\"><b><code>Nan::SyntaxError()</code></b></a></li>\\n<li><a href=\\\"#api_nan_type_error\\\"><b><code>Nan::TypeError()</code></b></a></li>\\n<li><a href=\\\"#api_nan_throw_error\\\"><b><code>Nan::ThrowError()</code></b></a></li>\\n<li><a href=\\\"#api_nan_throw_range_error\\\"><b><code>Nan::ThrowRangeError()</code></b></a></li>\\n<li><a href=\\\"#api_nan_throw_reference_error\\\"><b><code>Nan::ThrowReferenceError()</code></b></a></li>\\n<li><a href=\\\"#api_nan_throw_syntax_error\\\"><b><code>Nan::ThrowSyntaxError()</code></b></a></li>\\n<li><a href=\\\"#api_nan_throw_type_error\\\"><b><code>Nan::ThrowTypeError()</code></b></a></li>\\n<li><a href=\\\"#api_nan_fatal_exception\\\"><b><code>Nan::FatalException()</code></b></a></li>\\n<li><a href=\\\"#api_nan_errno_exception\\\"><b><code>Nan::ErrnoException()</code></b></a></li>\\n<li><a href=\\\"#api_nan_try_catch\\\"><b><code>Nan::TryCatch</code></b></a></li>\\n</ul>\\n<p><a name=\\\"api_nan_error\\\"></a></p>\\n<h3>Nan::Error()</h3>\\n<p>Create a new Error object using the <a href=\\\"https://v8docs.nodesource.com/io.js-3.3/da/d6a/classv8_1_1_exception.html\\\">v8::Exception</a> class in a way that is compatible across the supported versions of V8.</p>\\n<p>Note that an Error object is simply a specialized form of <code>v8::Value</code>.</p>\\n<p>Signature:</p>\\n<pre><code class=\\\"language-c++\\\">v8::Local&#x3C;v8::Value> Nan::Error(const char *msg);\\nv8::Local&#x3C;v8::Value> Nan::Error(v8::Local&#x3C;v8::String> msg);\\n</code></pre>\\n<p><a name=\\\"api_nan_range_error\\\"></a></p>\\n<h3>Nan::RangeError()</h3>\\n<p>Create a new RangeError object using the <a href=\\\"https://v8docs.nodesource.com/io.js-3.3/da/d6a/classv8_1_1_exception.html\\\">v8::Exception</a> class in a way that is compatible across the supported versions of V8.</p>\\n<p>Note that an RangeError object is simply a specialized form of <code>v8::Value</code>.</p>\\n<p>Signature:</p>\\n<pre><code class=\\\"language-c++\\\">v8::Local&#x3C;v8::Value> Nan::RangeError(const char *msg);\\nv8::Local&#x3C;v8::Value> Nan::RangeError(v8::Local&#x3C;v8::String> msg);\\n</code></pre>\\n<p><a name=\\\"api_nan_reference_error\\\"></a></p>\\n<h3>Nan::ReferenceError()</h3>\\n<p>Create a new ReferenceError object using the <a href=\\\"https://v8docs.nodesource.com/io.js-3.3/da/d6a/classv8_1_1_exception.html\\\">v8::Exception</a> class in a way that is compatible across the supported versions of V8.</p>\\n<p>Note that an ReferenceError object is simply a specialized form of <code>v8::Value</code>.</p>\\n<p>Signature:</p>\\n<pre><code class=\\\"language-c++\\\">v8::Local&#x3C;v8::Value> Nan::ReferenceError(const char *msg);\\nv8::Local&#x3C;v8::Value> Nan::ReferenceError(v8::Local&#x3C;v8::String> msg);\\n</code></pre>\\n<p><a name=\\\"api_nan_syntax_error\\\"></a></p>\\n<h3>Nan::SyntaxError()</h3>\\n<p>Create a new SyntaxError object using the <a href=\\\"https://v8docs.nodesource.com/io.js-3.3/da/d6a/classv8_1_1_exception.html\\\">v8::Exception</a> class in a way that is compatible across the supported versions of V8.</p>\\n<p>Note that an SyntaxError object is simply a specialized form of <code>v8::Value</code>.</p>\\n<p>Signature:</p>\\n<pre><code class=\\\"language-c++\\\">v8::Local&#x3C;v8::Value> Nan::SyntaxError(const char *msg);\\nv8::Local&#x3C;v8::Value> Nan::SyntaxError(v8::Local&#x3C;v8::String> msg);\\n</code></pre>\\n<p><a name=\\\"api_nan_type_error\\\"></a></p>\\n<h3>Nan::TypeError()</h3>\\n<p>Create a new TypeError object using the <a href=\\\"https://v8docs.nodesource.com/io.js-3.3/da/d6a/classv8_1_1_exception.html\\\">v8::Exception</a> class in a way that is compatible across the supported versions of V8.</p>\\n<p>Note that an TypeError object is simply a specialized form of <code>v8::Value</code>.</p>\\n<p>Signature:</p>\\n<pre><code class=\\\"language-c++\\\">v8::Local&#x3C;v8::Value> Nan::TypeError(const char *msg);\\nv8::Local&#x3C;v8::Value> Nan::TypeError(v8::Local&#x3C;v8::String> msg);\\n</code></pre>\\n<p><a name=\\\"api_nan_throw_error\\\"></a></p>\\n<h3>Nan::ThrowError()</h3>\\n<p>Throw an Error object (a specialized <code>v8::Value</code> as above) in the current context. If a <code>msg</code> is provided, a new Error object will be created.</p>\\n<p>Signature:</p>\\n<pre><code class=\\\"language-c++\\\">void Nan::ThrowError(const char *msg);\\nvoid Nan::ThrowError(v8::Local&#x3C;v8::String> msg);\\nvoid Nan::ThrowError(v8::Local&#x3C;v8::Value> error);\\n</code></pre>\\n<p><a name=\\\"api_nan_throw_range_error\\\"></a></p>\\n<h3>Nan::ThrowRangeError()</h3>\\n<p>Throw an RangeError object (a specialized <code>v8::Value</code> as above) in the current context. If a <code>msg</code> is provided, a new RangeError object will be created.</p>\\n<p>Signature:</p>\\n<pre><code class=\\\"language-c++\\\">void Nan::ThrowRangeError(const char *msg);\\nvoid Nan::ThrowRangeError(v8::Local&#x3C;v8::String> msg);\\nvoid Nan::ThrowRangeError(v8::Local&#x3C;v8::Value> error);\\n</code></pre>\\n<p><a name=\\\"api_nan_throw_reference_error\\\"></a></p>\\n<h3>Nan::ThrowReferenceError()</h3>\\n<p>Throw an ReferenceError object (a specialized <code>v8::Value</code> as above) in the current context. If a <code>msg</code> is provided, a new ReferenceError object will be created.</p>\\n<p>Signature:</p>\\n<pre><code class=\\\"language-c++\\\">void Nan::ThrowReferenceError(const char *msg);\\nvoid Nan::ThrowReferenceError(v8::Local&#x3C;v8::String> msg);\\nvoid Nan::ThrowReferenceError(v8::Local&#x3C;v8::Value> error);\\n</code></pre>\\n<p><a name=\\\"api_nan_throw_syntax_error\\\"></a></p>\\n<h3>Nan::ThrowSyntaxError()</h3>\\n<p>Throw an SyntaxError object (a specialized <code>v8::Value</code> as above) in the current context. If a <code>msg</code> is provided, a new SyntaxError object will be created.</p>\\n<p>Signature:</p>\\n<pre><code class=\\\"language-c++\\\">void Nan::ThrowSyntaxError(const char *msg);\\nvoid Nan::ThrowSyntaxError(v8::Local&#x3C;v8::String> msg);\\nvoid Nan::ThrowSyntaxError(v8::Local&#x3C;v8::Value> error);\\n</code></pre>\\n<p><a name=\\\"api_nan_throw_type_error\\\"></a></p>\\n<h3>Nan::ThrowTypeError()</h3>\\n<p>Throw an TypeError object (a specialized <code>v8::Value</code> as above) in the current context. If a <code>msg</code> is provided, a new TypeError object will be created.</p>\\n<p>Signature:</p>\\n<pre><code class=\\\"language-c++\\\">void Nan::ThrowTypeError(const char *msg);\\nvoid Nan::ThrowTypeError(v8::Local&#x3C;v8::String> msg);\\nvoid Nan::ThrowTypeError(v8::Local&#x3C;v8::Value> error);\\n</code></pre>\\n<p><a name=\\\"api_nan_fatal_exception\\\"></a></p>\\n<h3>Nan::FatalException()</h3>\\n<p>Replaces <code>node::FatalException()</code> which has a different API across supported versions of Node. For use with <a href=\\\"#api_nan_try_catch\\\"><code>Nan::TryCatch</code></a>.</p>\\n<p>Signature:</p>\\n<pre><code class=\\\"language-c++\\\">void Nan::FatalException(const Nan::TryCatch&#x26; try_catch);\\n</code></pre>\\n<p><a name=\\\"api_nan_errno_exception\\\"></a></p>\\n<h3>Nan::ErrnoException()</h3>\\n<p>Replaces <code>node::ErrnoException()</code> which has a different API across supported versions of Node. </p>\\n<p>Signature:</p>\\n<pre><code class=\\\"language-c++\\\">v8::Local&#x3C;v8::Value> Nan::ErrnoException(int errorno,\\n                                         const char* syscall = NULL,\\n                                         const char* message = NULL,\\n                                         const char* path = NULL);\\n</code></pre>\\n<p><a name=\\\"api_nan_try_catch\\\"></a></p>\\n<h3>Nan::TryCatch</h3>\\n<p>A simple wrapper around <a href=\\\"https://v8docs.nodesource.com/io.js-3.3/d4/dc6/classv8_1_1_try_catch.html\\\"><code>v8::TryCatch</code></a> compatible with all supported versions of V8. Can be used as a direct replacement in most cases. See also <a href=\\\"#api_nan_fatal_exception\\\"><code>Nan::FatalException()</code></a> for an internal use compatible with <code>node::FatalException</code>.</p>\\n<p>Signature:</p>\\n<pre><code class=\\\"language-c++\\\">class Nan::TryCatch {\\n public:\\n  Nan::TryCatch();\\n\\n  bool HasCaught() const;\\n\\n  bool CanContinue() const;\\n\\n  v8::Local&#x3C;v8::Value> ReThrow();\\n\\n  v8::Local&#x3C;v8::Value> Exception() const;\\n\\n  // Nan::MaybeLocal for older versions of V8\\n  v8::MaybeLocal&#x3C;v8::Value> StackTrace() const;\\n\\n  v8::Local&#x3C;v8::Message> Message() const;\\n\\n  void Reset();\\n\\n  void SetVerbose(bool value);\\n\\n  void SetCaptureMessage(bool value);\\n};\\n</code></pre>\",\"docPath\":\"argo-ci/node_modules/nan/doc/errors\",\"proj\":\"argo-ci\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/docs-argo-ci-node-modules-nan-doc-errors-html.json\n// module id = 2907\n// module chunks = 126829579492712"],"sourceRoot":""}