{"version":3,"sources":["webpack:///path---docs-argo-ci-node-modules-nan-doc-new-html-d2dd366429828773274a.js","webpack:///./.cache/json/docs-argo-ci-node-modules-nan-doc-new-html.json"],"names":["webpackJsonp","2911","module","exports","pathContext","docHtml","docPath","proj"],"mappings":"AAAAA,cAAc,iBAERC,KACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,aAAeC,QAAA,0hMAAg9LC,QAAA,mCAAAC,KAAA","file":"path---docs-argo-ci-node-modules-nan-doc-new-html-d2dd366429828773274a.js","sourcesContent":["webpackJsonp([90887058591609],{\n\n/***/ 2911:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"pathContext\":{\"docHtml\":\"<h2>New</h2>\\n<p>NAN provides a <code>Nan::New()</code> helper for the creation of new JavaScript objects in a way that's compatible across the supported versions of V8.</p>\\n<ul>\\n<li><a href=\\\"#api_nan_new\\\"><b><code>Nan::New()</code></b></a></li>\\n<li><a href=\\\"#api_nan_undefined\\\"><b><code>Nan::Undefined()</code></b></a></li>\\n<li><a href=\\\"#api_nan_null\\\"><b><code>Nan::Null()</code></b></a></li>\\n<li><a href=\\\"#api_nan_true\\\"><b><code>Nan::True()</code></b></a></li>\\n<li><a href=\\\"#api_nan_false\\\"><b><code>Nan::False()</code></b></a></li>\\n<li><a href=\\\"#api_nan_empty_string\\\"><b><code>Nan::EmptyString()</code></b></a></li>\\n</ul>\\n<p><a name=\\\"api_nan_new\\\"></a></p>\\n<h3>Nan::New()</h3>\\n<p><code>Nan::New()</code> should be used to instantiate new JavaScript objects.</p>\\n<p>Refer to the specific V8 type in the <a href=\\\"https://v8docs.nodesource.com/io.js-3.3/d1/d83/classv8_1_1_data.html\\\">V8 documentation</a> for information on the types of arguments required for instantiation.</p>\\n<p>Signatures:</p>\\n<p>Return types are mostly omitted from the signatures for simplicity. In most cases the type will be contained within a <code>v8::Local&#x3C;T></code>. The following types will be contained within a <code>Nan::MaybeLocal&#x3C;T></code>: <code>v8::String</code>, <code>v8::Date</code>, <code>v8::RegExp</code>, <code>v8::Script</code>, <code>v8::UnboundScript</code>.</p>\\n<p>Empty objects:</p>\\n<pre><code class=\\\"language-c++\\\">Nan::New&#x3C;T>();\\n</code></pre>\\n<p>Generic single and multiple-argument:</p>\\n<pre><code class=\\\"language-c++\\\">Nan::New&#x3C;T>(A0 arg0);\\nNan::New&#x3C;T>(A0 arg0, A1 arg1);\\nNan::New&#x3C;T>(A0 arg0, A1 arg1, A2 arg2);\\nNan::New&#x3C;T>(A0 arg0, A1 arg1, A2 arg2, A3 arg3);\\n</code></pre>\\n<p>For creating <code>v8::FunctionTemplate</code> and <code>v8::Function</code> objects:</p>\\n<p><em>The definition of <code>Nan::FunctionCallback</code> can be found in the [Method declaration](./methods.md#api</em>nan<em>method) documentation.</em></p>\\n<pre><code class=\\\"language-c++\\\">Nan::New&#x3C;T>(Nan::FunctionCallback callback,\\n            v8::Local&#x3C;v8::Value> data = v8::Local&#x3C;v8::Value>());\\nNan::New&#x3C;T>(Nan::FunctionCallback callback,\\n            v8::Local&#x3C;v8::Value> data = v8::Local&#x3C;v8::Value>(),\\n            A2 a2 = A2());\\n</code></pre>\\n<p>Native number types:</p>\\n<pre><code class=\\\"language-c++\\\">v8::Local&#x3C;v8::Boolean> Nan::New&#x3C;T>(bool value);\\nv8::Local&#x3C;v8::Int32> Nan::New&#x3C;T>(int32_t value);\\nv8::Local&#x3C;v8::Uint32> Nan::New&#x3C;T>(uint32_t value);\\nv8::Local&#x3C;v8::Number> Nan::New&#x3C;T>(double value);\\n</code></pre>\\n<p>String types:</p>\\n<pre><code class=\\\"language-c++\\\">Nan::MaybeLocal&#x3C;v8::String> Nan::New&#x3C;T>(std::string const&#x26; value);\\nNan::MaybeLocal&#x3C;v8::String> Nan::New&#x3C;T>(const char * value, int length);\\nNan::MaybeLocal&#x3C;v8::String> Nan::New&#x3C;T>(const char * value);\\nNan::MaybeLocal&#x3C;v8::String> Nan::New&#x3C;T>(const uint16_t * value);\\nNan::MaybeLocal&#x3C;v8::String> Nan::New&#x3C;T>(const uint16_t * value, int length);\\n</code></pre>\\n<p>Specialized types:</p>\\n<pre><code class=\\\"language-c++\\\">v8::Local&#x3C;v8::String> Nan::New&#x3C;T>(v8::String::ExternalStringResource * value);\\nv8::Local&#x3C;v8::String> Nan::New&#x3C;T>(Nan::ExternalOneByteStringResource * value);\\nv8::Local&#x3C;v8::RegExp> Nan::New&#x3C;T>(v8::Local&#x3C;v8::String> pattern, v8::RegExp::Flags flags);\\n</code></pre>\\n<p>Note that <code>Nan::ExternalOneByteStringResource</code> maps to <a href=\\\"https://v8docs.nodesource.com/io.js-3.3/d9/db3/classv8_1_1_string_1_1_external_one_byte_string_resource.html\\\"><code>v8::String::ExternalOneByteStringResource</code></a>, and <code>v8::String::ExternalAsciiStringResource</code> in older versions of V8.</p>\\n<p><a name=\\\"api_nan_undefined\\\"></a></p>\\n<h3>Nan::Undefined()</h3>\\n<p>A helper method to reference the <code>v8::Undefined</code> object in a way that is compatible across all supported versions of V8.</p>\\n<p>Signature:</p>\\n<pre><code class=\\\"language-c++\\\">v8::Local&#x3C;v8::Primitive> Nan::Undefined()\\n</code></pre>\\n<p><a name=\\\"api_nan_null\\\"></a></p>\\n<h3>Nan::Null()</h3>\\n<p>A helper method to reference the <code>v8::Null</code> object in a way that is compatible across all supported versions of V8.</p>\\n<p>Signature:</p>\\n<pre><code class=\\\"language-c++\\\">v8::Local&#x3C;v8::Primitive> Nan::Null()\\n</code></pre>\\n<p><a name=\\\"api_nan_true\\\"></a></p>\\n<h3>Nan::True()</h3>\\n<p>A helper method to reference the <code>v8::Boolean</code> object representing the <code>true</code> value in a way that is compatible across all supported versions of V8.</p>\\n<p>Signature:</p>\\n<pre><code class=\\\"language-c++\\\">v8::Local&#x3C;v8::Boolean> Nan::True()\\n</code></pre>\\n<p><a name=\\\"api_nan_false\\\"></a></p>\\n<h3>Nan::False()</h3>\\n<p>A helper method to reference the <code>v8::Boolean</code> object representing the <code>false</code> value in a way that is compatible across all supported versions of V8.</p>\\n<p>Signature:</p>\\n<pre><code class=\\\"language-c++\\\">v8::Local&#x3C;v8::Boolean> Nan::False()\\n</code></pre>\\n<p><a name=\\\"api_nan_empty_string\\\"></a></p>\\n<h3>Nan::EmptyString()</h3>\\n<p>Call <a href=\\\"https://v8docs.nodesource.com/io.js-3.3/d2/db3/classv8_1_1_string.html#a7c1bc8886115d7ee46f1d571dd6ebc6d\\\"><code>v8::String::Empty</code></a> to reference the empty string in a way that is compatible across all supported versions of V8.</p>\\n<p>Signature:</p>\\n<pre><code class=\\\"language-c++\\\">v8::Local&#x3C;v8::String> Nan::EmptyString()\\n</code></pre>\\n<p><a name=\\\"api_nan_new_one_byte_string\\\"></a></p>\\n<h3>Nan::NewOneByteString()</h3>\\n<p>An implementation of <a href=\\\"https://v8docs.nodesource.com/io.js-3.3/d2/db3/classv8_1_1_string.html#a5264d50b96d2c896ce525a734dc10f09\\\"><code>v8::String::NewFromOneByte()</code></a> provided for consistent availability and API across supported versions of V8. Allocates a new string from Latin-1 data.</p>\\n<p>Signature:</p>\\n<pre><code class=\\\"language-c++\\\">Nan::MaybeLocal&#x3C;v8::String> Nan::NewOneByteString(const uint8_t * value,\\n                                                  int length = -1)\\n</code></pre>\",\"docPath\":\"argo-ci/node_modules/nan/doc/new\",\"proj\":\"argo-ci\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---docs-argo-ci-node-modules-nan-doc-new-html-d2dd366429828773274a.js","module.exports = {\"pathContext\":{\"docHtml\":\"<h2>New</h2>\\n<p>NAN provides a <code>Nan::New()</code> helper for the creation of new JavaScript objects in a way that's compatible across the supported versions of V8.</p>\\n<ul>\\n<li><a href=\\\"#api_nan_new\\\"><b><code>Nan::New()</code></b></a></li>\\n<li><a href=\\\"#api_nan_undefined\\\"><b><code>Nan::Undefined()</code></b></a></li>\\n<li><a href=\\\"#api_nan_null\\\"><b><code>Nan::Null()</code></b></a></li>\\n<li><a href=\\\"#api_nan_true\\\"><b><code>Nan::True()</code></b></a></li>\\n<li><a href=\\\"#api_nan_false\\\"><b><code>Nan::False()</code></b></a></li>\\n<li><a href=\\\"#api_nan_empty_string\\\"><b><code>Nan::EmptyString()</code></b></a></li>\\n</ul>\\n<p><a name=\\\"api_nan_new\\\"></a></p>\\n<h3>Nan::New()</h3>\\n<p><code>Nan::New()</code> should be used to instantiate new JavaScript objects.</p>\\n<p>Refer to the specific V8 type in the <a href=\\\"https://v8docs.nodesource.com/io.js-3.3/d1/d83/classv8_1_1_data.html\\\">V8 documentation</a> for information on the types of arguments required for instantiation.</p>\\n<p>Signatures:</p>\\n<p>Return types are mostly omitted from the signatures for simplicity. In most cases the type will be contained within a <code>v8::Local&#x3C;T></code>. The following types will be contained within a <code>Nan::MaybeLocal&#x3C;T></code>: <code>v8::String</code>, <code>v8::Date</code>, <code>v8::RegExp</code>, <code>v8::Script</code>, <code>v8::UnboundScript</code>.</p>\\n<p>Empty objects:</p>\\n<pre><code class=\\\"language-c++\\\">Nan::New&#x3C;T>();\\n</code></pre>\\n<p>Generic single and multiple-argument:</p>\\n<pre><code class=\\\"language-c++\\\">Nan::New&#x3C;T>(A0 arg0);\\nNan::New&#x3C;T>(A0 arg0, A1 arg1);\\nNan::New&#x3C;T>(A0 arg0, A1 arg1, A2 arg2);\\nNan::New&#x3C;T>(A0 arg0, A1 arg1, A2 arg2, A3 arg3);\\n</code></pre>\\n<p>For creating <code>v8::FunctionTemplate</code> and <code>v8::Function</code> objects:</p>\\n<p><em>The definition of <code>Nan::FunctionCallback</code> can be found in the [Method declaration](./methods.md#api</em>nan<em>method) documentation.</em></p>\\n<pre><code class=\\\"language-c++\\\">Nan::New&#x3C;T>(Nan::FunctionCallback callback,\\n            v8::Local&#x3C;v8::Value> data = v8::Local&#x3C;v8::Value>());\\nNan::New&#x3C;T>(Nan::FunctionCallback callback,\\n            v8::Local&#x3C;v8::Value> data = v8::Local&#x3C;v8::Value>(),\\n            A2 a2 = A2());\\n</code></pre>\\n<p>Native number types:</p>\\n<pre><code class=\\\"language-c++\\\">v8::Local&#x3C;v8::Boolean> Nan::New&#x3C;T>(bool value);\\nv8::Local&#x3C;v8::Int32> Nan::New&#x3C;T>(int32_t value);\\nv8::Local&#x3C;v8::Uint32> Nan::New&#x3C;T>(uint32_t value);\\nv8::Local&#x3C;v8::Number> Nan::New&#x3C;T>(double value);\\n</code></pre>\\n<p>String types:</p>\\n<pre><code class=\\\"language-c++\\\">Nan::MaybeLocal&#x3C;v8::String> Nan::New&#x3C;T>(std::string const&#x26; value);\\nNan::MaybeLocal&#x3C;v8::String> Nan::New&#x3C;T>(const char * value, int length);\\nNan::MaybeLocal&#x3C;v8::String> Nan::New&#x3C;T>(const char * value);\\nNan::MaybeLocal&#x3C;v8::String> Nan::New&#x3C;T>(const uint16_t * value);\\nNan::MaybeLocal&#x3C;v8::String> Nan::New&#x3C;T>(const uint16_t * value, int length);\\n</code></pre>\\n<p>Specialized types:</p>\\n<pre><code class=\\\"language-c++\\\">v8::Local&#x3C;v8::String> Nan::New&#x3C;T>(v8::String::ExternalStringResource * value);\\nv8::Local&#x3C;v8::String> Nan::New&#x3C;T>(Nan::ExternalOneByteStringResource * value);\\nv8::Local&#x3C;v8::RegExp> Nan::New&#x3C;T>(v8::Local&#x3C;v8::String> pattern, v8::RegExp::Flags flags);\\n</code></pre>\\n<p>Note that <code>Nan::ExternalOneByteStringResource</code> maps to <a href=\\\"https://v8docs.nodesource.com/io.js-3.3/d9/db3/classv8_1_1_string_1_1_external_one_byte_string_resource.html\\\"><code>v8::String::ExternalOneByteStringResource</code></a>, and <code>v8::String::ExternalAsciiStringResource</code> in older versions of V8.</p>\\n<p><a name=\\\"api_nan_undefined\\\"></a></p>\\n<h3>Nan::Undefined()</h3>\\n<p>A helper method to reference the <code>v8::Undefined</code> object in a way that is compatible across all supported versions of V8.</p>\\n<p>Signature:</p>\\n<pre><code class=\\\"language-c++\\\">v8::Local&#x3C;v8::Primitive> Nan::Undefined()\\n</code></pre>\\n<p><a name=\\\"api_nan_null\\\"></a></p>\\n<h3>Nan::Null()</h3>\\n<p>A helper method to reference the <code>v8::Null</code> object in a way that is compatible across all supported versions of V8.</p>\\n<p>Signature:</p>\\n<pre><code class=\\\"language-c++\\\">v8::Local&#x3C;v8::Primitive> Nan::Null()\\n</code></pre>\\n<p><a name=\\\"api_nan_true\\\"></a></p>\\n<h3>Nan::True()</h3>\\n<p>A helper method to reference the <code>v8::Boolean</code> object representing the <code>true</code> value in a way that is compatible across all supported versions of V8.</p>\\n<p>Signature:</p>\\n<pre><code class=\\\"language-c++\\\">v8::Local&#x3C;v8::Boolean> Nan::True()\\n</code></pre>\\n<p><a name=\\\"api_nan_false\\\"></a></p>\\n<h3>Nan::False()</h3>\\n<p>A helper method to reference the <code>v8::Boolean</code> object representing the <code>false</code> value in a way that is compatible across all supported versions of V8.</p>\\n<p>Signature:</p>\\n<pre><code class=\\\"language-c++\\\">v8::Local&#x3C;v8::Boolean> Nan::False()\\n</code></pre>\\n<p><a name=\\\"api_nan_empty_string\\\"></a></p>\\n<h3>Nan::EmptyString()</h3>\\n<p>Call <a href=\\\"https://v8docs.nodesource.com/io.js-3.3/d2/db3/classv8_1_1_string.html#a7c1bc8886115d7ee46f1d571dd6ebc6d\\\"><code>v8::String::Empty</code></a> to reference the empty string in a way that is compatible across all supported versions of V8.</p>\\n<p>Signature:</p>\\n<pre><code class=\\\"language-c++\\\">v8::Local&#x3C;v8::String> Nan::EmptyString()\\n</code></pre>\\n<p><a name=\\\"api_nan_new_one_byte_string\\\"></a></p>\\n<h3>Nan::NewOneByteString()</h3>\\n<p>An implementation of <a href=\\\"https://v8docs.nodesource.com/io.js-3.3/d2/db3/classv8_1_1_string.html#a5264d50b96d2c896ce525a734dc10f09\\\"><code>v8::String::NewFromOneByte()</code></a> provided for consistent availability and API across supported versions of V8. Allocates a new string from Latin-1 data.</p>\\n<p>Signature:</p>\\n<pre><code class=\\\"language-c++\\\">Nan::MaybeLocal&#x3C;v8::String> Nan::NewOneByteString(const uint8_t * value,\\n                                                  int length = -1)\\n</code></pre>\",\"docPath\":\"argo-ci/node_modules/nan/doc/new\",\"proj\":\"argo-ci\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/docs-argo-ci-node-modules-nan-doc-new-html.json\n// module id = 2911\n// module chunks = 90887058591609"],"sourceRoot":""}