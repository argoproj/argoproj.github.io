webpackJsonp([0x6755aab75bfa],{2041:function(e,s){e.exports={pathContext:{docHtml:'<h2>2.0.6</h2>\n<p>Version 2.0.4 adds support for React Native by clarifying in package.json that\nthe browser environment does not support Node.js domains.\nWhy this is necessary, we leave as an exercise for the user.</p>\n<h2>2.0.3</h2>\n<p>Version 2.0.3 fixes a bug when adjusting the capacity of the task queue.</p>\n<h2>2.0.1-2.02</h2>\n<p>Version 2.0.1 fixes a bug in the way redirects were expressed that affected the\nfunction of Browserify, but which Mr would tolerate.</p>\n<h2>2.0.0</h2>\n<p>Version 2 of ASAP is a full rewrite with a few salient changes.\nFirst, the ASAP source is CommonJS only and designed with <a href="https://github.com/substack/node-browserify">Browserify</a> and\n<a href="https://github.com/montagejs/mr">Browserify-compatible</a> module loaders in mind.</p>\n<p>The new version has been refactored in two dimensions.\nSupport for Node.js and browsers have been separated, using Browserify\nredirects and ASAP has been divided into two modules.\nThe "raw" layer depends on the tasks to catch thrown exceptions and unravel\nNode.js domains.</p>\n<p>The full implementation of ASAP is loadable as <code>require("asap")</code> in both Node.js\nand browsers.</p>\n<p>The raw layer that lacks exception handling overhead is loadable as\n<code>require("asap/raw")</code>.\nThe interface is the same for both layers.</p>\n<p>Tasks are no longer required to be functions, but can rather be any object that\nimplements <code>task.call()</code>.\nWith this feature you can recycle task objects to avoid garbage collector churn\nand avoid closures in general.</p>\n<p>The implementation has been rigorously documented so that our successors can\nunderstand the scope of the problem that this module solves and all of its\nnuances, ensuring that the next generation of implementations know what details\nare essential.</p>\n<ul>\n<li><a href="https://github.com/kriskowal/asap/blob/master/asap.js">asap.js</a></li>\n<li><a href="https://github.com/kriskowal/asap/blob/master/raw.js">raw.js</a></li>\n<li><a href="https://github.com/kriskowal/asap/blob/master/browser-asap.js">browser-asap.js</a></li>\n<li><a href="https://github.com/kriskowal/asap/blob/master/browser-raw.js">browser-raw.js</a></li>\n</ul>\n<p>The new version has also been rigorously tested across a broad spectrum of\nbrowsers, in both the window and worker context.\nThe following charts capture the browser test results for the most recent\nrelease.\nThe first chart shows test results for ASAP running in the main window context.\nThe second chart shows test results for ASAP running in a web worker context.\nTest results are inconclusive (grey) on browsers that do not support web\nworkers.\nThese data are captured automatically by <a href="https://github.com/kriskowal/asap/blob/master/CONTRIBUTING.md">Continuous\nIntegration</a>.</p>\n<p><img src="http://kriskowal-asap.s3-website-us-west-2.amazonaws.com/train/integration-2/saucelabs-results-matrix.svg" alt="Browser Compatibility"></p>\n<p><img src="http://kriskowal-asap.s3-website-us-west-2.amazonaws.com/train/integration-2/saucelabs-worker-results-matrix.svg" alt="Compatibility in Web Workers"></p>',docPath:"argo-ci/node_modules/asap/changes",proj:"argo-ci"}}}});
//# sourceMappingURL=path---docs-argo-ci-node-modules-asap-changes-html-0e591006350b927deb01.js.map