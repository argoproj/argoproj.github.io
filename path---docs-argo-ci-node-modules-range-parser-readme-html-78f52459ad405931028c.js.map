{"version":3,"sources":["webpack:///path---docs-argo-ci-node-modules-range-parser-readme-html-78f52459ad405931028c.js","webpack:///./.cache/json/docs-argo-ci-node-modules-range-parser-readme-html.json"],"names":["webpackJsonp","3075","module","exports","pathContext","docHtml","docPath","proj"],"mappings":"AAAAA,cAAc,iBAERC,KACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,aAAeC,QAAA,ymEAAmkEC,QAAA,2CAAAC,KAAA","file":"path---docs-argo-ci-node-modules-range-parser-readme-html-78f52459ad405931028c.js","sourcesContent":["webpackJsonp([191949506128856],{\n\n/***/ 3075:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"pathContext\":{\"docHtml\":\"<h1>range-parser</h1>\\n<p><a href=\\\"https://npmjs.org/package/range-parser\\\"><img src=\\\"https://img.shields.io/npm/v/range-parser.svg\\\" alt=\\\"NPM Version\\\"></a>\\n<a href=\\\"https://npmjs.org/package/range-parser\\\"><img src=\\\"https://img.shields.io/npm/dm/range-parser.svg\\\" alt=\\\"NPM Downloads\\\"></a>\\n<a href=\\\"https://nodejs.org/endownload\\\"><img src=\\\"https://img.shields.io/node/v/range-parser.svg\\\" alt=\\\"Node.js Version\\\"></a>\\n<a href=\\\"https://travis-ci.org/jshttp/range-parser\\\"><img src=\\\"https://img.shields.io/travis/jshttp/range-parser.svg\\\" alt=\\\"Build Status\\\"></a>\\n<a href=\\\"https://coveralls.io/r/jshttp/range-parser\\\"><img src=\\\"https://img.shields.io/coveralls/jshttp/range-parser.svg\\\" alt=\\\"Test Coverage\\\"></a></p>\\n<p>Range header field parser.</p>\\n<h2>Installation</h2>\\n<pre><code>$ npm install range-parser\\n</code></pre>\\n<h2>API</h2>\\n<pre><code class=\\\"language-js\\\">var parseRange = require('range-parser')\\n</code></pre>\\n<h3>parseRange(size, header, options)</h3>\\n<p>Parse the given <code>header</code> string where <code>size</code> is the maximum size of the resource.\\nAn array of ranges will be returned or negative numbers indicating an error parsing.</p>\\n<ul>\\n<li><code>-2</code> signals a malformed header string</li>\\n<li><code>-1</code> signals an unsatisfiable range</li>\\n</ul>\\n<pre><code class=\\\"language-js\\\">// parse header from request\\nvar range = parseRange(size, req.headers.range)\\n\\n// the type of the range\\nif (range.type === 'bytes') {\\n  // the ranges\\n  range.forEach(function (r) {\\n    // do something with r.start and r.end\\n  })\\n}\\n</code></pre>\\n<h4>Options</h4>\\n<p>These properties are accepted in the options object.</p>\\n<h5>combine</h5>\\n<p>Specifies if overlapping &#x26; adjacent ranges should be combined, defaults to <code>false</code>.\\nWhen <code>true</code>, ranges will be combined and returned as if they were specified that\\nway in the header.</p>\\n<pre><code class=\\\"language-js\\\">parseRange(100, 'bytes=50-55,0-10,5-10,56-60', { combine: true })\\n// => [\\n//      { start: 0,  end: 10 },\\n//      { start: 50, end: 60 }\\n//    ]\\n</code></pre>\\n<h2>License</h2>\\n<p><a href=\\\"LICENSE\\\">MIT</a></p>\",\"docPath\":\"argo-ci/node_modules/range-parser/readme\",\"proj\":\"argo-ci\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---docs-argo-ci-node-modules-range-parser-readme-html-78f52459ad405931028c.js","module.exports = {\"pathContext\":{\"docHtml\":\"<h1>range-parser</h1>\\n<p><a href=\\\"https://npmjs.org/package/range-parser\\\"><img src=\\\"https://img.shields.io/npm/v/range-parser.svg\\\" alt=\\\"NPM Version\\\"></a>\\n<a href=\\\"https://npmjs.org/package/range-parser\\\"><img src=\\\"https://img.shields.io/npm/dm/range-parser.svg\\\" alt=\\\"NPM Downloads\\\"></a>\\n<a href=\\\"https://nodejs.org/endownload\\\"><img src=\\\"https://img.shields.io/node/v/range-parser.svg\\\" alt=\\\"Node.js Version\\\"></a>\\n<a href=\\\"https://travis-ci.org/jshttp/range-parser\\\"><img src=\\\"https://img.shields.io/travis/jshttp/range-parser.svg\\\" alt=\\\"Build Status\\\"></a>\\n<a href=\\\"https://coveralls.io/r/jshttp/range-parser\\\"><img src=\\\"https://img.shields.io/coveralls/jshttp/range-parser.svg\\\" alt=\\\"Test Coverage\\\"></a></p>\\n<p>Range header field parser.</p>\\n<h2>Installation</h2>\\n<pre><code>$ npm install range-parser\\n</code></pre>\\n<h2>API</h2>\\n<pre><code class=\\\"language-js\\\">var parseRange = require('range-parser')\\n</code></pre>\\n<h3>parseRange(size, header, options)</h3>\\n<p>Parse the given <code>header</code> string where <code>size</code> is the maximum size of the resource.\\nAn array of ranges will be returned or negative numbers indicating an error parsing.</p>\\n<ul>\\n<li><code>-2</code> signals a malformed header string</li>\\n<li><code>-1</code> signals an unsatisfiable range</li>\\n</ul>\\n<pre><code class=\\\"language-js\\\">// parse header from request\\nvar range = parseRange(size, req.headers.range)\\n\\n// the type of the range\\nif (range.type === 'bytes') {\\n  // the ranges\\n  range.forEach(function (r) {\\n    // do something with r.start and r.end\\n  })\\n}\\n</code></pre>\\n<h4>Options</h4>\\n<p>These properties are accepted in the options object.</p>\\n<h5>combine</h5>\\n<p>Specifies if overlapping &#x26; adjacent ranges should be combined, defaults to <code>false</code>.\\nWhen <code>true</code>, ranges will be combined and returned as if they were specified that\\nway in the header.</p>\\n<pre><code class=\\\"language-js\\\">parseRange(100, 'bytes=50-55,0-10,5-10,56-60', { combine: true })\\n// => [\\n//      { start: 0,  end: 10 },\\n//      { start: 50, end: 60 }\\n//    ]\\n</code></pre>\\n<h2>License</h2>\\n<p><a href=\\\"LICENSE\\\">MIT</a></p>\",\"docPath\":\"argo-ci/node_modules/range-parser/readme\",\"proj\":\"argo-ci\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/docs-argo-ci-node-modules-range-parser-readme-html.json\n// module id = 3075\n// module chunks = 191949506128856"],"sourceRoot":""}