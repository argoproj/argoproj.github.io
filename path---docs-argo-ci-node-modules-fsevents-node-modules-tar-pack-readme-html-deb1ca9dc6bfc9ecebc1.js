webpackJsonp([0xbb781ffb3258],{2596:function(e,o){e.exports={pathContext:{docHtml:'<h1>Tar Pack</h1>\n<p>Package and un-package modules of some sort (in tar/gz bundles).  This is mostly useful for package managers.  Note that it doesn\'t check for or touch <code>package.json</code> so it can be used even if that\'s not the way you store your package info.</p>\n<p><a href="https://travis-ci.org/ForbesLindesay/tar-pack"><img src="https://img.shields.io/travis/ForbesLindesay/tar-pack/master.svg" alt="Build Status"></a>\n<a href="https://david-dm.org/ForbesLindesay/tar-pack"><img src="https://img.shields.io/david/ForbesLindesay/tar-pack.svg" alt="Dependency Status"></a>\n<a href="https://www.npmjs.com/package/tar-pack"><img src="https://img.shields.io/npm/v/tar-pack.svg" alt="NPM version"></a></p>\n<h2>Installation</h2>\n<pre><code>$ npm install tar-pack\n</code></pre>\n<h2>API</h2>\n<h3>pack(folder|packer, [options])</h3>\n<p>Pack the folder at <code>folder</code> into a gzipped tarball and return the tgz as a stream.  Files ignored by <code>.gitignore</code> will not be in the package.</p>\n<p>You can optionally pass a <code>fstream.DirReader</code> directly, instead of folder.  For example, to create an npm package, do:</p>\n<pre><code class="language-js">pack(require("fstream-npm")(folder), [options])\n</code></pre>\n<p>Options:</p>\n<ul>\n<li><code>noProprietary</code> (defaults to <code>false</code>) Set this to <code>true</code> to prevent any proprietary attributes being added to the tarball.  These attributes are allowed by the spec, but may trip up some poorly written tarball parsers.</li>\n<li><code>fromBase</code> (defaults to <code>false</code>) Set this to <code>true</code> to make sure your tarballs root is the directory you pass in.</li>\n<li><code>ignoreFiles</code> (defaults to <code>[\'.gitignore\']</code>) These files can specify files to be excluded from the package using the syntax of <code>.gitignore</code>.  This option is ignored if you parse a <code>fstream.DirReader</code> instead of a string for folder.</li>\n<li><code>filter</code> (defaults to <code>entry => true</code>) A function that takes an entry and returns <code>true</code> if it should be included in the package and <code>false</code> if it should not.  Entryies are of the form <code>{path, basename, dirname, type}</code> where (type is "Directory" or "File").  This function is ignored if you parse a <code>fstream.DirReader</code> instead of a string for folder.</li>\n</ul>\n<p>Example:</p>\n<pre><code class="language-js">var write = require(\'fs\').createWriteStream\nvar pack = require(\'tar-pack\').pack\npack(process.cwd())\n  .pipe(write(__dirname + \'/package.tar.gz\'))\n  .on(\'error\', function (err) {\n    console.error(err.stack)\n  })\n  .on(\'close\', function () {\n    console.log(\'done\')\n  })\n</code></pre>\n<h3>unpack(folder, [options,] cb)</h3>\n<p>Return a stream that unpacks a tarball into a folder at <code>folder</code>.  N.B. the output folder will be removed first if it already exists.</p>\n<p>The callback is called with an optional error and, as its second argument, a string which is one of:</p>\n<ul>\n<li><code>\'directory\'</code>, indicating that the extracted package was a directory (either <code>.tar.gz</code> or <code>.tar</code>)</li>\n<li><code>\'file\'</code>, incating that the extracted package was just a single file (extracted to <code>defaultName</code>, see options)</li>\n</ul>\n<p>Basic Options:</p>\n<ul>\n<li><code>defaultName</code> (defaults to <code>index.js</code>) If the package is a single file, rather than a tarball, it will be "extracted" to this file name, set to <code>false</code> to disable.</li>\n</ul>\n<p>Advanced Options (you probably don\'t need any of these):</p>\n<ul>\n<li><code>gid</code> - (defaults to <code>null</code>) the <code>gid</code> to use when writing files</li>\n<li><code>uid</code> - (defaults to <code>null</code>) the <code>uid</code> to use when writing files</li>\n<li><code>dmode</code> - (defaults to <code>0777</code>) The mode to use when creating directories</li>\n<li><code>fmode</code> - (defaults to <code>0666</code>) The mode to use when creating files</li>\n<li><code>unsafe</code> - (defaults to <code>false</code>) (on non win32 OSes it overrides <code>gid</code> and <code>uid</code> with the current processes IDs)</li>\n<li><code>strip</code> - (defaults to <code>1</code>) Number of path segments to strip from the root when extracting</li>\n<li><code>keepFiles</code> - (defaults to <code>false</code>) Set this to <code>true</code> to prevent target directory to be removed. Extracted files overwrite existing files.</li>\n</ul>\n<p>Example:</p>\n<pre><code class="language-js">var read = require(\'fs\').createReadStream\nvar unpack = require(\'tar-pack\').unpack\nread(process.cwd() + \'/package.tar.gz\')\n  .pipe(unpack(__dirname + \'/package/\', function (err) {\n    if (err) console.error(err.stack)\n    else console.log(\'done\')\n  }))\n</code></pre>\n<h2>License</h2>\n<p>  BSD</p>',docPath:"argo-ci/node_modules/fsevents/node_modules/tar-pack/readme",proj:"argo-ci"}}}});
//# sourceMappingURL=path---docs-argo-ci-node-modules-fsevents-node-modules-tar-pack-readme-html-deb1ca9dc6bfc9ecebc1.js.map