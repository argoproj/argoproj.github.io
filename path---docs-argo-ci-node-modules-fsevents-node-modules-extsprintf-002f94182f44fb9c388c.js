webpackJsonp([0x64c333bb1715],{2439:function(e,n){e.exports={pathContext:{docHtml:"<h1>extsprintf: extended POSIX-style sprintf</h1>\n<p>Stripped down version of s[n]printf(3c).  We make a best effort to throw an\nexception when given a format string we don't understand, rather than ignoring\nit, so that we won't break existing programs if/when we go implement the rest\nof this.</p>\n<p>This implementation currently supports specifying</p>\n<ul>\n<li>field alignment ('-' flag),</li>\n<li>zero-pad ('0' flag)</li>\n<li>always show numeric sign ('+' flag),</li>\n<li>field width</li>\n<li>conversions for strings, decimal integers, and floats (numbers).</li>\n<li>argument size specifiers.  These are all accepted but ignored, since\nJavascript has no notion of the physical size of an argument.</li>\n</ul>\n<p>Everything else is currently unsupported, most notably: precision, unsigned\nnumbers, non-decimal numbers, and characters.</p>\n<p>Besides the usual POSIX conversions, this implementation supports:</p>\n<ul>\n<li><code>%j</code>: pretty-print a JSON object (using node's \"inspect\")</li>\n<li><code>%r</code>: pretty-print an Error object</li>\n</ul>\n<h1>Example</h1>\n<p>First, install it:</p>\n<pre><code># npm install extsprintf\n</code></pre>\n<p>Now, use it:</p>\n<pre><code>var mod_extsprintf = require('extsprintf');\nconsole.log(mod_extsprintf.sprintf('hello %25s', 'world'));\n</code></pre>\n<p>outputs:</p>\n<pre><code>hello                     world\n</code></pre>",docPath:"argo-ci/node_modules/fsevents/node_modules/extsprintf/readme",proj:"argo-ci"}}}});
//# sourceMappingURL=path---docs-argo-ci-node-modules-fsevents-node-modules-extsprintf-002f94182f44fb9c388c.js.map