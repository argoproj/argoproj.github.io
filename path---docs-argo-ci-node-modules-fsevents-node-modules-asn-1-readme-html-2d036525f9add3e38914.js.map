{"version":3,"sources":["webpack:///path---docs-argo-ci-node-modules-fsevents-node-modules-asn-1-readme-html-2d036525f9add3e38914.js","webpack:///./.cache/json/docs-argo-ci-node-modules-fsevents-node-modules-asn-1-readme-html.json"],"names":["webpackJsonp","2373","module","exports","pathContext","docHtml","docPath","proj"],"mappings":"AAAAA,cAAc,iBAERC,KACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,aAAeC,QAAA,o3CAAuoCC,QAAA,yDAAAC,KAAA","file":"path---docs-argo-ci-node-modules-fsevents-node-modules-asn-1-readme-html-2d036525f9add3e38914.js","sourcesContent":["webpackJsonp([276460265669706],{\n\n/***/ 2373:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"pathContext\":{\"docHtml\":\"<p>node-asn1 is a library for encoding and decoding ASN.1 datatypes in pure JS.\\nCurrently BER encoding is supported; at some point I'll likely have to do DER.</p>\\n<h2>Usage</h2>\\n<p>Mostly, if you're <em>actually</em> needing to read and write ASN.1, you probably don't\\nneed this readme to explain what and why.  If you have no idea what ASN.1 is,\\nsee this: ftp://ftp.rsa.com/pub/pkcs/ascii/layman.asc</p>\\n<p>The source is pretty much self-explanatory, and has read/write methods for the\\ncommon types out there.</p>\\n<h3>Decoding</h3>\\n<p>The following reads an ASN.1 sequence with a boolean.</p>\\n<pre><code>var Ber = require('asn1').Ber;\\n\\nvar reader = new Ber.Reader(new Buffer([0x30, 0x03, 0x01, 0x01, 0xff]));\\n\\nreader.readSequence();\\nconsole.log('Sequence len: ' + reader.length);\\nif (reader.peek() === Ber.Boolean)\\n  console.log(reader.readBoolean());\\n</code></pre>\\n<h3>Encoding</h3>\\n<p>The following generates the same payload as above.</p>\\n<pre><code>var Ber = require('asn1').Ber;\\n\\nvar writer = new Ber.Writer();\\n\\nwriter.startSequence();\\nwriter.writeBoolean(true);\\nwriter.endSequence();\\n\\nconsole.log(writer.buffer);\\n</code></pre>\\n<h2>Installation</h2>\\n<pre><code>npm install asn1\\n</code></pre>\\n<h2>License</h2>\\n<p>MIT.</p>\\n<h2>Bugs</h2>\\n<p>See <a href=\\\"https://github.com/mcavage/node-asn1/issues\\\">https://github.com/mcavage/node-asn1/issues</a>.</p>\",\"docPath\":\"argo-ci/node_modules/fsevents/node_modules/asn1/readme\",\"proj\":\"argo-ci\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---docs-argo-ci-node-modules-fsevents-node-modules-asn-1-readme-html-2d036525f9add3e38914.js","module.exports = {\"pathContext\":{\"docHtml\":\"<p>node-asn1 is a library for encoding and decoding ASN.1 datatypes in pure JS.\\nCurrently BER encoding is supported; at some point I'll likely have to do DER.</p>\\n<h2>Usage</h2>\\n<p>Mostly, if you're <em>actually</em> needing to read and write ASN.1, you probably don't\\nneed this readme to explain what and why.  If you have no idea what ASN.1 is,\\nsee this: ftp://ftp.rsa.com/pub/pkcs/ascii/layman.asc</p>\\n<p>The source is pretty much self-explanatory, and has read/write methods for the\\ncommon types out there.</p>\\n<h3>Decoding</h3>\\n<p>The following reads an ASN.1 sequence with a boolean.</p>\\n<pre><code>var Ber = require('asn1').Ber;\\n\\nvar reader = new Ber.Reader(new Buffer([0x30, 0x03, 0x01, 0x01, 0xff]));\\n\\nreader.readSequence();\\nconsole.log('Sequence len: ' + reader.length);\\nif (reader.peek() === Ber.Boolean)\\n  console.log(reader.readBoolean());\\n</code></pre>\\n<h3>Encoding</h3>\\n<p>The following generates the same payload as above.</p>\\n<pre><code>var Ber = require('asn1').Ber;\\n\\nvar writer = new Ber.Writer();\\n\\nwriter.startSequence();\\nwriter.writeBoolean(true);\\nwriter.endSequence();\\n\\nconsole.log(writer.buffer);\\n</code></pre>\\n<h2>Installation</h2>\\n<pre><code>npm install asn1\\n</code></pre>\\n<h2>License</h2>\\n<p>MIT.</p>\\n<h2>Bugs</h2>\\n<p>See <a href=\\\"https://github.com/mcavage/node-asn1/issues\\\">https://github.com/mcavage/node-asn1/issues</a>.</p>\",\"docPath\":\"argo-ci/node_modules/fsevents/node_modules/asn1/readme\",\"proj\":\"argo-ci\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/docs-argo-ci-node-modules-fsevents-node-modules-asn-1-readme-html.json\n// module id = 2373\n// module chunks = 276460265669706"],"sourceRoot":""}