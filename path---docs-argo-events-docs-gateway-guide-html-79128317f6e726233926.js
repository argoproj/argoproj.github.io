webpackJsonp([65123440034515],{618:function(e,t){e.exports={pathContext:{docHtml:'<h1>Gateway</h1>\n<ul>\n<li>\n<p><a href="#gateway">Gateway</a></p>\n<ul>\n<li><a href="#what-is-a-gateway">What is a gateway?</a></li>\n<li><a href="#components">Components</a></li>\n<li><a href="#core-gateways">Core gateways</a></li>\n<li><a href="#community-gateways">Community gateways</a></li>\n<li><a href="#managing-event-sources">Managing Event Sources</a></li>\n<li><a href="#how-to-write-a-custom-gateway">How to write a custom gateway?</a></li>\n<li><a href="#examples">Examples</a></li>\n</ul>\n</li>\n</ul>\n<h2>What is a gateway?</h2>\n<p>A gateway consumes events from event sources, transforms them into the <a href="https://github.com/cloudevents/spec">cloudevents specification</a> compliant events and dispatches them to sensors.</p>\n<br/>\n<p align="center">\n  <img src="https://github.com/argoproj/argo-events/blob/master/docs/assets/gateways.png?raw=true" alt="Gateway">\n</p>\n<br/>\n<h3>Components</h3>\n<p>A gateway has two components:</p>\n<ol>\n<li><b>gateway-client</b>: It creates one or more gRPC clients depending on event sources configurations, consumes events from server, transforms these events into cloudevents and dispatches them to sensors.\nRefer <b><a href="https://github.com/cloudevents/spec">https://github.com/cloudevents/spec</a> </b> for more info on cloudevents specifications.\n</li>\n<li><b>gateway-server</b>: It is a gRPC server that consumes events from event sources and streams them to gateway client.</li>\n</ol>\n<h3>Core gateways</h3>\n<ol>\n<li>\n<p><strong>Calendar</strong>:\nEvents produced are based on either a <a href="https://crontab.guru/">cron</a> schedule or an <a href="https://golang.org/pkg/time/#ParseDuration">interval duration</a>. In addition, calendar gateway supports a <code>recurrence</code> field in which to specify special exclusion dates for which this gateway will not produce an event.</p>\n</li>\n<li>\n<p><strong>Webhooks</strong>:\nWebhook gateway exposes REST API endpoints. The request received on these endpoints are treated as events. See Request Methods in RFC7231 to define the HTTP REST endpoint.</p>\n</li>\n<li>\n<p><strong>Kubernetes Resources</strong>:\nResource gateway supports watching Kubernetes resources. Users can specify <code>group</code>, <code>version</code>, <code>kind</code>, and filters including prefix of the object name, labels, annotations, and createdBy time.</p>\n</li>\n<li>\n<p><strong>Artifacts</strong>:\nArtifact gateway supports S3 <code>bucket-notifications</code> via <a href="https://docs.minio.io/docs/minio-bucket-notification-guide">Minio</a>. Note that a supported notification target must be running, exposed.</p>\n</li>\n<li>\n<p><strong>Streams</strong>:\nStream gateways contain a generic specification for messages received on a queue and/or though messaging server. The following are the stream gateways offered out of box: </p>\n<ol>\n<li>\n<p><strong>NATS</strong>:\n<a href="https://nats.io/">Nats</a> is an open-sourced, lightweight, secure, and scalable messaging system for cloud native applications and microservices architecture. It is currently a hosted CNCF Project.</p>\n</li>\n<li>\n<p><strong>MQTT</strong>:\n<a href="http://mqtt.org/">MMQP</a> is a M2M "Internet of Things" connectivity protocol (ISO/IEC PRF 20922) designed to be extremely lightweight and ideal for mobile applications. Some broker implementations can be found <a href="https://github.com/mqtt/mqtt.github.io/wiki/brokers">here</a>.</p>\n</li>\n<li>\n<p><strong>Kafka</strong>:\n<a href="https://kafka.apache.org/">Apache Kafka</a> is a distributed streaming platform. We use Shopify\'s <a href="https://github.com/Shopify/sarama">sarama</a> client for consuming Kafka messages.</p>\n</li>\n<li>\n<p><strong>AMQP</strong>:\n<a href="https://www.amqp.org/">AMQP</a> is a open standard messaging protocol (ISO/IEC 19464). There are a variety of broker implementations including, but not limited to the following:</p>\n</li>\n<li>\n<p><a href="http://activemq.apache.org/">Apache ActiveMQ</a></p>\n</li>\n<li>\n<p><a href="https://qpid.apache.org/">Apache Qpid</a></p>\n</li>\n<li>\n<p><a href="http://stormmq.com/">StormMQ</a></p>\n</li>\n<li>\n<p><a href="https://www.rabbitmq.com/">RabbitMQ</a></p>\n</li>\n</ol>\n</li>\n</ol>\n<p> You can find core gateways <a href="https://github.com/argoproj/argo-events/tree/master/gateways/core">here</a></p>\n<h3>Community gateways</h3>\n<p>You can find gateways built by the community <a href="https://github.com/argoproj/argo-events/tree/master/gateways/community">here</a>. New gateway contributions are always welcome.</p>\n<h2>Managing Event Sources</h2>\n<ul>\n<li>\n<p>The event sources configurations are managed using K8s configmap. Once the gateway resource is created with the configmap reference in it\'s spec, it starts watching the configmap.\nThe <code>gateway-client</code> sends each event source configuration to <code>gateway-server</code> over gRPC. The <code>gateway-server</code> then parses the configuration to start consuming events from\nexternal event producing entity.</p>\n</li>\n<li>\n<p>You can modify K8s configmap containing event sources configurations anytime and <code>gateway-client</code> will intelligently pick new/deleted configurations and send them over to <code>gateway-server</code> to either\nstart or stop the event sources.</p>\n</li>\n</ul>\n<h2>How to write a custom gateway?</h2>\n<p>To implement a custom gateway, you need to create a gRPC server and implement the service defined below.\nThe framework code acts as a gRPC client consuming event stream from gateway server.</p>\n<br/>\n<br/>\n<p align="center">\n  <img src="https://github.com/argoproj/argo-events/blob/master/docs/assets/custom-gateway.png?raw=true" alt="Sensor">\n</p>\n<br/>\n<ul>\n<li>\n<h3>Proto Definition</h3>\n<ol>\n<li>\n<p>The proto file is located at <a href="https://github.com/argoproj/argo-events/blob/master/gateways/eventing.proto">https://github.com/argoproj/argo-events/blob/master/gateways/eventing.proto</a> </p>\n</li>\n<li>\n<p>If you choose to implement the gateway in <code>go</code>, then you can find generated client stubs at <a href="https://github.com/argoproj/argo-events/blob/master/gateways/eventing.pb.go">https://github.com/argoproj/argo-events/blob/master/gateways/eventing.pb.go</a></p>\n</li>\n<li>\n<p>To create stubs in other languages, head over to gRPC website <a href="https://grpc.io/">https://grpc.io/</a></p>\n</li>\n<li>\n<p>Service</p>\n<pre><code class="language-proto">/**\n</code></pre>\n</li>\n<li>\n<p>Service for handling event sources.\n*/\nservice Eventing {\n// StartEventSource starts an event source and returns stream of events.\nrpc StartEventSource(EventSource) returns (stream Event);\n// ValidateEventSource validates an event source.\nrpc ValidateEventSource(EventSource) returns (ValidEventSource);\n}</p>\n<pre><code></code></pre>\n</li>\n</ol>\n</li>\n<li>\n<h3>Available Environment Variables to Server</h3>\n<p> | Field                           | Description                                      |\n| ------------------------------- | ------------------------------------------------ |\n| GATEWAY<em>NAMESPACE               | K8s namespace of the gateway                     |\n| GATEWAY</em>EVENT<em>SOURCE</em>CONFIG<em>MAP | K8s configmap containing event source            |\n| GATEWAY</em>NAME                    | name of the gateway                              |\n| GATEWAY<em>CONTROLLER</em>INSTANCE<em>ID  | gateway controller instance id                   |\n| GATEWAY</em>CONTROLLER<em>NAME         | gateway controller name                          |\n| GATEWAY</em>SERVER_PORT             | Port on which the gateway gRPC server should run |</p>\n</li>\n<li>\n<h3>Implementation</h3>\n<p>You can follow existing implementations <a href="../gateways">here</a></p>\n</li>\n</ul>\n<h2>Examples</h2>\n<p>You can find gateway examples <a href="https://github.com/argoproj/argo-events/tree/master/examples/gateways">here</a></p>',docPath:"argo-events/docs/gateway-guide",proj:"argo-events"}}}});
//# sourceMappingURL=path---docs-argo-events-docs-gateway-guide-html-79128317f6e726233926.js.map